// -*- C++ -*-
// $Id: Transform3D.icc,v 1.1 2003/07/17 09:05:28 garren Exp $
// ---------------------------------------------------------------------------

#include "Point3D.h"
#include "Vector3D.h"
#include "Normal3D.h"



namespace Geometry {

//   I N L I N E S   F O R   T R A N S F O R M A T I O N


inline
Rotate3D::Rotate3D(double a, const Vector3D<double> & v) {
  *this =
    Rotate3D(a, Point3D<double>(0.0, 0.0, 0.0), Point3D<double>(v.x(),v.y(),v.z()));
}

inline
Rotate3D::Rotate3D(const Point3D<double> & fr1, const Point3D<double> & fr2,
		   const Point3D<double> & to1, const Point3D<double> & to2)
  : Transform3D(Point3D<double>(0.0, 0.0, 0.0),fr1,fr2,
        Point3D<double>(0.0, 0.0, 0.0),to1,to2) {}

//   I N L I N E S   F O R   T R A N S L A T I O N

//inline
//Translate3D::Translate3D(const CLHEP::Hep3Vector & v)
//  : Transform3D(1,0,0,v.x(), 0,1,0,v.y(), 0,0,1,v.z()) {}

//   I N L I N E S   F O R   R E F L E C T I O N

inline
Reflect3D::Reflect3D(const Normal3D<double> & n, const Point3D<double> & p) {
  *this = Reflect3D(n.x(), n.y(), n.z(), -n*p);
}

} /* namespace Geometry */

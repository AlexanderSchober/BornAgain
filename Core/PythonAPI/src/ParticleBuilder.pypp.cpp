// This file has been generated by Py++.

// BornAgain: simulate and fit scattering at grazing incidence 
//! @brief automatically generated boost::python code for PythonCoreAPI  

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter);
GCC_DIAG_OFF(missing-field-initializers);
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter);
GCC_DIAG_ON(missing-field-initializers);
#include "PythonCoreList.h"
#include "ParticleBuilder.pypp.h"

namespace bp = boost::python;

void register_ParticleBuilder_class(){

    { //::ParticleBuilder
        typedef bp::class_< ParticleBuilder > ParticleBuilder_exposer_t;
        ParticleBuilder_exposer_t ParticleBuilder_exposer = ParticleBuilder_exposer_t( "ParticleBuilder", bp::init< >() );
        bp::scope ParticleBuilder_scope( ParticleBuilder_exposer );
        { //::ParticleBuilder::plantParticles
        
            typedef void ( ::ParticleBuilder::*plantParticles_function_type )( ::ParticleDecoration & ) ;
            
            ParticleBuilder_exposer.def( 
                "plantParticles"
                , plantParticles_function_type( &::ParticleBuilder::plantParticles )
                , ( bp::arg("decor") ) );
        
        }
        { //::ParticleBuilder::setPrototype
        
            typedef void ( ::ParticleBuilder::*setPrototype_function_type )( ::Particle const &,::std::string,::StochasticParameter< double > const &,double ) ;
            
            ParticleBuilder_exposer.def( 
                "setPrototype"
                , setPrototype_function_type( &::ParticleBuilder::setPrototype )
                , ( bp::arg("particle"), bp::arg("name"), bp::arg("param"), bp::arg("scale")=1.0e+0 ) );
        
        }
    }

}

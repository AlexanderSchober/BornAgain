// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonCoreList.h"
#include "Crystal.pypp.h"

namespace bp = boost::python;

struct Crystal_wrapper : Crystal, bp::wrapper< Crystal > {

    Crystal_wrapper(::ParticleComposition const & lattice_basis, ::Lattice const & lattice )
    : Crystal( boost::ref(lattice_basis), boost::ref(lattice) )
      , bp::wrapper< Crystal >(){
        // constructor
    m_pyobj = 0;
    }

    virtual ::Crystal * clone(  ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone(  );
        else{
            return this->Crystal::clone(  );
        }
    }
    
    ::Crystal * default_clone(  ) const  {
        return Crystal::clone( );
    }

    virtual ::Crystal * cloneInvertB(  ) const  {
        if( bp::override func_cloneInvertB = this->get_override( "cloneInvertB" ) )
            return func_cloneInvertB(  );
        else{
            return this->Crystal::cloneInvertB(  );
        }
    }
    
    ::Crystal * default_cloneInvertB(  ) const  {
        return Crystal::cloneInvertB( );
    }

    virtual ::IMaterial const * getAmbientMaterial(  ) const  {
        if( bp::override func_getAmbientMaterial = this->get_override( "getAmbientMaterial" ) )
            return func_getAmbientMaterial(  );
        else{
            return this->Crystal::getAmbientMaterial(  );
        }
    }
    
    ::IMaterial const * default_getAmbientMaterial(  ) const  {
        return Crystal::getAmbientMaterial( );
    }

    virtual void setAmbientMaterial( ::IMaterial const & material ) {
        if( bp::override func_setAmbientMaterial = this->get_override( "setAmbientMaterial" ) )
            func_setAmbientMaterial( boost::ref(material) );
        else{
            this->Crystal::setAmbientMaterial( boost::ref(material) );
        }
    }
    
    void default_setAmbientMaterial( ::IMaterial const & material ) {
        Crystal::setAmbientMaterial( boost::ref(material) );
    }

    virtual void applyRotation( ::IRotation const & rotation ) {
        if( bp::override func_applyRotation = this->get_override( "applyRotation" ) )
            func_applyRotation( boost::ref(rotation) );
        else{
            this->IClusteredParticles::applyRotation( boost::ref(rotation) );
        }
    }
    
    void default_applyRotation( ::IRotation const & rotation ) {
        IClusteredParticles::applyRotation( boost::ref(rotation) );
    }

    virtual bool containsMagneticMaterial(  ) const  {
        if( bp::override func_containsMagneticMaterial = this->get_override( "containsMagneticMaterial" ) )
            return func_containsMagneticMaterial(  );
        else{
            return this->ISample::containsMagneticMaterial(  );
        }
    }
    
    bool default_containsMagneticMaterial(  ) const  {
        return ISample::containsMagneticMaterial( );
    }

    virtual ::ICompositeSample * getCompositeSample(  ) {
        if( bp::override func_getCompositeSample = this->get_override( "getCompositeSample" ) )
            return func_getCompositeSample(  );
        else{
            return this->ICompositeSample::getCompositeSample(  );
        }
    }
    
    ::ICompositeSample * default_getCompositeSample(  ) {
        return ICompositeSample::getCompositeSample( );
    }

    virtual ::ICompositeSample const * getCompositeSample(  ) const  {
        if( bp::override func_getCompositeSample = this->get_override( "getCompositeSample" ) )
            return func_getCompositeSample(  );
        else{
            return this->ICompositeSample::getCompositeSample(  );
        }
    }
    
    ::ICompositeSample const * default_getCompositeSample(  ) const  {
        return ICompositeSample::getCompositeSample( );
    }

    virtual void printSampleTree(  ) {
        if( bp::override func_printSampleTree = this->get_override( "printSampleTree" ) )
            func_printSampleTree(  );
        else{
            this->ISample::printSampleTree(  );
        }
    }
    
    void default_printSampleTree(  ) {
        ISample::printSampleTree( );
    }

    virtual ::std::size_t size(  ) const  {
        if( bp::override func_size = this->get_override( "size" ) )
            return func_size(  );
        else{
            return this->ICompositeSample::size(  );
        }
    }
    
    ::std::size_t default_size(  ) const  {
        return ICompositeSample::size( );
    }

    virtual void transferToCPP(  ) {
        
        if( !this->m_pyobj) {
            this->m_pyobj = boost::python::detail::wrapper_base_::get_owner(*this);
            Py_INCREF(this->m_pyobj);
        }
        
        if( bp::override func_transferToCPP = this->get_override( "transferToCPP" ) )
            func_transferToCPP(  );
        else{
            this->ICloneable::transferToCPP(  );
        }
    }
    
    void default_transferToCPP(  ) {
        
        if( !this->m_pyobj) {
            this->m_pyobj = boost::python::detail::wrapper_base_::get_owner(*this);
            Py_INCREF(this->m_pyobj);
        }
        
        ICloneable::transferToCPP( );
    }

    PyObject* m_pyobj;

};

void register_Crystal_class(){

    { //::Crystal
        typedef bp::class_< Crystal_wrapper, bp::bases< IClusteredParticles >, std::auto_ptr< Crystal_wrapper >, boost::noncopyable > Crystal_exposer_t;
        Crystal_exposer_t Crystal_exposer = Crystal_exposer_t( "Crystal", "A crystal structure with a form factor as a basis.", bp::init< ParticleComposition const &, Lattice const & >(( bp::arg("lattice_basis"), bp::arg("lattice") )) );
        bp::scope Crystal_scope( Crystal_exposer );
        { //::Crystal::clone
        
            typedef ::Crystal * ( ::Crystal::*clone_function_type)(  ) const;
            typedef ::Crystal * ( Crystal_wrapper::*default_clone_function_type)(  ) const;
            
            Crystal_exposer.def( 
                "clone"
                , clone_function_type(&::Crystal::clone)
                , default_clone_function_type(&Crystal_wrapper::default_clone)
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::Crystal::cloneInvertB
        
            typedef ::Crystal * ( ::Crystal::*cloneInvertB_function_type)(  ) const;
            typedef ::Crystal * ( Crystal_wrapper::*default_cloneInvertB_function_type)(  ) const;
            
            Crystal_exposer.def( 
                "cloneInvertB"
                , cloneInvertB_function_type(&::Crystal::cloneInvertB)
                , default_cloneInvertB_function_type(&Crystal_wrapper::default_cloneInvertB)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::Crystal::getAmbientMaterial
        
            typedef ::IMaterial const * ( ::Crystal::*getAmbientMaterial_function_type)(  ) const;
            typedef ::IMaterial const * ( Crystal_wrapper::*default_getAmbientMaterial_function_type)(  ) const;
            
            Crystal_exposer.def( 
                "getAmbientMaterial"
                , getAmbientMaterial_function_type(&::Crystal::getAmbientMaterial)
                , default_getAmbientMaterial_function_type(&Crystal_wrapper::default_getAmbientMaterial)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::Crystal::getLatticeBasis
        
            typedef ::ParticleComposition const * ( ::Crystal::*getLatticeBasis_function_type)(  ) const;
            
            Crystal_exposer.def( 
                "getLatticeBasis"
                , getLatticeBasis_function_type( &::Crystal::getLatticeBasis )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::Crystal::setAmbientMaterial
        
            typedef void ( ::Crystal::*setAmbientMaterial_function_type)( ::IMaterial const & ) ;
            typedef void ( Crystal_wrapper::*default_setAmbientMaterial_function_type)( ::IMaterial const & ) ;
            
            Crystal_exposer.def( 
                "setAmbientMaterial"
                , setAmbientMaterial_function_type(&::Crystal::setAmbientMaterial)
                , default_setAmbientMaterial_function_type(&Crystal_wrapper::default_setAmbientMaterial)
                , ( bp::arg("material") ) );
        
        }
        { //::Crystal::setDWFactor
        
            typedef void ( ::Crystal::*setDWFactor_function_type)( double ) ;
            
            Crystal_exposer.def( 
                "setDWFactor"
                , setDWFactor_function_type( &::Crystal::setDWFactor )
                , ( bp::arg("dw_factor") ) );
        
        }
        { //::IClusteredParticles::applyRotation
        
            typedef void ( ::IClusteredParticles::*applyRotation_function_type)( ::IRotation const & ) ;
            typedef void ( Crystal_wrapper::*default_applyRotation_function_type)( ::IRotation const & ) ;
            
            Crystal_exposer.def( 
                "applyRotation"
                , applyRotation_function_type(&::IClusteredParticles::applyRotation)
                , default_applyRotation_function_type(&Crystal_wrapper::default_applyRotation)
                , ( bp::arg("rotation") ) );
        
        }
        { //::ISample::containsMagneticMaterial
        
            typedef bool ( ::ISample::*containsMagneticMaterial_function_type)(  ) const;
            typedef bool ( Crystal_wrapper::*default_containsMagneticMaterial_function_type)(  ) const;
            
            Crystal_exposer.def( 
                "containsMagneticMaterial"
                , containsMagneticMaterial_function_type(&::ISample::containsMagneticMaterial)
                , default_containsMagneticMaterial_function_type(&Crystal_wrapper::default_containsMagneticMaterial) );
        
        }
        { //::ICompositeSample::getCompositeSample
        
            typedef ::ICompositeSample * ( ::ICompositeSample::*getCompositeSample_function_type)(  ) ;
            typedef ::ICompositeSample * ( Crystal_wrapper::*default_getCompositeSample_function_type)(  ) ;
            
            Crystal_exposer.def( 
                "getCompositeSample"
                , getCompositeSample_function_type(&::ICompositeSample::getCompositeSample)
                , default_getCompositeSample_function_type(&Crystal_wrapper::default_getCompositeSample)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::ICompositeSample::getCompositeSample
        
            typedef ::ICompositeSample const * ( ::ICompositeSample::*getCompositeSample_function_type)(  ) const;
            typedef ::ICompositeSample const * ( Crystal_wrapper::*default_getCompositeSample_function_type)(  ) const;
            
            Crystal_exposer.def( 
                "getCompositeSample"
                , getCompositeSample_function_type(&::ICompositeSample::getCompositeSample)
                , default_getCompositeSample_function_type(&Crystal_wrapper::default_getCompositeSample)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::ISample::printSampleTree
        
            typedef void ( ::ISample::*printSampleTree_function_type)(  ) ;
            typedef void ( Crystal_wrapper::*default_printSampleTree_function_type)(  ) ;
            
            Crystal_exposer.def( 
                "printSampleTree"
                , printSampleTree_function_type(&::ISample::printSampleTree)
                , default_printSampleTree_function_type(&Crystal_wrapper::default_printSampleTree) );
        
        }
        { //::ICompositeSample::size
        
            typedef ::std::size_t ( ::ICompositeSample::*size_function_type)(  ) const;
            typedef ::std::size_t ( Crystal_wrapper::*default_size_function_type)(  ) const;
            
            Crystal_exposer.def( 
                "size"
                , size_function_type(&::ICompositeSample::size)
                , default_size_function_type(&Crystal_wrapper::default_size) );
        
        }
        { //::ICloneable::transferToCPP
        
            typedef void ( ::ICloneable::*transferToCPP_function_type)(  ) ;
            typedef void ( Crystal_wrapper::*default_transferToCPP_function_type)(  ) ;
            
            Crystal_exposer.def( 
                "transferToCPP"
                , transferToCPP_function_type(&::ICloneable::transferToCPP)
                , default_transferToCPP_function_type(&Crystal_wrapper::default_transferToCPP) );
        
        }
    }

}

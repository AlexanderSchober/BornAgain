// This file has been generated by Py++.

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter);
GCC_DIAG_OFF(missing-field-initializers);
#include "boost/python.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
GCC_DIAG_ON(unused-parameter);
GCC_DIAG_ON(missing-field-initializers);
#include "BasicVector3D.h"
#include "Bin.h"
#include "Crystal.h"
#include "DiffuseParticleInfo.h"
#include "FTDistributions.h"
#include "FormFactorBox.h"
#include "FormFactorCrystal.h"
#include "FormFactorCylinder.h"
#include "FormFactorDecoratorDebyeWaller.h"
#include "FormFactorFullSphere.h"
#include "FormFactorGauss.h"
#include "FormFactorLorentz.h"
#include "FormFactorParallelepiped.h"
#include "FormFactorPrism3.h"
#include "FormFactorPyramid.h"
#include "FormFactorSphereGaussianRadius.h"
#include "HomogeneousMaterial.h"
#include "ICloneable.h"
#include "IClusteredParticles.h"
#include "ICompositeSample.h"
#include "IDecoration.h"
#include "IFormFactor.h"
#include "IFormFactorBorn.h"
#include "IFormFactorDecorator.h"
#include "IInterferenceFunction.h"
#include "IMaterial.h"
#include "IParameterized.h"
#include "ISample.h"
#include "ISampleBuilder.h"
#include "ISelectionRule.h"
#include "ISingleton.h"
#include "Instrument.h"
#include "InterferenceFunction1DParaCrystal.h"
#include "InterferenceFunction2DLattice.h"
#include "InterferenceFunction2DParaCrystal.h"
#include "InterferenceFunctionNone.h"
#include "IResolutionFunction2D.h"
#include "Lattice.h"
#include "Lattice2DIFParameters.h"
#include "LatticeBasis.h"
#include "Layer.h"
#include "LayerDecorator.h"
#include "LayerRoughness.h"
#include "Lattice2DIFParameters.h"
#include "MaterialManager.h"
#include "MesoCrystal.h"
#include "MultiLayer.h"
#include "OpticalFresnel.h"
#include "ParameterPool.h"
#include "Particle.h"
#include "ParticleBuilder.h"
#include "ParticleCoreShell.h"
#include "ParticleDecoration.h"
#include "OutputData.h"
#include "OutputDataIOFactory.h"
#include "ParticleInfo.h"
#include "PositionParticleInfo.h"
#include "PythonOutputData.h"
#include "PythonPlusplusHelper.h"
#include "RealParameterWrapper.h"
#include "Rotate3D.h"
#include "Simulation.h"
#include "SimulationParameters.h"
#include "IStochasticParameter.h"
#include "ResolutionFunction2DSimple.h"
#include "StochasticGaussian.h"
#include "StochasticSampledParameter.h"
#include "StochasticDoubleGate.h"
#include "ITransform3D.h"
#include "Types.h"
#include "Units.h"
#include "ITransform3D.pypp.h"

namespace bp = boost::python;

struct ITransform3D_wrapper : Geometry::ITransform3D, bp::wrapper< Geometry::ITransform3D > {

    ITransform3D_wrapper(Geometry::ITransform3D const & arg )
    : Geometry::ITransform3D( arg )
      , bp::wrapper< Geometry::ITransform3D >(){
        // copy constructor
        
    }

    ITransform3D_wrapper()
    : Geometry::ITransform3D()
      , bp::wrapper< Geometry::ITransform3D >(){
        // null constructor
        
    }

    virtual ::Geometry::PTransform3D inverse(  ) const  {
        if( bp::override func_inverse = this->get_override( "inverse" ) )
            return func_inverse(  );
        else{
            return this->Geometry::ITransform3D::inverse(  );
        }
    }
    
    ::Geometry::PTransform3D default_inverse(  ) const  {
        return Geometry::ITransform3D::inverse( );
    }

    virtual void print( ::std::ostream & ostr ) const  {
        if( bp::override func_print = this->get_override( "print" ) )
            func_print( boost::ref(ostr) );
        else{
            this->Geometry::ITransform3D::print( boost::ref(ostr) );
        }
    }
    
    void default_print( ::std::ostream & ostr ) const  {
        Geometry::ITransform3D::print( boost::ref(ostr) );
    }

    virtual ::Geometry::BasicVector3D< double > transformed( ::Geometry::BasicVector3D< double > const & v ) const  {
        if( bp::override func_transformed = this->get_override( "transformed" ) )
            return func_transformed( boost::ref(v) );
        else{
            return this->Geometry::ITransform3D::transformed( boost::ref(v) );
        }
    }
    
    ::Geometry::BasicVector3D< double > default_transformed( ::Geometry::BasicVector3D< double > const & v ) const  {
        return Geometry::ITransform3D::transformed( boost::ref(v) );
    }

    virtual ::Geometry::BasicVector3D< std::complex< double > > transformed( ::Geometry::BasicVector3D< std::complex< double > > const & v ) const  {
        if( bp::override func_transformed = this->get_override( "transformed" ) )
            return func_transformed( boost::ref(v) );
        else{
            return this->Geometry::ITransform3D::transformed( boost::ref(v) );
        }
    }
    
    ::Geometry::BasicVector3D< std::complex< double > > default_transformed( ::Geometry::BasicVector3D< std::complex< double > > const & v ) const  {
        return Geometry::ITransform3D::transformed( boost::ref(v) );
    }

};

void register_ITransform3D_class(){

    { //::Geometry::ITransform3D
        typedef bp::class_< ITransform3D_wrapper > ITransform3D_exposer_t;
        ITransform3D_exposer_t ITransform3D_exposer = ITransform3D_exposer_t( "ITransform3D" );
        bp::scope ITransform3D_scope( ITransform3D_exposer );
        { //::Geometry::ITransform3D::inverse
        
            typedef ::Geometry::PTransform3D ( ::Geometry::ITransform3D::*inverse_function_type )(  ) const;
            typedef ::Geometry::PTransform3D ( ITransform3D_wrapper::*default_inverse_function_type )(  ) const;
            
            ITransform3D_exposer.def( 
                "inverse"
                , inverse_function_type(&::Geometry::ITransform3D::inverse)
                , default_inverse_function_type(&ITransform3D_wrapper::default_inverse) );
        
        }
        { //::Geometry::ITransform3D::print
        
            typedef void ( ::Geometry::ITransform3D::*print_function_type )( ::std::ostream & ) const;
            typedef void ( ITransform3D_wrapper::*default_print_function_type )( ::std::ostream & ) const;
            
            ITransform3D_exposer.def( 
                "print"
                , print_function_type(&::Geometry::ITransform3D::print)
                , default_print_function_type(&ITransform3D_wrapper::default_print)
                , ( bp::arg("ostr") ) );
        
        }
        { //::Geometry::ITransform3D::transformed
        
            typedef ::Geometry::BasicVector3D< double > ( ::Geometry::ITransform3D::*transformed_function_type )( ::Geometry::BasicVector3D< double > const & ) const;
            typedef ::Geometry::BasicVector3D< double > ( ITransform3D_wrapper::*default_transformed_function_type )( ::Geometry::BasicVector3D< double > const & ) const;
            
            ITransform3D_exposer.def( 
                "transformed"
                , transformed_function_type(&::Geometry::ITransform3D::transformed)
                , default_transformed_function_type(&ITransform3D_wrapper::default_transformed)
                , ( bp::arg("v") ) );
        
        }
        { //::Geometry::ITransform3D::transformed
        
            typedef ::Geometry::BasicVector3D< std::complex< double > > ( ::Geometry::ITransform3D::*transformed_function_type )( ::Geometry::BasicVector3D< std::complex< double > > const & ) const;
            typedef ::Geometry::BasicVector3D< std::complex< double > > ( ITransform3D_wrapper::*default_transformed_function_type )( ::Geometry::BasicVector3D< std::complex< double > > const & ) const;
            
            ITransform3D_exposer.def( 
                "transformed"
                , transformed_function_type(&::Geometry::ITransform3D::transformed)
                , default_transformed_function_type(&ITransform3D_wrapper::default_transformed)
                , ( bp::arg("v") ) );
        
        }
        ITransform3D_exposer.def( bp::self_ns::str( bp::self ) );
        bp::register_ptr_to_python< boost::shared_ptr< Geometry::ITransform3D > >();
    }

}

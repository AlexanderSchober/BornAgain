// This file has been generated by Py++.

// BornAgain: simulate and fit scattering at grazing incidence 
//! @brief automatically generated boost::python code for PythonCoreAPI  

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter);
GCC_DIAG_OFF(missing-field-initializers);
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter);
GCC_DIAG_ON(missing-field-initializers);
#include "PythonCoreList.h"
#include "ITransform3D.pypp.h"

namespace bp = boost::python;

struct ITransform3D_wrapper : Geometry::ITransform3D, bp::wrapper< Geometry::ITransform3D > {

    ITransform3D_wrapper(Geometry::ITransform3D const & arg )
    : Geometry::ITransform3D( arg )
      , bp::wrapper< Geometry::ITransform3D >(){
        // copy constructor
        
    }

    ITransform3D_wrapper()
    : Geometry::ITransform3D()
      , bp::wrapper< Geometry::ITransform3D >(){
        // null constructor
        
    }

    virtual void print( ::std::ostream & ostr ) const  {
        if( bp::override func_print = this->get_override( "print" ) )
            func_print( boost::ref(ostr) );
        else{
            this->Geometry::ITransform3D::print( boost::ref(ostr) );
        }
    }
    
    void default_print( ::std::ostream & ostr ) const  {
        Geometry::ITransform3D::print( boost::ref(ostr) );
    }

};

void register_ITransform3D_class(){

    { //::Geometry::ITransform3D
        typedef bp::class_< ITransform3D_wrapper > ITransform3D_exposer_t;
        ITransform3D_exposer_t ITransform3D_exposer = ITransform3D_exposer_t( "ITransform3D" );
        bp::scope ITransform3D_scope( ITransform3D_exposer );
        { //::Geometry::ITransform3D::print
        
            typedef void ( ::Geometry::ITransform3D::*print_function_type )( ::std::ostream & ) const;
            typedef void ( ITransform3D_wrapper::*default_print_function_type )( ::std::ostream & ) const;
            
            ITransform3D_exposer.def( 
                "print"
                , print_function_type(&::Geometry::ITransform3D::print)
                , default_print_function_type(&ITransform3D_wrapper::default_print)
                , ( bp::arg("ostr") ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< Geometry::ITransform3D > >();
    }

}

// This file has been generated by Py++.

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter);
GCC_DIAG_OFF(missing-field-initializers);
#include "boost/python.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
GCC_DIAG_ON(unused-parameter);
GCC_DIAG_ON(missing-field-initializers);
#include "BasicVector3D.h"
#include "Bin.h"
#include "Crystal.h"
#include "DiffuseParticleInfo.h"
#include "FTDistributions.h"
#include "FormFactorBox.h"
#include "FormFactorCrystal.h"
#include "FormFactorCylinder.h"
#include "FormFactorDecoratorDebyeWaller.h"
#include "FormFactorFullSphere.h"
#include "FormFactorGauss.h"
#include "FormFactorLorentz.h"
#include "FormFactorPrism3.h"
#include "FormFactorPyramid.h"
#include "FormFactorSphereGaussianRadius.h"
#include "HomogeneousMaterial.h"
#include "ICloneable.h"
#include "IClusteredParticles.h"
#include "ICompositeSample.h"
#include "IDecoration.h"
#include "IFormFactor.h"
#include "IFormFactorBorn.h"
#include "IFormFactorDecorator.h"
#include "IInterferenceFunction.h"
#include "IMaterial.h"
#include "IParameterized.h"
#include "ISample.h"
#include "ISampleBuilder.h"
#include "ISelectionRule.h"
#include "ISingleton.h"
#include "Instrument.h"
#include "InterferenceFunction1DParaCrystal.h"
#include "InterferenceFunction2DLattice.h"
#include "InterferenceFunction2DParaCrystal.h"
#include "InterferenceFunctionNone.h"
#include "Lattice.h"
#include "Lattice2DIFParameters.h"
#include "LatticeBasis.h"
#include "Layer.h"
#include "LayerDecorator.h"
#include "LayerRoughness.h"
#include "MaterialManager.h"
#include "MesoCrystal.h"
#include "MultiLayer.h"
#include "OpticalFresnel.h"
#include "ParameterPool.h"
#include "Particle.h"
#include "ParticleBuilder.h"
#include "ParticleCoreShell.h"
#include "ParticleDecoration.h"
#include "ParticleInfo.h"
#include "PositionParticleInfo.h"
#include "PythonOutputData.h"
#include "PythonPlusplusHelper.h"
#include "RealParameterWrapper.h"
#include "Simulation.h"
#include "SimulationParameters.h"
#include "IStochasticParameter.h"
#include "StochasticGaussian.h"
#include "StochasticSampledParameter.h"
#include "Transform3D.h"
#include "Types.h"
#include "Units.h"
#include "StochasticDoubleGaussian.pypp.h"

namespace bp = boost::python;

struct StochasticDoubleGaussian_wrapper : StochasticDoubleGaussian, bp::wrapper< StochasticDoubleGaussian > {

    StochasticDoubleGaussian_wrapper(double average, double std_dev )
    : StochasticDoubleGaussian( average, std_dev )
      , bp::wrapper< StochasticDoubleGaussian >(){
        // constructor
    
    }

    virtual ::StochasticDoubleGaussian * clone(  ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone(  );
        else{
            return this->StochasticDoubleGaussian::clone(  );
        }
    }
    
    ::StochasticDoubleGaussian * default_clone(  ) const  {
        return StochasticDoubleGaussian::clone( );
    }

    virtual double getFWHM(  ) const  {
        if( bp::override func_getFWHM = this->get_override( "getFWHM" ) )
            return func_getFWHM(  );
        else{
            return this->StochasticDoubleGaussian::getFWHM(  );
        }
    }
    
    double default_getFWHM(  ) const  {
        return StochasticDoubleGaussian::getFWHM( );
    }

    virtual double probabilityDensity( double value ) const  {
        if( bp::override func_probabilityDensity = this->get_override( "probabilityDensity" ) )
            return func_probabilityDensity( value );
        else{
            return this->StochasticDoubleGaussian::probabilityDensity( value );
        }
    }
    
    double default_probabilityDensity( double value ) const  {
        return StochasticDoubleGaussian::probabilityDensity( value );
    }

    virtual void setToRandom(  ) {
        if( bp::override func_setToRandom = this->get_override( "setToRandom" ) )
            func_setToRandom(  );
        else{
            this->StochasticDoubleGaussian::setToRandom(  );
        }
    }
    
    void default_setToRandom(  ) {
        StochasticDoubleGaussian::setToRandom( );
    }

    virtual double getRandom(  ) {
        if( bp::override func_getRandom = this->get_override( "getRandom" ) )
            return func_getRandom(  );
        else{
            return this->StochasticParameter< double >::getRandom(  );
        }
    }
    
    double default_getRandom(  ) {
        return StochasticParameter< double >::getRandom( );
    }

    virtual void setToAverage(  ) {
        if( bp::override func_setToAverage = this->get_override( "setToAverage" ) )
            func_setToAverage(  );
        else{
            this->StochasticParameter< double >::setToAverage(  );
        }
    }
    
    void default_setToAverage(  ) {
        StochasticParameter< double >::setToAverage( );
    }

};

void register_StochasticDoubleGaussian_class(){

    bp::class_< StochasticDoubleGaussian_wrapper, bp::bases< StochasticParameter< double > >, boost::noncopyable >( "StochasticDoubleGaussian", bp::init< double, double >(( bp::arg("average"), bp::arg("std_dev") )) )    
        .def( 
            "clone"
            , (::StochasticDoubleGaussian * ( ::StochasticDoubleGaussian::* )(  ) const)(&::StochasticDoubleGaussian::clone)
            , (::StochasticDoubleGaussian * ( StochasticDoubleGaussian_wrapper::* )(  ) const)(&StochasticDoubleGaussian_wrapper::default_clone)
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "getFWHM"
            , (double ( ::StochasticDoubleGaussian::* )(  ) const)(&::StochasticDoubleGaussian::getFWHM)
            , (double ( StochasticDoubleGaussian_wrapper::* )(  ) const)(&StochasticDoubleGaussian_wrapper::default_getFWHM) )    
        .def( 
            "getStdDev"
            , (double ( ::StochasticDoubleGaussian::* )(  ) const)( &::StochasticDoubleGaussian::getStdDev ) )    
        .def( 
            "probabilityDensity"
            , (double ( ::StochasticDoubleGaussian::* )( double ) const)(&::StochasticDoubleGaussian::probabilityDensity)
            , (double ( StochasticDoubleGaussian_wrapper::* )( double ) const)(&StochasticDoubleGaussian_wrapper::default_probabilityDensity)
            , ( bp::arg("value") ) )    
        .def( 
            "setToRandom"
            , (void ( ::StochasticDoubleGaussian::* )(  ) )(&::StochasticDoubleGaussian::setToRandom)
            , (void ( StochasticDoubleGaussian_wrapper::* )(  ) )(&StochasticDoubleGaussian_wrapper::default_setToRandom) )    
        .def( 
            "getRandom"
            , (double ( ::StochasticParameter<double>::* )(  ) )(&::StochasticParameter< double >::getRandom)
            , (double ( StochasticDoubleGaussian_wrapper::* )(  ) )(&StochasticDoubleGaussian_wrapper::default_getRandom) )    
        .def( 
            "setToAverage"
            , (void ( ::StochasticParameter<double>::* )(  ) )(&::StochasticParameter< double >::setToAverage)
            , (void ( StochasticDoubleGaussian_wrapper::* )(  ) )(&StochasticDoubleGaussian_wrapper::default_setToAverage) );

}

// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonCoreList.h"
#include "RotationY.pypp.h"

namespace bp = boost::python;

struct RotationY_wrapper : RotationY, bp::wrapper< RotationY > {

    RotationY_wrapper(double angle )
    : RotationY( angle )
      , bp::wrapper< RotationY >(){
        // constructor
    m_pyobj = 0;
    }

    virtual ::RotationY * clone(  ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone(  );
        else{
            return this->RotationY::clone(  );
        }
    }
    
    ::RotationY * default_clone(  ) const  {
        return RotationY::clone( );
    }

    virtual ::RotationY * cloneInvertB(  ) const  {
        if( bp::override func_cloneInvertB = this->get_override( "cloneInvertB" ) )
            return func_cloneInvertB(  );
        else{
            return this->RotationY::cloneInvertB(  );
        }
    }
    
    ::RotationY * default_cloneInvertB(  ) const  {
        return RotationY::cloneInvertB( );
    }

    virtual ::RotationY * createInverse(  ) const  {
        if( bp::override func_createInverse = this->get_override( "createInverse" ) )
            return func_createInverse(  );
        else{
            return this->RotationY::createInverse(  );
        }
    }
    
    ::RotationY * default_createInverse(  ) const  {
        return RotationY::createInverse( );
    }

    virtual ::Geometry::Transform3D getTransform3D(  ) const  {
        if( bp::override func_getTransform3D = this->get_override( "getTransform3D" ) )
            return func_getTransform3D(  );
        else{
            return this->RotationY::getTransform3D(  );
        }
    }
    
    ::Geometry::Transform3D default_getTransform3D(  ) const  {
        return RotationY::getTransform3D( );
    }

    virtual bool containsMagneticMaterial(  ) const  {
        if( bp::override func_containsMagneticMaterial = this->get_override( "containsMagneticMaterial" ) )
            return func_containsMagneticMaterial(  );
        else{
            return this->ISample::containsMagneticMaterial(  );
        }
    }
    
    bool default_containsMagneticMaterial(  ) const  {
        return ISample::containsMagneticMaterial( );
    }

    virtual ::std::vector< const ISample* > getChildren(  ) const  {
        if( bp::override func_getChildren = this->get_override( "getChildren" ) )
            return func_getChildren(  );
        else{
            return this->ISample::getChildren(  );
        }
    }
    
    ::std::vector< const ISample* > default_getChildren(  ) const  {
        return ISample::getChildren( );
    }

    virtual bool isIdentity(  ) const  {
        if( bp::override func_isIdentity = this->get_override( "isIdentity" ) )
            return func_isIdentity(  );
        else{
            return this->IRotation::isIdentity(  );
        }
    }
    
    bool default_isIdentity(  ) const  {
        return IRotation::isIdentity( );
    }

    virtual void printSampleTree(  ) {
        if( bp::override func_printSampleTree = this->get_override( "printSampleTree" ) )
            func_printSampleTree(  );
        else{
            this->ISample::printSampleTree(  );
        }
    }
    
    void default_printSampleTree(  ) {
        ISample::printSampleTree( );
    }

    virtual ::std::size_t size(  ) const  {
        if( bp::override func_size = this->get_override( "size" ) )
            return func_size(  );
        else{
            return this->ISample::size(  );
        }
    }
    
    ::std::size_t default_size(  ) const  {
        return ISample::size( );
    }

    virtual void transferToCPP(  ) {
        
        if( !this->m_pyobj) {
            this->m_pyobj = boost::python::detail::wrapper_base_::get_owner(*this);
            Py_INCREF(this->m_pyobj);
        }
        
        if( bp::override func_transferToCPP = this->get_override( "transferToCPP" ) )
            func_transferToCPP(  );
        else{
            this->ICloneable::transferToCPP(  );
        }
    }
    
    void default_transferToCPP(  ) {
        
        if( !this->m_pyobj) {
            this->m_pyobj = boost::python::detail::wrapper_base_::get_owner(*this);
            Py_INCREF(this->m_pyobj);
        }
        
        ICloneable::transferToCPP( );
    }

    PyObject* m_pyobj;

};

void register_RotationY_class(){

    { //::RotationY
        typedef bp::class_< RotationY_wrapper, bp::bases< IRotation >, std::auto_ptr< RotationY_wrapper >, boost::noncopyable > RotationY_exposer_t;
        RotationY_exposer_t RotationY_exposer = RotationY_exposer_t( "RotationY", bp::init< double >(( bp::arg("angle") )) );
        bp::scope RotationY_scope( RotationY_exposer );
        { //::RotationY::clone
        
            typedef ::RotationY * ( ::RotationY::*clone_function_type)(  ) const;
            typedef ::RotationY * ( RotationY_wrapper::*default_clone_function_type)(  ) const;
            
            RotationY_exposer.def( 
                "clone"
                , clone_function_type(&::RotationY::clone)
                , default_clone_function_type(&RotationY_wrapper::default_clone)
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::RotationY::cloneInvertB
        
            typedef ::RotationY * ( ::RotationY::*cloneInvertB_function_type)(  ) const;
            typedef ::RotationY * ( RotationY_wrapper::*default_cloneInvertB_function_type)(  ) const;
            
            RotationY_exposer.def( 
                "cloneInvertB"
                , cloneInvertB_function_type(&::RotationY::cloneInvertB)
                , default_cloneInvertB_function_type(&RotationY_wrapper::default_cloneInvertB)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::RotationY::createInverse
        
            typedef ::RotationY * ( ::RotationY::*createInverse_function_type)(  ) const;
            typedef ::RotationY * ( RotationY_wrapper::*default_createInverse_function_type)(  ) const;
            
            RotationY_exposer.def( 
                "createInverse"
                , createInverse_function_type(&::RotationY::createInverse)
                , default_createInverse_function_type(&RotationY_wrapper::default_createInverse)
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::RotationY::getAngle
        
            typedef double ( ::RotationY::*getAngle_function_type)(  ) const;
            
            RotationY_exposer.def( 
                "getAngle"
                , getAngle_function_type( &::RotationY::getAngle ) );
        
        }
        { //::RotationY::getTransform3D
        
            typedef ::Geometry::Transform3D ( ::RotationY::*getTransform3D_function_type)(  ) const;
            typedef ::Geometry::Transform3D ( RotationY_wrapper::*default_getTransform3D_function_type)(  ) const;
            
            RotationY_exposer.def( 
                "getTransform3D"
                , getTransform3D_function_type(&::RotationY::getTransform3D)
                , default_getTransform3D_function_type(&RotationY_wrapper::default_getTransform3D) );
        
        }
        { //::ISample::containsMagneticMaterial
        
            typedef bool ( ::ISample::*containsMagneticMaterial_function_type)(  ) const;
            typedef bool ( RotationY_wrapper::*default_containsMagneticMaterial_function_type)(  ) const;
            
            RotationY_exposer.def( 
                "containsMagneticMaterial"
                , containsMagneticMaterial_function_type(&::ISample::containsMagneticMaterial)
                , default_containsMagneticMaterial_function_type(&RotationY_wrapper::default_containsMagneticMaterial) );
        
        }
        { //::ISample::getChildren
        
            typedef ::std::vector< const ISample* > ( ::ISample::*getChildren_function_type)(  ) const;
            typedef ::std::vector< const ISample* > ( RotationY_wrapper::*default_getChildren_function_type)(  ) const;
            
            RotationY_exposer.def( 
                "getChildren"
                , getChildren_function_type(&::ISample::getChildren)
                , default_getChildren_function_type(&RotationY_wrapper::default_getChildren) );
        
        }
        { //::IRotation::isIdentity
        
            typedef bool ( ::IRotation::*isIdentity_function_type)(  ) const;
            typedef bool ( RotationY_wrapper::*default_isIdentity_function_type)(  ) const;
            
            RotationY_exposer.def( 
                "isIdentity"
                , isIdentity_function_type(&::IRotation::isIdentity)
                , default_isIdentity_function_type(&RotationY_wrapper::default_isIdentity) );
        
        }
        { //::ISample::printSampleTree
        
            typedef void ( ::ISample::*printSampleTree_function_type)(  ) ;
            typedef void ( RotationY_wrapper::*default_printSampleTree_function_type)(  ) ;
            
            RotationY_exposer.def( 
                "printSampleTree"
                , printSampleTree_function_type(&::ISample::printSampleTree)
                , default_printSampleTree_function_type(&RotationY_wrapper::default_printSampleTree) );
        
        }
        { //::ISample::size
        
            typedef ::std::size_t ( ::ISample::*size_function_type)(  ) const;
            typedef ::std::size_t ( RotationY_wrapper::*default_size_function_type)(  ) const;
            
            RotationY_exposer.def( 
                "size"
                , size_function_type(&::ISample::size)
                , default_size_function_type(&RotationY_wrapper::default_size) );
        
        }
        { //::ICloneable::transferToCPP
        
            typedef void ( ::ICloneable::*transferToCPP_function_type)(  ) ;
            typedef void ( RotationY_wrapper::*default_transferToCPP_function_type)(  ) ;
            
            RotationY_exposer.def( 
                "transferToCPP"
                , transferToCPP_function_type(&::ICloneable::transferToCPP)
                , default_transferToCPP_function_type(&RotationY_wrapper::default_transferToCPP) );
        
        }
    }

}

// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonCoreList.h"
#include "SphericalDetector.pypp.h"

namespace bp = boost::python;

struct SphericalDetector_wrapper : SphericalDetector, bp::wrapper< SphericalDetector > {

    SphericalDetector_wrapper( )
    : SphericalDetector( )
      , bp::wrapper< SphericalDetector >(){
        // null constructor
    m_pyobj = 0;
    }

    SphericalDetector_wrapper(::std::size_t n_phi, double phi_min, double phi_max, ::std::size_t n_alpha, double alpha_min, double alpha_max )
    : SphericalDetector( n_phi, phi_min, phi_max, n_alpha, alpha_min, alpha_max )
      , bp::wrapper< SphericalDetector >(){
        // constructor
    m_pyobj = 0;
    }

    SphericalDetector_wrapper(::SphericalDetector const & other )
    : SphericalDetector( boost::ref(other) )
      , bp::wrapper< SphericalDetector >(){
        // copy constructor
    m_pyobj = 0;
    }

    virtual ::SphericalDetector * clone(  ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone(  );
        else{
            return this->SphericalDetector::clone(  );
        }
    }
    
    ::SphericalDetector * default_clone(  ) const  {
        return SphericalDetector::clone( );
    }

    virtual ::OutputData< double > * createDetectorMap( ::Beam const & beam, ::IDetector2D::EAxesUnits units_type ) const  {
        if( bp::override func_createDetectorMap = this->get_override( "createDetectorMap" ) )
            return func_createDetectorMap( boost::ref(beam), units_type );
        else{
            return this->SphericalDetector::createDetectorMap( boost::ref(beam), units_type );
        }
    }
    
    ::OutputData< double > * default_createDetectorMap( ::Beam const & beam, ::IDetector2D::EAxesUnits units_type ) const  {
        return SphericalDetector::createDetectorMap( boost::ref(beam), units_type );
    }

    virtual ::IDetector2D::EAxesUnits getDefaultAxesUnits(  ) const  {
        if( bp::override func_getDefaultAxesUnits = this->get_override( "getDefaultAxesUnits" ) )
            return func_getDefaultAxesUnits(  );
        else{
            return this->SphericalDetector::getDefaultAxesUnits(  );
        }
    }
    
    ::IDetector2D::EAxesUnits default_getDefaultAxesUnits(  ) const  {
        return SphericalDetector::getDefaultAxesUnits( );
    }

    virtual ::std::vector< IDetector2D::EAxesUnits > getValidAxesUnits(  ) const  {
        if( bp::override func_getValidAxesUnits = this->get_override( "getValidAxesUnits" ) )
            return func_getValidAxesUnits(  );
        else{
            return this->SphericalDetector::getValidAxesUnits(  );
        }
    }
    
    ::std::vector< IDetector2D::EAxesUnits > default_getValidAxesUnits(  ) const  {
        return SphericalDetector::getValidAxesUnits( );
    }

    virtual void init( ::Beam const & beam ) {
        if( bp::override func_init = this->get_override( "init" ) )
            func_init( boost::ref(beam) );
        else{
            this->IDetector2D::init( boost::ref(beam) );
        }
    }
    
    void default_init( ::Beam const & beam ) {
        IDetector2D::init( boost::ref(beam) );
    }

    PyObject* m_pyobj;

};

void register_SphericalDetector_class(){

    { //::SphericalDetector
        typedef bp::class_< SphericalDetector_wrapper, bp::bases< IDetector2D >, std::auto_ptr< SphericalDetector_wrapper > > SphericalDetector_exposer_t;
        SphericalDetector_exposer_t SphericalDetector_exposer = SphericalDetector_exposer_t( "SphericalDetector", "A spherical detector with axes and resolution function.", bp::init< >() );
        bp::scope SphericalDetector_scope( SphericalDetector_exposer );
        SphericalDetector_exposer.def( bp::init< std::size_t, double, double, std::size_t, double, double >(( bp::arg("n_phi"), bp::arg("phi_min"), bp::arg("phi_max"), bp::arg("n_alpha"), bp::arg("alpha_min"), bp::arg("alpha_max") ), "Spherical detector constructor using angle ranges @param n_phi number of phi-axis bins @param phi_min low edge of first phi-bin @param phi_max upper edge of last phi-bin @param n_alpha number of alpha-axis bins @param alpha_min low edge of first alpha-bin @param alpha_max upper edge of last alpha-bin \n\n:Parameters:\n  - 'n_phi' - number of phi-axis bins\n  - 'phi_min' - low edge of first phi-bin\n  - 'phi_max' - upper edge of last phi-bin\n  - 'n_alpha' - number of alpha-axis bins\n  - 'alpha_min' - low edge of first alpha-bin\n  - 'alpha_max' - upper edge of last alpha-bin\n") );
        SphericalDetector_exposer.def( bp::init< SphericalDetector const & >(( bp::arg("other") )) );
        { //::SphericalDetector::clone
        
            typedef ::SphericalDetector * ( ::SphericalDetector::*clone_function_type)(  ) const;
            typedef ::SphericalDetector * ( SphericalDetector_wrapper::*default_clone_function_type)(  ) const;
            
            SphericalDetector_exposer.def( 
                "clone"
                , clone_function_type(&::SphericalDetector::clone)
                , default_clone_function_type(&SphericalDetector_wrapper::default_clone)
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::SphericalDetector::createDetectorMap
        
            typedef ::OutputData< double > * ( ::SphericalDetector::*createDetectorMap_function_type)( ::Beam const &,::IDetector2D::EAxesUnits ) const;
            typedef ::OutputData< double > * ( SphericalDetector_wrapper::*default_createDetectorMap_function_type)( ::Beam const &,::IDetector2D::EAxesUnits ) const;
            
            SphericalDetector_exposer.def( 
                "createDetectorMap"
                , createDetectorMap_function_type(&::SphericalDetector::createDetectorMap)
                , default_createDetectorMap_function_type(&SphericalDetector_wrapper::default_createDetectorMap)
                , ( bp::arg("beam"), bp::arg("units_type") )
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::SphericalDetector::getDefaultAxesUnits
        
            typedef ::IDetector2D::EAxesUnits ( ::SphericalDetector::*getDefaultAxesUnits_function_type)(  ) const;
            typedef ::IDetector2D::EAxesUnits ( SphericalDetector_wrapper::*default_getDefaultAxesUnits_function_type)(  ) const;
            
            SphericalDetector_exposer.def( 
                "getDefaultAxesUnits"
                , getDefaultAxesUnits_function_type(&::SphericalDetector::getDefaultAxesUnits)
                , default_getDefaultAxesUnits_function_type(&SphericalDetector_wrapper::default_getDefaultAxesUnits) );
        
        }
        { //::SphericalDetector::getValidAxesUnits
        
            typedef ::std::vector< IDetector2D::EAxesUnits > ( ::SphericalDetector::*getValidAxesUnits_function_type)(  ) const;
            typedef ::std::vector< IDetector2D::EAxesUnits > ( SphericalDetector_wrapper::*default_getValidAxesUnits_function_type)(  ) const;
            
            SphericalDetector_exposer.def( 
                "getValidAxesUnits"
                , getValidAxesUnits_function_type(&::SphericalDetector::getValidAxesUnits)
                , default_getValidAxesUnits_function_type(&SphericalDetector_wrapper::default_getValidAxesUnits) );
        
        }
        { //::SphericalDetector::operator=
        
            typedef ::SphericalDetector & ( ::SphericalDetector::*assign_function_type)( ::SphericalDetector const & ) ;
            
            SphericalDetector_exposer.def( 
                "assign"
                , assign_function_type( &::SphericalDetector::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        { //::IDetector2D::init
        
            typedef void ( ::IDetector2D::*init_function_type)( ::Beam const & ) ;
            typedef void ( SphericalDetector_wrapper::*default_init_function_type)( ::Beam const & ) ;
            
            SphericalDetector_exposer.def( 
                "init"
                , init_function_type(&::IDetector2D::init)
                , default_init_function_type(&SphericalDetector_wrapper::default_init)
                , ( bp::arg("beam") ) );
        
        }
    }

}

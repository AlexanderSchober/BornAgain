// This file has been generated by Py++.

// BornAgain: simulate and fit scattering at grazing incidence 
//! @brief automatically generated boost::python code for PythonCoreAPI  

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter);
GCC_DIAG_OFF(missing-field-initializers);
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter);
GCC_DIAG_ON(missing-field-initializers);
#include "PythonCoreList.h"
#include "IObservable.pypp.h"

namespace bp = boost::python;

struct IObservable_wrapper : IObservable, bp::wrapper< IObservable > {

    IObservable_wrapper(IObservable const & arg )
    : IObservable( arg )
      , bp::wrapper< IObservable >(){
        // copy constructor
        
    }

    IObservable_wrapper()
    : IObservable()
      , bp::wrapper< IObservable >(){
        // null constructor
        
    }

    virtual void attachObserver( ::boost::shared_ptr< IObserver > obj ) {
        if( bp::override func_attachObserver = this->get_override( "attachObserver" ) )
            func_attachObserver( obj );
        else{
            this->IObservable::attachObserver( obj );
        }
    }
    
    void default_attachObserver( ::boost::shared_ptr< IObserver > obj ) {
        IObservable::attachObserver( obj );
    }

    virtual void notifyObservers(  ) {
        if( bp::override func_notifyObservers = this->get_override( "notifyObservers" ) )
            func_notifyObservers(  );
        else{
            this->IObservable::notifyObservers(  );
        }
    }
    
    void default_notifyObservers(  ) {
        IObservable::notifyObservers( );
    }

};

void register_IObservable_class(){

    { //::IObservable
        typedef bp::class_< IObservable_wrapper > IObservable_exposer_t;
        IObservable_exposer_t IObservable_exposer = IObservable_exposer_t( "IObservable" );
        bp::scope IObservable_scope( IObservable_exposer );
        { //::IObservable::attachObserver
        
            typedef void ( ::IObservable::*attachObserver_function_type )( ::boost::shared_ptr< IObserver > ) ;
            typedef void ( IObservable_wrapper::*default_attachObserver_function_type )( ::boost::shared_ptr< IObserver > ) ;
            
            IObservable_exposer.def( 
                "attachObserver"
                , attachObserver_function_type(&::IObservable::attachObserver)
                , default_attachObserver_function_type(&IObservable_wrapper::default_attachObserver)
                , ( bp::arg("obj") ) );
        
        }
        { //::IObservable::notifyObservers
        
            typedef void ( ::IObservable::*notifyObservers_function_type )(  ) ;
            typedef void ( IObservable_wrapper::*default_notifyObservers_function_type )(  ) ;
            
            IObservable_exposer.def( 
                "notifyObservers"
                , notifyObservers_function_type(&::IObservable::notifyObservers)
                , default_notifyObservers_function_type(&IObservable_wrapper::default_notifyObservers) );
        
        }
    }

}

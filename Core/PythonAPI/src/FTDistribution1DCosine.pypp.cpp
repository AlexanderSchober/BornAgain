// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonCoreList.h"
#include "FTDistribution1DCosine.pypp.h"

namespace bp = boost::python;

struct FTDistribution1DCosine_wrapper : FTDistribution1DCosine, bp::wrapper< FTDistribution1DCosine > {

    FTDistribution1DCosine_wrapper(FTDistribution1DCosine const & arg )
    : FTDistribution1DCosine( arg )
      , bp::wrapper< FTDistribution1DCosine >(){
        // copy constructor
        m_pyobj = 0;
    }

    FTDistribution1DCosine_wrapper(double omega )
    : FTDistribution1DCosine( omega )
      , bp::wrapper< FTDistribution1DCosine >(){
        // constructor
    m_pyobj = 0;
    }

    virtual ::FTDistribution1DCosine * clone(  ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone(  );
        else{
            return this->FTDistribution1DCosine::clone(  );
        }
    }
    
    ::FTDistribution1DCosine * default_clone(  ) const  {
        return FTDistribution1DCosine::clone( );
    }

    virtual double evaluate( double q ) const  {
        if( bp::override func_evaluate = this->get_override( "evaluate" ) )
            return func_evaluate( q );
        else{
            return this->FTDistribution1DCosine::evaluate( q );
        }
    }
    
    double default_evaluate( double q ) const  {
        return FTDistribution1DCosine::evaluate( q );
    }

    PyObject* m_pyobj;

};

void register_FTDistribution1DCosine_class(){

    { //::FTDistribution1DCosine
        typedef bp::class_< FTDistribution1DCosine_wrapper, bp::bases< IFTDistribution1D >, std::auto_ptr< FTDistribution1DCosine_wrapper > > FTDistribution1DCosine_exposer_t;
        FTDistribution1DCosine_exposer_t FTDistribution1DCosine_exposer = FTDistribution1DCosine_exposer_t( "FTDistribution1DCosine", "1 dimensional triangle distribution in Fourier space.", bp::init< double >(( bp::arg("omega") )) );
        bp::scope FTDistribution1DCosine_scope( FTDistribution1DCosine_exposer );
        { //::FTDistribution1DCosine::clone
        
            typedef ::FTDistribution1DCosine * ( ::FTDistribution1DCosine::*clone_function_type)(  ) const;
            typedef ::FTDistribution1DCosine * ( FTDistribution1DCosine_wrapper::*default_clone_function_type)(  ) const;
            
            FTDistribution1DCosine_exposer.def( 
                "clone"
                , clone_function_type(&::FTDistribution1DCosine::clone)
                , default_clone_function_type(&FTDistribution1DCosine_wrapper::default_clone)
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::FTDistribution1DCosine::evaluate
        
            typedef double ( ::FTDistribution1DCosine::*evaluate_function_type)( double ) const;
            typedef double ( FTDistribution1DCosine_wrapper::*default_evaluate_function_type)( double ) const;
            
            FTDistribution1DCosine_exposer.def( 
                "evaluate"
                , evaluate_function_type(&::FTDistribution1DCosine::evaluate)
                , default_evaluate_function_type(&FTDistribution1DCosine_wrapper::default_evaluate)
                , ( bp::arg("q") ) );
        
        }
    }

}

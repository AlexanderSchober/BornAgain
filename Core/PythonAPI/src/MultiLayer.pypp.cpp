// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonCoreList.h"
#include "MultiLayer.pypp.h"

namespace bp = boost::python;

struct MultiLayer_wrapper : MultiLayer, bp::wrapper< MultiLayer > {

    MultiLayer_wrapper( )
    : MultiLayer( )
      , bp::wrapper< MultiLayer >(){
        // null constructor
    m_pyobj = 0;
    }

    virtual ::MultiLayer * clone(  ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone(  );
        else{
            return this->MultiLayer::clone(  );
        }
    }
    
    ::MultiLayer * default_clone(  ) const  {
        return MultiLayer::clone( );
    }

    virtual ::MultiLayer * cloneInvertB(  ) const  {
        if( bp::override func_cloneInvertB = this->get_override( "cloneInvertB" ) )
            return func_cloneInvertB(  );
        else{
            return this->MultiLayer::cloneInvertB(  );
        }
    }
    
    ::MultiLayer * default_cloneInvertB(  ) const  {
        return MultiLayer::cloneInvertB( );
    }

    virtual bool containsMagneticMaterial(  ) const  {
        if( bp::override func_containsMagneticMaterial = this->get_override( "containsMagneticMaterial" ) )
            return func_containsMagneticMaterial(  );
        else{
            return this->ISample::containsMagneticMaterial(  );
        }
    }
    
    bool default_containsMagneticMaterial(  ) const  {
        return ISample::containsMagneticMaterial( );
    }

    virtual ::std::vector< const ISample* > getChildren(  ) const  {
        if( bp::override func_getChildren = this->get_override( "getChildren" ) )
            return func_getChildren(  );
        else{
            return this->ICompositeSample::getChildren(  );
        }
    }
    
    ::std::vector< const ISample* > default_getChildren(  ) const  {
        return ICompositeSample::getChildren( );
    }

    virtual void printSampleTree(  ) {
        if( bp::override func_printSampleTree = this->get_override( "printSampleTree" ) )
            func_printSampleTree(  );
        else{
            this->ISample::printSampleTree(  );
        }
    }
    
    void default_printSampleTree(  ) {
        ISample::printSampleTree( );
    }

    virtual ::std::size_t size(  ) const  {
        if( bp::override func_size = this->get_override( "size" ) )
            return func_size(  );
        else{
            return this->ICompositeSample::size(  );
        }
    }
    
    ::std::size_t default_size(  ) const  {
        return ICompositeSample::size( );
    }

    virtual void transferToCPP(  ) {
        
        if( !this->m_pyobj) {
            this->m_pyobj = boost::python::detail::wrapper_base_::get_owner(*this);
            Py_INCREF(this->m_pyobj);
        }
        
        if( bp::override func_transferToCPP = this->get_override( "transferToCPP" ) )
            func_transferToCPP(  );
        else{
            this->ICloneable::transferToCPP(  );
        }
    }
    
    void default_transferToCPP(  ) {
        
        if( !this->m_pyobj) {
            this->m_pyobj = boost::python::detail::wrapper_base_::get_owner(*this);
            Py_INCREF(this->m_pyobj);
        }
        
        ICloneable::transferToCPP( );
    }

    PyObject* m_pyobj;

};

void register_MultiLayer_class(){

    { //::MultiLayer
        typedef bp::class_< MultiLayer_wrapper, bp::bases< ICompositeSample >, std::auto_ptr< MultiLayer_wrapper >, boost::noncopyable > MultiLayer_exposer_t;
        MultiLayer_exposer_t MultiLayer_exposer = MultiLayer_exposer_t( "MultiLayer", bp::init< >() );
        bp::scope MultiLayer_scope( MultiLayer_exposer );
        { //::MultiLayer::addLayer
        
            typedef void ( ::MultiLayer::*addLayer_function_type)( ::Layer const & ) ;
            
            MultiLayer_exposer.def( 
                "addLayer"
                , addLayer_function_type( &::MultiLayer::addLayer )
                , ( bp::arg("p_child") )
                , "Adds object to multilayer, overrides from ISample." );
        
        }
        { //::MultiLayer::addLayerWithTopRoughness
        
            typedef void ( ::MultiLayer::*addLayerWithTopRoughness_function_type)( ::Layer const &,::LayerRoughness const & ) ;
            
            MultiLayer_exposer.def( 
                "addLayerWithTopRoughness"
                , addLayerWithTopRoughness_function_type( &::MultiLayer::addLayerWithTopRoughness )
                , ( bp::arg("layer"), bp::arg("roughness") )
                , "Adds layer with top roughness." );
        
        }
        { //::MultiLayer::clear
        
            typedef void ( ::MultiLayer::*clear_function_type)(  ) ;
            
            MultiLayer_exposer.def( 
                "clear"
                , clear_function_type( &::MultiLayer::clear )
                , "Destructs allocated objects." );
        
        }
        { //::MultiLayer::clone
        
            typedef ::MultiLayer * ( ::MultiLayer::*clone_function_type)(  ) const;
            typedef ::MultiLayer * ( MultiLayer_wrapper::*default_clone_function_type)(  ) const;
            
            MultiLayer_exposer.def( 
                "clone"
                , clone_function_type(&::MultiLayer::clone)
                , default_clone_function_type(&MultiLayer_wrapper::default_clone)
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::MultiLayer::cloneInvertB
        
            typedef ::MultiLayer * ( ::MultiLayer::*cloneInvertB_function_type)(  ) const;
            typedef ::MultiLayer * ( MultiLayer_wrapper::*default_cloneInvertB_function_type)(  ) const;
            
            MultiLayer_exposer.def( 
                "cloneInvertB"
                , cloneInvertB_function_type(&::MultiLayer::cloneInvertB)
                , default_cloneInvertB_function_type(&MultiLayer_wrapper::default_cloneInvertB)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::MultiLayer::getCrossCorrLength
        
            typedef double ( ::MultiLayer::*getCrossCorrLength_function_type)(  ) const;
            
            MultiLayer_exposer.def( 
                "getCrossCorrLength"
                , getCrossCorrLength_function_type( &::MultiLayer::getCrossCorrLength )
                , "Returns cross correlation length of roughnesses between interfaces." );
        
        }
        { //::MultiLayer::getCrossCorrSpectralFun
        
            typedef double ( ::MultiLayer::*getCrossCorrSpectralFun_function_type)( ::kvector_t const &,::std::size_t,::std::size_t ) const;
            
            MultiLayer_exposer.def( 
                "getCrossCorrSpectralFun"
                , getCrossCorrSpectralFun_function_type( &::MultiLayer::getCrossCorrSpectralFun )
                , ( bp::arg("kvec"), bp::arg("j"), bp::arg("k") )
                , "Fourier transform of the correlation function of roughnesses between the interfaces " );
        
        }
        { //::MultiLayer::getLayer
        
            typedef ::Layer const * ( ::MultiLayer::*getLayer_function_type)( ::std::size_t ) const;
            
            MultiLayer_exposer.def( 
                "getLayer"
                , getLayer_function_type( &::MultiLayer::getLayer )
                , ( bp::arg("i_layer") )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "Returns layer with given index." );
        
        }
        { //::MultiLayer::getLayerBottomInterface
        
            typedef ::LayerInterface const * ( ::MultiLayer::*getLayerBottomInterface_function_type)( ::std::size_t ) const;
            
            MultiLayer_exposer.def( 
                "getLayerBottomInterface"
                , getLayerBottomInterface_function_type( &::MultiLayer::getLayerBottomInterface )
                , ( bp::arg("i_layer") )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "Returns bottom interface of layer." );
        
        }
        { //::MultiLayer::getLayerBottomZ
        
            typedef double ( ::MultiLayer::*getLayerBottomZ_function_type)( ::std::size_t ) const;
            
            MultiLayer_exposer.def( 
                "getLayerBottomZ"
                , getLayerBottomZ_function_type( &::MultiLayer::getLayerBottomZ )
                , ( bp::arg("i_layer") )
                , "Returns z-coordinate of the layer's bottom." );
        
        }
        { //::MultiLayer::getLayerInterface
        
            typedef ::LayerInterface const * ( ::MultiLayer::*getLayerInterface_function_type)( ::std::size_t ) const;
            
            MultiLayer_exposer.def( 
                "getLayerInterface"
                , getLayerInterface_function_type( &::MultiLayer::getLayerInterface )
                , ( bp::arg("i_interface") )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "Returns layer with given index." );
        
        }
        { //::MultiLayer::getLayerThickness
        
            typedef double ( ::MultiLayer::*getLayerThickness_function_type)( ::std::size_t ) const;
            
            MultiLayer_exposer.def( 
                "getLayerThickness"
                , getLayerThickness_function_type( &::MultiLayer::getLayerThickness )
                , ( bp::arg("i_layer") )
                , "Returns thickness of layer." );
        
        }
        { //::MultiLayer::getLayerTopInterface
        
            typedef ::LayerInterface const * ( ::MultiLayer::*getLayerTopInterface_function_type)( ::std::size_t ) const;
            
            MultiLayer_exposer.def( 
                "getLayerTopInterface"
                , getLayerTopInterface_function_type( &::MultiLayer::getLayerTopInterface )
                , ( bp::arg("i_layer") )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "Returns top interface of layer." );
        
        }
        { //::MultiLayer::getNumberOfInterfaces
        
            typedef ::std::size_t ( ::MultiLayer::*getNumberOfInterfaces_function_type)(  ) const;
            
            MultiLayer_exposer.def( 
                "getNumberOfInterfaces"
                , getNumberOfInterfaces_function_type( &::MultiLayer::getNumberOfInterfaces )
                , "Returns number of interfaces in multilayer." );
        
        }
        { //::MultiLayer::getNumberOfLayers
        
            typedef ::std::size_t ( ::MultiLayer::*getNumberOfLayers_function_type)(  ) const;
            
            MultiLayer_exposer.def( 
                "getNumberOfLayers"
                , getNumberOfLayers_function_type( &::MultiLayer::getNumberOfLayers )
                , "Returns number of layers in multilayer." );
        
        }
        { //::MultiLayer::requiresMatrixRTCoefficients
        
            typedef bool ( ::MultiLayer::*requiresMatrixRTCoefficients_function_type)(  ) const;
            
            MultiLayer_exposer.def( 
                "requiresMatrixRTCoefficients"
                , requiresMatrixRTCoefficients_function_type( &::MultiLayer::requiresMatrixRTCoefficients )
                , "returns true if contains magnetic materials and matrix calculations are required." );
        
        }
        { //::MultiLayer::setCrossCorrLength
        
            typedef void ( ::MultiLayer::*setCrossCorrLength_function_type)( double ) ;
            
            MultiLayer_exposer.def( 
                "setCrossCorrLength"
                , setCrossCorrLength_function_type( &::MultiLayer::setCrossCorrLength )
                , ( bp::arg("crossCorrLength") )
                , "Sets cross correlation length of roughnesses between interfaces." );
        
        }
        { //::MultiLayer::setLayerThickness
        
            typedef void ( ::MultiLayer::*setLayerThickness_function_type)( ::std::size_t,double ) ;
            
            MultiLayer_exposer.def( 
                "setLayerThickness"
                , setLayerThickness_function_type( &::MultiLayer::setLayerThickness )
                , ( bp::arg("i_layer"), bp::arg("thickness") )
                , "Sets thickness of layer." );
        
        }
        { //::MultiLayer::zToLayerIndex
        
            typedef ::std::size_t ( ::MultiLayer::*zToLayerIndex_function_type)( double ) ;
            
            MultiLayer_exposer.def( 
                "zToLayerIndex"
                , zToLayerIndex_function_type( &::MultiLayer::zToLayerIndex )
                , ( bp::arg("z_value") )
                , "returns layer index corresponding to given global z coordinate." );
        
        }
        { //::ISample::containsMagneticMaterial
        
            typedef bool ( ::ISample::*containsMagneticMaterial_function_type)(  ) const;
            typedef bool ( MultiLayer_wrapper::*default_containsMagneticMaterial_function_type)(  ) const;
            
            MultiLayer_exposer.def( 
                "containsMagneticMaterial"
                , containsMagneticMaterial_function_type(&::ISample::containsMagneticMaterial)
                , default_containsMagneticMaterial_function_type(&MultiLayer_wrapper::default_containsMagneticMaterial) );
        
        }
        { //::ICompositeSample::getChildren
        
            typedef ::std::vector< const ISample* > ( ::ICompositeSample::*getChildren_function_type)(  ) const;
            typedef ::std::vector< const ISample* > ( MultiLayer_wrapper::*default_getChildren_function_type)(  ) const;
            
            MultiLayer_exposer.def( 
                "getChildren"
                , getChildren_function_type(&::ICompositeSample::getChildren)
                , default_getChildren_function_type(&MultiLayer_wrapper::default_getChildren) );
        
        }
        { //::ISample::printSampleTree
        
            typedef void ( ::ISample::*printSampleTree_function_type)(  ) ;
            typedef void ( MultiLayer_wrapper::*default_printSampleTree_function_type)(  ) ;
            
            MultiLayer_exposer.def( 
                "printSampleTree"
                , printSampleTree_function_type(&::ISample::printSampleTree)
                , default_printSampleTree_function_type(&MultiLayer_wrapper::default_printSampleTree) );
        
        }
        { //::ICompositeSample::size
        
            typedef ::std::size_t ( ::ICompositeSample::*size_function_type)(  ) const;
            typedef ::std::size_t ( MultiLayer_wrapper::*default_size_function_type)(  ) const;
            
            MultiLayer_exposer.def( 
                "size"
                , size_function_type(&::ICompositeSample::size)
                , default_size_function_type(&MultiLayer_wrapper::default_size) );
        
        }
        { //::ICloneable::transferToCPP
        
            typedef void ( ::ICloneable::*transferToCPP_function_type)(  ) ;
            typedef void ( MultiLayer_wrapper::*default_transferToCPP_function_type)(  ) ;
            
            MultiLayer_exposer.def( 
                "transferToCPP"
                , transferToCPP_function_type(&::ICloneable::transferToCPP)
                , default_transferToCPP_function_type(&MultiLayer_wrapper::default_transferToCPP) );
        
        }
    }

}

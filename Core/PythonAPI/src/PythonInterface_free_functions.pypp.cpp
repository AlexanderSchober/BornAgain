// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonCoreList.h"
#include "PythonInterface_free_functions.pypp.h"

namespace bp = boost::python;

void register_free_functions(){

    { //::CreateProduct
    
        typedef ::IRotation * ( *CreateProduct_function_type )( ::IRotation const &,::IRotation const & );
        
        bp::def( 
            "CreateProduct"
            , CreateProduct_function_type( &::CreateProduct )
            , ( bp::arg("left"), bp::arg("right") )
            , bp::return_value_policy< bp::reference_existing_object >() );
    
    }

    { //::MathFunctions::GenerateNormalRandom
    
        typedef double ( *GenerateNormalRandom_function_type )( double,double );
        
        bp::def( 
            "GenerateNormalRandom"
            , GenerateNormalRandom_function_type( &::MathFunctions::GenerateNormalRandom )
            , ( bp::arg("average"), bp::arg("std_dev") ) );
    
    }

    { //::BornAgain::GetMajorVersionNumber
    
        typedef int ( *GetMajorVersionNumber_function_type )(  );
        
        bp::def( 
            "GetMajorVersionNumber"
            , GetMajorVersionNumber_function_type( &::BornAgain::GetMajorVersionNumber ) );
    
    }

    { //::BornAgain::GetMinorVersionNumber
    
        typedef int ( *GetMinorVersionNumber_function_type )(  );
        
        bp::def( 
            "GetMinorVersionNumber"
            , GetMinorVersionNumber_function_type( &::BornAgain::GetMinorVersionNumber ) );
    
    }

    { //::BornAgain::GetName
    
        typedef ::std::string ( *GetName_function_type )(  );
        
        bp::def( 
            "GetName"
            , GetName_function_type( &::BornAgain::GetName ) );
    
    }

    { //::BornAgain::GetPatchVersionNumber
    
        typedef int ( *GetPatchVersionNumber_function_type )(  );
        
        bp::def( 
            "GetPatchVersionNumber"
            , GetPatchVersionNumber_function_type( &::BornAgain::GetPatchVersionNumber ) );
    
    }

    { //::BornAgain::GetVersionNumber
    
        typedef ::std::string ( *GetVersionNumber_function_type )(  );
        
        bp::def( 
            "GetVersionNumber"
            , GetVersionNumber_function_type( &::BornAgain::GetVersionNumber ) );
    
    }

    { //::MSG::SetLevel
    
        typedef void ( *SetMessageLevel_function_type )( ::std::string const & );
        
        bp::def( 
            "SetMessageLevel"
            , SetMessageLevel_function_type( &::MSG::SetLevel )
            , ( bp::arg("levelname") ) );
    
    }

    { //::MSG::SetLevel
    
        typedef void ( *SetMessageLevel_function_type )( ::MSG::EMessageLevel );
        
        bp::def( 
            "SetMessageLevel"
            , SetMessageLevel_function_type( &::MSG::SetLevel )
            , ( bp::arg("level") ) );
    
    }

    { //::Units::deg2rad
    
        typedef double ( *deg2rad_function_type )( double );
        
        bp::def( 
            "deg2rad"
            , deg2rad_function_type( &::Units::deg2rad )
            , ( bp::arg("angle") ) );
    
    }

    { //::Units::rad2deg
    
        typedef double ( *rad2deg_function_type )( double );
        
        bp::def( 
            "rad2deg"
            , rad2deg_function_type( &::Units::rad2deg )
            , ( bp::arg("angle") ) );
    
    }

}

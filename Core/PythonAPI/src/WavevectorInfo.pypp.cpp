// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonCoreList.h"
#include "WavevectorInfo.pypp.h"

namespace bp = boost::python;

void register_WavevectorInfo_class(){

    { //::WavevectorInfo
        typedef bp::class_< WavevectorInfo > WavevectorInfo_exposer_t;
        WavevectorInfo_exposer_t WavevectorInfo_exposer = WavevectorInfo_exposer_t( "WavevectorInfo", "Holds all wavevector information relevant for calculating form factors.", bp::init< >() );
        bp::scope WavevectorInfo_scope( WavevectorInfo_exposer );
        WavevectorInfo_exposer.def( bp::init< cvector_t, cvector_t >(( bp::arg("ki"), bp::arg("kf") )) );
        { //::WavevectorInfo::getKf
        
            typedef ::cvector_t ( ::WavevectorInfo::*getKf_function_type)(  ) const;
            
            WavevectorInfo_exposer.def( 
                "getKf"
                , getKf_function_type( &::WavevectorInfo::getKf ) );
        
        }
        { //::WavevectorInfo::getKi
        
            typedef ::cvector_t ( ::WavevectorInfo::*getKi_function_type)(  ) const;
            
            WavevectorInfo_exposer.def( 
                "getKi"
                , getKi_function_type( &::WavevectorInfo::getKi ) );
        
        }
        { //::WavevectorInfo::getQ
        
            typedef ::cvector_t ( ::WavevectorInfo::*getQ_function_type)(  ) const;
            
            WavevectorInfo_exposer.def( 
                "getQ"
                , getQ_function_type( &::WavevectorInfo::getQ ) );
        
        }
    }

}

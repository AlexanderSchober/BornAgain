// This file has been generated by Py++.

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter);
GCC_DIAG_OFF(missing-field-initializers);
#include "boost/python.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
GCC_DIAG_ON(unused-parameter);
GCC_DIAG_ON(missing-field-initializers);
#include "BasicVector3D.h"
#include "Bin.h"
#include "Crystal.h"
#include "DiffuseParticleInfo.h"
#include "FTDistributions.h"
#include "FormFactorBox.h"
#include "FormFactorCrystal.h"
#include "FormFactorCylinder.h"
#include "FormFactorDecoratorDebyeWaller.h"
#include "FormFactorFullSphere.h"
#include "FormFactorGauss.h"
#include "FormFactorLorentz.h"
#include "FormFactorParallelepiped.h"
#include "FormFactorPrism3.h"
#include "FormFactorPyramid.h"
#include "FormFactorSphereGaussianRadius.h"
#include "HomogeneousMaterial.h"
#include "ICloneable.h"
#include "IClusteredParticles.h"
#include "ICompositeSample.h"
#include "IDecoration.h"
#include "IFormFactor.h"
#include "IFormFactorBorn.h"
#include "IFormFactorDecorator.h"
#include "IInterferenceFunction.h"
#include "IMaterial.h"
#include "IParameterized.h"
#include "ISample.h"
#include "ISampleBuilder.h"
#include "ISelectionRule.h"
#include "ISingleton.h"
#include "Instrument.h"
#include "InterferenceFunction1DParaCrystal.h"
#include "InterferenceFunction2DLattice.h"
#include "InterferenceFunction2DParaCrystal.h"
#include "InterferenceFunctionNone.h"
#include "Lattice.h"
#include "Lattice2DIFParameters.h"
#include "LatticeBasis.h"
#include "Layer.h"
#include "LayerDecorator.h"
#include "LayerRoughness.h"
#include "Lattice2DIFParameters.h"
#include "MaterialManager.h"
#include "MesoCrystal.h"
#include "MultiLayer.h"
#include "OpticalFresnel.h"
#include "ParameterPool.h"
#include "Particle.h"
#include "ParticleBuilder.h"
#include "ParticleCoreShell.h"
#include "ParticleDecoration.h"
#include "ParticleInfo.h"
#include "PositionParticleInfo.h"
#include "PythonOutputData.h"
#include "PythonPlusplusHelper.h"
#include "RealParameterWrapper.h"
#include "Simulation.h"
#include "SimulationParameters.h"
#include "IStochasticParameter.h"
#include "StochasticGaussian.h"
#include "StochasticSampledParameter.h"
#include "StochasticDoubleGate.h"
#include "Transform3D.h"
#include "Types.h"
#include "Units.h"
#include "Simulation.pypp.h"

namespace bp = boost::python;

struct Simulation_wrapper : Simulation, bp::wrapper< Simulation > {

    Simulation_wrapper( )
    : Simulation( )
      , bp::wrapper< Simulation >(){
        // null constructor
    
    }

    virtual ::Simulation * clone(  ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone(  );
        else{
            return this->Simulation::clone(  );
        }
    }
    
    ::Simulation * default_clone(  ) const  {
        return Simulation::clone( );
    }

    virtual bool areParametersChanged(  ) {
        if( bp::override func_areParametersChanged = this->get_override( "areParametersChanged" ) )
            return func_areParametersChanged(  );
        else{
            return this->IParameterized::areParametersChanged(  );
        }
    }
    
    bool default_areParametersChanged(  ) {
        return IParameterized::areParametersChanged( );
    }

    virtual ::ParameterPool * createParameterTree(  ) const  {
        if( bp::override func_createParameterTree = this->get_override( "createParameterTree" ) )
            return func_createParameterTree(  );
        else{
            return this->IParameterized::createParameterTree(  );
        }
    }
    
    ::ParameterPool * default_createParameterTree(  ) const  {
        return IParameterized::createParameterTree( );
    }

    virtual void printParameters(  ) const  {
        if( bp::override func_printParameters = this->get_override( "printParameters" ) )
            func_printParameters(  );
        else{
            this->IParameterized::printParameters(  );
        }
    }
    
    void default_printParameters(  ) const  {
        IParameterized::printParameters( );
    }

    virtual void setParametersAreChanged(  ) {
        if( bp::override func_setParametersAreChanged = this->get_override( "setParametersAreChanged" ) )
            func_setParametersAreChanged(  );
        else{
            this->IParameterized::setParametersAreChanged(  );
        }
    }
    
    void default_setParametersAreChanged(  ) {
        IParameterized::setParametersAreChanged( );
    }

};

void register_Simulation_class(){

    bp::class_< Simulation_wrapper, bp::bases< IParameterized, ICloneable >, boost::noncopyable >( "Simulation", bp::init< >() )    
        .def( 
            "clone"
            , (::Simulation * ( ::Simulation::* )(  ) const)(&::Simulation::clone)
            , (::Simulation * ( Simulation_wrapper::* )(  ) const)(&Simulation_wrapper::default_clone)
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "getInstrument"
            , (::Instrument const & ( ::Simulation::* )(  ) const)( &::Simulation::getInstrument )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getOutputData"
            , (::OutputData< double > const * ( ::Simulation::* )(  ) const)( &::Simulation::getOutputData )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "getOutputDataClone"
            , (::OutputData< double > * ( ::Simulation::* )(  ) const)( &::Simulation::getOutputDataClone )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "getSample"
            , (::ISample * ( ::Simulation::* )(  ) const)( &::Simulation::getSample )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "getSimulationParameters"
            , (::SimulationParameters ( ::Simulation::* )(  ) const)( &::Simulation::getSimulationParameters ) )    
        .def( 
            "normalize"
            , (void ( ::Simulation::* )(  ) )( &::Simulation::normalize ) )    
        .def( 
            "prepareSimulation"
            , (void ( ::Simulation::* )(  ) )( &::Simulation::prepareSimulation ) )    
        .def( 
            "runSimulation"
            , (void ( ::Simulation::* )(  ) )( &::Simulation::runSimulation ) )    
        .def( 
            "runSimulationElement"
            , (void ( ::Simulation::* )( ::size_t ) )( &::Simulation::runSimulationElement )
            , ( bp::arg("index") ) )    
        .def( 
            "setBeamIntensity"
            , (void ( ::Simulation::* )( double ) )( &::Simulation::setBeamIntensity )
            , ( bp::arg("intensity") ) )    
        .def( 
            "setBeamParameters"
            , (void ( ::Simulation::* )( double,double,double ) )( &::Simulation::setBeamParameters )
            , ( bp::arg("lambda"), bp::arg("alpha_i"), bp::arg("phi_i") ) )    
        .def( 
            "setDetectorParameters"
            , (void ( ::Simulation::* )( ::OutputData< double > const & ) )( &::Simulation::setDetectorParameters )
            , ( bp::arg("output_data") ) )    
        .def( 
            "setDetectorParameters"
            , (void ( ::Simulation::* )( ::size_t,double,double,::size_t,double,double,bool ) )( &::Simulation::setDetectorParameters )
            , ( bp::arg("n_phi"), bp::arg("phi_f_min"), bp::arg("phi_f_max"), bp::arg("n_alpha"), bp::arg("alpha_f_min"), bp::arg("alpha_f_max"), bp::arg("isgisaxs_style")=(bool)(false) ) )    
        .def( 
            "setDetectorParameters"
            , (void ( ::Simulation::* )( ::DetectorParameters const & ) )( &::Simulation::setDetectorParameters )
            , ( bp::arg("params") ) )    
        .def( 
            "setInstrument"
            , (void ( ::Simulation::* )( ::Instrument const & ) )( &::Simulation::setInstrument )
            , ( bp::arg("instrument") ) )    
        .def( 
            "setSample"
            , (void ( ::Simulation::* )( ::ISample const & ) )( &::Simulation::setSample )
            , ( bp::arg("sample") ) )    
        .def( 
            "setSimulationParameters"
            , (void ( ::Simulation::* )( ::SimulationParameters const & ) )( &::Simulation::setSimulationParameters )
            , ( bp::arg("sim_params") ) )    
        .def( 
            "smearIntensityFromZAxisTilting"
            , (void ( ::Simulation::* )(  ) )( &::Simulation::smearIntensityFromZAxisTilting ) )    
        .def( 
            "areParametersChanged"
            , (bool ( ::IParameterized::* )(  ) )(&::IParameterized::areParametersChanged)
            , (bool ( Simulation_wrapper::* )(  ) )(&Simulation_wrapper::default_areParametersChanged) )    
        .def( 
            "createParameterTree"
            , (::ParameterPool * ( ::IParameterized::* )(  ) const)(&::IParameterized::createParameterTree)
            , (::ParameterPool * ( Simulation_wrapper::* )(  ) const)(&Simulation_wrapper::default_createParameterTree)
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "printParameters"
            , (void ( ::IParameterized::* )(  ) const)(&::IParameterized::printParameters)
            , (void ( Simulation_wrapper::* )(  ) const)(&Simulation_wrapper::default_printParameters) )    
        .def( 
            "setParametersAreChanged"
            , (void ( ::IParameterized::* )(  ) )(&::IParameterized::setParametersAreChanged)
            , (void ( Simulation_wrapper::* )(  ) )(&Simulation_wrapper::default_setParametersAreChanged) );

}

// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "__call_policies.pypp.hpp"
#include "PythonCoreList.h"
#include "IParameterized.pypp.h"

namespace bp = boost::python;

static void registerParameter_5d1f2fc5f481073d42f697a1a20b6450( ::IParameterized & inst, ::std::string const & name, long unsigned int parpointer, ::AttLimits const & limits=AttLimits::limitless( ) ){
    inst.registerParameter(name, reinterpret_cast< double * >( parpointer ), limits);
}

void register_IParameterized_class(){

    { //::IParameterized
        typedef bp::class_< IParameterized > IParameterized_exposer_t;
        IParameterized_exposer_t IParameterized_exposer = IParameterized_exposer_t( "IParameterized", "Manage a local parameter pool, and a tree of child pools.", bp::init< >() );
        bp::scope IParameterized_scope( IParameterized_exposer );
        IParameterized_exposer.def( bp::init< std::string const & >(( bp::arg("name") )) );
        IParameterized_exposer.def( bp::init< IParameterized const & >(( bp::arg("other") )) );
        { //::IParameterized::clearParameterPool
        
            typedef void ( ::IParameterized::*clearParameterPool_function_type)(  ) ;
            
            IParameterized_exposer.def( 
                "clearParameterPool"
                , clearParameterPool_function_type( &::IParameterized::clearParameterPool ) );
        
        }
        { //::IParameterized::createParameterTree
        
            typedef ::ParameterPool * ( ::IParameterized::*createParameterTree_function_type)(  ) const;
            
            IParameterized_exposer.def( 
                "createParameterTree"
                , createParameterTree_function_type( &::IParameterized::createParameterTree )
                , bp::return_value_policy< bp::manage_new_object >()
                , "Creates new parameter pool, with all local parameters and those of its children." );
        
        }
        { //::IParameterized::getParameterPool
        
            typedef ::ParameterPool const * ( ::IParameterized::*getParameterPool_function_type)(  ) const;
            
            IParameterized_exposer.def( 
                "getParameterPool"
                , getParameterPool_function_type( &::IParameterized::getParameterPool )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::IParameterized::operator=
        
            typedef ::IParameterized & ( ::IParameterized::*assign_function_type)( ::IParameterized const & ) ;
            
            IParameterized_exposer.def( 
                "assign"
                , assign_function_type( &::IParameterized::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        { //::IParameterized::printParameters
        
            typedef void ( ::IParameterized::*printParameters_function_type)(  ) const;
            
            IParameterized_exposer.def( 
                "printParameters"
                , printParameters_function_type( &::IParameterized::printParameters )
                , "Creates new parameter pool, with all local parameters and those of its children." );
        
        }
        { //::IParameterized::registerParameter
        
            typedef void ( *registerParameter_function_type )( ::IParameterized &,::std::string const &,long unsigned int,::AttLimits const & );
            
            IParameterized_exposer.def( 
                "registerParameter"
                , registerParameter_function_type( &registerParameter_5d1f2fc5f481073d42f697a1a20b6450 )
                , ( bp::arg("inst"), bp::arg("name"), bp::arg("parpointer"), bp::arg("limits")=AttLimits::limitless( ) ) );
        
        }
        { //::IParameterized::setParameterValue
        
            typedef bool ( ::IParameterized::*setParameterValue_function_type)( ::std::string const &,double ) ;
            
            IParameterized_exposer.def( 
                "setParameterValue"
                , setParameterValue_function_type( &::IParameterized::setParameterValue )
                , ( bp::arg("name"), bp::arg("value") )
                , "Sets the value of the parameter with the given name; returns true in the case of success." );
        
        }
    }

}

// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonCoreList.h"
#include "ParticleLayout.pypp.h"

namespace bp = boost::python;

struct ParticleLayout_wrapper : ParticleLayout, bp::wrapper< ParticleLayout > {

    ParticleLayout_wrapper( )
    : ParticleLayout( )
      , bp::wrapper< ParticleLayout >(){
        // null constructor
    m_pyobj = 0;
    }

    ParticleLayout_wrapper(::IAbstractParticle const & particle )
    : ParticleLayout( boost::ref(particle) )
      , bp::wrapper< ParticleLayout >(){
        // constructor
    m_pyobj = 0;
    }

    ParticleLayout_wrapper(::IAbstractParticle const & particle, double abundance )
    : ParticleLayout( boost::ref(particle), abundance )
      , bp::wrapper< ParticleLayout >(){
        // constructor
    m_pyobj = 0;
    }

    virtual void addParticle( ::IAbstractParticle const & particle ) {
        if( bp::override func_addParticle = this->get_override( "addParticle" ) )
            func_addParticle( boost::ref(particle) );
        else{
            this->ParticleLayout::addParticle( boost::ref(particle) );
        }
    }
    
    void default_addParticle( ::IAbstractParticle const & particle ) {
        ParticleLayout::addParticle( boost::ref(particle) );
    }

    virtual void addParticle( ::IAbstractParticle const & particle, double abundance ) {
        if( bp::override func_addParticle = this->get_override( "addParticle" ) )
            func_addParticle( boost::ref(particle), abundance );
        else{
            this->ParticleLayout::addParticle( boost::ref(particle), abundance );
        }
    }
    
    void default_addParticle( ::IAbstractParticle const & particle, double abundance ) {
        ParticleLayout::addParticle( boost::ref(particle), abundance );
    }

    virtual void addParticle( ::IParticle const & particle, double abundance, ::kvector_t const & position ) {
        if( bp::override func_addParticle = this->get_override( "addParticle" ) )
            func_addParticle( boost::ref(particle), abundance, boost::ref(position) );
        else{
            this->ParticleLayout::addParticle( boost::ref(particle), abundance, boost::ref(position) );
        }
    }
    
    void default_addParticle( ::IParticle const & particle, double abundance, ::kvector_t const & position ) {
        ParticleLayout::addParticle( boost::ref(particle), abundance, boost::ref(position) );
    }

    virtual void addParticle( ::IParticle const & particle, double abundance, ::kvector_t const & position, ::IRotation const & rotation ) {
        if( bp::override func_addParticle = this->get_override( "addParticle" ) )
            func_addParticle( boost::ref(particle), abundance, boost::ref(position), boost::ref(rotation) );
        else{
            this->ParticleLayout::addParticle( boost::ref(particle), abundance, boost::ref(position), boost::ref(rotation) );
        }
    }
    
    void default_addParticle( ::IParticle const & particle, double abundance, ::kvector_t const & position, ::IRotation const & rotation ) {
        ParticleLayout::addParticle( boost::ref(particle), abundance, boost::ref(position), boost::ref(rotation) );
    }

    virtual ::ParticleLayout * clone(  ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone(  );
        else{
            return this->ParticleLayout::clone(  );
        }
    }
    
    ::ParticleLayout * default_clone(  ) const  {
        return ParticleLayout::clone( );
    }

    virtual ::ParticleLayout * cloneInvertB(  ) const  {
        if( bp::override func_cloneInvertB = this->get_override( "cloneInvertB" ) )
            return func_cloneInvertB(  );
        else{
            return this->ParticleLayout::cloneInvertB(  );
        }
    }
    
    ::ParticleLayout * default_cloneInvertB(  ) const  {
        return ParticleLayout::cloneInvertB( );
    }

    virtual double getAbundanceOfParticle( ::std::size_t index ) const  {
        if( bp::override func_getAbundanceOfParticle = this->get_override( "getAbundanceOfParticle" ) )
            return func_getAbundanceOfParticle( index );
        else{
            return this->ParticleLayout::getAbundanceOfParticle( index );
        }
    }
    
    double default_getAbundanceOfParticle( ::std::size_t index ) const  {
        return ParticleLayout::getAbundanceOfParticle( index );
    }

    virtual ::SafePointerVector< IInterferenceFunction > getInterferenceFunctions(  ) const  {
        if( bp::override func_getInterferenceFunctions = this->get_override( "getInterferenceFunctions" ) )
            return func_getInterferenceFunctions(  );
        else{
            return this->ParticleLayout::getInterferenceFunctions(  );
        }
    }
    
    ::SafePointerVector< IInterferenceFunction > default_getInterferenceFunctions(  ) const  {
        return ParticleLayout::getInterferenceFunctions( );
    }

    virtual ::std::size_t getNumberOfInterferenceFunctions(  ) const  {
        if( bp::override func_getNumberOfInterferenceFunctions = this->get_override( "getNumberOfInterferenceFunctions" ) )
            return func_getNumberOfInterferenceFunctions(  );
        else{
            return this->ParticleLayout::getNumberOfInterferenceFunctions(  );
        }
    }
    
    ::std::size_t default_getNumberOfInterferenceFunctions(  ) const  {
        return ParticleLayout::getNumberOfInterferenceFunctions( );
    }

    virtual ::std::size_t getNumberOfParticles(  ) const  {
        if( bp::override func_getNumberOfParticles = this->get_override( "getNumberOfParticles" ) )
            return func_getNumberOfParticles(  );
        else{
            return this->ParticleLayout::getNumberOfParticles(  );
        }
    }
    
    ::std::size_t default_getNumberOfParticles(  ) const  {
        return ParticleLayout::getNumberOfParticles( );
    }

    virtual ::IAbstractParticle const * getParticle( ::std::size_t index ) const  {
        if( bp::override func_getParticle = this->get_override( "getParticle" ) )
            return func_getParticle( index );
        else{
            return this->ParticleLayout::getParticle( index );
        }
    }
    
    ::IAbstractParticle const * default_getParticle( ::std::size_t index ) const  {
        return ParticleLayout::getParticle( index );
    }

    virtual ::SafePointerVector< const IParticle > getParticles(  ) const  {
        if( bp::override func_getParticles = this->get_override( "getParticles" ) )
            return func_getParticles(  );
        else{
            return this->ParticleLayout::getParticles(  );
        }
    }
    
    ::SafePointerVector< const IParticle > default_getParticles(  ) const  {
        return ParticleLayout::getParticles( );
    }

    virtual bool containsMagneticMaterial(  ) const  {
        if( bp::override func_containsMagneticMaterial = this->get_override( "containsMagneticMaterial" ) )
            return func_containsMagneticMaterial(  );
        else{
            return this->ISample::containsMagneticMaterial(  );
        }
    }
    
    bool default_containsMagneticMaterial(  ) const  {
        return ISample::containsMagneticMaterial( );
    }

    virtual ::std::vector< const ISample* > getChildren(  ) const  {
        if( bp::override func_getChildren = this->get_override( "getChildren" ) )
            return func_getChildren(  );
        else{
            return this->ICompositeSample::getChildren(  );
        }
    }
    
    ::std::vector< const ISample* > default_getChildren(  ) const  {
        return ICompositeSample::getChildren( );
    }

    virtual void printSampleTree(  ) {
        if( bp::override func_printSampleTree = this->get_override( "printSampleTree" ) )
            func_printSampleTree(  );
        else{
            this->ISample::printSampleTree(  );
        }
    }
    
    void default_printSampleTree(  ) {
        ISample::printSampleTree( );
    }

    virtual ::std::size_t size(  ) const  {
        if( bp::override func_size = this->get_override( "size" ) )
            return func_size(  );
        else{
            return this->ICompositeSample::size(  );
        }
    }
    
    ::std::size_t default_size(  ) const  {
        return ICompositeSample::size( );
    }

    virtual void transferToCPP(  ) {
        
        if( !this->m_pyobj) {
            this->m_pyobj = boost::python::detail::wrapper_base_::get_owner(*this);
            Py_INCREF(this->m_pyobj);
        }
        
        if( bp::override func_transferToCPP = this->get_override( "transferToCPP" ) )
            func_transferToCPP(  );
        else{
            this->ICloneable::transferToCPP(  );
        }
    }
    
    void default_transferToCPP(  ) {
        
        if( !this->m_pyobj) {
            this->m_pyobj = boost::python::detail::wrapper_base_::get_owner(*this);
            Py_INCREF(this->m_pyobj);
        }
        
        ICloneable::transferToCPP( );
    }

    PyObject* m_pyobj;

};

void register_ParticleLayout_class(){

    { //::ParticleLayout
        typedef bp::class_< ParticleLayout_wrapper, bp::bases< ILayout >, std::auto_ptr< ParticleLayout_wrapper >, boost::noncopyable > ParticleLayout_exposer_t;
        ParticleLayout_exposer_t ParticleLayout_exposer = ParticleLayout_exposer_t( "ParticleLayout", "Decorator class that adds particles to ISample object.", bp::init< >() );
        bp::scope ParticleLayout_scope( ParticleLayout_exposer );
        ParticleLayout_exposer.def( bp::init< IAbstractParticle const & >(( bp::arg("particle") )) );
        ParticleLayout_exposer.def( bp::init< IAbstractParticle const &, double >(( bp::arg("particle"), bp::arg("abundance") )) );
        { //::ParticleLayout::addInterferenceFunction
        
            typedef void ( ::ParticleLayout::*addInterferenceFunction_function_type)( ::IInterferenceFunction const & ) ;
            
            ParticleLayout_exposer.def( 
                "addInterferenceFunction"
                , addInterferenceFunction_function_type( &::ParticleLayout::addInterferenceFunction )
                , ( bp::arg("interference_function") )
                , "Adds interference function." );
        
        }
        { //::ParticleLayout::addParticle
        
            typedef void ( ::ParticleLayout::*addParticle_function_type)( ::IAbstractParticle const & ) ;
            typedef void ( ParticleLayout_wrapper::*default_addParticle_function_type)( ::IAbstractParticle const & ) ;
            
            ParticleLayout_exposer.def( 
                "addParticle"
                , addParticle_function_type(&::ParticleLayout::addParticle)
                , default_addParticle_function_type(&ParticleLayout_wrapper::default_addParticle)
                , ( bp::arg("particle") ) );
        
        }
        { //::ParticleLayout::addParticle
        
            typedef void ( ::ParticleLayout::*addParticle_function_type)( ::IAbstractParticle const &,double ) ;
            typedef void ( ParticleLayout_wrapper::*default_addParticle_function_type)( ::IAbstractParticle const &,double ) ;
            
            ParticleLayout_exposer.def( 
                "addParticle"
                , addParticle_function_type(&::ParticleLayout::addParticle)
                , default_addParticle_function_type(&ParticleLayout_wrapper::default_addParticle)
                , ( bp::arg("particle"), bp::arg("abundance") ) );
        
        }
        { //::ParticleLayout::addParticle
        
            typedef void ( ::ParticleLayout::*addParticle_function_type)( ::IParticle const &,double,::kvector_t const & ) ;
            typedef void ( ParticleLayout_wrapper::*default_addParticle_function_type)( ::IParticle const &,double,::kvector_t const & ) ;
            
            ParticleLayout_exposer.def( 
                "addParticle"
                , addParticle_function_type(&::ParticleLayout::addParticle)
                , default_addParticle_function_type(&ParticleLayout_wrapper::default_addParticle)
                , ( bp::arg("particle"), bp::arg("abundance"), bp::arg("position") ) );
        
        }
        { //::ParticleLayout::addParticle
        
            typedef void ( ::ParticleLayout::*addParticle_function_type)( ::IParticle const &,double,::kvector_t const &,::IRotation const & ) ;
            typedef void ( ParticleLayout_wrapper::*default_addParticle_function_type)( ::IParticle const &,double,::kvector_t const &,::IRotation const & ) ;
            
            ParticleLayout_exposer.def( 
                "addParticle"
                , addParticle_function_type(&::ParticleLayout::addParticle)
                , default_addParticle_function_type(&ParticleLayout_wrapper::default_addParticle)
                , ( bp::arg("particle"), bp::arg("abundance"), bp::arg("position"), bp::arg("rotation") ) );
        
        }
        { //::ParticleLayout::clone
        
            typedef ::ParticleLayout * ( ::ParticleLayout::*clone_function_type)(  ) const;
            typedef ::ParticleLayout * ( ParticleLayout_wrapper::*default_clone_function_type)(  ) const;
            
            ParticleLayout_exposer.def( 
                "clone"
                , clone_function_type(&::ParticleLayout::clone)
                , default_clone_function_type(&ParticleLayout_wrapper::default_clone)
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::ParticleLayout::cloneInvertB
        
            typedef ::ParticleLayout * ( ::ParticleLayout::*cloneInvertB_function_type)(  ) const;
            typedef ::ParticleLayout * ( ParticleLayout_wrapper::*default_cloneInvertB_function_type)(  ) const;
            
            ParticleLayout_exposer.def( 
                "cloneInvertB"
                , cloneInvertB_function_type(&::ParticleLayout::cloneInvertB)
                , default_cloneInvertB_function_type(&ParticleLayout_wrapper::default_cloneInvertB)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::ParticleLayout::getAbundanceOfParticle
        
            typedef double ( ::ParticleLayout::*getAbundanceOfParticle_function_type)( ::std::size_t ) const;
            typedef double ( ParticleLayout_wrapper::*default_getAbundanceOfParticle_function_type)( ::std::size_t ) const;
            
            ParticleLayout_exposer.def( 
                "getAbundanceOfParticle"
                , getAbundanceOfParticle_function_type(&::ParticleLayout::getAbundanceOfParticle)
                , default_getAbundanceOfParticle_function_type(&ParticleLayout_wrapper::default_getAbundanceOfParticle)
                , ( bp::arg("index") ) );
        
        }
        { //::ParticleLayout::getInterferenceFunction
        
            typedef ::IInterferenceFunction const * ( ::ParticleLayout::*getInterferenceFunction_function_type)( ::std::size_t ) const;
            
            ParticleLayout_exposer.def( 
                "getInterferenceFunction"
                , getInterferenceFunction_function_type( &::ParticleLayout::getInterferenceFunction )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "Returns interference function with index." );
        
        }
        { //::ParticleLayout::getInterferenceFunctions
        
            typedef ::SafePointerVector< IInterferenceFunction > ( ::ParticleLayout::*getInterferenceFunctions_function_type)(  ) const;
            typedef ::SafePointerVector< IInterferenceFunction > ( ParticleLayout_wrapper::*default_getInterferenceFunctions_function_type)(  ) const;
            
            ParticleLayout_exposer.def( 
                "getInterferenceFunctions"
                , getInterferenceFunctions_function_type(&::ParticleLayout::getInterferenceFunctions)
                , default_getInterferenceFunctions_function_type(&ParticleLayout_wrapper::default_getInterferenceFunctions) );
        
        }
        { //::ParticleLayout::getNumberOfInterferenceFunctions
        
            typedef ::std::size_t ( ::ParticleLayout::*getNumberOfInterferenceFunctions_function_type)(  ) const;
            typedef ::std::size_t ( ParticleLayout_wrapper::*default_getNumberOfInterferenceFunctions_function_type)(  ) const;
            
            ParticleLayout_exposer.def( 
                "getNumberOfInterferenceFunctions"
                , getNumberOfInterferenceFunctions_function_type(&::ParticleLayout::getNumberOfInterferenceFunctions)
                , default_getNumberOfInterferenceFunctions_function_type(&ParticleLayout_wrapper::default_getNumberOfInterferenceFunctions) );
        
        }
        { //::ParticleLayout::getNumberOfParticles
        
            typedef ::std::size_t ( ::ParticleLayout::*getNumberOfParticles_function_type)(  ) const;
            typedef ::std::size_t ( ParticleLayout_wrapper::*default_getNumberOfParticles_function_type)(  ) const;
            
            ParticleLayout_exposer.def( 
                "getNumberOfParticles"
                , getNumberOfParticles_function_type(&::ParticleLayout::getNumberOfParticles)
                , default_getNumberOfParticles_function_type(&ParticleLayout_wrapper::default_getNumberOfParticles) );
        
        }
        { //::ParticleLayout::getParticle
        
            typedef ::IAbstractParticle const * ( ::ParticleLayout::*getParticle_function_type)( ::std::size_t ) const;
            typedef ::IAbstractParticle const * ( ParticleLayout_wrapper::*default_getParticle_function_type)( ::std::size_t ) const;
            
            ParticleLayout_exposer.def( 
                "getParticle"
                , getParticle_function_type(&::ParticleLayout::getParticle)
                , default_getParticle_function_type(&ParticleLayout_wrapper::default_getParticle)
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::ParticleLayout::getParticles
        
            typedef ::SafePointerVector< const IParticle > ( ::ParticleLayout::*getParticles_function_type)(  ) const;
            typedef ::SafePointerVector< const IParticle > ( ParticleLayout_wrapper::*default_getParticles_function_type)(  ) const;
            
            ParticleLayout_exposer.def( 
                "getParticles"
                , getParticles_function_type(&::ParticleLayout::getParticles)
                , default_getParticles_function_type(&ParticleLayout_wrapper::default_getParticles) );
        
        }
        { //::ISample::containsMagneticMaterial
        
            typedef bool ( ::ISample::*containsMagneticMaterial_function_type)(  ) const;
            typedef bool ( ParticleLayout_wrapper::*default_containsMagneticMaterial_function_type)(  ) const;
            
            ParticleLayout_exposer.def( 
                "containsMagneticMaterial"
                , containsMagneticMaterial_function_type(&::ISample::containsMagneticMaterial)
                , default_containsMagneticMaterial_function_type(&ParticleLayout_wrapper::default_containsMagneticMaterial) );
        
        }
        { //::ICompositeSample::getChildren
        
            typedef ::std::vector< const ISample* > ( ::ICompositeSample::*getChildren_function_type)(  ) const;
            typedef ::std::vector< const ISample* > ( ParticleLayout_wrapper::*default_getChildren_function_type)(  ) const;
            
            ParticleLayout_exposer.def( 
                "getChildren"
                , getChildren_function_type(&::ICompositeSample::getChildren)
                , default_getChildren_function_type(&ParticleLayout_wrapper::default_getChildren) );
        
        }
        { //::ISample::printSampleTree
        
            typedef void ( ::ISample::*printSampleTree_function_type)(  ) ;
            typedef void ( ParticleLayout_wrapper::*default_printSampleTree_function_type)(  ) ;
            
            ParticleLayout_exposer.def( 
                "printSampleTree"
                , printSampleTree_function_type(&::ISample::printSampleTree)
                , default_printSampleTree_function_type(&ParticleLayout_wrapper::default_printSampleTree) );
        
        }
        { //::ICompositeSample::size
        
            typedef ::std::size_t ( ::ICompositeSample::*size_function_type)(  ) const;
            typedef ::std::size_t ( ParticleLayout_wrapper::*default_size_function_type)(  ) const;
            
            ParticleLayout_exposer.def( 
                "size"
                , size_function_type(&::ICompositeSample::size)
                , default_size_function_type(&ParticleLayout_wrapper::default_size) );
        
        }
        { //::ICloneable::transferToCPP
        
            typedef void ( ::ICloneable::*transferToCPP_function_type)(  ) ;
            typedef void ( ParticleLayout_wrapper::*default_transferToCPP_function_type)(  ) ;
            
            ParticleLayout_exposer.def( 
                "transferToCPP"
                , transferToCPP_function_type(&::ICloneable::transferToCPP)
                , default_transferToCPP_function_type(&ParticleLayout_wrapper::default_transferToCPP) );
        
        }
    }

}

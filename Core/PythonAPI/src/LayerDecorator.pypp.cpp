// This file has been generated by Py++.

// BornAgain: simulate and fit scattering at grazing incidence 
//! @brief automatically generated boost::python code for PythonCoreAPI  

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter);
GCC_DIAG_OFF(missing-field-initializers);
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter);
GCC_DIAG_ON(missing-field-initializers);
#include "__call_policies.pypp.hpp"
#include "__convenience.pypp.hpp"
#include "PythonCoreList.h"
#include "LayerDecorator.pypp.h"

namespace bp = boost::python;

struct LayerDecorator_wrapper : LayerDecorator, bp::wrapper< LayerDecorator > {

    LayerDecorator_wrapper(::Layer const & layer, ::IDecoration const & decoration )
    : LayerDecorator( boost::ref(layer), boost::ref(decoration) )
      , bp::wrapper< LayerDecorator >(){
        // constructor
    
    }

    virtual ::LayerDecorator * clone(  ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone(  );
        else{
            return this->LayerDecorator::clone(  );
        }
    }
    
    ::LayerDecorator * default_clone(  ) const  {
        return LayerDecorator::clone( );
    }

    virtual ::IMaterial const * getMaterial(  ) const  {
        if( bp::override func_getMaterial = this->get_override( "getMaterial" ) )
            return func_getMaterial(  );
        else{
            return this->LayerDecorator::getMaterial(  );
        }
    }
    
    ::IMaterial const * default_getMaterial(  ) const  {
        return LayerDecorator::getMaterial( );
    }

    virtual ::complex_t getRefractiveIndex(  ) const  {
        if( bp::override func_getRefractiveIndex = this->get_override( "getRefractiveIndex" ) )
            return func_getRefractiveIndex(  );
        else{
            return this->LayerDecorator::getRefractiveIndex(  );
        }
    }
    
    ::complex_t default_getRefractiveIndex(  ) const  {
        return LayerDecorator::getRefractiveIndex( );
    }

    virtual double getThickness(  ) const  {
        if( bp::override func_getThickness = this->get_override( "getThickness" ) )
            return func_getThickness(  );
        else{
            return this->LayerDecorator::getThickness(  );
        }
    }
    
    double default_getThickness(  ) const  {
        return LayerDecorator::getThickness( );
    }

    virtual double getTotalParticleSurfaceDensity(  ) const  {
        if( bp::override func_getTotalParticleSurfaceDensity = this->get_override( "getTotalParticleSurfaceDensity" ) )
            return func_getTotalParticleSurfaceDensity(  );
        else{
            return this->LayerDecorator::getTotalParticleSurfaceDensity(  );
        }
    }
    
    double default_getTotalParticleSurfaceDensity(  ) const  {
        return LayerDecorator::getTotalParticleSurfaceDensity( );
    }

    virtual void init_parameters(  ) {
        if( bp::override func_init_parameters = this->get_override( "init_parameters" ) )
            func_init_parameters(  );
        else{
            this->LayerDecorator::init_parameters(  );
        }
    }
    
    void default_init_parameters(  ) {
        LayerDecorator::init_parameters( );
    }

    virtual void setThickness( double thickness ) {
        if( bp::override func_setThickness = this->get_override( "setThickness" ) )
            func_setThickness( thickness );
        else{
            this->LayerDecorator::setThickness( thickness );
        }
    }
    
    void default_setThickness( double thickness ) {
        LayerDecorator::setThickness( thickness );
    }

    virtual bool areParametersChanged(  ) {
        if( bp::override func_areParametersChanged = this->get_override( "areParametersChanged" ) )
            return func_areParametersChanged(  );
        else{
            return this->IParameterized::areParametersChanged(  );
        }
    }
    
    bool default_areParametersChanged(  ) {
        return IParameterized::areParametersChanged( );
    }

    virtual void clearParameterPool(  ) {
        if( bp::override func_clearParameterPool = this->get_override( "clearParameterPool" ) )
            func_clearParameterPool(  );
        else{
            this->IParameterized::clearParameterPool(  );
        }
    }
    
    void default_clearParameterPool(  ) {
        IParameterized::clearParameterPool( );
    }

    virtual ::ParameterPool * createParameterTree(  ) const  {
        if( bp::override func_createParameterTree = this->get_override( "createParameterTree" ) )
            return func_createParameterTree(  );
        else{
            return this->IParameterized::createParameterTree(  );
        }
    }
    
    ::ParameterPool * default_createParameterTree(  ) const  {
        return IParameterized::createParameterTree( );
    }

    virtual ::ICompositeSample * getCompositeSample(  ) {
        if( bp::override func_getCompositeSample = this->get_override( "getCompositeSample" ) )
            return func_getCompositeSample(  );
        else{
            return this->ICompositeSample::getCompositeSample(  );
        }
    }
    
    ::ICompositeSample * default_getCompositeSample(  ) {
        return ICompositeSample::getCompositeSample( );
    }

    virtual ::ICompositeSample const * getCompositeSample(  ) const  {
        if( bp::override func_getCompositeSample = this->get_override( "getCompositeSample" ) )
            return func_getCompositeSample(  );
        else{
            return this->ICompositeSample::getCompositeSample(  );
        }
    }
    
    ::ICompositeSample const * default_getCompositeSample(  ) const  {
        return ICompositeSample::getCompositeSample( );
    }

    virtual void printParameters(  ) const  {
        if( bp::override func_printParameters = this->get_override( "printParameters" ) )
            func_printParameters(  );
        else{
            this->IParameterized::printParameters(  );
        }
    }
    
    void default_printParameters(  ) const  {
        IParameterized::printParameters( );
    }

    virtual void registerParameter( ::std::string const & name, double * parpointer ) {
        namespace bpl = boost::python;
        if( bpl::override func_registerParameter = this->get_override( "registerParameter" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_registerParameter.ptr(), name, parpointer );
        }
        else{
            IParameterized::registerParameter( name, parpointer );
        }
    }
    
    static void default_registerParameter( ::IParameterized & inst, ::std::string const & name, long unsigned int parpointer ){
        if( dynamic_cast< LayerDecorator_wrapper * >( boost::addressof( inst ) ) ){
            inst.::IParameterized::registerParameter(name, reinterpret_cast< double * >( parpointer ));
        }
        else{
            inst.registerParameter(name, reinterpret_cast< double * >( parpointer ));
        }
    }

    virtual bool setParameterValue( ::std::string const & name, double value ) {
        if( bp::override func_setParameterValue = this->get_override( "setParameterValue" ) )
            return func_setParameterValue( name, value );
        else{
            return this->IParameterized::setParameterValue( name, value );
        }
    }
    
    bool default_setParameterValue( ::std::string const & name, double value ) {
        return IParameterized::setParameterValue( name, value );
    }

    virtual void setParametersAreChanged(  ) {
        if( bp::override func_setParametersAreChanged = this->get_override( "setParametersAreChanged" ) )
            func_setParametersAreChanged(  );
        else{
            this->IParameterized::setParametersAreChanged(  );
        }
    }
    
    void default_setParametersAreChanged(  ) {
        IParameterized::setParametersAreChanged( );
    }

    virtual ::size_t size(  ) const  {
        if( bp::override func_size = this->get_override( "size" ) )
            return func_size(  );
        else{
            return this->ICompositeSample::size(  );
        }
    }
    
    ::size_t default_size(  ) const  {
        return ICompositeSample::size( );
    }

};

void register_LayerDecorator_class(){

    { //::LayerDecorator
        typedef bp::class_< LayerDecorator_wrapper, bp::bases< Layer >, boost::noncopyable > LayerDecorator_exposer_t;
        LayerDecorator_exposer_t LayerDecorator_exposer = LayerDecorator_exposer_t( "LayerDecorator", bp::init< Layer const &, IDecoration const & >(( bp::arg("layer"), bp::arg("decoration") )) );
        bp::scope LayerDecorator_scope( LayerDecorator_exposer );
        { //::LayerDecorator::clone
        
            typedef ::LayerDecorator * ( ::LayerDecorator::*clone_function_type )(  ) const;
            typedef ::LayerDecorator * ( LayerDecorator_wrapper::*default_clone_function_type )(  ) const;
            
            LayerDecorator_exposer.def( 
                "clone"
                , clone_function_type(&::LayerDecorator::clone)
                , default_clone_function_type(&LayerDecorator_wrapper::default_clone)
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::LayerDecorator::getDecoratedLayer
        
            typedef ::Layer const * ( ::LayerDecorator::*getDecoratedLayer_function_type )(  ) const;
            
            LayerDecorator_exposer.def( 
                "getDecoratedLayer"
                , getDecoratedLayer_function_type( &::LayerDecorator::getDecoratedLayer )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::LayerDecorator::getDecoration
        
            typedef ::IDecoration const * ( ::LayerDecorator::*getDecoration_function_type )(  ) const;
            
            LayerDecorator_exposer.def( 
                "getDecoration"
                , getDecoration_function_type( &::LayerDecorator::getDecoration )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::LayerDecorator::getMaterial
        
            typedef ::IMaterial const * ( ::LayerDecorator::*getMaterial_function_type )(  ) const;
            typedef ::IMaterial const * ( LayerDecorator_wrapper::*default_getMaterial_function_type )(  ) const;
            
            LayerDecorator_exposer.def( 
                "getMaterial"
                , getMaterial_function_type(&::LayerDecorator::getMaterial)
                , default_getMaterial_function_type(&LayerDecorator_wrapper::default_getMaterial)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::LayerDecorator::getRefractiveIndex
        
            typedef ::complex_t ( ::LayerDecorator::*getRefractiveIndex_function_type )(  ) const;
            typedef ::complex_t ( LayerDecorator_wrapper::*default_getRefractiveIndex_function_type )(  ) const;
            
            LayerDecorator_exposer.def( 
                "getRefractiveIndex"
                , getRefractiveIndex_function_type(&::LayerDecorator::getRefractiveIndex)
                , default_getRefractiveIndex_function_type(&LayerDecorator_wrapper::default_getRefractiveIndex) );
        
        }
        { //::LayerDecorator::getThickness
        
            typedef double ( ::LayerDecorator::*getThickness_function_type )(  ) const;
            typedef double ( LayerDecorator_wrapper::*default_getThickness_function_type )(  ) const;
            
            LayerDecorator_exposer.def( 
                "getThickness"
                , getThickness_function_type(&::LayerDecorator::getThickness)
                , default_getThickness_function_type(&LayerDecorator_wrapper::default_getThickness) );
        
        }
        { //::LayerDecorator::getTotalParticleSurfaceDensity
        
            typedef double ( ::LayerDecorator::*getTotalParticleSurfaceDensity_function_type )(  ) const;
            typedef double ( LayerDecorator_wrapper::*default_getTotalParticleSurfaceDensity_function_type )(  ) const;
            
            LayerDecorator_exposer.def( 
                "getTotalParticleSurfaceDensity"
                , getTotalParticleSurfaceDensity_function_type(&::LayerDecorator::getTotalParticleSurfaceDensity)
                , default_getTotalParticleSurfaceDensity_function_type(&LayerDecorator_wrapper::default_getTotalParticleSurfaceDensity) );
        
        }
        { //::LayerDecorator::init_parameters
        
            typedef void ( ::LayerDecorator::*init_parameters_function_type )(  ) ;
            typedef void ( LayerDecorator_wrapper::*default_init_parameters_function_type )(  ) ;
            
            LayerDecorator_exposer.def( 
                "init_parameters"
                , init_parameters_function_type(&::LayerDecorator::init_parameters)
                , default_init_parameters_function_type(&LayerDecorator_wrapper::default_init_parameters) );
        
        }
        { //::LayerDecorator::setThickness
        
            typedef void ( ::LayerDecorator::*setThickness_function_type )( double ) ;
            typedef void ( LayerDecorator_wrapper::*default_setThickness_function_type )( double ) ;
            
            LayerDecorator_exposer.def( 
                "setThickness"
                , setThickness_function_type(&::LayerDecorator::setThickness)
                , default_setThickness_function_type(&LayerDecorator_wrapper::default_setThickness)
                , ( bp::arg("thickness") ) );
        
        }
        { //::IParameterized::areParametersChanged
        
            typedef bool ( ::IParameterized::*areParametersChanged_function_type )(  ) ;
            typedef bool ( LayerDecorator_wrapper::*default_areParametersChanged_function_type )(  ) ;
            
            LayerDecorator_exposer.def( 
                "areParametersChanged"
                , areParametersChanged_function_type(&::IParameterized::areParametersChanged)
                , default_areParametersChanged_function_type(&LayerDecorator_wrapper::default_areParametersChanged) );
        
        }
        { //::IParameterized::clearParameterPool
        
            typedef void ( ::IParameterized::*clearParameterPool_function_type )(  ) ;
            typedef void ( LayerDecorator_wrapper::*default_clearParameterPool_function_type )(  ) ;
            
            LayerDecorator_exposer.def( 
                "clearParameterPool"
                , clearParameterPool_function_type(&::IParameterized::clearParameterPool)
                , default_clearParameterPool_function_type(&LayerDecorator_wrapper::default_clearParameterPool) );
        
        }
        { //::IParameterized::createParameterTree
        
            typedef ::ParameterPool * ( ::IParameterized::*createParameterTree_function_type )(  ) const;
            typedef ::ParameterPool * ( LayerDecorator_wrapper::*default_createParameterTree_function_type )(  ) const;
            
            LayerDecorator_exposer.def( 
                "createParameterTree"
                , createParameterTree_function_type(&::IParameterized::createParameterTree)
                , default_createParameterTree_function_type(&LayerDecorator_wrapper::default_createParameterTree)
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::ICompositeSample::getCompositeSample
        
            typedef ::ICompositeSample * ( ::ICompositeSample::*getCompositeSample_function_type )(  ) ;
            typedef ::ICompositeSample * ( LayerDecorator_wrapper::*default_getCompositeSample_function_type )(  ) ;
            
            LayerDecorator_exposer.def( 
                "getCompositeSample"
                , getCompositeSample_function_type(&::ICompositeSample::getCompositeSample)
                , default_getCompositeSample_function_type(&LayerDecorator_wrapper::default_getCompositeSample)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::ICompositeSample::getCompositeSample
        
            typedef ::ICompositeSample const * ( ::ICompositeSample::*getCompositeSample_function_type )(  ) const;
            typedef ::ICompositeSample const * ( LayerDecorator_wrapper::*default_getCompositeSample_function_type )(  ) const;
            
            LayerDecorator_exposer.def( 
                "getCompositeSample"
                , getCompositeSample_function_type(&::ICompositeSample::getCompositeSample)
                , default_getCompositeSample_function_type(&LayerDecorator_wrapper::default_getCompositeSample)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::IParameterized::printParameters
        
            typedef void ( ::IParameterized::*printParameters_function_type )(  ) const;
            typedef void ( LayerDecorator_wrapper::*default_printParameters_function_type )(  ) const;
            
            LayerDecorator_exposer.def( 
                "printParameters"
                , printParameters_function_type(&::IParameterized::printParameters)
                , default_printParameters_function_type(&LayerDecorator_wrapper::default_printParameters) );
        
        }
        { //::IParameterized::registerParameter
        
            typedef void ( *default_registerParameter_function_type )( ::IParameterized &,::std::string const &,long unsigned int );
            
            LayerDecorator_exposer.def( 
                "registerParameter"
                , default_registerParameter_function_type( &LayerDecorator_wrapper::default_registerParameter )
                , ( bp::arg("inst"), bp::arg("name"), bp::arg("parpointer") ) );
        
        }
        { //::IParameterized::setParameterValue
        
            typedef bool ( ::IParameterized::*setParameterValue_function_type )( ::std::string const &,double ) ;
            typedef bool ( LayerDecorator_wrapper::*default_setParameterValue_function_type )( ::std::string const &,double ) ;
            
            LayerDecorator_exposer.def( 
                "setParameterValue"
                , setParameterValue_function_type(&::IParameterized::setParameterValue)
                , default_setParameterValue_function_type(&LayerDecorator_wrapper::default_setParameterValue)
                , ( bp::arg("name"), bp::arg("value") ) );
        
        }
        { //::IParameterized::setParametersAreChanged
        
            typedef void ( ::IParameterized::*setParametersAreChanged_function_type )(  ) ;
            typedef void ( LayerDecorator_wrapper::*default_setParametersAreChanged_function_type )(  ) ;
            
            LayerDecorator_exposer.def( 
                "setParametersAreChanged"
                , setParametersAreChanged_function_type(&::IParameterized::setParametersAreChanged)
                , default_setParametersAreChanged_function_type(&LayerDecorator_wrapper::default_setParametersAreChanged) );
        
        }
        { //::ICompositeSample::size
        
            typedef ::size_t ( ::ICompositeSample::*size_function_type )(  ) const;
            typedef ::size_t ( LayerDecorator_wrapper::*default_size_function_type )(  ) const;
            
            LayerDecorator_exposer.def( 
                "size"
                , size_function_type(&::ICompositeSample::size)
                , default_size_function_type(&LayerDecorator_wrapper::default_size) );
        
        }
    }

}

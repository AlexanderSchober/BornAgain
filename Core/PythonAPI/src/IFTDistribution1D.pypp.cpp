// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonCoreList.h"
#include "IFTDistribution1D.pypp.h"

namespace bp = boost::python;

struct IFTDistribution1D_wrapper : IFTDistribution1D, bp::wrapper< IFTDistribution1D > {

    IFTDistribution1D_wrapper(double omega )
    : IFTDistribution1D( omega )
      , bp::wrapper< IFTDistribution1D >(){
        // constructor
    m_pyobj = 0;
    }

    virtual ::IFTDistribution1D * clone(  ) const {
        bp::override func_clone = this->get_override( "clone" );
        return func_clone(  );
    }

    virtual double evaluate( double q ) const {
        bp::override func_evaluate = this->get_override( "evaluate" );
        return func_evaluate( q );
    }

    PyObject* m_pyobj;

};

void register_IFTDistribution1D_class(){

    { //::IFTDistribution1D
        typedef bp::class_< IFTDistribution1D_wrapper, bp::bases< IParameterized >, std::auto_ptr< IFTDistribution1D_wrapper >, boost::noncopyable > IFTDistribution1D_exposer_t;
        IFTDistribution1D_exposer_t IFTDistribution1D_exposer = IFTDistribution1D_exposer_t( "IFTDistribution1D", "Interface for 1 dimensional distributions in Fourier spac.", bp::init< double >(( bp::arg("omega") )) );
        bp::scope IFTDistribution1D_scope( IFTDistribution1D_exposer );
        { //::IFTDistribution1D::clone
        
            typedef ::IFTDistribution1D * ( ::IFTDistribution1D::*clone_function_type)(  ) const;
            
            IFTDistribution1D_exposer.def( 
                "clone"
                , bp::pure_virtual( clone_function_type(&::IFTDistribution1D::clone) )
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::IFTDistribution1D::evaluate
        
            typedef double ( ::IFTDistribution1D::*evaluate_function_type)( double ) const;
            
            IFTDistribution1D_exposer.def( 
                "evaluate"
                , bp::pure_virtual( evaluate_function_type(&::IFTDistribution1D::evaluate) )
                , ( bp::arg("q") ) );
        
        }
        { //::IFTDistribution1D::getOmega
        
            typedef double ( ::IFTDistribution1D::*getOmega_function_type)(  ) const;
            
            IFTDistribution1D_exposer.def( 
                "getOmega"
                , getOmega_function_type( &::IFTDistribution1D::getOmega ) );
        
        }
        { //::IFTDistribution1D::setOmega
        
            typedef void ( ::IFTDistribution1D::*setOmega_function_type)( double ) ;
            
            IFTDistribution1D_exposer.def( 
                "setOmega"
                , setOmega_function_type( &::IFTDistribution1D::setOmega )
                , ( bp::arg("omega") ) );
        
        }
    }

}

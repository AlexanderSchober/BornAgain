// This file has been generated by Py++.

#include "boost/python.hpp"
#include "BasicVector3D.h"
#include "Experiment.h"
#include "FormFactorCylinder.h"
#include "FormFactorFullSphere.h"
#include "FormFactorPyramid.h"
#include "GISASExperiment.h"
#include "HomogeneousMaterial.h"
#include "IClusteredParticles.h"
#include "ICompositeSample.h"
#include "IFormFactor.h"
#include "IInterferenceFunction.h"
#include "InterferenceFunctionNone.h"
#include "InterferenceFunction1DParaCrystal.h"
#include "IMaterial.h"
#include "ISample.h"
#include "ISingleton.h"
#include "Lattice.h"
#include "LatticeBasis.h"
#include "Layer.h"
#include "LayerDecorator.h"
#include "LayerRoughness.h"
#include "MaterialManager.h"
#include "MesoCrystal.h"
#include "MultiLayer.h"
#include "Particle.h"
#include "Crystal.h"
#include "ParticleDecoration.h"
#include "OpticalFresnel.h"
#include "ParameterPool.h"
#include "PythonOutputData.h"
#include "PythonPlusplusHelper.h"
#include "Transform3D.h"
#include "Units.h"
#include "PythonInterface_classes_2.h"

namespace bp = boost::python;

struct ReflectX3D_wrapper : Geometry::ReflectX3D, bp::wrapper< Geometry::ReflectX3D > {

    ReflectX3D_wrapper(Geometry::ReflectX3D const & arg )
    : Geometry::ReflectX3D( arg )
      , bp::wrapper< Geometry::ReflectX3D >(){
        // copy constructor
        
    }

    ReflectX3D_wrapper(double x=0 )
    : Geometry::ReflectX3D( x )
      , bp::wrapper< Geometry::ReflectX3D >(){
        // constructor
    
    }

    void setTransform( double XX, double XY, double XZ, double DX, double YX, double YY, double YZ, double DY, double ZX, double ZY, double ZZ, double DZ ){
        Geometry::Transform3D::setTransform( XX, XY, XZ, DX, YX, YY, YZ, DY, ZX, ZY, ZZ, DZ );
    }

};

struct ReflectY3D_wrapper : Geometry::ReflectY3D, bp::wrapper< Geometry::ReflectY3D > {

    ReflectY3D_wrapper(Geometry::ReflectY3D const & arg )
    : Geometry::ReflectY3D( arg )
      , bp::wrapper< Geometry::ReflectY3D >(){
        // copy constructor
        
    }

    ReflectY3D_wrapper(double y=0 )
    : Geometry::ReflectY3D( y )
      , bp::wrapper< Geometry::ReflectY3D >(){
        // constructor
    
    }

    void setTransform( double XX, double XY, double XZ, double DX, double YX, double YY, double YZ, double DY, double ZX, double ZY, double ZZ, double DZ ){
        Geometry::Transform3D::setTransform( XX, XY, XZ, DX, YX, YY, YZ, DY, ZX, ZY, ZZ, DZ );
    }

};

struct ReflectZ3D_wrapper : Geometry::ReflectZ3D, bp::wrapper< Geometry::ReflectZ3D > {

    ReflectZ3D_wrapper(Geometry::ReflectZ3D const & arg )
    : Geometry::ReflectZ3D( arg )
      , bp::wrapper< Geometry::ReflectZ3D >(){
        // copy constructor
        
    }

    ReflectZ3D_wrapper(double z=0 )
    : Geometry::ReflectZ3D( z )
      , bp::wrapper< Geometry::ReflectZ3D >(){
        // constructor
    
    }

    void setTransform( double XX, double XY, double XZ, double DX, double YX, double YY, double YZ, double DY, double ZX, double ZY, double ZZ, double DZ ){
        Geometry::Transform3D::setTransform( XX, XY, XZ, DX, YX, YY, YZ, DY, ZX, ZY, ZZ, DZ );
    }

};

struct Transform3D_wrapper : Geometry::Transform3D, bp::wrapper< Geometry::Transform3D > {

    Transform3D_wrapper(double XX, double XY, double XZ, double DX, double YX, double YY, double YZ, double DY, double ZX, double ZY, double ZZ, double DZ )
    : Geometry::Transform3D( XX, XY, XZ, DX, YX, YY, YZ, DY, ZX, ZY, ZZ, DZ )
      , bp::wrapper< Geometry::Transform3D >(){
        // constructor
    
    }

    Transform3D_wrapper( )
    : Geometry::Transform3D( )
      , bp::wrapper< Geometry::Transform3D >(){
        // null constructor
    
    }

    Transform3D_wrapper(::Geometry::Point3D< double > const & fr0, ::Geometry::Point3D< double > const & fr1, ::Geometry::Point3D< double > const & fr2, ::Geometry::Point3D< double > const & to0, ::Geometry::Point3D< double > const & to1, ::Geometry::Point3D< double > const & to2 )
    : Geometry::Transform3D( boost::ref(fr0), boost::ref(fr1), boost::ref(fr2), boost::ref(to0), boost::ref(to1), boost::ref(to2) )
      , bp::wrapper< Geometry::Transform3D >(){
        // constructor
    
    }

    Transform3D_wrapper(::Geometry::Transform3D const & m )
    : Geometry::Transform3D( boost::ref(m) )
      , bp::wrapper< Geometry::Transform3D >(){
        // copy constructor
    
    }

    void setTransform( double XX, double XY, double XZ, double DX, double YX, double YY, double YZ, double DY, double ZX, double ZY, double ZZ, double DZ ){
        Geometry::Transform3D::setTransform( XX, XY, XZ, DX, YX, YY, YZ, DY, ZX, ZY, ZZ, DZ );
    }

};

struct Rotate3D_wrapper : Geometry::Rotate3D, bp::wrapper< Geometry::Rotate3D > {

    Rotate3D_wrapper(Geometry::Rotate3D const & arg )
    : Geometry::Rotate3D( arg )
      , bp::wrapper< Geometry::Rotate3D >(){
        // copy constructor
        
    }

    Rotate3D_wrapper( )
    : Geometry::Rotate3D( )
      , bp::wrapper< Geometry::Rotate3D >(){
        // null constructor
    
    }

    Rotate3D_wrapper(double a, ::Geometry::Point3D< double > const & p1, ::Geometry::Point3D< double > const & p2 )
    : Geometry::Rotate3D( a, boost::ref(p1), boost::ref(p2) )
      , bp::wrapper< Geometry::Rotate3D >(){
        // constructor
    
    }

    void setTransform( double XX, double XY, double XZ, double DX, double YX, double YY, double YZ, double DY, double ZX, double ZY, double ZZ, double DZ ){
        Geometry::Transform3D::setTransform( XX, XY, XZ, DX, YX, YY, YZ, DY, ZX, ZY, ZZ, DZ );
    }

};

struct RotateX3D_wrapper : Geometry::RotateX3D, bp::wrapper< Geometry::RotateX3D > {

    RotateX3D_wrapper(Geometry::RotateX3D const & arg )
    : Geometry::RotateX3D( arg )
      , bp::wrapper< Geometry::RotateX3D >(){
        // copy constructor
        
    }

    RotateX3D_wrapper( )
    : Geometry::RotateX3D( )
      , bp::wrapper< Geometry::RotateX3D >(){
        // null constructor
    
    }

    RotateX3D_wrapper(double a )
    : Geometry::RotateX3D( a )
      , bp::wrapper< Geometry::RotateX3D >(){
        // constructor
    
    }

    void setTransform( double XX, double XY, double XZ, double DX, double YX, double YY, double YZ, double DY, double ZX, double ZY, double ZZ, double DZ ){
        Geometry::Transform3D::setTransform( XX, XY, XZ, DX, YX, YY, YZ, DY, ZX, ZY, ZZ, DZ );
    }

};

struct RotateY3D_wrapper : Geometry::RotateY3D, bp::wrapper< Geometry::RotateY3D > {

    RotateY3D_wrapper(Geometry::RotateY3D const & arg )
    : Geometry::RotateY3D( arg )
      , bp::wrapper< Geometry::RotateY3D >(){
        // copy constructor
        
    }

    RotateY3D_wrapper( )
    : Geometry::RotateY3D( )
      , bp::wrapper< Geometry::RotateY3D >(){
        // null constructor
    
    }

    RotateY3D_wrapper(double a )
    : Geometry::RotateY3D( a )
      , bp::wrapper< Geometry::RotateY3D >(){
        // constructor
    
    }

    void setTransform( double XX, double XY, double XZ, double DX, double YX, double YY, double YZ, double DY, double ZX, double ZY, double ZZ, double DZ ){
        Geometry::Transform3D::setTransform( XX, XY, XZ, DX, YX, YY, YZ, DY, ZX, ZY, ZZ, DZ );
    }

};

struct RotateZ3D_wrapper : Geometry::RotateZ3D, bp::wrapper< Geometry::RotateZ3D > {

    RotateZ3D_wrapper(Geometry::RotateZ3D const & arg )
    : Geometry::RotateZ3D( arg )
      , bp::wrapper< Geometry::RotateZ3D >(){
        // copy constructor
        
    }

    RotateZ3D_wrapper( )
    : Geometry::RotateZ3D( )
      , bp::wrapper< Geometry::RotateZ3D >(){
        // null constructor
    
    }

    RotateZ3D_wrapper(double a )
    : Geometry::RotateZ3D( a )
      , bp::wrapper< Geometry::RotateZ3D >(){
        // constructor
    
    }

    void setTransform( double XX, double XY, double XZ, double DX, double YX, double YY, double YZ, double DY, double ZX, double ZY, double ZZ, double DZ ){
        Geometry::Transform3D::setTransform( XX, XY, XZ, DX, YX, YY, YZ, DY, ZX, ZY, ZZ, DZ );
    }

};

struct IMaterial_wrapper : IMaterial, bp::wrapper< IMaterial > {

    IMaterial_wrapper( )
    : IMaterial( )
      , bp::wrapper< IMaterial >(){
        // null constructor
    
    }

    IMaterial_wrapper(::std::string const & name )
    : IMaterial( name )
      , bp::wrapper< IMaterial >(){
        // constructor
    
    }

    IMaterial_wrapper(::IMaterial const & other )
    : IMaterial( boost::ref(other) )
      , bp::wrapper< IMaterial >(){
        // copy constructor
    
    }

    virtual void print( ::std::ostream & ostr ) const {
        if( bp::override func_print = this->get_override( "print" ) )
            func_print( boost::ref(ostr) );
        else{
            this->IMaterial::print( boost::ref(ostr) );
        }
    }
    
    virtual void default_print( ::std::ostream & ostr ) const {
        IMaterial::print( boost::ref(ostr) );
    }

};

struct HomogeneousMaterial_wrapper : HomogeneousMaterial, bp::wrapper< HomogeneousMaterial > {

    HomogeneousMaterial_wrapper( )
    : HomogeneousMaterial( )
      , bp::wrapper< HomogeneousMaterial >(){
        // null constructor
    
    }

    HomogeneousMaterial_wrapper(::complex_t refractive_index )
    : HomogeneousMaterial( refractive_index )
      , bp::wrapper< HomogeneousMaterial >(){
        // constructor
    
    }

    HomogeneousMaterial_wrapper(::std::string const & name, ::complex_t refractive_index )
    : HomogeneousMaterial( name, refractive_index )
      , bp::wrapper< HomogeneousMaterial >(){
        // constructor
    
    }

    HomogeneousMaterial_wrapper(::HomogeneousMaterial const & other )
    : HomogeneousMaterial( boost::ref(other) )
      , bp::wrapper< HomogeneousMaterial >(){
        // copy constructor
    
    }

    virtual void print( ::std::ostream & ostr ) const {
        if( bp::override func_print = this->get_override( "print" ) )
            func_print( boost::ref(ostr) );
        else{
            this->HomogeneousMaterial::print( boost::ref(ostr) );
        }
    }
    
    virtual void default_print( ::std::ostream & ostr ) const {
        HomogeneousMaterial::print( boost::ref(ostr) );
    }

};

struct IFormFactorDecorator_wrapper : IFormFactorDecorator, bp::wrapper< IFormFactorDecorator > {

    IFormFactorDecorator_wrapper(::IFormFactor * p_form_factor )
    : IFormFactorDecorator( boost::python::ptr(p_form_factor) )
      , bp::wrapper< IFormFactorDecorator >(){
        // constructor
    
    }

    virtual ::IFormFactorDecorator * clone(  ) const {
        bp::override func_clone = this->get_override( "clone" );
        return func_clone(  );
    }

    virtual void setAmbientRefractiveIndex( ::complex_t refractive_index ) {
        if( bp::override func_setAmbientRefractiveIndex = this->get_override( "setAmbientRefractiveIndex" ) )
            func_setAmbientRefractiveIndex( refractive_index );
        else{
            this->IFormFactorDecorator::setAmbientRefractiveIndex( refractive_index );
        }
    }
    
    void default_setAmbientRefractiveIndex( ::complex_t refractive_index ) {
        IFormFactorDecorator::setAmbientRefractiveIndex( refractive_index );
    }

    virtual ::ParameterPool * createParameterTree(  ) {
        if( bp::override func_createParameterTree = this->get_override( "createParameterTree" ) )
            return func_createParameterTree(  );
        else{
            return this->ISample::createParameterTree(  );
        }
    }
    
    ::ParameterPool * default_createParameterTree(  ) {
        return ISample::createParameterTree( );
    }

    virtual ::complex_t evaluate( ::cvector_t k_i, ::cvector_t k_f, double alpha_i, double alpha_f ) const {
        bp::override func_evaluate = this->get_override( "evaluate" );
        return func_evaluate( k_i, k_f, alpha_i, alpha_f );
    }

    virtual int getNumberOfStochasticParameters(  ) const  {
        if( bp::override func_getNumberOfStochasticParameters = this->get_override( "getNumberOfStochasticParameters" ) )
            return func_getNumberOfStochasticParameters(  );
        else{
            return this->IFormFactor::getNumberOfStochasticParameters(  );
        }
    }
    
    int default_getNumberOfStochasticParameters(  ) const  {
        return IFormFactor::getNumberOfStochasticParameters( );
    }

    virtual double getVolume(  ) const  {
        if( bp::override func_getVolume = this->get_override( "getVolume" ) )
            return func_getVolume(  );
        else{
            return this->IFormFactor::getVolume(  );
        }
    }
    
    double default_getVolume(  ) const  {
        return IFormFactor::getVolume( );
    }

    virtual void walk_and_print(  ) {
        if( bp::override func_walk_and_print = this->get_override( "walk_and_print" ) )
            func_walk_and_print(  );
        else{
            this->ISample::walk_and_print(  );
        }
    }
    
    void default_walk_and_print(  ) {
        ISample::walk_and_print( );
    }

};

struct IInterferenceFunction_wrapper : IInterferenceFunction, bp::wrapper< IInterferenceFunction > {

    IInterferenceFunction_wrapper()
    : IInterferenceFunction()
      , bp::wrapper< IInterferenceFunction >(){
        // null constructor
        
    }

    virtual ::IInterferenceFunction * clone(  ) const {
        bp::override func_clone = this->get_override( "clone" );
        return func_clone(  );
    }

    virtual double evaluate( ::cvector_t q ) const {
        bp::override func_evaluate = this->get_override( "evaluate" );
        return func_evaluate( q );
    }

    virtual ::ParameterPool * createParameterTree(  ) {
        if( bp::override func_createParameterTree = this->get_override( "createParameterTree" ) )
            return func_createParameterTree(  );
        else{
            return this->ISample::createParameterTree(  );
        }
    }
    
    ::ParameterPool * default_createParameterTree(  ) {
        return ISample::createParameterTree( );
    }

    virtual void walk_and_print(  ) {
        if( bp::override func_walk_and_print = this->get_override( "walk_and_print" ) )
            func_walk_and_print(  );
        else{
            this->ISample::walk_and_print(  );
        }
    }
    
    void default_walk_and_print(  ) {
        ISample::walk_and_print( );
    }

};

struct ISingleton_less__MaterialManager__greater__wrapper : ISingleton< MaterialManager >, bp::wrapper< ISingleton< MaterialManager > > {

    ISingleton_less__MaterialManager__greater__wrapper( )
    : ISingleton<MaterialManager>( )
      , bp::wrapper< ISingleton< MaterialManager > >(){
        // null constructor
    
    }

    static void create_singleton(  ){
        ISingleton< MaterialManager >::create_singleton(  );
    }

    static void onDeadReference(  ){
        ISingleton< MaterialManager >::onDeadReference(  );
    }

};

void register_classes_2(){

    { //::Geometry::BasicVector3D< std::complex< double > >
        typedef bp::class_< Geometry::BasicVector3D< std::complex< double > > > cvector_t_exposer_t;
        cvector_t_exposer_t cvector_t_exposer = cvector_t_exposer_t( "cvector_t", bp::init< >() );
        bp::scope cvector_t_scope( cvector_t_exposer );
        bp::scope().attr("X") = (int)Geometry::BasicVector3D<std::complex<double> >::X;
        bp::scope().attr("Y") = (int)Geometry::BasicVector3D<std::complex<double> >::Y;
        bp::scope().attr("Z") = (int)Geometry::BasicVector3D<std::complex<double> >::Z;
        bp::scope().attr("NUM_COORDINATES") = (int)Geometry::BasicVector3D<std::complex<double> >::NUM_COORDINATES;
        bp::scope().attr("SIZE") = (int)Geometry::BasicVector3D<std::complex<double> >::SIZE;
        cvector_t_exposer.def( bp::init< std::complex< double >, std::complex< double >, std::complex< double > >(( bp::arg("x1"), bp::arg("y1"), bp::arg("z1") )) );
        { //::Geometry::BasicVector3D< std::complex< double > >::angle
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > ( exported_class_t::*angle_function_type )( ::Geometry::BasicVector3D< std::complex< double > > const & ) const;
            
            cvector_t_exposer.def( 
                "angle"
                , angle_function_type( &::Geometry::BasicVector3D< std::complex< double > >::angle )
                , ( bp::arg("v") ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::cosTheta
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > ( exported_class_t::*cosTheta_function_type )(  ) const;
            
            cvector_t_exposer.def( 
                "cosTheta"
                , cosTheta_function_type( &::Geometry::BasicVector3D< std::complex< double > >::cosTheta ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::cross
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::Geometry::BasicVector3D< std::complex< double > > ( exported_class_t::*cross_function_type )( ::Geometry::BasicVector3D< std::complex< double > > const & ) const;
            
            cvector_t_exposer.def( 
                "cross"
                , cross_function_type( &::Geometry::BasicVector3D< std::complex< double > >::cross )
                , ( bp::arg("v") ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::dot
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > ( exported_class_t::*dot_function_type )( ::Geometry::BasicVector3D< std::complex< double > > const & ) const;
            
            cvector_t_exposer.def( 
                "dot"
                , dot_function_type( &::Geometry::BasicVector3D< std::complex< double > >::dot )
                , ( bp::arg("v") ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::getPhi
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > ( exported_class_t::*getPhi_function_type )(  ) const;
            
            cvector_t_exposer.def( 
                "getPhi"
                , getPhi_function_type( &::Geometry::BasicVector3D< std::complex< double > >::getPhi ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::getR
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > ( exported_class_t::*getR_function_type )(  ) const;
            
            cvector_t_exposer.def( 
                "getR"
                , getR_function_type( &::Geometry::BasicVector3D< std::complex< double > >::getR ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::getTheta
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > ( exported_class_t::*getTheta_function_type )(  ) const;
            
            cvector_t_exposer.def( 
                "getTheta"
                , getTheta_function_type( &::Geometry::BasicVector3D< std::complex< double > >::getTheta ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::mag
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > ( exported_class_t::*mag_function_type )(  ) const;
            
            cvector_t_exposer.def( 
                "mag"
                , mag_function_type( &::Geometry::BasicVector3D< std::complex< double > >::mag ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::mag2
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > ( exported_class_t::*mag2_function_type )(  ) const;
            
            cvector_t_exposer.def( 
                "mag2"
                , mag2_function_type( &::Geometry::BasicVector3D< std::complex< double > >::mag2 ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::magxy
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > ( exported_class_t::*magxy_function_type )(  ) const;
            
            cvector_t_exposer.def( 
                "magxy"
                , magxy_function_type( &::Geometry::BasicVector3D< std::complex< double > >::magxy ) );
        
        }
        cvector_t_exposer.def( bp::self *= bp::other< double >() );
        cvector_t_exposer.def( bp::self += bp::self );
        cvector_t_exposer.def( bp::self -= bp::self );
        cvector_t_exposer.def( bp::self /= bp::other< double >() );
        { //::Geometry::BasicVector3D< std::complex< double > >::operator=
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::Geometry::BasicVector3D< std::complex< double > > & ( exported_class_t::*assign_function_type )( ::Geometry::BasicVector3D< std::complex< double > > const & ) ;
            
            cvector_t_exposer.def( 
                "assign"
                , assign_function_type( &::Geometry::BasicVector3D< std::complex< double > >::operator= )
                , ( bp::arg("v") )
                , bp::return_self< >() );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::operator[]
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > ( exported_class_t::*__getitem___function_type )( int ) const;
            
            cvector_t_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::Geometry::BasicVector3D< std::complex< double > >::operator[] )
                , ( bp::arg("i") ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::operator[]
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > & ( exported_class_t::*__getitem___function_type )( int ) ;
            
            cvector_t_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::Geometry::BasicVector3D< std::complex< double > >::operator[] )
                , ( bp::arg("i") )
                , bp::return_internal_reference< >() );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::orthogonal
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::Geometry::BasicVector3D< std::complex< double > > ( exported_class_t::*orthogonal_function_type )(  ) const;
            
            cvector_t_exposer.def( 
                "orthogonal"
                , orthogonal_function_type( &::Geometry::BasicVector3D< std::complex< double > >::orthogonal ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::perp
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > ( exported_class_t::*perp_function_type )(  ) const;
            
            cvector_t_exposer.def( 
                "perp"
                , perp_function_type( &::Geometry::BasicVector3D< std::complex< double > >::perp ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::perp
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > ( exported_class_t::*perp_function_type )( ::Geometry::BasicVector3D< std::complex< double > > const & ) const;
            
            cvector_t_exposer.def( 
                "perp"
                , perp_function_type( &::Geometry::BasicVector3D< std::complex< double > >::perp )
                , ( bp::arg("v") ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::perp2
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > ( exported_class_t::*perp2_function_type )(  ) const;
            
            cvector_t_exposer.def( 
                "perp2"
                , perp2_function_type( &::Geometry::BasicVector3D< std::complex< double > >::perp2 ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::perp2
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > ( exported_class_t::*perp2_function_type )( ::Geometry::BasicVector3D< std::complex< double > > const & ) const;
            
            cvector_t_exposer.def( 
                "perp2"
                , perp2_function_type( &::Geometry::BasicVector3D< std::complex< double > >::perp2 )
                , ( bp::arg("v") ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::phi
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > ( exported_class_t::*phi_function_type )(  ) const;
            
            cvector_t_exposer.def( 
                "phi"
                , phi_function_type( &::Geometry::BasicVector3D< std::complex< double > >::phi ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::r
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > ( exported_class_t::*r_function_type )(  ) const;
            
            cvector_t_exposer.def( 
                "r"
                , r_function_type( &::Geometry::BasicVector3D< std::complex< double > >::r ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::rho
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > ( exported_class_t::*rho_function_type )(  ) const;
            
            cvector_t_exposer.def( 
                "rho"
                , rho_function_type( &::Geometry::BasicVector3D< std::complex< double > >::rho ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::rotate
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::Geometry::BasicVector3D< std::complex< double > > & ( exported_class_t::*rotate_function_type )( ::std::complex< double >,::Geometry::BasicVector3D< std::complex< double > > const & ) ;
            
            cvector_t_exposer.def( 
                "rotate"
                , rotate_function_type( &::Geometry::BasicVector3D< std::complex< double > >::rotate )
                , ( bp::arg("a"), bp::arg("v") )
                    /* undefined call policies */ );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::rotateX
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::Geometry::BasicVector3D< std::complex< double > > & ( exported_class_t::*rotateX_function_type )( ::std::complex< double > ) ;
            
            cvector_t_exposer.def( 
                "rotateX"
                , rotateX_function_type( &::Geometry::BasicVector3D< std::complex< double > >::rotateX )
                , ( bp::arg("a") )
                    /* undefined call policies */ );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::rotateY
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::Geometry::BasicVector3D< std::complex< double > > & ( exported_class_t::*rotateY_function_type )( ::std::complex< double > ) ;
            
            cvector_t_exposer.def( 
                "rotateY"
                , rotateY_function_type( &::Geometry::BasicVector3D< std::complex< double > >::rotateY )
                , ( bp::arg("a") )
                    /* undefined call policies */ );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::rotateZ
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::Geometry::BasicVector3D< std::complex< double > > & ( exported_class_t::*rotateZ_function_type )( ::std::complex< double > ) ;
            
            cvector_t_exposer.def( 
                "rotateZ"
                , rotateZ_function_type( &::Geometry::BasicVector3D< std::complex< double > >::rotateZ )
                , ( bp::arg("a") )
                    /* undefined call policies */ );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::set
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef void ( exported_class_t::*set_function_type )( ::std::complex< double >,::std::complex< double >,::std::complex< double > ) ;
            
            cvector_t_exposer.def( 
                "set"
                , set_function_type( &::Geometry::BasicVector3D< std::complex< double > >::set )
                , ( bp::arg("x1"), bp::arg("y1"), bp::arg("z1") ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::setLambdaAlphaPhi
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef void ( exported_class_t::*setLambdaAlphaPhi_function_type )( ::std::complex< double >,::std::complex< double >,::std::complex< double > ) ;
            
            cvector_t_exposer.def( 
                "setLambdaAlphaPhi"
                , setLambdaAlphaPhi_function_type( &::Geometry::BasicVector3D< std::complex< double > >::setLambdaAlphaPhi )
                , ( bp::arg("lambda"), bp::arg("alpha"), bp::arg("phi") ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::setMag
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef void ( exported_class_t::*setMag_function_type )( ::std::complex< double > ) ;
            
            cvector_t_exposer.def( 
                "setMag"
                , setMag_function_type( &::Geometry::BasicVector3D< std::complex< double > >::setMag )
                , ( bp::arg("ma") ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::setPerp
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef void ( exported_class_t::*setPerp_function_type )( ::std::complex< double > ) ;
            
            cvector_t_exposer.def( 
                "setPerp"
                , setPerp_function_type( &::Geometry::BasicVector3D< std::complex< double > >::setPerp )
                , ( bp::arg("rh") ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::setPhi
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef void ( exported_class_t::*setPhi_function_type )( ::std::complex< double > ) ;
            
            cvector_t_exposer.def( 
                "setPhi"
                , setPhi_function_type( &::Geometry::BasicVector3D< std::complex< double > >::setPhi )
                , ( bp::arg("ph") ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::setR
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef void ( exported_class_t::*setR_function_type )( ::std::complex< double > ) ;
            
            cvector_t_exposer.def( 
                "setR"
                , setR_function_type( &::Geometry::BasicVector3D< std::complex< double > >::setR )
                , ( bp::arg("ma") ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::setTheta
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef void ( exported_class_t::*setTheta_function_type )( ::std::complex< double > ) ;
            
            cvector_t_exposer.def( 
                "setTheta"
                , setTheta_function_type( &::Geometry::BasicVector3D< std::complex< double > >::setTheta )
                , ( bp::arg("th") ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::setX
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef void ( exported_class_t::*setX_function_type )( ::std::complex< double > ) ;
            
            cvector_t_exposer.def( 
                "setX"
                , setX_function_type( &::Geometry::BasicVector3D< std::complex< double > >::setX )
                , ( bp::arg("a") ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::setXYZ
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef void ( exported_class_t::*setXYZ_function_type )( ::std::complex< double >,::std::complex< double >,::std::complex< double > ) ;
            
            cvector_t_exposer.def( 
                "setXYZ"
                , setXYZ_function_type( &::Geometry::BasicVector3D< std::complex< double > >::setXYZ )
                , ( bp::arg("x1"), bp::arg("y1"), bp::arg("z1") ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::setY
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef void ( exported_class_t::*setY_function_type )( ::std::complex< double > ) ;
            
            cvector_t_exposer.def( 
                "setY"
                , setY_function_type( &::Geometry::BasicVector3D< std::complex< double > >::setY )
                , ( bp::arg("a") ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::setZ
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef void ( exported_class_t::*setZ_function_type )( ::std::complex< double > ) ;
            
            cvector_t_exposer.def( 
                "setZ"
                , setZ_function_type( &::Geometry::BasicVector3D< std::complex< double > >::setZ )
                , ( bp::arg("a") ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::theta
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > ( exported_class_t::*theta_function_type )(  ) const;
            
            cvector_t_exposer.def( 
                "theta"
                , theta_function_type( &::Geometry::BasicVector3D< std::complex< double > >::theta ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::transform
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::Geometry::BasicVector3D< std::complex< double > > & ( exported_class_t::*transform_function_type )( ::Geometry::Transform3D const & ) ;
            
            cvector_t_exposer.def( 
                "transform"
                , transform_function_type( &::Geometry::BasicVector3D< std::complex< double > >::transform )
                , ( bp::arg("m") )
                    /* undefined call policies */ );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::unit
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::Geometry::BasicVector3D< std::complex< double > > ( exported_class_t::*unit_function_type )(  ) const;
            
            cvector_t_exposer.def( 
                "unit"
                , unit_function_type( &::Geometry::BasicVector3D< std::complex< double > >::unit ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::x
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > ( exported_class_t::*x_function_type )(  ) const;
            
            cvector_t_exposer.def( 
                "x"
                , x_function_type( &::Geometry::BasicVector3D< std::complex< double > >::x ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::y
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > ( exported_class_t::*y_function_type )(  ) const;
            
            cvector_t_exposer.def( 
                "y"
                , y_function_type( &::Geometry::BasicVector3D< std::complex< double > >::y ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::z
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > ( exported_class_t::*z_function_type )(  ) const;
            
            cvector_t_exposer.def( 
                "z"
                , z_function_type( &::Geometry::BasicVector3D< std::complex< double > >::z ) );
        
        }
        cvector_t_exposer.def( bp::self != bp::self );
        cvector_t_exposer.def( bp::self * bp::self );
        cvector_t_exposer.def( bp::self * bp::other< std::complex< double > >() );
        cvector_t_exposer.def( bp::self + bp::self );
        cvector_t_exposer.def( +bp::self );
        cvector_t_exposer.def( bp::self - bp::self );
        cvector_t_exposer.def( -bp::self );
        cvector_t_exposer.def( bp::self / bp::other< std::complex< double > >() );
        cvector_t_exposer.def( bp::self_ns::str( bp::self ) );
        cvector_t_exposer.def( bp::self == bp::self );
    }

    bp::class_< ReflectX3D_wrapper >( "ReflectX3D", bp::init< bp::optional< double > >(( bp::arg("x")=0 )) )    
        .def( 
            "setTransform"
            , (void ( ReflectX3D_wrapper::* )( double,double,double,double,double,double,double,double,double,double,double,double ) )(&ReflectX3D_wrapper::setTransform)
            , ( bp::arg("XX"), bp::arg("XY"), bp::arg("XZ"), bp::arg("DX"), bp::arg("YX"), bp::arg("YY"), bp::arg("YZ"), bp::arg("DY"), bp::arg("ZX"), bp::arg("ZY"), bp::arg("ZZ"), bp::arg("DZ") ) );

    bp::class_< ReflectY3D_wrapper >( "ReflectY3D", bp::init< bp::optional< double > >(( bp::arg("y")=0 )) )    
        .def( 
            "setTransform"
            , (void ( ReflectY3D_wrapper::* )( double,double,double,double,double,double,double,double,double,double,double,double ) )(&ReflectY3D_wrapper::setTransform)
            , ( bp::arg("XX"), bp::arg("XY"), bp::arg("XZ"), bp::arg("DX"), bp::arg("YX"), bp::arg("YY"), bp::arg("YZ"), bp::arg("DY"), bp::arg("ZX"), bp::arg("ZY"), bp::arg("ZZ"), bp::arg("DZ") ) );

    bp::class_< ReflectZ3D_wrapper >( "ReflectZ3D", bp::init< bp::optional< double > >(( bp::arg("z")=0 )) )    
        .def( 
            "setTransform"
            , (void ( ReflectZ3D_wrapper::* )( double,double,double,double,double,double,double,double,double,double,double,double ) )(&ReflectZ3D_wrapper::setTransform)
            , ( bp::arg("XX"), bp::arg("XY"), bp::arg("XZ"), bp::arg("DX"), bp::arg("YX"), bp::arg("YY"), bp::arg("YZ"), bp::arg("DY"), bp::arg("ZX"), bp::arg("ZY"), bp::arg("ZZ"), bp::arg("DZ") ) );

    { //::Geometry::Transform3D
        typedef bp::class_< Transform3D_wrapper > Transform3D_exposer_t;
        Transform3D_exposer_t Transform3D_exposer = Transform3D_exposer_t( "Transform3D", bp::init< double, double, double, double, double, double, double, double, double, double, double, double >(( bp::arg("XX"), bp::arg("XY"), bp::arg("XZ"), bp::arg("DX"), bp::arg("YX"), bp::arg("YY"), bp::arg("YZ"), bp::arg("DY"), bp::arg("ZX"), bp::arg("ZY"), bp::arg("ZZ"), bp::arg("DZ") )) );
        bp::scope Transform3D_scope( Transform3D_exposer );
        bp::class_< Geometry::Transform3D::Transform3D_row, boost::noncopyable >( "Transform3D_row", bp::no_init );
        Transform3D_exposer.def( bp::init< >() );
        Transform3D_exposer.def( bp::init< Geometry::Point3D< double > const &, Geometry::Point3D< double > const &, Geometry::Point3D< double > const &, Geometry::Point3D< double > const &, Geometry::Point3D< double > const &, Geometry::Point3D< double > const & >(( bp::arg("fr0"), bp::arg("fr1"), bp::arg("fr2"), bp::arg("to0"), bp::arg("to1"), bp::arg("to2") )) );
        Transform3D_exposer.def( bp::init< Geometry::Transform3D const & >(( bp::arg("m") )) );
        { //::Geometry::Transform3D::dx
        
            typedef double ( ::Geometry::Transform3D::*dx_function_type )(  ) const;
            
            Transform3D_exposer.def( 
                "dx"
                , dx_function_type( &::Geometry::Transform3D::dx ) );
        
        }
        { //::Geometry::Transform3D::dy
        
            typedef double ( ::Geometry::Transform3D::*dy_function_type )(  ) const;
            
            Transform3D_exposer.def( 
                "dy"
                , dy_function_type( &::Geometry::Transform3D::dy ) );
        
        }
        { //::Geometry::Transform3D::dz
        
            typedef double ( ::Geometry::Transform3D::*dz_function_type )(  ) const;
            
            Transform3D_exposer.def( 
                "dz"
                , dz_function_type( &::Geometry::Transform3D::dz ) );
        
        }
        { //::Geometry::Transform3D::getDecomposition
        
            typedef void ( ::Geometry::Transform3D::*getDecomposition_function_type )( ::Geometry::Scale3D &,::Geometry::Rotate3D &,::Geometry::Translate3D & ) const;
            
            Transform3D_exposer.def( 
                "getDecomposition"
                , getDecomposition_function_type( &::Geometry::Transform3D::getDecomposition )
                , ( bp::arg("scale"), bp::arg("rotation"), bp::arg("translation") ) );
        
        }
        { //::Geometry::Transform3D::inverse
        
            typedef ::Geometry::Transform3D ( ::Geometry::Transform3D::*inverse_function_type )(  ) const;
            
            Transform3D_exposer.def( 
                "inverse"
                , inverse_function_type( &::Geometry::Transform3D::inverse ) );
        
        }
        { //::Geometry::Transform3D::isNear
        
            typedef bool ( ::Geometry::Transform3D::*isNear_function_type )( ::Geometry::Transform3D const &,double ) const;
            
            Transform3D_exposer.def( 
                "isNear"
                , isNear_function_type( &::Geometry::Transform3D::isNear )
                , ( bp::arg("t"), bp::arg("tolerance")=2.20000000000000009206578920655319378310295179435041035276e-14 ) );
        
        }
        Transform3D_exposer.def( bp::self != bp::self );
        { //::Geometry::Transform3D::operator()
        
            typedef double ( ::Geometry::Transform3D::*__call___function_type )( int,int ) const;
            
            Transform3D_exposer.def( 
                "__call__"
                , __call___function_type( &::Geometry::Transform3D::operator() )
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        Transform3D_exposer.def( bp::self * bp::self );
        { //::Geometry::Transform3D::operator=
        
            typedef ::Geometry::Transform3D & ( ::Geometry::Transform3D::*assign_function_type )( ::Geometry::Transform3D const & ) ;
            
            Transform3D_exposer.def( 
                "assign"
                , assign_function_type( &::Geometry::Transform3D::operator= )
                , ( bp::arg("m") )
                , bp::return_self< >() );
        
        }
        Transform3D_exposer.def( bp::self == bp::self );
        { //::Geometry::Transform3D::setIdentity
        
            typedef void ( ::Geometry::Transform3D::*setIdentity_function_type )(  ) ;
            
            Transform3D_exposer.def( 
                "setIdentity"
                , setIdentity_function_type( &::Geometry::Transform3D::setIdentity ) );
        
        }
        { //::Geometry::Transform3D::setTransform
        
            typedef void ( Transform3D_wrapper::*setTransform_function_type )( double,double,double,double,double,double,double,double,double,double,double,double ) ;
            
            Transform3D_exposer.def( 
                "setTransform"
                , setTransform_function_type( &Transform3D_wrapper::setTransform )
                , ( bp::arg("XX"), bp::arg("XY"), bp::arg("XZ"), bp::arg("DX"), bp::arg("YX"), bp::arg("YY"), bp::arg("YZ"), bp::arg("DY"), bp::arg("ZX"), bp::arg("ZY"), bp::arg("ZZ"), bp::arg("DZ") ) );
        
        }
        { //::Geometry::Transform3D::xx
        
            typedef double ( ::Geometry::Transform3D::*xx_function_type )(  ) const;
            
            Transform3D_exposer.def( 
                "xx"
                , xx_function_type( &::Geometry::Transform3D::xx ) );
        
        }
        { //::Geometry::Transform3D::xy
        
            typedef double ( ::Geometry::Transform3D::*xy_function_type )(  ) const;
            
            Transform3D_exposer.def( 
                "xy"
                , xy_function_type( &::Geometry::Transform3D::xy ) );
        
        }
        { //::Geometry::Transform3D::xz
        
            typedef double ( ::Geometry::Transform3D::*xz_function_type )(  ) const;
            
            Transform3D_exposer.def( 
                "xz"
                , xz_function_type( &::Geometry::Transform3D::xz ) );
        
        }
        { //::Geometry::Transform3D::yx
        
            typedef double ( ::Geometry::Transform3D::*yx_function_type )(  ) const;
            
            Transform3D_exposer.def( 
                "yx"
                , yx_function_type( &::Geometry::Transform3D::yx ) );
        
        }
        { //::Geometry::Transform3D::yy
        
            typedef double ( ::Geometry::Transform3D::*yy_function_type )(  ) const;
            
            Transform3D_exposer.def( 
                "yy"
                , yy_function_type( &::Geometry::Transform3D::yy ) );
        
        }
        { //::Geometry::Transform3D::yz
        
            typedef double ( ::Geometry::Transform3D::*yz_function_type )(  ) const;
            
            Transform3D_exposer.def( 
                "yz"
                , yz_function_type( &::Geometry::Transform3D::yz ) );
        
        }
        { //::Geometry::Transform3D::zx
        
            typedef double ( ::Geometry::Transform3D::*zx_function_type )(  ) const;
            
            Transform3D_exposer.def( 
                "zx"
                , zx_function_type( &::Geometry::Transform3D::zx ) );
        
        }
        { //::Geometry::Transform3D::zy
        
            typedef double ( ::Geometry::Transform3D::*zy_function_type )(  ) const;
            
            Transform3D_exposer.def( 
                "zy"
                , zy_function_type( &::Geometry::Transform3D::zy ) );
        
        }
        { //::Geometry::Transform3D::zz
        
            typedef double ( ::Geometry::Transform3D::*zz_function_type )(  ) const;
            
            Transform3D_exposer.def( 
                "zz"
                , zz_function_type( &::Geometry::Transform3D::zz ) );
        
        }
        Transform3D_exposer.def_readonly( "Identity", Geometry::Transform3D::Identity );
    }

    bp::class_< Rotate3D_wrapper, bp::bases< Geometry::Transform3D > >( "Rotate3D", bp::init< >() )    
        .def( bp::init< double, Geometry::Point3D< double > const &, Geometry::Point3D< double > const & >(( bp::arg("a"), bp::arg("p1"), bp::arg("p2") )) )    
        .def( 
            "setTransform"
            , (void ( Rotate3D_wrapper::* )( double,double,double,double,double,double,double,double,double,double,double,double ) )(&Rotate3D_wrapper::setTransform)
            , ( bp::arg("XX"), bp::arg("XY"), bp::arg("XZ"), bp::arg("DX"), bp::arg("YX"), bp::arg("YY"), bp::arg("YZ"), bp::arg("DY"), bp::arg("ZX"), bp::arg("ZY"), bp::arg("ZZ"), bp::arg("DZ") ) );

    bp::class_< RotateX3D_wrapper, bp::bases< Geometry::Rotate3D > >( "RotateX3D", bp::init< >() )    
        .def( bp::init< double >(( bp::arg("a") )) )    
        .def( 
            "setTransform"
            , (void ( RotateX3D_wrapper::* )( double,double,double,double,double,double,double,double,double,double,double,double ) )(&RotateX3D_wrapper::setTransform)
            , ( bp::arg("XX"), bp::arg("XY"), bp::arg("XZ"), bp::arg("DX"), bp::arg("YX"), bp::arg("YY"), bp::arg("YZ"), bp::arg("DY"), bp::arg("ZX"), bp::arg("ZY"), bp::arg("ZZ"), bp::arg("DZ") ) );

    bp::class_< RotateY3D_wrapper, bp::bases< Geometry::Rotate3D > >( "RotateY3D", bp::init< >() )    
        .def( bp::init< double >(( bp::arg("a") )) )    
        .def( 
            "setTransform"
            , (void ( RotateY3D_wrapper::* )( double,double,double,double,double,double,double,double,double,double,double,double ) )(&RotateY3D_wrapper::setTransform)
            , ( bp::arg("XX"), bp::arg("XY"), bp::arg("XZ"), bp::arg("DX"), bp::arg("YX"), bp::arg("YY"), bp::arg("YZ"), bp::arg("DY"), bp::arg("ZX"), bp::arg("ZY"), bp::arg("ZZ"), bp::arg("DZ") ) );

    bp::class_< RotateZ3D_wrapper, bp::bases< Geometry::Rotate3D > >( "RotateZ3D", bp::init< >() )    
        .def( bp::init< double >(( bp::arg("a") )) )    
        .def( 
            "setTransform"
            , (void ( RotateZ3D_wrapper::* )( double,double,double,double,double,double,double,double,double,double,double,double ) )(&RotateZ3D_wrapper::setTransform)
            , ( bp::arg("XX"), bp::arg("XY"), bp::arg("XZ"), bp::arg("DX"), bp::arg("YX"), bp::arg("YY"), bp::arg("YZ"), bp::arg("DY"), bp::arg("ZX"), bp::arg("ZY"), bp::arg("ZZ"), bp::arg("DZ") ) );

    { //::IMaterial
        typedef bp::class_< IMaterial_wrapper > IMaterial_exposer_t;
        IMaterial_exposer_t IMaterial_exposer = IMaterial_exposer_t( "IMaterial", bp::init< >() );
        bp::scope IMaterial_scope( IMaterial_exposer );
        IMaterial_exposer.def( bp::init< std::string const & >(( bp::arg("name") )) );
        IMaterial_exposer.def( bp::init< IMaterial const & >(( bp::arg("other") )) );
        { //::IMaterial::operator=
        
            typedef ::IMaterial & ( ::IMaterial::*assign_function_type )( ::IMaterial const & ) ;
            
            IMaterial_exposer.def( 
                "assign"
                , assign_function_type( &::IMaterial::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        { //::IMaterial::print
        
            typedef void ( IMaterial_wrapper::*print_function_type )( ::std::ostream & ) const;
            
            IMaterial_exposer.def( 
                "print"
                , print_function_type( &IMaterial_wrapper::default_print )
                , ( bp::arg("ostr") ) );
        
        }
        IMaterial_exposer.def( bp::self_ns::str( bp::self ) );
    }

    { //::HomogeneousMaterial
        typedef bp::class_< HomogeneousMaterial_wrapper, bp::bases< IMaterial > > HomogeneousMaterial_exposer_t;
        HomogeneousMaterial_exposer_t HomogeneousMaterial_exposer = HomogeneousMaterial_exposer_t( "HomogeneousMaterial", bp::init< >() );
        bp::scope HomogeneousMaterial_scope( HomogeneousMaterial_exposer );
        HomogeneousMaterial_exposer.def( bp::init< complex_t >(( bp::arg("refractive_index") )) );
        HomogeneousMaterial_exposer.def( bp::init< std::string const &, complex_t >(( bp::arg("name"), bp::arg("refractive_index") )) );
        HomogeneousMaterial_exposer.def( bp::init< HomogeneousMaterial const & >(( bp::arg("other") )) );
        { //::HomogeneousMaterial::getRefractiveIndex
        
            typedef ::complex_t ( ::HomogeneousMaterial::*getRefractiveIndex_function_type )(  ) const;
            
            HomogeneousMaterial_exposer.def( 
                "getRefractiveIndex"
                , getRefractiveIndex_function_type( &::HomogeneousMaterial::getRefractiveIndex ) );
        
        }
        { //::HomogeneousMaterial::operator=
        
            typedef ::HomogeneousMaterial & ( ::HomogeneousMaterial::*assign_function_type )( ::HomogeneousMaterial const & ) ;
            
            HomogeneousMaterial_exposer.def( 
                "assign"
                , assign_function_type( &::HomogeneousMaterial::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        { //::HomogeneousMaterial::print
        
            typedef void ( HomogeneousMaterial_wrapper::*print_function_type )( ::std::ostream & ) const;
            
            HomogeneousMaterial_exposer.def( 
                "print"
                , print_function_type( &HomogeneousMaterial_wrapper::default_print )
                , ( bp::arg("ostr") ) );
        
        }
        { //::HomogeneousMaterial::setRefractiveIndex
        
            typedef void ( ::HomogeneousMaterial::*setRefractiveIndex_function_type )( ::complex_t ) ;
            
            HomogeneousMaterial_exposer.def( 
                "setRefractiveIndex"
                , setRefractiveIndex_function_type( &::HomogeneousMaterial::setRefractiveIndex )
                , ( bp::arg("refractive_index") ) );
        
        }
    }

    bp::class_< IFormFactorDecorator_wrapper, bp::bases< IFormFactor >, boost::noncopyable >( "IFormFactorDecorator", bp::init< IFormFactor * >(( bp::arg("p_form_factor") )) )    
        .def( 
            "clone"
            , bp::pure_virtual( (::IFormFactorDecorator * ( ::IFormFactorDecorator::* )(  ) const)(&::IFormFactorDecorator::clone) )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "setAmbientRefractiveIndex"
            , (void ( ::IFormFactorDecorator::* )( ::complex_t ) )(&::IFormFactorDecorator::setAmbientRefractiveIndex)
            , (void ( IFormFactorDecorator_wrapper::* )( ::complex_t ) )(&IFormFactorDecorator_wrapper::default_setAmbientRefractiveIndex)
            , ( bp::arg("refractive_index") ) )    
        .def( 
            "createParameterTree"
            , (::ParameterPool * ( ::ISample::* )(  ) )(&::ISample::createParameterTree)
            , (::ParameterPool * ( IFormFactorDecorator_wrapper::* )(  ) )(&IFormFactorDecorator_wrapper::default_createParameterTree)
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "evaluate"
            , bp::pure_virtual( (::complex_t ( ::IFormFactor::* )( ::cvector_t,::cvector_t,double,double ) const)(&::IFormFactor::evaluate) )
            , ( bp::arg("k_i"), bp::arg("k_f"), bp::arg("alpha_i"), bp::arg("alpha_f") ) )    
        .def( 
            "getNumberOfStochasticParameters"
            , (int ( ::IFormFactor::* )(  ) const)(&::IFormFactor::getNumberOfStochasticParameters)
            , (int ( IFormFactorDecorator_wrapper::* )(  ) const)(&IFormFactorDecorator_wrapper::default_getNumberOfStochasticParameters) )    
        .def( 
            "getVolume"
            , (double ( ::IFormFactor::* )(  ) const)(&::IFormFactor::getVolume)
            , (double ( IFormFactorDecorator_wrapper::* )(  ) const)(&IFormFactorDecorator_wrapper::default_getVolume) )    
        .def( 
            "walk_and_print"
            , (void ( ::ISample::* )(  ) )(&::ISample::walk_and_print)
            , (void ( IFormFactorDecorator_wrapper::* )(  ) )(&IFormFactorDecorator_wrapper::default_walk_and_print) );

    bp::class_< IInterferenceFunction_wrapper, bp::bases< ISample >, boost::noncopyable >( "IInterferenceFunction" )    
        .def( 
            "clone"
            , bp::pure_virtual( (::IInterferenceFunction * ( ::IInterferenceFunction::* )(  ) const)(&::IInterferenceFunction::clone) )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "evaluate"
            , bp::pure_virtual( (double ( ::IInterferenceFunction::* )( ::cvector_t ) const)(&::IInterferenceFunction::evaluate) )
            , ( bp::arg("q") ) )    
        .def( 
            "createParameterTree"
            , (::ParameterPool * ( ::ISample::* )(  ) )(&::ISample::createParameterTree)
            , (::ParameterPool * ( IInterferenceFunction_wrapper::* )(  ) )(&IInterferenceFunction_wrapper::default_createParameterTree)
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "walk_and_print"
            , (void ( ::ISample::* )(  ) )(&::ISample::walk_and_print)
            , (void ( IInterferenceFunction_wrapper::* )(  ) )(&IInterferenceFunction_wrapper::default_walk_and_print) );

    bp::class_< ISingleton_less__MaterialManager__greater__wrapper, boost::noncopyable >( "ISingleton_less__MaterialManager__greater_", bp::no_init )    
        .def( bp::init< >() )    
        .def( 
            "create_singleton"
            , (void (*)(  ))(&ISingleton_less__MaterialManager__greater__wrapper::create_singleton) )    
        .def( 
            "instance"
            , (::MaterialManager & (*)(  ))( &::ISingleton< MaterialManager >::instance )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "onDeadReference"
            , (void (*)(  ))(&ISingleton_less__MaterialManager__greater__wrapper::onDeadReference) )    
        .staticmethod( "create_singleton" )    
        .staticmethod( "instance" )    
        .staticmethod( "onDeadReference" );

}

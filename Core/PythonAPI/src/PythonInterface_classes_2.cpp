// This file has been generated by Py++.

#include "boost/python.hpp"
#include "BasicVector3D.h"
#include "Experiment.h"
#include "FormFactorCylinder.h"
#include "FormFactorFullSphere.h"
#include "FormFactorPyramid.h"
#include "GISASExperiment.h"
#include "HomogeneousMaterial.h"
#include "IClusteredNanoParticles.h"
#include "ICompositeSample.h"
#include "IFormFactor.h"
#include "IInterferenceFunction.h"
#include "InterferenceFunctionNone.h"
#include "InterferenceFunction1DParaCrystal.h"
#include "IMaterial.h"
#include "ISample.h"
#include "ISingleton.h"
#include "Lattice.h"
#include "LatticeBasis.h"
#include "Layer.h"
#include "LayerDecorator.h"
#include "LayerRoughness.h"
#include "MaterialManager.h"
#include "MesoCrystal.h"
#include "MultiLayer.h"
#include "NanoParticle.h"
#include "NanoParticleCrystal.h"
#include "NanoParticleDecoration.h"
#include "OpticalFresnel.h"
#include "ParameterPool.h"
#include "PythonOutputData.h"
#include "PythonPlusplusHelper.h"
#include "Transform3D.h"
#include "Units.h"
#include "Types.h"
#include "PythonInterface_classes_2.h"

namespace bp = boost::python;

struct InterferenceFunction1DParaCrystal_wrapper : InterferenceFunction1DParaCrystal, bp::wrapper< InterferenceFunction1DParaCrystal > {

    InterferenceFunction1DParaCrystal_wrapper(double peak_distance, double width, double corr_length=0.0 )
    : InterferenceFunction1DParaCrystal( peak_distance, width, corr_length )
      , bp::wrapper< InterferenceFunction1DParaCrystal >(){
        // constructor
    
    }

    virtual ::InterferenceFunction1DParaCrystal * clone(  ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone(  );
        else{
            return this->InterferenceFunction1DParaCrystal::clone(  );
        }
    }
    
    ::InterferenceFunction1DParaCrystal * default_clone(  ) const  {
        return InterferenceFunction1DParaCrystal::clone( );
    }

    virtual double evaluate( ::kvector_t q ) const  {
        if( bp::override func_evaluate = this->get_override( "evaluate" ) )
            return func_evaluate( q );
        else{
            return this->InterferenceFunction1DParaCrystal::evaluate( q );
        }
    }
    
    double default_evaluate( ::kvector_t q ) const  {
        return InterferenceFunction1DParaCrystal::evaluate( q );
    }

};

void register_classes_2(){

    bp::class_< Geometry::Rotate3D, bp::bases< Geometry::Transform3D > >( "Rotate3D", bp::init< >() )    
        .def( bp::init< double, Geometry::Point3D< double > const &, Geometry::Point3D< double > const & >(( bp::arg("a"), bp::arg("p1"), bp::arg("p2") )) );

    bp::class_< Geometry::RotateX3D, bp::bases< Geometry::Rotate3D > >( "RotateX3D", bp::init< >() )    
        .def( bp::init< double >(( bp::arg("a") )) );

    bp::class_< Geometry::RotateY3D, bp::bases< Geometry::Rotate3D > >( "RotateY3D", bp::init< >() )    
        .def( bp::init< double >(( bp::arg("a") )) );

    bp::class_< Geometry::RotateZ3D, bp::bases< Geometry::Rotate3D > >( "RotateZ3D", bp::init< >() )    
        .def( bp::init< double >(( bp::arg("a") )) );

    { //::IMaterial
        typedef bp::class_< IMaterial > IMaterial_exposer_t;
        IMaterial_exposer_t IMaterial_exposer = IMaterial_exposer_t( "IMaterial", bp::init< >() );
        bp::scope IMaterial_scope( IMaterial_exposer );
        IMaterial_exposer.def( bp::init< std::string const & >(( bp::arg("name") )) );
        IMaterial_exposer.def( bp::init< IMaterial const & >(( bp::arg("other") )) );
        { //::IMaterial::operator=
        
            typedef ::IMaterial & ( ::IMaterial::*assign_function_type )( ::IMaterial const & ) ;
            
            IMaterial_exposer.def( 
                "assign"
                , assign_function_type( &::IMaterial::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        IMaterial_exposer.def( bp::self_ns::str( bp::self ) );
    }

    { //::HomogeneousMaterial
        typedef bp::class_< HomogeneousMaterial, bp::bases< IMaterial > > HomogeneousMaterial_exposer_t;
        HomogeneousMaterial_exposer_t HomogeneousMaterial_exposer = HomogeneousMaterial_exposer_t( "HomogeneousMaterial", bp::init< >() );
        bp::scope HomogeneousMaterial_scope( HomogeneousMaterial_exposer );
        HomogeneousMaterial_exposer.def( bp::init< complex_t >(( bp::arg("refractive_index") )) );
        HomogeneousMaterial_exposer.def( bp::init< std::string const &, complex_t >(( bp::arg("name"), bp::arg("refractive_index") )) );
        HomogeneousMaterial_exposer.def( bp::init< HomogeneousMaterial const & >(( bp::arg("other") )) );
        { //::HomogeneousMaterial::getRefractiveIndex
        
            typedef ::complex_t ( ::HomogeneousMaterial::*getRefractiveIndex_function_type )(  ) const;
            
            HomogeneousMaterial_exposer.def( 
                "getRefractiveIndex"
                , getRefractiveIndex_function_type( &::HomogeneousMaterial::getRefractiveIndex ) );
        
        }
        { //::HomogeneousMaterial::operator=
        
            typedef ::HomogeneousMaterial & ( ::HomogeneousMaterial::*assign_function_type )( ::HomogeneousMaterial const & ) ;
            
            HomogeneousMaterial_exposer.def( 
                "assign"
                , assign_function_type( &::HomogeneousMaterial::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        { //::HomogeneousMaterial::setRefractiveIndex
        
            typedef void ( ::HomogeneousMaterial::*setRefractiveIndex_function_type )( ::complex_t ) ;
            
            HomogeneousMaterial_exposer.def( 
                "setRefractiveIndex"
                , setRefractiveIndex_function_type( &::HomogeneousMaterial::setRefractiveIndex )
                , ( bp::arg("refractive_index") ) );
        
        }
    }

    bp::class_< IClusteredNanoParticles, boost::noncopyable >( "IClusteredNanoParticles", bp::no_init );

    { //::ISample
        typedef bp::class_< ISample > ISample_exposer_t;
        ISample_exposer_t ISample_exposer = ISample_exposer_t( "ISample", bp::no_init );
        bp::scope ISample_scope( ISample_exposer );
        ISample_exposer.def( bp::init< >() );
        { //::ISample::operator=
        
            typedef ::ISample & ( ::ISample::*assign_function_type )( ::ISample const & ) ;
            
            ISample_exposer.def( 
                "assign"
                , assign_function_type( &::ISample::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
    }

    bp::class_< ICompositeSample, bp::bases< ISample >, boost::noncopyable >( "ICompositeSample", bp::init< >() );

    bp::class_< IInterferenceFunction, boost::noncopyable >( "IInterferenceFunction", bp::no_init );

    bp::class_< ISingleton< MaterialManager >, boost::noncopyable >( "ISingleton_less__MaterialManager__greater_", bp::no_init )    
        .def( 
            "instance"
            , (::MaterialManager & (*)(  ))( &::ISingleton< MaterialManager >::instance )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .staticmethod( "instance" );

    bp::class_< InterferenceFunction1DParaCrystal_wrapper, bp::bases< IInterferenceFunction >, boost::noncopyable >( "InterferenceFunction1DParaCrystal", bp::init< double, double, bp::optional< double > >(( bp::arg("peak_distance"), bp::arg("width"), bp::arg("corr_length")=0.0 )) )    
        .def( 
            "clone"
            , (::InterferenceFunction1DParaCrystal * ( ::InterferenceFunction1DParaCrystal::* )(  ) const)(&::InterferenceFunction1DParaCrystal::clone)
            , (::InterferenceFunction1DParaCrystal * ( InterferenceFunction1DParaCrystal_wrapper::* )(  ) const)(&InterferenceFunction1DParaCrystal_wrapper::default_clone)
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "evaluate"
            , (double ( ::InterferenceFunction1DParaCrystal::* )( ::kvector_t ) const)(&::InterferenceFunction1DParaCrystal::evaluate)
            , (double ( InterferenceFunction1DParaCrystal_wrapper::* )( ::kvector_t ) const)(&InterferenceFunction1DParaCrystal_wrapper::default_evaluate)
            , ( bp::arg("q") ) );

    bp::class_< InterferenceFunctionNone, bp::bases< IInterferenceFunction >, boost::noncopyable >( "InterferenceFunctionNone", bp::init< >() );

}

// This file has been generated by Py++.

#include "boost/python.hpp"
#include "BasicVector3D.h"
#include "Experiment.h"
#include "FormFactorCylinder.h"
#include "FormFactorFullSphere.h"
#include "FormFactorPyramid.h"
#include "GISASExperiment.h"
#include "HomogeneousMaterial.h"
#include "IClusteredParticles.h"
#include "ICompositeSample.h"
#include "IFormFactor.h"
#include "IInterferenceFunction.h"
#include "InterferenceFunctionNone.h"
#include "InterferenceFunction1DParaCrystal.h"
#include "IMaterial.h"
#include "ISample.h"
#include "ISingleton.h"
#include "Lattice.h"
#include "LatticeBasis.h"
#include "Layer.h"
#include "LayerDecorator.h"
#include "LayerRoughness.h"
#include "MaterialManager.h"
#include "MesoCrystal.h"
#include "MultiLayer.h"
#include "Particle.h"
#include "Crystal.h"
#include "ParticleDecoration.h"
#include "OpticalFresnel.h"
#include "ParameterPool.h"
#include "PythonOutputData.h"
#include "PythonPlusplusHelper.h"
#include "Transform3D.h"
#include "Units.h"
#include "Types.h"
#include "PythonInterface_classes_2.h"

namespace bp = boost::python;

void register_classes_2(){

    bp::class_< Geometry::ReflectX3D, bp::bases< Geometry::Reflect3D > >( "ReflectX3D", bp::init< bp::optional< double > >(( bp::arg("x")=0 )) );

    bp::class_< Geometry::ReflectY3D, bp::bases< Geometry::Reflect3D > >( "ReflectY3D", bp::init< bp::optional< double > >(( bp::arg("y")=0 )) );

    bp::class_< Geometry::ReflectZ3D, bp::bases< Geometry::Reflect3D > >( "ReflectZ3D", bp::init< bp::optional< double > >(( bp::arg("z")=0 )) );

    bp::class_< Geometry::Rotate3D, bp::bases< Geometry::Transform3D > >( "Rotate3D", bp::init< >() );

    bp::class_< Geometry::RotateX3D, bp::bases< Geometry::Rotate3D > >( "RotateX3D", bp::init< >() )    
        .def( bp::init< double >(( bp::arg("a") )) );

    bp::class_< Geometry::RotateY3D, bp::bases< Geometry::Rotate3D > >( "RotateY3D", bp::init< >() )    
        .def( bp::init< double >(( bp::arg("a") )) );

    bp::class_< Geometry::RotateZ3D, bp::bases< Geometry::Rotate3D > >( "RotateZ3D", bp::init< >() )    
        .def( bp::init< double >(( bp::arg("a") )) );

    bp::class_< Geometry::Scale3D, bp::bases< Geometry::Transform3D > >( "Scale3D", bp::init< >() )    
        .def( bp::init< double, double, double >(( bp::arg("x"), bp::arg("y"), bp::arg("z") )) )    
        .def( bp::init< double >(( bp::arg("s") )) );

    bp::class_< Geometry::ScaleX3D, bp::bases< Geometry::Scale3D > >( "ScaleX3D", bp::init< >() )    
        .def( bp::init< double >(( bp::arg("x") )) );

    bp::class_< Geometry::ScaleY3D, bp::bases< Geometry::Scale3D > >( "ScaleY3D", bp::init< >() )    
        .def( bp::init< double >(( bp::arg("y") )) );

    bp::class_< Geometry::ScaleZ3D, bp::bases< Geometry::Scale3D > >( "ScaleZ3D", bp::init< >() )    
        .def( bp::init< double >(( bp::arg("z") )) );

    bp::class_< Geometry::Translate3D, bp::bases< Geometry::Transform3D > >( "Translate3D", bp::init< >() )    
        .def( bp::init< double, double, double >(( bp::arg("x"), bp::arg("y"), bp::arg("z") )) );

    bp::class_< Geometry::TranslateX3D, bp::bases< Geometry::Translate3D > >( "TranslateX3D", bp::init< >() )    
        .def( bp::init< double >(( bp::arg("x") )) );

    bp::class_< Geometry::TranslateY3D, bp::bases< Geometry::Translate3D > >( "TranslateY3D", bp::init< >() )    
        .def( bp::init< double >(( bp::arg("y") )) );

    bp::class_< Geometry::TranslateZ3D, bp::bases< Geometry::Translate3D > >( "TranslateZ3D", bp::init< >() )    
        .def( bp::init< double >(( bp::arg("z") )) );

    { //::IMaterial
        typedef bp::class_< IMaterial > IMaterial_exposer_t;
        IMaterial_exposer_t IMaterial_exposer = IMaterial_exposer_t( "IMaterial", bp::init< >() );
        bp::scope IMaterial_scope( IMaterial_exposer );
        IMaterial_exposer.def( bp::init< std::string const & >(( bp::arg("name") )) );
        IMaterial_exposer.def( bp::init< IMaterial const & >(( bp::arg("other") )) );
        { //::IMaterial::operator=
        
            typedef ::IMaterial & ( ::IMaterial::*assign_function_type )( ::IMaterial const & ) ;
            
            IMaterial_exposer.def( 
                "assign"
                , assign_function_type( &::IMaterial::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        IMaterial_exposer.def( bp::self_ns::str( bp::self ) );
    }

    { //::HomogeneousMaterial
        typedef bp::class_< HomogeneousMaterial, bp::bases< IMaterial > > HomogeneousMaterial_exposer_t;
        HomogeneousMaterial_exposer_t HomogeneousMaterial_exposer = HomogeneousMaterial_exposer_t( "HomogeneousMaterial", bp::init< >() );
        bp::scope HomogeneousMaterial_scope( HomogeneousMaterial_exposer );
        HomogeneousMaterial_exposer.def( bp::init< complex_t >(( bp::arg("refractive_index") )) );
        HomogeneousMaterial_exposer.def( bp::init< std::string const &, complex_t >(( bp::arg("name"), bp::arg("refractive_index") )) );
        HomogeneousMaterial_exposer.def( bp::init< HomogeneousMaterial const & >(( bp::arg("other") )) );
        { //::HomogeneousMaterial::getRefractiveIndex
        
            typedef ::complex_t ( ::HomogeneousMaterial::*getRefractiveIndex_function_type )(  ) const;
            
            HomogeneousMaterial_exposer.def( 
                "getRefractiveIndex"
                , getRefractiveIndex_function_type( &::HomogeneousMaterial::getRefractiveIndex ) );
        
        }
        { //::HomogeneousMaterial::operator=
        
            typedef ::HomogeneousMaterial & ( ::HomogeneousMaterial::*assign_function_type )( ::HomogeneousMaterial const & ) ;
            
            HomogeneousMaterial_exposer.def( 
                "assign"
                , assign_function_type( &::HomogeneousMaterial::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        { //::HomogeneousMaterial::setRefractiveIndex
        
            typedef void ( ::HomogeneousMaterial::*setRefractiveIndex_function_type )( ::complex_t ) ;
            
            HomogeneousMaterial_exposer.def( 
                "setRefractiveIndex"
                , setRefractiveIndex_function_type( &::HomogeneousMaterial::setRefractiveIndex )
                , ( bp::arg("refractive_index") ) );
        
        }
    }

}

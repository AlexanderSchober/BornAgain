// This file has been generated by Py++.

#include "boost/python.hpp"
#include "BasicVector3D.h"
#include "Experiment.h"
#include "FormFactorCylinder.h"
#include "FormFactorFullSphere.h"
#include "FormFactorPyramid.h"
#include "GISASExperiment.h"
#include "HomogeneousMaterial.h"
#include "IClusteredNanoParticles.h"
#include "ICompositeSample.h"
#include "IFormFactor.h"
#include "IInterferenceFunction.h"
#include "InterferenceFunctionNone.h"
#include "InterferenceFunction1DParaCrystal.h"
#include "IMaterial.h"
#include "ISample.h"
#include "ISingleton.h"
#include "Lattice.h"
#include "LatticeBasis.h"
#include "Layer.h"
#include "LayerDecorator.h"
#include "LayerRoughness.h"
#include "MaterialManager.h"
#include "MesoCrystal.h"
#include "MultiLayer.h"
#include "Particle.h"
#include "NanoParticleCrystal.h"
#include "NanoParticleDecoration.h"
#include "OpticalFresnel.h"
#include "ParameterPool.h"
#include "PythonOutputData.h"
#include "PythonPlusplusHelper.h"
#include "Transform3D.h"
#include "Units.h"
#include "Types.h"
#include "PythonInterface_classes_2.h"

namespace bp = boost::python;

struct ICompositeSample_wrapper : ICompositeSample, bp::wrapper< ICompositeSample > {

    ICompositeSample_wrapper( )
    : ICompositeSample( )
      , bp::wrapper< ICompositeSample >(){
        // null constructor
    
    }

    virtual ::ISample * clone(  ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone(  );
        else{
            return this->ISample::clone(  );
        }
    }
    
    ::ISample * default_clone(  ) const  {
        return ISample::clone( );
    }

    virtual ::ParameterPool * createParameterTree(  ) {
        if( bp::override func_createParameterTree = this->get_override( "createParameterTree" ) )
            return func_createParameterTree(  );
        else{
            return this->ISample::createParameterTree(  );
        }
    }
    
    ::ParameterPool * default_createParameterTree(  ) {
        return ISample::createParameterTree( );
    }

    virtual void walk_and_print(  ) {
        if( bp::override func_walk_and_print = this->get_override( "walk_and_print" ) )
            func_walk_and_print(  );
        else{
            this->ISample::walk_and_print(  );
        }
    }
    
    void default_walk_and_print(  ) {
        ISample::walk_and_print( );
    }

};

struct IClusteredNanoParticles_wrapper : IClusteredNanoParticles, bp::wrapper< IClusteredNanoParticles > {

    IClusteredNanoParticles_wrapper()
    : IClusteredNanoParticles()
      , bp::wrapper< IClusteredNanoParticles >(){
        // null constructor
        
    }

    virtual ::IClusteredNanoParticles * clone(  ) const {
        bp::override func_clone = this->get_override( "clone" );
        return func_clone(  );
    }

    virtual ::IFormFactor * createTotalFormFactor( ::IFormFactor const & meso_crystal_form_factor, ::complex_t ambient_refractive_index ) const {
        bp::override func_createTotalFormFactor = this->get_override( "createTotalFormFactor" );
        return func_createTotalFormFactor( boost::ref(meso_crystal_form_factor), ambient_refractive_index );
    }

    virtual void setAmbientRefractiveIndex( ::complex_t refractive_index ){
        bp::override func_setAmbientRefractiveIndex = this->get_override( "setAmbientRefractiveIndex" );
        func_setAmbientRefractiveIndex( refractive_index );
    }

    virtual ::ParameterPool * createParameterTree(  ) {
        if( bp::override func_createParameterTree = this->get_override( "createParameterTree" ) )
            return func_createParameterTree(  );
        else{
            return this->ISample::createParameterTree(  );
        }
    }
    
    ::ParameterPool * default_createParameterTree(  ) {
        return ISample::createParameterTree( );
    }

    virtual void walk_and_print(  ) {
        if( bp::override func_walk_and_print = this->get_override( "walk_and_print" ) )
            func_walk_and_print(  );
        else{
            this->ISample::walk_and_print(  );
        }
    }
    
    void default_walk_and_print(  ) {
        ISample::walk_and_print( );
    }

};

struct IFormFactorDecorator_wrapper : IFormFactorDecorator, bp::wrapper< IFormFactorDecorator > {

    virtual ::IFormFactorDecorator * clone(  ) const {
        bp::override func_clone = this->get_override( "clone" );
        return func_clone(  );
    }

    virtual void setAmbientRefractiveIndex( ::complex_t refractive_index ) {
        if( bp::override func_setAmbientRefractiveIndex = this->get_override( "setAmbientRefractiveIndex" ) )
            func_setAmbientRefractiveIndex( refractive_index );
        else{
            this->IFormFactorDecorator::setAmbientRefractiveIndex( refractive_index );
        }
    }
    
    void default_setAmbientRefractiveIndex( ::complex_t refractive_index ) {
        IFormFactorDecorator::setAmbientRefractiveIndex( refractive_index );
    }

    virtual ::ParameterPool * createParameterTree(  ) {
        if( bp::override func_createParameterTree = this->get_override( "createParameterTree" ) )
            return func_createParameterTree(  );
        else{
            return this->ISample::createParameterTree(  );
        }
    }
    
    ::ParameterPool * default_createParameterTree(  ) {
        return ISample::createParameterTree( );
    }

    virtual ::complex_t evaluate( ::cvector_t k_i, ::cvector_t k_f, double alpha_i, double alpha_f ) const {
        bp::override func_evaluate = this->get_override( "evaluate" );
        return func_evaluate( k_i, k_f, alpha_i, alpha_f );
    }

    virtual int getNumberOfStochasticParameters(  ) const  {
        if( bp::override func_getNumberOfStochasticParameters = this->get_override( "getNumberOfStochasticParameters" ) )
            return func_getNumberOfStochasticParameters(  );
        else{
            return this->IFormFactor::getNumberOfStochasticParameters(  );
        }
    }
    
    int default_getNumberOfStochasticParameters(  ) const  {
        return IFormFactor::getNumberOfStochasticParameters( );
    }

    virtual double getVolume(  ) const  {
        if( bp::override func_getVolume = this->get_override( "getVolume" ) )
            return func_getVolume(  );
        else{
            return this->IFormFactor::getVolume(  );
        }
    }
    
    double default_getVolume(  ) const  {
        return IFormFactor::getVolume( );
    }

    virtual void walk_and_print(  ) {
        if( bp::override func_walk_and_print = this->get_override( "walk_and_print" ) )
            func_walk_and_print(  );
        else{
            this->ISample::walk_and_print(  );
        }
    }
    
    void default_walk_and_print(  ) {
        ISample::walk_and_print( );
    }

};

void register_classes_2(){

    bp::class_< Geometry::RotateX3D, bp::bases< Geometry::Rotate3D > >( "RotateX3D", bp::init< >() )    
        .def( bp::init< double >(( bp::arg("a") )) );

    bp::class_< Geometry::RotateY3D, bp::bases< Geometry::Rotate3D > >( "RotateY3D", bp::init< >() )    
        .def( bp::init< double >(( bp::arg("a") )) );

    bp::class_< Geometry::RotateZ3D, bp::bases< Geometry::Rotate3D > >( "RotateZ3D", bp::init< >() )    
        .def( bp::init< double >(( bp::arg("a") )) );

    bp::class_< Geometry::Scale3D, bp::bases< Geometry::Transform3D > >( "Scale3D", bp::init< >() )    
        .def( bp::init< double, double, double >(( bp::arg("x"), bp::arg("y"), bp::arg("z") )) )    
        .def( bp::init< double >(( bp::arg("s") )) );

    bp::class_< Geometry::ScaleX3D, bp::bases< Geometry::Scale3D > >( "ScaleX3D", bp::init< >() )    
        .def( bp::init< double >(( bp::arg("x") )) );

    bp::class_< Geometry::ScaleY3D, bp::bases< Geometry::Scale3D > >( "ScaleY3D", bp::init< >() )    
        .def( bp::init< double >(( bp::arg("y") )) );

    bp::class_< Geometry::ScaleZ3D, bp::bases< Geometry::Scale3D > >( "ScaleZ3D", bp::init< >() )    
        .def( bp::init< double >(( bp::arg("z") )) );

    bp::class_< Geometry::Translate3D, bp::bases< Geometry::Transform3D > >( "Translate3D", bp::init< >() )    
        .def( bp::init< double, double, double >(( bp::arg("x"), bp::arg("y"), bp::arg("z") )) );

    bp::class_< Geometry::TranslateX3D, bp::bases< Geometry::Translate3D > >( "TranslateX3D", bp::init< >() )    
        .def( bp::init< double >(( bp::arg("x") )) );

    bp::class_< Geometry::TranslateY3D, bp::bases< Geometry::Translate3D > >( "TranslateY3D", bp::init< >() )    
        .def( bp::init< double >(( bp::arg("y") )) );

    bp::class_< Geometry::TranslateZ3D, bp::bases< Geometry::Translate3D > >( "TranslateZ3D", bp::init< >() )    
        .def( bp::init< double >(( bp::arg("z") )) );

    { //::IMaterial
        typedef bp::class_< IMaterial > IMaterial_exposer_t;
        IMaterial_exposer_t IMaterial_exposer = IMaterial_exposer_t( "IMaterial", bp::init< >() );
        bp::scope IMaterial_scope( IMaterial_exposer );
        IMaterial_exposer.def( bp::init< std::string const & >(( bp::arg("name") )) );
        IMaterial_exposer.def( bp::init< IMaterial const & >(( bp::arg("other") )) );
        { //::IMaterial::operator=
        
            typedef ::IMaterial & ( ::IMaterial::*assign_function_type )( ::IMaterial const & ) ;
            
            IMaterial_exposer.def( 
                "assign"
                , assign_function_type( &::IMaterial::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        IMaterial_exposer.def( bp::self_ns::str( bp::self ) );
    }

    { //::HomogeneousMaterial
        typedef bp::class_< HomogeneousMaterial, bp::bases< IMaterial > > HomogeneousMaterial_exposer_t;
        HomogeneousMaterial_exposer_t HomogeneousMaterial_exposer = HomogeneousMaterial_exposer_t( "HomogeneousMaterial", bp::init< >() );
        bp::scope HomogeneousMaterial_scope( HomogeneousMaterial_exposer );
        HomogeneousMaterial_exposer.def( bp::init< complex_t >(( bp::arg("refractive_index") )) );
        HomogeneousMaterial_exposer.def( bp::init< std::string const &, complex_t >(( bp::arg("name"), bp::arg("refractive_index") )) );
        HomogeneousMaterial_exposer.def( bp::init< HomogeneousMaterial const & >(( bp::arg("other") )) );
        { //::HomogeneousMaterial::getRefractiveIndex
        
            typedef ::complex_t ( ::HomogeneousMaterial::*getRefractiveIndex_function_type )(  ) const;
            
            HomogeneousMaterial_exposer.def( 
                "getRefractiveIndex"
                , getRefractiveIndex_function_type( &::HomogeneousMaterial::getRefractiveIndex ) );
        
        }
        { //::HomogeneousMaterial::operator=
        
            typedef ::HomogeneousMaterial & ( ::HomogeneousMaterial::*assign_function_type )( ::HomogeneousMaterial const & ) ;
            
            HomogeneousMaterial_exposer.def( 
                "assign"
                , assign_function_type( &::HomogeneousMaterial::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        { //::HomogeneousMaterial::setRefractiveIndex
        
            typedef void ( ::HomogeneousMaterial::*setRefractiveIndex_function_type )( ::complex_t ) ;
            
            HomogeneousMaterial_exposer.def( 
                "setRefractiveIndex"
                , setRefractiveIndex_function_type( &::HomogeneousMaterial::setRefractiveIndex )
                , ( bp::arg("refractive_index") ) );
        
        }
    }

    bp::class_< ICompositeSample_wrapper, bp::bases< ISample >, boost::noncopyable >( "ICompositeSample", bp::init< >() )    
        .def( 
            "clone"
            , (::ISample * ( ::ISample::* )(  ) const)(&::ISample::clone)
            , (::ISample * ( ICompositeSample_wrapper::* )(  ) const)(&ICompositeSample_wrapper::default_clone)
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "createParameterTree"
            , (::ParameterPool * ( ::ISample::* )(  ) )(&::ISample::createParameterTree)
            , (::ParameterPool * ( ICompositeSample_wrapper::* )(  ) )(&ICompositeSample_wrapper::default_createParameterTree)
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "walk_and_print"
            , (void ( ::ISample::* )(  ) )(&::ISample::walk_and_print)
            , (void ( ICompositeSample_wrapper::* )(  ) )(&ICompositeSample_wrapper::default_walk_and_print) );

    bp::class_< IClusteredNanoParticles_wrapper, bp::bases< ICompositeSample >, boost::noncopyable >( "IClusteredNanoParticles" )    
        .def( 
            "clone"
            , bp::pure_virtual( (::IClusteredNanoParticles * ( ::IClusteredNanoParticles::* )(  ) const)(&::IClusteredNanoParticles::clone) )
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "createTotalFormFactor"
            , bp::pure_virtual( (::IFormFactor * ( ::IClusteredNanoParticles::* )( ::IFormFactor const &,::complex_t ) const)(&::IClusteredNanoParticles::createTotalFormFactor) )
            , ( bp::arg("meso_crystal_form_factor"), bp::arg("ambient_refractive_index") )
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "setAmbientRefractiveIndex"
            , bp::pure_virtual( (void ( ::IClusteredNanoParticles::* )( ::complex_t ) )(&::IClusteredNanoParticles::setAmbientRefractiveIndex) )
            , ( bp::arg("refractive_index") ) )    
        .def( 
            "createParameterTree"
            , (::ParameterPool * ( ::ISample::* )(  ) )(&::ISample::createParameterTree)
            , (::ParameterPool * ( IClusteredNanoParticles_wrapper::* )(  ) )(&IClusteredNanoParticles_wrapper::default_createParameterTree)
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "walk_and_print"
            , (void ( ::ISample::* )(  ) )(&::ISample::walk_and_print)
            , (void ( IClusteredNanoParticles_wrapper::* )(  ) )(&IClusteredNanoParticles_wrapper::default_walk_and_print) );

    bp::class_< IFormFactorDecorator_wrapper, bp::bases< IFormFactor >, boost::noncopyable >( "IFormFactorDecorator", bp::no_init )    
        .def( 
            "clone"
            , bp::pure_virtual( (::IFormFactorDecorator * ( ::IFormFactorDecorator::* )(  ) const)(&::IFormFactorDecorator::clone) )
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "setAmbientRefractiveIndex"
            , (void ( ::IFormFactorDecorator::* )( ::complex_t ) )(&::IFormFactorDecorator::setAmbientRefractiveIndex)
            , (void ( IFormFactorDecorator_wrapper::* )( ::complex_t ) )(&IFormFactorDecorator_wrapper::default_setAmbientRefractiveIndex)
            , ( bp::arg("refractive_index") ) )    
        .def( 
            "createParameterTree"
            , (::ParameterPool * ( ::ISample::* )(  ) )(&::ISample::createParameterTree)
            , (::ParameterPool * ( IFormFactorDecorator_wrapper::* )(  ) )(&IFormFactorDecorator_wrapper::default_createParameterTree)
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "evaluate"
            , bp::pure_virtual( (::complex_t ( ::IFormFactor::* )( ::cvector_t,::cvector_t,double,double ) const)(&::IFormFactor::evaluate) )
            , ( bp::arg("k_i"), bp::arg("k_f"), bp::arg("alpha_i"), bp::arg("alpha_f") ) )    
        .def( 
            "getNumberOfStochasticParameters"
            , (int ( ::IFormFactor::* )(  ) const)(&::IFormFactor::getNumberOfStochasticParameters)
            , (int ( IFormFactorDecorator_wrapper::* )(  ) const)(&IFormFactorDecorator_wrapper::default_getNumberOfStochasticParameters) )    
        .def( 
            "getVolume"
            , (double ( ::IFormFactor::* )(  ) const)(&::IFormFactor::getVolume)
            , (double ( IFormFactorDecorator_wrapper::* )(  ) const)(&IFormFactorDecorator_wrapper::default_getVolume) )    
        .def( 
            "walk_and_print"
            , (void ( ::ISample::* )(  ) )(&::ISample::walk_and_print)
            , (void ( IFormFactorDecorator_wrapper::* )(  ) )(&IFormFactorDecorator_wrapper::default_walk_and_print) );

}

// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonCoreList.h"
#include "ILayout.pypp.h"

namespace bp = boost::python;

struct ILayout_wrapper : ILayout, bp::wrapper< ILayout > {

    ILayout_wrapper( )
    : ILayout( )
      , bp::wrapper< ILayout >(){
        // null constructor
    m_pyobj = 0;
    }

    virtual void accept( ::ISampleVisitor * visitor ) const {
        bp::override func_accept = this->get_override( "accept" );
        func_accept( boost::python::ptr(visitor) );
    }

    virtual ::ILayout * clone(  ) const {
        bp::override func_clone = this->get_override( "clone" );
        return func_clone(  );
    }

    virtual ::ILayout * cloneInvertB(  ) const {
        bp::override func_cloneInvertB = this->get_override( "cloneInvertB" );
        return func_cloneInvertB(  );
    }

    virtual double getAbundanceOfParticle( ::std::size_t index ) const {
        bp::override func_getAbundanceOfParticle = this->get_override( "getAbundanceOfParticle" );
        return func_getAbundanceOfParticle( index );
    }

    virtual ::IInterferenceFunction const * getInterferenceFunction(  ) const {
        bp::override func_getInterferenceFunction = this->get_override( "getInterferenceFunction" );
        return func_getInterferenceFunction(  );
    }

    virtual ::std::size_t getNumberOfParticles(  ) const {
        bp::override func_getNumberOfParticles = this->get_override( "getNumberOfParticles" );
        return func_getNumberOfParticles(  );
    }

    virtual ::IAbstractParticle const * getParticle( ::std::size_t index ) const {
        bp::override func_getParticle = this->get_override( "getParticle" );
        return func_getParticle( index );
    }

    virtual ::SafePointerVector< const IParticle > getParticles(  ) const {
        bp::override func_getParticles = this->get_override( "getParticles" );
        return func_getParticles(  );
    }

    virtual double getTotalParticleSurfaceDensity(  ) const {
        bp::override func_getTotalParticleSurfaceDensity = this->get_override( "getTotalParticleSurfaceDensity" );
        return func_getTotalParticleSurfaceDensity(  );
    }

    virtual void setTotalParticleSurfaceDensity( double particle_density ){
        bp::override func_setTotalParticleSurfaceDensity = this->get_override( "setTotalParticleSurfaceDensity" );
        func_setTotalParticleSurfaceDensity( particle_density );
    }

    virtual bool containsMagneticMaterial(  ) const  {
        if( bp::override func_containsMagneticMaterial = this->get_override( "containsMagneticMaterial" ) )
            return func_containsMagneticMaterial(  );
        else{
            return this->ISample::containsMagneticMaterial(  );
        }
    }
    
    bool default_containsMagneticMaterial(  ) const  {
        return ISample::containsMagneticMaterial( );
    }

    virtual ::std::vector< const ISample* > getChildren(  ) const  {
        if( bp::override func_getChildren = this->get_override( "getChildren" ) )
            return func_getChildren(  );
        else{
            return this->ICompositeSample::getChildren(  );
        }
    }
    
    ::std::vector< const ISample* > default_getChildren(  ) const  {
        return ICompositeSample::getChildren( );
    }

    virtual void printSampleTree(  ) {
        if( bp::override func_printSampleTree = this->get_override( "printSampleTree" ) )
            func_printSampleTree(  );
        else{
            this->ISample::printSampleTree(  );
        }
    }
    
    void default_printSampleTree(  ) {
        ISample::printSampleTree( );
    }

    virtual ::std::size_t size(  ) const  {
        if( bp::override func_size = this->get_override( "size" ) )
            return func_size(  );
        else{
            return this->ICompositeSample::size(  );
        }
    }
    
    ::std::size_t default_size(  ) const  {
        return ICompositeSample::size( );
    }

    virtual void transferToCPP(  ) {
        
        if( !this->m_pyobj) {
            this->m_pyobj = boost::python::detail::wrapper_base_::get_owner(*this);
            Py_INCREF(this->m_pyobj);
        }
        
        if( bp::override func_transferToCPP = this->get_override( "transferToCPP" ) )
            func_transferToCPP(  );
        else{
            this->ICloneable::transferToCPP(  );
        }
    }
    
    void default_transferToCPP(  ) {
        
        if( !this->m_pyobj) {
            this->m_pyobj = boost::python::detail::wrapper_base_::get_owner(*this);
            Py_INCREF(this->m_pyobj);
        }
        
        ICloneable::transferToCPP( );
    }

    PyObject* m_pyobj;

};

void register_ILayout_class(){

    { //::ILayout
        typedef bp::class_< ILayout_wrapper, bp::bases< ICompositeSample >, std::auto_ptr< ILayout_wrapper >, boost::noncopyable > ILayout_exposer_t;
        ILayout_exposer_t ILayout_exposer = ILayout_exposer_t( "ILayout", "Interface to equip a sample component with various properties.", bp::init< >() );
        bp::scope ILayout_scope( ILayout_exposer );
        bp::enum_< ILayout::EInterferenceApproximation>("EInterferenceApproximation")
            .value("DA", ILayout::DA)
            .value("SSCA", ILayout::SSCA)
            .export_values()
            ;
        { //::ILayout::accept
        
            typedef void ( ::ILayout::*accept_function_type)( ::ISampleVisitor * ) const;
            
            ILayout_exposer.def( 
                "accept"
                , bp::pure_virtual( accept_function_type(&::ILayout::accept) )
                , ( bp::arg("visitor") )
                , "calls the ISampleVisitor's visit method." );
        
        }
        { //::ILayout::clone
        
            typedef ::ILayout * ( ::ILayout::*clone_function_type)(  ) const;
            
            ILayout_exposer.def( 
                "clone"
                , bp::pure_virtual( clone_function_type(&::ILayout::clone) )
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::ILayout::cloneInvertB
        
            typedef ::ILayout * ( ::ILayout::*cloneInvertB_function_type)(  ) const;
            
            ILayout_exposer.def( 
                "cloneInvertB"
                , bp::pure_virtual( cloneInvertB_function_type(&::ILayout::cloneInvertB) )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "Returns a clone with inverted magnetic fields." );
        
        }
        { //::ILayout::getAbundanceOfParticle
        
            typedef double ( ::ILayout::*getAbundanceOfParticle_function_type)( ::std::size_t ) const;
            
            ILayout_exposer.def( 
                "getAbundanceOfParticle"
                , bp::pure_virtual( getAbundanceOfParticle_function_type(&::ILayout::getAbundanceOfParticle) )
                , ( bp::arg("index") ) );
        
        }
        { //::ILayout::getApproximation
        
            typedef ::ILayout::EInterferenceApproximation ( ::ILayout::*getApproximation_function_type)(  ) const;
            
            ILayout_exposer.def( 
                "getApproximation"
                , getApproximation_function_type( &::ILayout::getApproximation ) );
        
        }
        { //::ILayout::getInterferenceFunction
        
            typedef ::IInterferenceFunction const * ( ::ILayout::*getInterferenceFunction_function_type)(  ) const;
            
            ILayout_exposer.def( 
                "getInterferenceFunction"
                , bp::pure_virtual( getInterferenceFunction_function_type(&::ILayout::getInterferenceFunction) )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "Returns interference function." );
        
        }
        { //::ILayout::getNumberOfParticles
        
            typedef ::std::size_t ( ::ILayout::*getNumberOfParticles_function_type)(  ) const;
            
            ILayout_exposer.def( 
                "getNumberOfParticles"
                , bp::pure_virtual( getNumberOfParticles_function_type(&::ILayout::getNumberOfParticles) )
                , "Returns number of particles." );
        
        }
        { //::ILayout::getParticle
        
            typedef ::IAbstractParticle const * ( ::ILayout::*getParticle_function_type)( ::std::size_t ) const;
            
            ILayout_exposer.def( 
                "getParticle"
                , bp::pure_virtual( getParticle_function_type(&::ILayout::getParticle) )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "Returns information about particle with index." );
        
        }
        { //::ILayout::getParticles
        
            typedef ::SafePointerVector<const IParticle> ( ::ILayout::*getParticles_function_type)(  ) const;
            
            ILayout_exposer.def( 
                "getParticles"
                , bp::pure_virtual( getParticles_function_type(&::ILayout::getParticles) )
                , "Returns information on all particles (type and abundance) and generates new particles if an IAbstractParticle denotes a collection " );
        
        }
        { //::ILayout::getTotalAbundance
        
            typedef double ( ::ILayout::*getTotalAbundance_function_type)(  ) const;
            
            ILayout_exposer.def( 
                "getTotalAbundance"
                , getTotalAbundance_function_type( &::ILayout::getTotalAbundance ) );
        
        }
        { //::ILayout::getTotalParticleSurfaceDensity
        
            typedef double ( ::ILayout::*getTotalParticleSurfaceDensity_function_type)(  ) const;
            
            ILayout_exposer.def( 
                "getTotalParticleSurfaceDensity"
                , bp::pure_virtual( getTotalParticleSurfaceDensity_function_type(&::ILayout::getTotalParticleSurfaceDensity) )
                , "Returns surface density of all particles." );
        
        }
        { //::ILayout::setApproximation
        
            typedef void ( ::ILayout::*setApproximation_function_type)( ::ILayout::EInterferenceApproximation ) ;
            
            ILayout_exposer.def( 
                "setApproximation"
                , setApproximation_function_type( &::ILayout::setApproximation )
                , ( bp::arg("approximation") ) );
        
        }
        { //::ILayout::setTotalParticleSurfaceDensity
        
            typedef void ( ::ILayout::*setTotalParticleSurfaceDensity_function_type)( double ) ;
            
            ILayout_exposer.def( 
                "setTotalParticleSurfaceDensity"
                , bp::pure_virtual( setTotalParticleSurfaceDensity_function_type(&::ILayout::setTotalParticleSurfaceDensity) )
                , ( bp::arg("particle_density") )
                , "Sets surface density of all particles." );
        
        }
        { //::ISample::containsMagneticMaterial
        
            typedef bool ( ::ISample::*containsMagneticMaterial_function_type)(  ) const;
            typedef bool ( ILayout_wrapper::*default_containsMagneticMaterial_function_type)(  ) const;
            
            ILayout_exposer.def( 
                "containsMagneticMaterial"
                , containsMagneticMaterial_function_type(&::ISample::containsMagneticMaterial)
                , default_containsMagneticMaterial_function_type(&ILayout_wrapper::default_containsMagneticMaterial) );
        
        }
        { //::ICompositeSample::getChildren
        
            typedef ::std::vector< const ISample* > ( ::ICompositeSample::*getChildren_function_type)(  ) const;
            typedef ::std::vector< const ISample* > ( ILayout_wrapper::*default_getChildren_function_type)(  ) const;
            
            ILayout_exposer.def( 
                "getChildren"
                , getChildren_function_type(&::ICompositeSample::getChildren)
                , default_getChildren_function_type(&ILayout_wrapper::default_getChildren) );
        
        }
        { //::ISample::printSampleTree
        
            typedef void ( ::ISample::*printSampleTree_function_type)(  ) ;
            typedef void ( ILayout_wrapper::*default_printSampleTree_function_type)(  ) ;
            
            ILayout_exposer.def( 
                "printSampleTree"
                , printSampleTree_function_type(&::ISample::printSampleTree)
                , default_printSampleTree_function_type(&ILayout_wrapper::default_printSampleTree) );
        
        }
        { //::ICompositeSample::size
        
            typedef ::std::size_t ( ::ICompositeSample::*size_function_type)(  ) const;
            typedef ::std::size_t ( ILayout_wrapper::*default_size_function_type)(  ) const;
            
            ILayout_exposer.def( 
                "size"
                , size_function_type(&::ICompositeSample::size)
                , default_size_function_type(&ILayout_wrapper::default_size) );
        
        }
        { //::ICloneable::transferToCPP
        
            typedef void ( ::ICloneable::*transferToCPP_function_type)(  ) ;
            typedef void ( ILayout_wrapper::*default_transferToCPP_function_type)(  ) ;
            
            ILayout_exposer.def( 
                "transferToCPP"
                , transferToCPP_function_type(&::ICloneable::transferToCPP)
                , default_transferToCPP_function_type(&ILayout_wrapper::default_transferToCPP) );
        
        }
    }

}

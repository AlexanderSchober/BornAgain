// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonCoreList.h"
#include "LayerInterface.pypp.h"

namespace bp = boost::python;

struct LayerInterface_wrapper : LayerInterface, bp::wrapper< LayerInterface > {

    virtual ::LayerInterface * clone(  ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone(  );
        else{
            return this->LayerInterface::clone(  );
        }
    }
    
    ::LayerInterface * default_clone(  ) const  {
        return LayerInterface::clone( );
    }

    virtual ::ISample * cloneInvertB(  ) const  {
        if( bp::override func_cloneInvertB = this->get_override( "cloneInvertB" ) )
            return func_cloneInvertB(  );
        else{
            return this->ISample::cloneInvertB(  );
        }
    }
    
    ::ISample * default_cloneInvertB(  ) const  {
        return ISample::cloneInvertB( );
    }

    virtual bool containsMagneticMaterial(  ) const  {
        if( bp::override func_containsMagneticMaterial = this->get_override( "containsMagneticMaterial" ) )
            return func_containsMagneticMaterial(  );
        else{
            return this->ISample::containsMagneticMaterial(  );
        }
    }
    
    bool default_containsMagneticMaterial(  ) const  {
        return ISample::containsMagneticMaterial( );
    }

    virtual ::std::vector< const ISample* > getChildren(  ) const  {
        if( bp::override func_getChildren = this->get_override( "getChildren" ) )
            return func_getChildren(  );
        else{
            return this->ICompositeSample::getChildren(  );
        }
    }
    
    ::std::vector< const ISample* > default_getChildren(  ) const  {
        return ICompositeSample::getChildren( );
    }

    virtual void printSampleTree(  ) {
        if( bp::override func_printSampleTree = this->get_override( "printSampleTree" ) )
            func_printSampleTree(  );
        else{
            this->ISample::printSampleTree(  );
        }
    }
    
    void default_printSampleTree(  ) {
        ISample::printSampleTree( );
    }

    virtual ::std::size_t size(  ) const  {
        if( bp::override func_size = this->get_override( "size" ) )
            return func_size(  );
        else{
            return this->ICompositeSample::size(  );
        }
    }
    
    ::std::size_t default_size(  ) const  {
        return ICompositeSample::size( );
    }

    virtual void transferToCPP(  ) {
        
        if( !this->m_pyobj) {
            this->m_pyobj = boost::python::detail::wrapper_base_::get_owner(*this);
            Py_INCREF(this->m_pyobj);
        }
        
        if( bp::override func_transferToCPP = this->get_override( "transferToCPP" ) )
            func_transferToCPP(  );
        else{
            this->ICloneable::transferToCPP(  );
        }
    }
    
    void default_transferToCPP(  ) {
        
        if( !this->m_pyobj) {
            this->m_pyobj = boost::python::detail::wrapper_base_::get_owner(*this);
            Py_INCREF(this->m_pyobj);
        }
        
        ICloneable::transferToCPP( );
    }

    PyObject* m_pyobj;

};

void register_LayerInterface_class(){

    { //::LayerInterface
        typedef bp::class_< LayerInterface_wrapper, bp::bases< ICompositeSample >, std::auto_ptr< LayerInterface_wrapper >, boost::noncopyable > LayerInterface_exposer_t;
        LayerInterface_exposer_t LayerInterface_exposer = LayerInterface_exposer_t( "LayerInterface", "Interface between two layers, possibly with roughness.", bp::no_init );
        bp::scope LayerInterface_scope( LayerInterface_exposer );
        { //::LayerInterface::clone
        
            typedef ::LayerInterface * ( ::LayerInterface::*clone_function_type)(  ) const;
            typedef ::LayerInterface * ( LayerInterface_wrapper::*default_clone_function_type)(  ) const;
            
            LayerInterface_exposer.def( 
                "clone"
                , clone_function_type(&::LayerInterface::clone)
                , default_clone_function_type(&LayerInterface_wrapper::default_clone)
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::LayerInterface::getLayerBottom
        
            typedef ::Layer const * ( ::LayerInterface::*getLayerBottom_function_type)(  ) const;
            
            LayerInterface_exposer.def( 
                "getLayerBottom"
                , getLayerBottom_function_type( &::LayerInterface::getLayerBottom )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "Returns bottom layer." );
        
        }
        { //::LayerInterface::getLayerTop
        
            typedef ::Layer const * ( ::LayerInterface::*getLayerTop_function_type)(  ) const;
            
            LayerInterface_exposer.def( 
                "getLayerTop"
                , getLayerTop_function_type( &::LayerInterface::getLayerTop )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "Returns top layer." );
        
        }
        { //::LayerInterface::getRoughness
        
            typedef ::LayerRoughness const * ( ::LayerInterface::*getRoughness_function_type)(  ) const;
            
            LayerInterface_exposer.def( 
                "getRoughness"
                , getRoughness_function_type( &::LayerInterface::getRoughness )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "Returns roughness of the interface." );
        
        }
        { //::LayerInterface::setRoughness
        
            typedef void ( ::LayerInterface::*setRoughness_function_type)( ::LayerRoughness const & ) ;
            
            LayerInterface_exposer.def( 
                "setRoughness"
                , setRoughness_function_type( &::LayerInterface::setRoughness )
                , ( bp::arg("roughness") )
                , "Sets roughness of the interface." );
        
        }
        { //::ISample::cloneInvertB
        
            typedef ::ISample * ( ::ISample::*cloneInvertB_function_type)(  ) const;
            typedef ::ISample * ( LayerInterface_wrapper::*default_cloneInvertB_function_type)(  ) const;
            
            LayerInterface_exposer.def( 
                "cloneInvertB"
                , cloneInvertB_function_type(&::ISample::cloneInvertB)
                , default_cloneInvertB_function_type(&LayerInterface_wrapper::default_cloneInvertB)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::ISample::containsMagneticMaterial
        
            typedef bool ( ::ISample::*containsMagneticMaterial_function_type)(  ) const;
            typedef bool ( LayerInterface_wrapper::*default_containsMagneticMaterial_function_type)(  ) const;
            
            LayerInterface_exposer.def( 
                "containsMagneticMaterial"
                , containsMagneticMaterial_function_type(&::ISample::containsMagneticMaterial)
                , default_containsMagneticMaterial_function_type(&LayerInterface_wrapper::default_containsMagneticMaterial) );
        
        }
        { //::ICompositeSample::getChildren
        
            typedef ::std::vector< const ISample* > ( ::ICompositeSample::*getChildren_function_type)(  ) const;
            typedef ::std::vector< const ISample* > ( LayerInterface_wrapper::*default_getChildren_function_type)(  ) const;
            
            LayerInterface_exposer.def( 
                "getChildren"
                , getChildren_function_type(&::ICompositeSample::getChildren)
                , default_getChildren_function_type(&LayerInterface_wrapper::default_getChildren) );
        
        }
        { //::ISample::printSampleTree
        
            typedef void ( ::ISample::*printSampleTree_function_type)(  ) ;
            typedef void ( LayerInterface_wrapper::*default_printSampleTree_function_type)(  ) ;
            
            LayerInterface_exposer.def( 
                "printSampleTree"
                , printSampleTree_function_type(&::ISample::printSampleTree)
                , default_printSampleTree_function_type(&LayerInterface_wrapper::default_printSampleTree) );
        
        }
        { //::ICompositeSample::size
        
            typedef ::std::size_t ( ::ICompositeSample::*size_function_type)(  ) const;
            typedef ::std::size_t ( LayerInterface_wrapper::*default_size_function_type)(  ) const;
            
            LayerInterface_exposer.def( 
                "size"
                , size_function_type(&::ICompositeSample::size)
                , default_size_function_type(&LayerInterface_wrapper::default_size) );
        
        }
        { //::ICloneable::transferToCPP
        
            typedef void ( ::ICloneable::*transferToCPP_function_type)(  ) ;
            typedef void ( LayerInterface_wrapper::*default_transferToCPP_function_type)(  ) ;
            
            LayerInterface_exposer.def( 
                "transferToCPP"
                , transferToCPP_function_type(&::ICloneable::transferToCPP)
                , default_transferToCPP_function_type(&LayerInterface_wrapper::default_transferToCPP) );
        
        }
    }

}

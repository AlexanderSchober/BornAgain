// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonCoreList.h"
#include "ISampleBuilder.pypp.h"

namespace bp = boost::python;

struct ISampleBuilder_wrapper : ISampleBuilder, bp::wrapper< ISampleBuilder > {

    ISampleBuilder_wrapper(ISampleBuilder const & arg )
    : ISampleBuilder( arg )
      , bp::wrapper< ISampleBuilder >(){
        // copy constructor
        
    }

    ISampleBuilder_wrapper( )
    : ISampleBuilder( )
      , bp::wrapper< ISampleBuilder >(){
        // null constructor
    
    }

    virtual ::ISample * buildSample(  ) const  {
        if( bp::override func_buildSample = this->get_override( "buildSample" ) )
            return func_buildSample(  );
        else{
            return this->ISampleBuilder::buildSample(  );
        }
    }
    
    ::ISample * default_buildSample(  ) const  {
        return ISampleBuilder::buildSample( );
    }

};

void register_ISampleBuilder_class(){

    { //::ISampleBuilder
        typedef bp::class_< ISampleBuilder_wrapper, bp::bases< IParameterized > > ISampleBuilder_exposer_t;
        ISampleBuilder_exposer_t ISampleBuilder_exposer = ISampleBuilder_exposer_t( "ISampleBuilder", bp::init< >() );
        bp::scope ISampleBuilder_scope( ISampleBuilder_exposer );
        { //::ISampleBuilder::buildSample
        
            typedef ::ISample * ( ::ISampleBuilder::*buildSample_function_type)(  ) const;
            typedef ::ISample * ( ISampleBuilder_wrapper::*default_buildSample_function_type)(  ) const;
            
            ISampleBuilder_exposer.def( 
                "buildSample"
                , buildSample_function_type(&::ISampleBuilder::buildSample)
                , default_buildSample_function_type(&ISampleBuilder_wrapper::default_buildSample)
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< ISampleBuilder > >();
        bp::implicitly_convertible< boost::shared_ptr< ISampleBuilder >, boost::shared_ptr< IParameterized > >();
        bp::implicitly_convertible< boost::shared_ptr< ISampleBuilder >, boost::shared_ptr< INamed > >();
    }

}

// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonCoreList.h"
#include "DistributionLogNormal.pypp.h"

namespace bp = boost::python;

struct DistributionLogNormal_wrapper : DistributionLogNormal, bp::wrapper< DistributionLogNormal > {

    DistributionLogNormal_wrapper(DistributionLogNormal const & arg )
    : DistributionLogNormal( arg )
      , bp::wrapper< DistributionLogNormal >(){
        // copy constructor
        m_pyobj = 0;
    }

    DistributionLogNormal_wrapper(double scale_param )
    : DistributionLogNormal( scale_param )
      , bp::wrapper< DistributionLogNormal >(){
        // constructor
    m_pyobj = 0;
    }

    DistributionLogNormal_wrapper(double median, double scale_param )
    : DistributionLogNormal( median, scale_param )
      , bp::wrapper< DistributionLogNormal >(){
        // constructor
    m_pyobj = 0;
    }

    virtual ::DistributionLogNormal * clone(  ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone(  );
        else{
            return this->DistributionLogNormal::clone(  );
        }
    }
    
    ::DistributionLogNormal * default_clone(  ) const  {
        return DistributionLogNormal::clone( );
    }

    virtual ::std::vector< double > generateValueList( ::std::size_t nbr_samples, double sigma_factor, ::AttLimits const & limits=::AttLimits( ) ) const  {
        if( bp::override func_generateValueList = this->get_override( "generateValueList" ) )
            return func_generateValueList( nbr_samples, sigma_factor, boost::ref(limits) );
        else{
            return this->DistributionLogNormal::generateValueList( nbr_samples, sigma_factor, boost::ref(limits) );
        }
    }
    
    ::std::vector< double > default_generateValueList( ::std::size_t nbr_samples, double sigma_factor, ::AttLimits const & limits=::AttLimits( ) ) const  {
        return DistributionLogNormal::generateValueList( nbr_samples, sigma_factor, boost::ref(limits) );
    }

    virtual double getMean(  ) const  {
        if( bp::override func_getMean = this->get_override( "getMean" ) )
            return func_getMean(  );
        else{
            return this->DistributionLogNormal::getMean(  );
        }
    }
    
    double default_getMean(  ) const  {
        return DistributionLogNormal::getMean( );
    }

    virtual double probabilityDensity( double x ) const  {
        if( bp::override func_probabilityDensity = this->get_override( "probabilityDensity" ) )
            return func_probabilityDensity( x );
        else{
            return this->DistributionLogNormal::probabilityDensity( x );
        }
    }
    
    double default_probabilityDensity( double x ) const  {
        return DistributionLogNormal::probabilityDensity( x );
    }

    virtual ::std::vector< double > generateValues( ::std::size_t nbr_samples, double xmin, double xmax ) const  {
        if( bp::override func_generateValues = this->get_override( "generateValues" ) )
            return func_generateValues( nbr_samples, xmin, xmax );
        else{
            return this->IDistribution1D::generateValues( nbr_samples, xmin, xmax );
        }
    }
    
    ::std::vector< double > default_generateValues( ::std::size_t nbr_samples, double xmin, double xmax ) const  {
        return IDistribution1D::generateValues( nbr_samples, xmin, xmax );
    }

    PyObject* m_pyobj;

};

void register_DistributionLogNormal_class(){

    { //::DistributionLogNormal
        typedef bp::class_< DistributionLogNormal_wrapper, bp::bases< IDistribution1D >, std::auto_ptr< DistributionLogNormal_wrapper > > DistributionLogNormal_exposer_t;
        DistributionLogNormal_exposer_t DistributionLogNormal_exposer = DistributionLogNormal_exposer_t( "DistributionLogNormal", "Log-normal distributio.", bp::init< double >(( bp::arg("scale_param") )) );
        bp::scope DistributionLogNormal_scope( DistributionLogNormal_exposer );
        DistributionLogNormal_exposer.def( bp::init< double, double >(( bp::arg("median"), bp::arg("scale_param") )) );
        { //::DistributionLogNormal::clone
        
            typedef ::DistributionLogNormal * ( ::DistributionLogNormal::*clone_function_type)(  ) const;
            typedef ::DistributionLogNormal * ( DistributionLogNormal_wrapper::*default_clone_function_type)(  ) const;
            
            DistributionLogNormal_exposer.def( 
                "clone"
                , clone_function_type(&::DistributionLogNormal::clone)
                , default_clone_function_type(&DistributionLogNormal_wrapper::default_clone)
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::DistributionLogNormal::generateValueList
        
            typedef ::std::vector< double > ( ::DistributionLogNormal::*generateValueList_function_type)( ::std::size_t,double,::AttLimits const & ) const;
            typedef ::std::vector< double > ( DistributionLogNormal_wrapper::*default_generateValueList_function_type)( ::std::size_t,double,::AttLimits const & ) const;
            
            DistributionLogNormal_exposer.def( 
                "generateValueList"
                , generateValueList_function_type(&::DistributionLogNormal::generateValueList)
                , default_generateValueList_function_type(&DistributionLogNormal_wrapper::default_generateValueList)
                , ( bp::arg("nbr_samples"), bp::arg("sigma_factor"), bp::arg("limits")=::AttLimits( ) ) );
        
        }
        { //::DistributionLogNormal::getMean
        
            typedef double ( ::DistributionLogNormal::*getMean_function_type)(  ) const;
            typedef double ( DistributionLogNormal_wrapper::*default_getMean_function_type)(  ) const;
            
            DistributionLogNormal_exposer.def( 
                "getMean"
                , getMean_function_type(&::DistributionLogNormal::getMean)
                , default_getMean_function_type(&DistributionLogNormal_wrapper::default_getMean) );
        
        }
        { //::DistributionLogNormal::getMedian
        
            typedef double ( ::DistributionLogNormal::*getMedian_function_type)(  ) const;
            
            DistributionLogNormal_exposer.def( 
                "getMedian"
                , getMedian_function_type( &::DistributionLogNormal::getMedian )
                , "get the median of the distribution." );
        
        }
        { //::DistributionLogNormal::getScalePar
        
            typedef double ( ::DistributionLogNormal::*getScalePar_function_type)(  ) const;
            
            DistributionLogNormal_exposer.def( 
                "getScalePar"
                , getScalePar_function_type( &::DistributionLogNormal::getScalePar )
                , "get the scale parameter of the distribution." );
        
        }
        { //::DistributionLogNormal::probabilityDensity
        
            typedef double ( ::DistributionLogNormal::*probabilityDensity_function_type)( double ) const;
            typedef double ( DistributionLogNormal_wrapper::*default_probabilityDensity_function_type)( double ) const;
            
            DistributionLogNormal_exposer.def( 
                "probabilityDensity"
                , probabilityDensity_function_type(&::DistributionLogNormal::probabilityDensity)
                , default_probabilityDensity_function_type(&DistributionLogNormal_wrapper::default_probabilityDensity)
                , ( bp::arg("x") ) );
        
        }
        { //::IDistribution1D::generateValues
        
            typedef ::std::vector< double > ( ::IDistribution1D::*generateValues_function_type)( ::std::size_t,double,double ) const;
            typedef ::std::vector< double > ( DistributionLogNormal_wrapper::*default_generateValues_function_type)( ::std::size_t,double,double ) const;
            
            DistributionLogNormal_exposer.def( 
                "generateValues"
                , generateValues_function_type(&::IDistribution1D::generateValues)
                , default_generateValues_function_type(&DistributionLogNormal_wrapper::default_generateValues)
                , ( bp::arg("nbr_samples"), bp::arg("xmin"), bp::arg("xmax") ) );
        
        }
    }

}

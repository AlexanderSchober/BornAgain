// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonCoreList.h"
#include "Bin1DCVector.pypp.h"

namespace bp = boost::python;

void register_Bin1DCVector_class(){

    { //::Bin1DCVector
        typedef bp::class_< Bin1DCVector > Bin1DCVector_exposer_t;
        Bin1DCVector_exposer_t Bin1DCVector_exposer = Bin1DCVector_exposer_t( "Bin1DCVector", "An one-dimensional range of cvector_t'.", bp::init< >() );
        bp::scope Bin1DCVector_scope( Bin1DCVector_exposer );
        Bin1DCVector_exposer.def( bp::init< cvector_t const &, cvector_t const & >(( bp::arg("lower"), bp::arg("upper") )) );
        Bin1DCVector_exposer.def( bp::init< double, Bin1D const &, Bin1D const & >(( bp::arg("wavelength"), bp::arg("alpha_bin"), bp::arg("phi_bin") ), "creation on Bin1DCVector from alpha and phi bins.") );
        { //::Bin1DCVector::getDelta
        
            typedef ::cvector_t ( ::Bin1DCVector::*getDelta_function_type)(  ) const;
            
            Bin1DCVector_exposer.def( 
                "getDelta"
                , getDelta_function_type( &::Bin1DCVector::getDelta ) );
        
        }
        { //::Bin1DCVector::getMidPoint
        
            typedef ::cvector_t ( ::Bin1DCVector::*getMidPoint_function_type)(  ) const;
            
            Bin1DCVector_exposer.def( 
                "getMidPoint"
                , getMidPoint_function_type( &::Bin1DCVector::getMidPoint ) );
        
        }
        Bin1DCVector_exposer.def_readwrite( "m_q_lower", &Bin1DCVector::m_q_lower );
        Bin1DCVector_exposer.def_readwrite( "m_q_upper", &Bin1DCVector::m_q_upper );
    }

}

// This file has been generated by Py++.

#include "boost/python.hpp"
#include "BasicVector3D.h"
#include "Experiment.h"
#include "FormFactorCylinder.h"
#include "FormFactorFullSphere.h"
#include "FormFactorPyramid.h"
#include "GISASExperiment.h"
#include "HomogeneousMaterial.h"
#include "IClusteredNanoParticles.h"
#include "ICompositeSample.h"
#include "IFormFactor.h"
#include "IInterferenceFunction.h"
#include "InterferenceFunctionNone.h"
#include "InterferenceFunction1DParaCrystal.h"
#include "IMaterial.h"
#include "ISample.h"
#include "ISingleton.h"
#include "Lattice.h"
#include "LatticeBasis.h"
#include "Layer.h"
#include "LayerDecorator.h"
#include "LayerRoughness.h"
#include "MaterialManager.h"
#include "MesoCrystal.h"
#include "MultiLayer.h"
#include "Particle.h"
#include "NanoParticleCrystal.h"
#include "NanoParticleDecoration.h"
#include "OpticalFresnel.h"
#include "ParameterPool.h"
#include "PythonOutputData.h"
#include "PythonPlusplusHelper.h"
#include "Transform3D.h"
#include "Units.h"
#include "Types.h"
#include "PythonInterface_classes_3.h"

namespace bp = boost::python;

struct IInterferenceFunction_wrapper : IInterferenceFunction, bp::wrapper< IInterferenceFunction > {

    IInterferenceFunction_wrapper()
    : IInterferenceFunction()
      , bp::wrapper< IInterferenceFunction >(){
        // null constructor
        
    }

    virtual ::IInterferenceFunction * clone(  ) const {
        bp::override func_clone = this->get_override( "clone" );
        return func_clone(  );
    }

    virtual double evaluate( ::cvector_t q ) const {
        bp::override func_evaluate = this->get_override( "evaluate" );
        return func_evaluate( q );
    }

    virtual ::ParameterPool * createParameterTree(  ) {
        if( bp::override func_createParameterTree = this->get_override( "createParameterTree" ) )
            return func_createParameterTree(  );
        else{
            return this->ISample::createParameterTree(  );
        }
    }
    
    ::ParameterPool * default_createParameterTree(  ) {
        return ISample::createParameterTree( );
    }

    virtual void walk_and_print(  ) {
        if( bp::override func_walk_and_print = this->get_override( "walk_and_print" ) )
            func_walk_and_print(  );
        else{
            this->ISample::walk_and_print(  );
        }
    }
    
    void default_walk_and_print(  ) {
        ISample::walk_and_print( );
    }

};

struct InterferenceFunction1DParaCrystal_wrapper : InterferenceFunction1DParaCrystal, bp::wrapper< InterferenceFunction1DParaCrystal > {

    InterferenceFunction1DParaCrystal_wrapper(double peak_distance, double width, double corr_length=0.0 )
    : InterferenceFunction1DParaCrystal( peak_distance, width, corr_length )
      , bp::wrapper< InterferenceFunction1DParaCrystal >(){
        // constructor
    
    }

    virtual ::InterferenceFunction1DParaCrystal * clone(  ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone(  );
        else{
            return this->InterferenceFunction1DParaCrystal::clone(  );
        }
    }
    
    ::InterferenceFunction1DParaCrystal * default_clone(  ) const  {
        return InterferenceFunction1DParaCrystal::clone( );
    }

    virtual double evaluate( ::cvector_t q ) const  {
        if( bp::override func_evaluate = this->get_override( "evaluate" ) )
            return func_evaluate( q );
        else{
            return this->InterferenceFunction1DParaCrystal::evaluate( q );
        }
    }
    
    double default_evaluate( ::cvector_t q ) const  {
        return InterferenceFunction1DParaCrystal::evaluate( q );
    }

    virtual ::ParameterPool * createParameterTree(  ) {
        if( bp::override func_createParameterTree = this->get_override( "createParameterTree" ) )
            return func_createParameterTree(  );
        else{
            return this->ISample::createParameterTree(  );
        }
    }
    
    ::ParameterPool * default_createParameterTree(  ) {
        return ISample::createParameterTree( );
    }

    virtual void walk_and_print(  ) {
        if( bp::override func_walk_and_print = this->get_override( "walk_and_print" ) )
            func_walk_and_print(  );
        else{
            this->ISample::walk_and_print(  );
        }
    }
    
    void default_walk_and_print(  ) {
        ISample::walk_and_print( );
    }

};

struct InterferenceFunctionNone_wrapper : InterferenceFunctionNone, bp::wrapper< InterferenceFunctionNone > {

    InterferenceFunctionNone_wrapper( )
    : InterferenceFunctionNone( )
      , bp::wrapper< InterferenceFunctionNone >(){
        // null constructor
    
    }

    virtual ::InterferenceFunctionNone * clone(  ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone(  );
        else{
            return this->InterferenceFunctionNone::clone(  );
        }
    }
    
    ::InterferenceFunctionNone * default_clone(  ) const  {
        return InterferenceFunctionNone::clone( );
    }

    virtual double evaluate( ::cvector_t q ) const  {
        if( bp::override func_evaluate = this->get_override( "evaluate" ) )
            return func_evaluate( q );
        else{
            return this->InterferenceFunctionNone::evaluate( q );
        }
    }
    
    double default_evaluate( ::cvector_t q ) const  {
        return InterferenceFunctionNone::evaluate( q );
    }

    virtual ::ParameterPool * createParameterTree(  ) {
        if( bp::override func_createParameterTree = this->get_override( "createParameterTree" ) )
            return func_createParameterTree(  );
        else{
            return this->ISample::createParameterTree(  );
        }
    }
    
    ::ParameterPool * default_createParameterTree(  ) {
        return ISample::createParameterTree( );
    }

    virtual void walk_and_print(  ) {
        if( bp::override func_walk_and_print = this->get_override( "walk_and_print" ) )
            func_walk_and_print(  );
        else{
            this->ISample::walk_and_print(  );
        }
    }
    
    void default_walk_and_print(  ) {
        ISample::walk_and_print( );
    }

};

struct Particle_wrapper : Particle, bp::wrapper< Particle > {

    Particle_wrapper(::complex_t refractive_index, ::IFormFactor const & p_form_factor )
    : Particle( refractive_index, boost::ref(p_form_factor) )
      , bp::wrapper< Particle >(){
        // constructor
    
    }

    virtual ::ParameterPool * createParameterTree(  ) {
        if( bp::override func_createParameterTree = this->get_override( "createParameterTree" ) )
            return func_createParameterTree(  );
        else{
            return this->ISample::createParameterTree(  );
        }
    }
    
    ::ParameterPool * default_createParameterTree(  ) {
        return ISample::createParameterTree( );
    }

    virtual void walk_and_print(  ) {
        if( bp::override func_walk_and_print = this->get_override( "walk_and_print" ) )
            func_walk_and_print(  );
        else{
            this->ISample::walk_and_print(  );
        }
    }
    
    void default_walk_and_print(  ) {
        ISample::walk_and_print( );
    }

};

struct LatticeBasis_wrapper : LatticeBasis, bp::wrapper< LatticeBasis > {

    LatticeBasis_wrapper( )
    : LatticeBasis( )
      , bp::wrapper< LatticeBasis >(){
        // null constructor
    
    }

    virtual ::ParameterPool * createParameterTree(  ) {
        if( bp::override func_createParameterTree = this->get_override( "createParameterTree" ) )
            return func_createParameterTree(  );
        else{
            return this->ISample::createParameterTree(  );
        }
    }
    
    ::ParameterPool * default_createParameterTree(  ) {
        return ISample::createParameterTree( );
    }

    virtual void walk_and_print(  ) {
        if( bp::override func_walk_and_print = this->get_override( "walk_and_print" ) )
            func_walk_and_print(  );
        else{
            this->ISample::walk_and_print(  );
        }
    }
    
    void default_walk_and_print(  ) {
        ISample::walk_and_print( );
    }

};

struct Layer_wrapper : Layer, bp::wrapper< Layer > {

    Layer_wrapper( )
    : Layer( )
      , bp::wrapper< Layer >(){
        // null constructor
    
    }

    virtual ::Layer * clone(  ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone(  );
        else{
            return this->Layer::clone(  );
        }
    }
    
    ::Layer * default_clone(  ) const  {
        return Layer::clone( );
    }

    virtual double getThickness(  ) const  {
        if( bp::override func_getThickness = this->get_override( "getThickness" ) )
            return func_getThickness(  );
        else{
            return this->Layer::getThickness(  );
        }
    }
    
    double default_getThickness(  ) const  {
        return Layer::getThickness( );
    }

    virtual void setMaterial( ::IMaterial const * p_material ) {
        if( bp::override func_setMaterial = this->get_override( "setMaterial" ) )
            func_setMaterial( boost::python::ptr(p_material) );
        else{
            this->Layer::setMaterial( boost::python::ptr(p_material) );
        }
    }
    
    void default_setMaterial( ::IMaterial const * p_material ) {
        Layer::setMaterial( boost::python::ptr(p_material) );
    }

    virtual void setMaterial( ::IMaterial const * p_material, double thickness ) {
        if( bp::override func_setMaterial = this->get_override( "setMaterial" ) )
            func_setMaterial( boost::python::ptr(p_material), thickness );
        else{
            this->Layer::setMaterial( boost::python::ptr(p_material), thickness );
        }
    }
    
    void default_setMaterial( ::IMaterial const * p_material, double thickness ) {
        Layer::setMaterial( boost::python::ptr(p_material), thickness );
    }

    virtual void setThickness( double thickness ) {
        if( bp::override func_setThickness = this->get_override( "setThickness" ) )
            func_setThickness( thickness );
        else{
            this->Layer::setThickness( thickness );
        }
    }
    
    void default_setThickness( double thickness ) {
        Layer::setThickness( thickness );
    }

    virtual ::ParameterPool * createParameterTree(  ) {
        if( bp::override func_createParameterTree = this->get_override( "createParameterTree" ) )
            return func_createParameterTree(  );
        else{
            return this->ISample::createParameterTree(  );
        }
    }
    
    ::ParameterPool * default_createParameterTree(  ) {
        return ISample::createParameterTree( );
    }

    virtual void walk_and_print(  ) {
        if( bp::override func_walk_and_print = this->get_override( "walk_and_print" ) )
            func_walk_and_print(  );
        else{
            this->ISample::walk_and_print(  );
        }
    }
    
    void default_walk_and_print(  ) {
        ISample::walk_and_print( );
    }

};

struct LayerDecorator_wrapper : LayerDecorator, bp::wrapper< LayerDecorator > {

    LayerDecorator_wrapper(::Layer const & layer )
    : LayerDecorator( boost::ref(layer) )
      , bp::wrapper< LayerDecorator >(){
        // constructor
    
    }

    LayerDecorator_wrapper(::LayerDecorator const & layer )
    : LayerDecorator( boost::ref(layer) )
      , bp::wrapper< LayerDecorator >(){
        // copy constructor
    
    }

    LayerDecorator_wrapper(::Layer const & layer, ::NanoParticleDecoration const & decoration )
    : LayerDecorator( boost::ref(layer), boost::ref(decoration) )
      , bp::wrapper< LayerDecorator >(){
        // constructor
    
    }

    virtual ::LayerDecorator * clone(  ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone(  );
        else{
            return this->LayerDecorator::clone(  );
        }
    }
    
    ::LayerDecorator * default_clone(  ) const  {
        return LayerDecorator::clone( );
    }

    virtual ::ParameterPool * createParameterTree(  ) {
        if( bp::override func_createParameterTree = this->get_override( "createParameterTree" ) )
            return func_createParameterTree(  );
        else{
            return this->ISample::createParameterTree(  );
        }
    }
    
    ::ParameterPool * default_createParameterTree(  ) {
        return ISample::createParameterTree( );
    }

    virtual void walk_and_print(  ) {
        if( bp::override func_walk_and_print = this->get_override( "walk_and_print" ) )
            func_walk_and_print(  );
        else{
            this->ISample::walk_and_print(  );
        }
    }
    
    void default_walk_and_print(  ) {
        ISample::walk_and_print( );
    }

};

struct LayerRoughness_wrapper : LayerRoughness, bp::wrapper< LayerRoughness > {

    LayerRoughness_wrapper( )
    : LayerRoughness( )
      , bp::wrapper< LayerRoughness >(){
        // null constructor
    
    }

    LayerRoughness_wrapper(double sigma, double hurstParameter, double latteralCorrLength )
    : LayerRoughness( sigma, hurstParameter, latteralCorrLength )
      , bp::wrapper< LayerRoughness >(){
        // constructor
    
    }

    LayerRoughness_wrapper(::LayerRoughness const & other )
    : LayerRoughness( boost::ref(other) )
      , bp::wrapper< LayerRoughness >(){
        // copy constructor
    
    }

    virtual ::ISample * clone(  ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone(  );
        else{
            return this->ISample::clone(  );
        }
    }
    
    ::ISample * default_clone(  ) const  {
        return ISample::clone( );
    }

    virtual ::ParameterPool * createParameterTree(  ) {
        if( bp::override func_createParameterTree = this->get_override( "createParameterTree" ) )
            return func_createParameterTree(  );
        else{
            return this->ISample::createParameterTree(  );
        }
    }
    
    ::ParameterPool * default_createParameterTree(  ) {
        return ISample::createParameterTree( );
    }

    virtual void walk_and_print(  ) {
        if( bp::override func_walk_and_print = this->get_override( "walk_and_print" ) )
            func_walk_and_print(  );
        else{
            this->ISample::walk_and_print(  );
        }
    }
    
    void default_walk_and_print(  ) {
        ISample::walk_and_print( );
    }

};

struct MesoCrystal_wrapper : MesoCrystal, bp::wrapper< MesoCrystal > {

    MesoCrystal_wrapper(::IClusteredNanoParticles const & nano_particle_structure, ::IFormFactor & form_factor )
    : MesoCrystal( boost::ref(nano_particle_structure), boost::ref(form_factor) )
      , bp::wrapper< MesoCrystal >(){
        // constructor
    
    }

    virtual ::ParameterPool * createParameterTree(  ) {
        if( bp::override func_createParameterTree = this->get_override( "createParameterTree" ) )
            return func_createParameterTree(  );
        else{
            return this->ISample::createParameterTree(  );
        }
    }
    
    ::ParameterPool * default_createParameterTree(  ) {
        return ISample::createParameterTree( );
    }

    virtual void walk_and_print(  ) {
        if( bp::override func_walk_and_print = this->get_override( "walk_and_print" ) )
            func_walk_and_print(  );
        else{
            this->ISample::walk_and_print(  );
        }
    }
    
    void default_walk_and_print(  ) {
        ISample::walk_and_print( );
    }

};

struct MultiLayer_wrapper : MultiLayer, bp::wrapper< MultiLayer > {

    MultiLayer_wrapper( )
    : MultiLayer( )
      , bp::wrapper< MultiLayer >(){
        // null constructor
    
    }

    virtual ::ParameterPool * createParameterTree(  ) {
        if( bp::override func_createParameterTree = this->get_override( "createParameterTree" ) )
            return func_createParameterTree(  );
        else{
            return this->ISample::createParameterTree(  );
        }
    }
    
    ::ParameterPool * default_createParameterTree(  ) {
        return ISample::createParameterTree( );
    }

    virtual void walk_and_print(  ) {
        if( bp::override func_walk_and_print = this->get_override( "walk_and_print" ) )
            func_walk_and_print(  );
        else{
            this->ISample::walk_and_print(  );
        }
    }
    
    void default_walk_and_print(  ) {
        ISample::walk_and_print( );
    }

};

struct NanoParticleCrystal_wrapper : NanoParticleCrystal, bp::wrapper< NanoParticleCrystal > {

    NanoParticleCrystal_wrapper(NanoParticleCrystal const & arg )
    : NanoParticleCrystal( arg )
      , bp::wrapper< NanoParticleCrystal >(){
        // copy constructor
        
    }

    NanoParticleCrystal_wrapper(::LatticeBasis const & lattice_basis, ::Lattice const & lattice )
    : NanoParticleCrystal( boost::ref(lattice_basis), boost::ref(lattice) )
      , bp::wrapper< NanoParticleCrystal >(){
        // constructor
    
    }

    virtual ::ParameterPool * createParameterTree(  ) {
        if( bp::override func_createParameterTree = this->get_override( "createParameterTree" ) )
            return func_createParameterTree(  );
        else{
            return this->ISample::createParameterTree(  );
        }
    }
    
    ::ParameterPool * default_createParameterTree(  ) {
        return ISample::createParameterTree( );
    }

    virtual void walk_and_print(  ) {
        if( bp::override func_walk_and_print = this->get_override( "walk_and_print" ) )
            func_walk_and_print(  );
        else{
            this->ISample::walk_and_print(  );
        }
    }
    
    void default_walk_and_print(  ) {
        ISample::walk_and_print( );
    }

};

struct NanoParticleDecoration_wrapper : NanoParticleDecoration, bp::wrapper< NanoParticleDecoration > {

    NanoParticleDecoration_wrapper( )
    : NanoParticleDecoration( )
      , bp::wrapper< NanoParticleDecoration >(){
        // null constructor
    
    }

    virtual ::NanoParticleDecoration * clone(  ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone(  );
        else{
            return this->NanoParticleDecoration::clone(  );
        }
    }
    
    ::NanoParticleDecoration * default_clone(  ) const  {
        return NanoParticleDecoration::clone( );
    }

    virtual ::ParameterPool * createParameterTree(  ) {
        if( bp::override func_createParameterTree = this->get_override( "createParameterTree" ) )
            return func_createParameterTree(  );
        else{
            return this->ISample::createParameterTree(  );
        }
    }
    
    ::ParameterPool * default_createParameterTree(  ) {
        return ISample::createParameterTree( );
    }

    virtual void walk_and_print(  ) {
        if( bp::override func_walk_and_print = this->get_override( "walk_and_print" ) )
            func_walk_and_print(  );
        else{
            this->ISample::walk_and_print(  );
        }
    }
    
    void default_walk_and_print(  ) {
        ISample::walk_and_print( );
    }

};

void register_classes_3(){

    bp::class_< IInterferenceFunction_wrapper, bp::bases< ISample >, boost::noncopyable >( "IInterferenceFunction" )    
        .def( 
            "clone"
            , bp::pure_virtual( (::IInterferenceFunction * ( ::IInterferenceFunction::* )(  ) const)(&::IInterferenceFunction::clone) )
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "evaluate"
            , bp::pure_virtual( (double ( ::IInterferenceFunction::* )( ::cvector_t ) const)(&::IInterferenceFunction::evaluate) )
            , ( bp::arg("q") ) )    
        .def( 
            "createParameterTree"
            , (::ParameterPool * ( ::ISample::* )(  ) )(&::ISample::createParameterTree)
            , (::ParameterPool * ( IInterferenceFunction_wrapper::* )(  ) )(&IInterferenceFunction_wrapper::default_createParameterTree)
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "walk_and_print"
            , (void ( ::ISample::* )(  ) )(&::ISample::walk_and_print)
            , (void ( IInterferenceFunction_wrapper::* )(  ) )(&IInterferenceFunction_wrapper::default_walk_and_print) );

    bp::class_< ISingleton< MaterialManager >, boost::noncopyable >( "ISingleton_less__MaterialManager__greater_", bp::no_init )    
        .def( 
            "instance"
            , (::MaterialManager & (*)(  ))( &::ISingleton< MaterialManager >::instance )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .staticmethod( "instance" );

    bp::class_< InterferenceFunction1DParaCrystal_wrapper, bp::bases< IInterferenceFunction >, boost::noncopyable >( "InterferenceFunction1DParaCrystal", bp::init< double, double, bp::optional< double > >(( bp::arg("peak_distance"), bp::arg("width"), bp::arg("corr_length")=0.0 )) )    
        .def( 
            "clone"
            , (::InterferenceFunction1DParaCrystal * ( ::InterferenceFunction1DParaCrystal::* )(  ) const)(&::InterferenceFunction1DParaCrystal::clone)
            , (::InterferenceFunction1DParaCrystal * ( InterferenceFunction1DParaCrystal_wrapper::* )(  ) const)(&InterferenceFunction1DParaCrystal_wrapper::default_clone)
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "evaluate"
            , (double ( ::InterferenceFunction1DParaCrystal::* )( ::cvector_t ) const)(&::InterferenceFunction1DParaCrystal::evaluate)
            , (double ( InterferenceFunction1DParaCrystal_wrapper::* )( ::cvector_t ) const)(&InterferenceFunction1DParaCrystal_wrapper::default_evaluate)
            , ( bp::arg("q") ) )    
        .def( 
            "createParameterTree"
            , (::ParameterPool * ( ::ISample::* )(  ) )(&::ISample::createParameterTree)
            , (::ParameterPool * ( InterferenceFunction1DParaCrystal_wrapper::* )(  ) )(&InterferenceFunction1DParaCrystal_wrapper::default_createParameterTree)
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "walk_and_print"
            , (void ( ::ISample::* )(  ) )(&::ISample::walk_and_print)
            , (void ( InterferenceFunction1DParaCrystal_wrapper::* )(  ) )(&InterferenceFunction1DParaCrystal_wrapper::default_walk_and_print) );

    bp::class_< InterferenceFunctionNone_wrapper, bp::bases< IInterferenceFunction >, boost::noncopyable >( "InterferenceFunctionNone", bp::init< >() )    
        .def( 
            "clone"
            , (::InterferenceFunctionNone * ( ::InterferenceFunctionNone::* )(  ) const)(&::InterferenceFunctionNone::clone)
            , (::InterferenceFunctionNone * ( InterferenceFunctionNone_wrapper::* )(  ) const)(&InterferenceFunctionNone_wrapper::default_clone)
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "evaluate"
            , (double ( ::InterferenceFunctionNone::* )( ::cvector_t ) const)(&::InterferenceFunctionNone::evaluate)
            , (double ( InterferenceFunctionNone_wrapper::* )( ::cvector_t ) const)(&InterferenceFunctionNone_wrapper::default_evaluate)
            , ( bp::arg("q") ) )    
        .def( 
            "createParameterTree"
            , (::ParameterPool * ( ::ISample::* )(  ) )(&::ISample::createParameterTree)
            , (::ParameterPool * ( InterferenceFunctionNone_wrapper::* )(  ) )(&InterferenceFunctionNone_wrapper::default_createParameterTree)
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "walk_and_print"
            , (void ( ::ISample::* )(  ) )(&::ISample::walk_and_print)
            , (void ( InterferenceFunctionNone_wrapper::* )(  ) )(&InterferenceFunctionNone_wrapper::default_walk_and_print) );

    bp::class_< Lattice >( "Lattice", bp::init< >() )    
        .def( bp::init< kvector_t const &, kvector_t const &, kvector_t const & >(( bp::arg("a1"), bp::arg("a2"), bp::arg("a3") )) )    
        .def( 
            "createTrigonalLattice"
            , (::Lattice (*)( double,double ))( &::Lattice::createTrigonalLattice )
            , ( bp::arg("a"), bp::arg("c") )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "getBasisVectorA"
            , (::kvector_t ( ::Lattice::* )(  ) const)( &::Lattice::getBasisVectorA ) )    
        .def( 
            "getBasisVectorB"
            , (::kvector_t ( ::Lattice::* )(  ) const)( &::Lattice::getBasisVectorB ) )    
        .def( 
            "getBasisVectorC"
            , (::kvector_t ( ::Lattice::* )(  ) const)( &::Lattice::getBasisVectorC ) )    
        .staticmethod( "createTrigonalLattice" );

    bp::class_< Particle_wrapper, bp::bases< ICompositeSample >, boost::noncopyable >( "Particle", bp::init< complex_t, IFormFactor const & >(( bp::arg("refractive_index"), bp::arg("p_form_factor") )) )    
        .def( 
            "createParameterTree"
            , (::ParameterPool * ( ::ISample::* )(  ) )(&::ISample::createParameterTree)
            , (::ParameterPool * ( Particle_wrapper::* )(  ) )(&Particle_wrapper::default_createParameterTree)
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "walk_and_print"
            , (void ( ::ISample::* )(  ) )(&::ISample::walk_and_print)
            , (void ( Particle_wrapper::* )(  ) )(&Particle_wrapper::default_walk_and_print) );

    bp::class_< LatticeBasis_wrapper, bp::bases< Particle >, boost::noncopyable >( "LatticeBasis", bp::init< >() )    
        .def( 
            "addParticle"
            , (void ( ::LatticeBasis::* )( ::Particle const &,::kvector_t ) )( &::LatticeBasis::addParticle )
            , ( bp::arg("particle"), bp::arg("position") ) )    
        .def( 
            "createParameterTree"
            , (::ParameterPool * ( ::ISample::* )(  ) )(&::ISample::createParameterTree)
            , (::ParameterPool * ( LatticeBasis_wrapper::* )(  ) )(&LatticeBasis_wrapper::default_createParameterTree)
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "walk_and_print"
            , (void ( ::ISample::* )(  ) )(&::ISample::walk_and_print)
            , (void ( LatticeBasis_wrapper::* )(  ) )(&LatticeBasis_wrapper::default_walk_and_print) );

    bp::class_< Layer_wrapper, bp::bases< ICompositeSample >, boost::noncopyable >( "Layer", bp::init< >() )    
        .def( 
            "clone"
            , (::Layer * ( ::Layer::* )(  ) const)(&::Layer::clone)
            , (::Layer * ( Layer_wrapper::* )(  ) const)(&Layer_wrapper::default_clone)
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "getThickness"
            , (double ( ::Layer::* )(  ) const)(&::Layer::getThickness)
            , (double ( Layer_wrapper::* )(  ) const)(&Layer_wrapper::default_getThickness) )    
        .def( 
            "setMaterial"
            , (void ( ::Layer::* )( ::IMaterial const * ) )(&::Layer::setMaterial)
            , (void ( Layer_wrapper::* )( ::IMaterial const * ) )(&Layer_wrapper::default_setMaterial)
            , ( bp::arg("p_material") ) )    
        .def( 
            "setMaterial"
            , (void ( ::Layer::* )( ::IMaterial const *,double ) )(&::Layer::setMaterial)
            , (void ( Layer_wrapper::* )( ::IMaterial const *,double ) )(&Layer_wrapper::default_setMaterial)
            , ( bp::arg("p_material"), bp::arg("thickness") ) )    
        .def( 
            "setThickness"
            , (void ( ::Layer::* )( double ) )(&::Layer::setThickness)
            , (void ( Layer_wrapper::* )( double ) )(&Layer_wrapper::default_setThickness)
            , ( bp::arg("thickness") ) )    
        .def( 
            "createParameterTree"
            , (::ParameterPool * ( ::ISample::* )(  ) )(&::ISample::createParameterTree)
            , (::ParameterPool * ( Layer_wrapper::* )(  ) )(&Layer_wrapper::default_createParameterTree)
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "walk_and_print"
            , (void ( ::ISample::* )(  ) )(&::ISample::walk_and_print)
            , (void ( Layer_wrapper::* )(  ) )(&Layer_wrapper::default_walk_and_print) );

    bp::class_< LayerDecorator_wrapper, bp::bases< Layer > >( "LayerDecorator", bp::init< Layer const & >(( bp::arg("layer") )) )    
        .def( bp::init< LayerDecorator const & >(( bp::arg("layer") )) )    
        .def( bp::init< Layer const &, NanoParticleDecoration const & >(( bp::arg("layer"), bp::arg("decoration") )) )    
        .def( 
            "clone"
            , (::LayerDecorator * ( ::LayerDecorator::* )(  ) const)(&::LayerDecorator::clone)
            , (::LayerDecorator * ( LayerDecorator_wrapper::* )(  ) const)(&LayerDecorator_wrapper::default_clone)
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "createParameterTree"
            , (::ParameterPool * ( ::ISample::* )(  ) )(&::ISample::createParameterTree)
            , (::ParameterPool * ( LayerDecorator_wrapper::* )(  ) )(&LayerDecorator_wrapper::default_createParameterTree)
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "walk_and_print"
            , (void ( ::ISample::* )(  ) )(&::ISample::walk_and_print)
            , (void ( LayerDecorator_wrapper::* )(  ) )(&LayerDecorator_wrapper::default_walk_and_print) );

    { //::LayerRoughness
        typedef bp::class_< LayerRoughness_wrapper > LayerRoughness_exposer_t;
        LayerRoughness_exposer_t LayerRoughness_exposer = LayerRoughness_exposer_t( "LayerRoughness", bp::init< >() );
        bp::scope LayerRoughness_scope( LayerRoughness_exposer );
        LayerRoughness_exposer.def( bp::init< double, double, double >(( bp::arg("sigma"), bp::arg("hurstParameter"), bp::arg("latteralCorrLength") )) );
        LayerRoughness_exposer.def( bp::init< LayerRoughness const & >(( bp::arg("other") )) );
        { //::LayerRoughness::getHurstParameter
        
            typedef double ( ::LayerRoughness::*getHurstParameter_function_type )(  ) const;
            
            LayerRoughness_exposer.def( 
                "getHurstParameter"
                , getHurstParameter_function_type( &::LayerRoughness::getHurstParameter ) );
        
        }
        { //::LayerRoughness::getLatteralCorrLength
        
            typedef double ( ::LayerRoughness::*getLatteralCorrLength_function_type )(  ) const;
            
            LayerRoughness_exposer.def( 
                "getLatteralCorrLength"
                , getLatteralCorrLength_function_type( &::LayerRoughness::getLatteralCorrLength ) );
        
        }
        { //::LayerRoughness::getSigma
        
            typedef double ( ::LayerRoughness::*getSigma_function_type )(  ) const;
            
            LayerRoughness_exposer.def( 
                "getSigma"
                , getSigma_function_type( &::LayerRoughness::getSigma ) );
        
        }
        { //::LayerRoughness::operator=
        
            typedef ::LayerRoughness & ( ::LayerRoughness::*assign_function_type )( ::LayerRoughness const & ) ;
            
            LayerRoughness_exposer.def( 
                "assign"
                , assign_function_type( &::LayerRoughness::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        { //::LayerRoughness::setHurstParameter
        
            typedef void ( ::LayerRoughness::*setHurstParameter_function_type )( double ) ;
            
            LayerRoughness_exposer.def( 
                "setHurstParameter"
                , setHurstParameter_function_type( &::LayerRoughness::setHurstParameter )
                , ( bp::arg("hurstParameter") ) );
        
        }
        { //::LayerRoughness::setLatteralCorrLength
        
            typedef void ( ::LayerRoughness::*setLatteralCorrLength_function_type )( double ) ;
            
            LayerRoughness_exposer.def( 
                "setLatteralCorrLength"
                , setLatteralCorrLength_function_type( &::LayerRoughness::setLatteralCorrLength )
                , ( bp::arg("latteralCorrLength") ) );
        
        }
        { //::LayerRoughness::setSigma
        
            typedef void ( ::LayerRoughness::*setSigma_function_type )( double ) ;
            
            LayerRoughness_exposer.def( 
                "setSigma"
                , setSigma_function_type( &::LayerRoughness::setSigma )
                , ( bp::arg("sigma") ) );
        
        }
        { //::ISample::clone
        
            typedef ::ISample * ( ::ISample::*clone_function_type )(  ) const;
            typedef ::ISample * ( LayerRoughness_wrapper::*default_clone_function_type )(  ) const;
            
            LayerRoughness_exposer.def( 
                "clone"
                , clone_function_type(&::ISample::clone)
                , default_clone_function_type(&LayerRoughness_wrapper::default_clone)
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::ISample::createParameterTree
        
            typedef ::ParameterPool * ( ::ISample::*createParameterTree_function_type )(  ) ;
            typedef ::ParameterPool * ( LayerRoughness_wrapper::*default_createParameterTree_function_type )(  ) ;
            
            LayerRoughness_exposer.def( 
                "createParameterTree"
                , createParameterTree_function_type(&::ISample::createParameterTree)
                , default_createParameterTree_function_type(&LayerRoughness_wrapper::default_createParameterTree)
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::ISample::walk_and_print
        
            typedef void ( ::ISample::*walk_and_print_function_type )(  ) ;
            typedef void ( LayerRoughness_wrapper::*default_walk_and_print_function_type )(  ) ;
            
            LayerRoughness_exposer.def( 
                "walk_and_print"
                , walk_and_print_function_type(&::ISample::walk_and_print)
                , default_walk_and_print_function_type(&LayerRoughness_wrapper::default_walk_and_print) );
        
        }
        LayerRoughness_exposer.def( bp::self_ns::str( bp::self ) );
    }

    bp::class_< MaterialManager, bp::bases< ISingleton< MaterialManager > >, boost::noncopyable >( "MaterialManager", bp::no_init )    
        .def( 
            "addHomogeneousMaterial"
            , (::IMaterial const * ( ::MaterialManager::* )( ::std::string const &,::complex_t ) )( &::MaterialManager::addHomogeneousMaterial )
            , ( bp::arg("name"), bp::arg("refractive_index") )
            , bp::return_internal_reference< >() )    
        .def( 
            "clear"
            , (void ( ::MaterialManager::* )(  ) )( &::MaterialManager::clear ) )    
        .def( 
            "getMaterial"
            , (::IMaterial const * ( ::MaterialManager::* )( ::std::string const & ) )( &::MaterialManager::getMaterial )
            , ( bp::arg("name") )
            , bp::return_internal_reference< >() )    
        .def( bp::self_ns::str( bp::self ) );

    bp::class_< MesoCrystal_wrapper, bp::bases< Particle >, boost::noncopyable >( "MesoCrystal", bp::init< IClusteredNanoParticles const &, IFormFactor & >(( bp::arg("nano_particle_structure"), bp::arg("form_factor") )) )    
        .def( 
            "createParameterTree"
            , (::ParameterPool * ( ::ISample::* )(  ) )(&::ISample::createParameterTree)
            , (::ParameterPool * ( MesoCrystal_wrapper::* )(  ) )(&MesoCrystal_wrapper::default_createParameterTree)
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "walk_and_print"
            , (void ( ::ISample::* )(  ) )(&::ISample::walk_and_print)
            , (void ( MesoCrystal_wrapper::* )(  ) )(&MesoCrystal_wrapper::default_walk_and_print) );

    bp::class_< MultiLayer_wrapper, bp::bases< ICompositeSample >, boost::noncopyable >( "MultiLayer", bp::init< >() )    
        .def( 
            "addLayer"
            , (void ( ::MultiLayer::* )( ::Layer const & ) )( &::MultiLayer::addLayer )
            , ( bp::arg("p_child") ) )    
        .def( 
            "addLayerWithTopRoughness"
            , (void ( ::MultiLayer::* )( ::Layer const &,::LayerRoughness const & ) )( &::MultiLayer::addLayerWithTopRoughness )
            , ( bp::arg("layer"), bp::arg("roughness") ) )    
        .def( 
            "createParameterTree"
            , (::ParameterPool * ( ::ISample::* )(  ) )(&::ISample::createParameterTree)
            , (::ParameterPool * ( MultiLayer_wrapper::* )(  ) )(&MultiLayer_wrapper::default_createParameterTree)
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "walk_and_print"
            , (void ( ::ISample::* )(  ) )(&::ISample::walk_and_print)
            , (void ( MultiLayer_wrapper::* )(  ) )(&MultiLayer_wrapper::default_walk_and_print) )    
        .def( bp::self_ns::str( bp::self ) );

    bp::class_< NanoParticleCrystal_wrapper, bp::bases< IClusteredNanoParticles > >( "NanoParticleCrystal", bp::init< LatticeBasis const &, Lattice const & >(( bp::arg("lattice_basis"), bp::arg("lattice") )) )    
        .def( 
            "createParameterTree"
            , (::ParameterPool * ( ::ISample::* )(  ) )(&::ISample::createParameterTree)
            , (::ParameterPool * ( NanoParticleCrystal_wrapper::* )(  ) )(&NanoParticleCrystal_wrapper::default_createParameterTree)
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "walk_and_print"
            , (void ( ::ISample::* )(  ) )(&::ISample::walk_and_print)
            , (void ( NanoParticleCrystal_wrapper::* )(  ) )(&NanoParticleCrystal_wrapper::default_walk_and_print) );

    bp::class_< NanoParticleDecoration_wrapper, boost::noncopyable >( "NanoParticleDecoration", bp::init< >() )    
        .def( 
            "addInterferenceFunction"
            , (void ( ::NanoParticleDecoration::* )( ::IInterferenceFunction const & ) )( &::NanoParticleDecoration::addInterferenceFunction )
            , ( bp::arg("interference_function") ) )    
        .def( 
            "addNanoParticle"
            , (void ( ::NanoParticleDecoration::* )( ::Particle const &,::Geometry::Transform3D const &,double,double ) )( &::NanoParticleDecoration::addNanoParticle )
            , ( bp::arg("p_particle"), bp::arg("transform"), bp::arg("depth")=0, bp::arg("abundance")=1.0e+0 ) )    
        .def( 
            "addNanoParticle"
            , (void ( ::NanoParticleDecoration::* )( ::Particle const &,double,double ) )( &::NanoParticleDecoration::addNanoParticle )
            , ( bp::arg("p_particle"), bp::arg("depth")=0.0, bp::arg("abundance")=1.0e+0 ) )    
        .def( 
            "addNanoParticleInfo"
            , (void ( ::NanoParticleDecoration::* )( ::NanoParticleInfo const & ) )( &::NanoParticleDecoration::addNanoParticleInfo )
            , ( bp::arg("p_info") ) )    
        .def( 
            "clone"
            , (::NanoParticleDecoration * ( ::NanoParticleDecoration::* )(  ) const)(&::NanoParticleDecoration::clone)
            , (::NanoParticleDecoration * ( NanoParticleDecoration_wrapper::* )(  ) const)(&NanoParticleDecoration_wrapper::default_clone)
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "getAbundanceFractionOfNanoParticle"
            , (double ( ::NanoParticleDecoration::* )( ::size_t ) const)( &::NanoParticleDecoration::getAbundanceFractionOfNanoParticle )
            , ( bp::arg("index") ) )    
        .def( 
            "getInterferenceFunction"
            , (::IInterferenceFunction const * ( ::NanoParticleDecoration::* )( ::size_t ) const)( &::NanoParticleDecoration::getInterferenceFunction )
            , ( bp::arg("index") )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "getNanoParticleInfo"
            , (::NanoParticleInfo const * ( ::NanoParticleDecoration::* )( ::size_t ) const)( &::NanoParticleDecoration::getNanoParticleInfo )
            , ( bp::arg("index") )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "getNumberOfParticles"
            , (::size_t ( ::NanoParticleDecoration::* )(  ) const)( &::NanoParticleDecoration::getNumberOfParticles ) )    
        .def( 
            "getTotalParticleSurfaceDensity"
            , (double ( ::NanoParticleDecoration::* )(  ) const)( &::NanoParticleDecoration::getTotalParticleSurfaceDensity ) )    
        .def( 
            "setTotalParticleSurfaceDensity"
            , (void ( ::NanoParticleDecoration::* )( double ) )( &::NanoParticleDecoration::setTotalParticleSurfaceDensity )
            , ( bp::arg("surface_density") ) )    
        .def( 
            "createParameterTree"
            , (::ParameterPool * ( ::ISample::* )(  ) )(&::ISample::createParameterTree)
            , (::ParameterPool * ( NanoParticleDecoration_wrapper::* )(  ) )(&NanoParticleDecoration_wrapper::default_createParameterTree)
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "walk_and_print"
            , (void ( ::ISample::* )(  ) )(&::ISample::walk_and_print)
            , (void ( NanoParticleDecoration_wrapper::* )(  ) )(&NanoParticleDecoration_wrapper::default_walk_and_print) );

    { //::OpticalFresnel
        typedef bp::class_< OpticalFresnel > OpticalFresnel_exposer_t;
        OpticalFresnel_exposer_t OpticalFresnel_exposer = OpticalFresnel_exposer_t( "OpticalFresnel", bp::init< >() );
        bp::scope OpticalFresnel_scope( OpticalFresnel_exposer );
        bp::class_< OpticalFresnel::FresnelCoeff >( "FresnelCoeff", bp::init< >() )    
            .def( bp::self == bp::self )    
            .def_readwrite( "R", &OpticalFresnel::FresnelCoeff::R )    
            .def_readwrite( "T", &OpticalFresnel::FresnelCoeff::T )    
            .def_readwrite( "X", &OpticalFresnel::FresnelCoeff::X )    
            .def_readwrite( "kz", &OpticalFresnel::FresnelCoeff::kz )    
            .def_readwrite( "r", &OpticalFresnel::FresnelCoeff::r )    
            .def_readwrite( "rb", &OpticalFresnel::FresnelCoeff::rb )    
            .def_readwrite( "t", &OpticalFresnel::FresnelCoeff::t )    
            .def_readwrite( "tb", &OpticalFresnel::FresnelCoeff::tb );
        bp::class_< OpticalFresnel::MultiLayerCoeff >( "MultiLayerCoeff" )    
            .def( 
                "__getitem__"
                , (::OpticalFresnel::FresnelCoeff & ( ::OpticalFresnel::MultiLayerCoeff::* )( ::size_t ) )( &::OpticalFresnel::MultiLayerCoeff::operator[] )
                , ( bp::arg("i") )
                , bp::return_internal_reference< >() )    
            .def( 
                "size"
                , (::size_t ( ::OpticalFresnel::MultiLayerCoeff::* )(  ) const)( &::OpticalFresnel::MultiLayerCoeff::size ) )    
            .def_readwrite( "m_data", &OpticalFresnel::MultiLayerCoeff::m_data );
        { //::OpticalFresnel::execute
        
            typedef int ( ::OpticalFresnel::*execute_function_type )( ::MultiLayer const &,::kvector_t const &,::std::vector< OpticalFresnel::FresnelCoeff > &,bool ) ;
            
            OpticalFresnel_exposer.def( 
                "execute"
                , execute_function_type( &::OpticalFresnel::execute )
                , ( bp::arg("sample"), bp::arg("k"), bp::arg("coeff"), bp::arg("useRoughness")=(bool)(false) ) );
        
        }
        { //::OpticalFresnel::execute
        
            typedef int ( ::OpticalFresnel::*execute_function_type )( ::MultiLayer const &,::kvector_t const &,::OpticalFresnel::MultiLayerCoeff &,bool ) ;
            
            OpticalFresnel_exposer.def( 
                "execute"
                , execute_function_type( &::OpticalFresnel::execute )
                , ( bp::arg("sample"), bp::arg("k"), bp::arg("coeff"), bp::arg("useRoughness")=(bool)(false) ) );
        
        }
    }

    { //::ParameterPool
        typedef bp::class_< ParameterPool, boost::noncopyable > ParameterPool_exposer_t;
        ParameterPool_exposer_t ParameterPool_exposer = ParameterPool_exposer_t( "ParameterPool", bp::init< >() );
        bp::scope ParameterPool_scope( ParameterPool_exposer );
        bp::class_< ParameterPool::RealPar >( "RealPar", bp::no_init )    
            .def( 
                "checkNull"
                , (void ( ::ParameterPool::RealPar::* )(  ) const)( &::ParameterPool::RealPar::checkNull ) )    
            .def( 
                "getValue"
                , (double ( ::ParameterPool::RealPar::* )(  ) const)( &::ParameterPool::RealPar::getValue ) )    
            .def( 
                "isNull"
                , (bool ( ::ParameterPool::RealPar::* )(  ) )( &::ParameterPool::RealPar::isNull ) )    
            .def( 
                "setValue"
                , (void ( ::ParameterPool::RealPar::* )( double ) )( &::ParameterPool::RealPar::setValue )
                , ( bp::arg("value") ) )    
            .def( bp::self_ns::str( bp::self ) );
        { //::ParameterPool::addParameter
        
            typedef bool ( ::ParameterPool::*addParameter_function_type )( ::std::string,::ParameterPool::RealPar ) ;
            
            ParameterPool_exposer.def( 
                "addParameter"
                , addParameter_function_type( &::ParameterPool::addParameter )
                , ( bp::arg("name"), bp::arg("par") ) );
        
        }
        { //::ParameterPool::begin
        
            typedef ::std::_Rb_tree_iterator< std::pair< std::string const, ParameterPool::RealPar > > ( ::ParameterPool::*begin_function_type )(  ) ;
            
            ParameterPool_exposer.def( 
                "begin"
                , begin_function_type( &::ParameterPool::begin ) );
        
        }
        { //::ParameterPool::begin
        
            typedef ::std::_Rb_tree_const_iterator< std::pair< std::string const, ParameterPool::RealPar > > ( ::ParameterPool::*begin_function_type )(  ) const;
            
            ParameterPool_exposer.def( 
                "begin"
                , begin_function_type( &::ParameterPool::begin ) );
        
        }
        { //::ParameterPool::clear
        
            typedef void ( ::ParameterPool::*clear_function_type )(  ) ;
            
            ParameterPool_exposer.def( 
                "clear"
                , clear_function_type( &::ParameterPool::clear ) );
        
        }
        { //::ParameterPool::clone
        
            typedef ::ParameterPool * ( ::ParameterPool::*clone_function_type )(  ) ;
            
            ParameterPool_exposer.def( 
                "clone"
                , clone_function_type( &::ParameterPool::clone )
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::ParameterPool::cloneWithPrefix
        
            typedef ::ParameterPool * ( ::ParameterPool::*cloneWithPrefix_function_type )( ::std::string ) ;
            
            ParameterPool_exposer.def( 
                "cloneWithPrefix"
                , cloneWithPrefix_function_type( &::ParameterPool::cloneWithPrefix )
                , ( bp::arg("prefix") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::ParameterPool::end
        
            typedef ::std::_Rb_tree_iterator< std::pair< std::string const, ParameterPool::RealPar > > ( ::ParameterPool::*end_function_type )(  ) ;
            
            ParameterPool_exposer.def( 
                "end"
                , end_function_type( &::ParameterPool::end ) );
        
        }
        { //::ParameterPool::end
        
            typedef ::std::_Rb_tree_const_iterator< std::pair< std::string const, ParameterPool::RealPar > > ( ::ParameterPool::*end_function_type )(  ) const;
            
            ParameterPool_exposer.def( 
                "end"
                , end_function_type( &::ParameterPool::end ) );
        
        }
        { //::ParameterPool::getParameter
        
            typedef ::ParameterPool::RealPar ( ::ParameterPool::*getParameter_function_type )( ::std::string ) const;
            
            ParameterPool_exposer.def( 
                "getParameter"
                , getParameter_function_type( &::ParameterPool::getParameter )
                , ( bp::arg("name") ) );
        
        }
        { //::ParameterPool::setMatchedParametersValue
        
            typedef int ( ::ParameterPool::*setMatchedParametersValue_function_type )( ::std::string,double ) ;
            
            ParameterPool_exposer.def( 
                "setMatchedParametersValue"
                , setMatchedParametersValue_function_type( &::ParameterPool::setMatchedParametersValue )
                , ( bp::arg("wildcards"), bp::arg("value") ) );
        
        }
        { //::ParameterPool::setParameterValue
        
            typedef bool ( ::ParameterPool::*setParameterValue_function_type )( ::std::string,double ) ;
            
            ParameterPool_exposer.def( 
                "setParameterValue"
                , setParameterValue_function_type( &::ParameterPool::setParameterValue )
                , ( bp::arg("name"), bp::arg("value") ) );
        
        }
        { //::ParameterPool::size
        
            typedef ::size_t ( ::ParameterPool::*size_function_type )(  ) const;
            
            ParameterPool_exposer.def( 
                "size"
                , size_function_type( &::ParameterPool::size ) );
        
        }
        ParameterPool_exposer.def( bp::self_ns::str( bp::self ) );
    }

}

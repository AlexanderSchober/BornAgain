// This file has been generated by Py++.

#include "boost/python.hpp"
#include "Types.h"
#include "PythonPlusplusHelper.h"
#include "Units.h"
#include "IMaterial.h"
#include "HomogeneousMaterial.h"
#include "ISingleton.h"
#include "MaterialManager.h"
#include "LayerRoughness.h"
#include "Layer.h"
#include "MultiLayer.h"
#include "ParameterPool.h"
#include "OpticalFresnel.h"
#include "PythonInterface_classes_3.h"

namespace bp = boost::python;

void register_classes_3(){

    { //::LayerRoughness
        typedef bp::class_< LayerRoughness > LayerRoughness_exposer_t;
        LayerRoughness_exposer_t LayerRoughness_exposer = LayerRoughness_exposer_t( "LayerRoughness", bp::init< >() );
        bp::scope LayerRoughness_scope( LayerRoughness_exposer );
        LayerRoughness_exposer.def( bp::init< double, double, double >(( bp::arg("sigma"), bp::arg("hurstParameter"), bp::arg("latteralCorrLength") )) );
        LayerRoughness_exposer.def( bp::init< LayerRoughness const & >(( bp::arg("other") )) );
        { //::LayerRoughness::getHurstParameter
        
            typedef double ( ::LayerRoughness::*getHurstParameter_function_type )(  ) const;
            
            LayerRoughness_exposer.def( 
                "getHurstParameter"
                , getHurstParameter_function_type( &::LayerRoughness::getHurstParameter ) );
        
        }
        { //::LayerRoughness::getLatteralCorrLength
        
            typedef double ( ::LayerRoughness::*getLatteralCorrLength_function_type )(  ) const;
            
            LayerRoughness_exposer.def( 
                "getLatteralCorrLength"
                , getLatteralCorrLength_function_type( &::LayerRoughness::getLatteralCorrLength ) );
        
        }
        { //::LayerRoughness::getSigma
        
            typedef double ( ::LayerRoughness::*getSigma_function_type )(  ) const;
            
            LayerRoughness_exposer.def( 
                "getSigma"
                , getSigma_function_type( &::LayerRoughness::getSigma ) );
        
        }
        { //::LayerRoughness::operator=
        
            typedef ::LayerRoughness & ( ::LayerRoughness::*assign_function_type )( ::LayerRoughness const & ) ;
            
            LayerRoughness_exposer.def( 
                "assign"
                , assign_function_type( &::LayerRoughness::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        { //::LayerRoughness::setHurstParameter
        
            typedef void ( ::LayerRoughness::*setHurstParameter_function_type )( double ) ;
            
            LayerRoughness_exposer.def( 
                "setHurstParameter"
                , setHurstParameter_function_type( &::LayerRoughness::setHurstParameter )
                , ( bp::arg("hurstParameter") ) );
        
        }
        { //::LayerRoughness::setLatteralCorrLength
        
            typedef void ( ::LayerRoughness::*setLatteralCorrLength_function_type )( double ) ;
            
            LayerRoughness_exposer.def( 
                "setLatteralCorrLength"
                , setLatteralCorrLength_function_type( &::LayerRoughness::setLatteralCorrLength )
                , ( bp::arg("latteralCorrLength") ) );
        
        }
        { //::LayerRoughness::setSigma
        
            typedef void ( ::LayerRoughness::*setSigma_function_type )( double ) ;
            
            LayerRoughness_exposer.def( 
                "setSigma"
                , setSigma_function_type( &::LayerRoughness::setSigma )
                , ( bp::arg("sigma") ) );
        
        }
        LayerRoughness_exposer.def( bp::self_ns::str( bp::self ) );
    }

    bp::class_< MaterialManager, bp::bases< ISingleton< MaterialManager > >, boost::noncopyable >( "MaterialManager", bp::no_init )    
        .def( 
            "addHomogeneousMaterial"
            , (::IMaterial const * ( ::MaterialManager::* )( ::std::string const &,::complex_t ) )( &::MaterialManager::addHomogeneousMaterial )
            , ( bp::arg("name"), bp::arg("refractive_index") )
            , bp::return_internal_reference< >() )    
        .def( 
            "clear"
            , (void ( ::MaterialManager::* )(  ) )( &::MaterialManager::clear ) )    
        .def( 
            "getMaterial"
            , (::IMaterial const * ( ::MaterialManager::* )( ::std::string const & ) )( &::MaterialManager::getMaterial )
            , ( bp::arg("name") )
            , bp::return_internal_reference< >() )    
        .def( bp::self_ns::str( bp::self ) );

    bp::class_< MultiLayer, boost::noncopyable >( "MultiLayer", bp::init< >() )    
        .def( 
            "addLayer"
            , (void ( ::MultiLayer::* )( ::Layer const & ) )( &::MultiLayer::addLayer )
            , ( bp::arg("p_child") ) )    
        .def( 
            "addLayerWithTopRoughness"
            , (void ( ::MultiLayer::* )( ::Layer const &,::LayerRoughness const & ) )( &::MultiLayer::addLayerWithTopRoughness )
            , ( bp::arg("layer"), bp::arg("roughness") ) )    
        .def( 
            "getCrossCorrLength"
            , (double ( ::MultiLayer::* )(  ) const)( &::MultiLayer::getCrossCorrLength ) )    
        .def( 
            "getNumberOfLayers"
            , (::size_t ( ::MultiLayer::* )(  ) const)( &::MultiLayer::getNumberOfLayers ) )    
        .def( 
            "setCrossCorrLength"
            , (void ( ::MultiLayer::* )( double ) )( &::MultiLayer::setCrossCorrLength )
            , ( bp::arg("crossCorrLength") ) )    
        .def( bp::self_ns::str( bp::self ) );

    { //::OpticalFresnel
        typedef bp::class_< OpticalFresnel > OpticalFresnel_exposer_t;
        OpticalFresnel_exposer_t OpticalFresnel_exposer = OpticalFresnel_exposer_t( "OpticalFresnel", bp::init< >() );
        bp::scope OpticalFresnel_scope( OpticalFresnel_exposer );
        bp::class_< OpticalFresnel::FresnelCoeff >( "FresnelCoeff", bp::init< >() )    
            .def( bp::self == bp::self )    
            .def_readwrite( "R", &OpticalFresnel::FresnelCoeff::R )    
            .def_readwrite( "T", &OpticalFresnel::FresnelCoeff::T )    
            .def_readwrite( "X", &OpticalFresnel::FresnelCoeff::X )    
            .def_readwrite( "kz", &OpticalFresnel::FresnelCoeff::kz )    
            .def_readwrite( "r", &OpticalFresnel::FresnelCoeff::r )    
            .def_readwrite( "rb", &OpticalFresnel::FresnelCoeff::rb )    
            .def_readwrite( "t", &OpticalFresnel::FresnelCoeff::t )    
            .def_readwrite( "tb", &OpticalFresnel::FresnelCoeff::tb );
        bp::class_< OpticalFresnel::MultiLayerCoeff >( "MultiLayerCoeff" )    
            .def( 
                "__getitem__"
                , (::OpticalFresnel::FresnelCoeff & ( ::OpticalFresnel::MultiLayerCoeff::* )( ::size_t ) )( &::OpticalFresnel::MultiLayerCoeff::operator[] )
                , ( bp::arg("i") )
                , bp::return_internal_reference< >() )    
            .def( 
                "size"
                , (::size_t ( ::OpticalFresnel::MultiLayerCoeff::* )(  ) const)( &::OpticalFresnel::MultiLayerCoeff::size ) )    
            .def_readwrite( "m_data", &OpticalFresnel::MultiLayerCoeff::m_data );
        { //::OpticalFresnel::execute
        
            typedef int ( ::OpticalFresnel::*execute_function_type )( ::MultiLayer const &,::kvector_t const &,::std::vector< OpticalFresnel::FresnelCoeff > &,bool ) ;
            
            OpticalFresnel_exposer.def( 
                "execute"
                , execute_function_type( &::OpticalFresnel::execute )
                , ( bp::arg("sample"), bp::arg("k"), bp::arg("coeff"), bp::arg("useRoughness")=(bool)(false) ) );
        
        }
        { //::OpticalFresnel::execute
        
            typedef int ( ::OpticalFresnel::*execute_function_type )( ::MultiLayer const &,::kvector_t const &,::OpticalFresnel::MultiLayerCoeff &,bool ) ;
            
            OpticalFresnel_exposer.def( 
                "execute"
                , execute_function_type( &::OpticalFresnel::execute )
                , ( bp::arg("sample"), bp::arg("k"), bp::arg("coeff"), bp::arg("useRoughness")=(bool)(false) ) );
        
        }
    }

    { //::ParameterPool
        typedef bp::class_< ParameterPool, boost::noncopyable > ParameterPool_exposer_t;
        ParameterPool_exposer_t ParameterPool_exposer = ParameterPool_exposer_t( "ParameterPool", bp::init< >() );
        bp::scope ParameterPool_scope( ParameterPool_exposer );
        bp::class_< ParameterPool::RealPar >( "RealPar", bp::init< double * >(( bp::arg("par") )) )    
            .def( 
                "checkNull"
                , (void ( ::ParameterPool::RealPar::* )(  ) const)( &::ParameterPool::RealPar::checkNull ) )    
            .def( 
                "getValue"
                , (double ( ::ParameterPool::RealPar::* )(  ) const)( &::ParameterPool::RealPar::getValue ) )    
            .def( 
                "isNull"
                , (bool ( ::ParameterPool::RealPar::* )(  ) )( &::ParameterPool::RealPar::isNull ) )    
            .def( 
                "setValue"
                , (void ( ::ParameterPool::RealPar::* )( double ) )( &::ParameterPool::RealPar::setValue )
                , ( bp::arg("value") ) )    
            .def( bp::self_ns::str( bp::self ) );
        { //::ParameterPool::addParameter
        
            typedef bool ( ::ParameterPool::*addParameter_function_type )( ::std::string,::ParameterPool::RealPar ) ;
            
            ParameterPool_exposer.def( 
                "addParameter"
                , addParameter_function_type( &::ParameterPool::addParameter )
                , ( bp::arg("name"), bp::arg("par") ) );
        
        }
        { //::ParameterPool::begin
        
            typedef ::std::_Rb_tree_iterator< std::pair< std::string const, ParameterPool::RealPar > > ( ::ParameterPool::*begin_function_type )(  ) ;
            
            ParameterPool_exposer.def( 
                "begin"
                , begin_function_type( &::ParameterPool::begin ) );
        
        }
        { //::ParameterPool::begin
        
            typedef ::std::_Rb_tree_const_iterator< std::pair< std::string const, ParameterPool::RealPar > > ( ::ParameterPool::*begin_function_type )(  ) const;
            
            ParameterPool_exposer.def( 
                "begin"
                , begin_function_type( &::ParameterPool::begin ) );
        
        }
        { //::ParameterPool::clear
        
            typedef void ( ::ParameterPool::*clear_function_type )(  ) ;
            
            ParameterPool_exposer.def( 
                "clear"
                , clear_function_type( &::ParameterPool::clear ) );
        
        }
        { //::ParameterPool::clone
        
            typedef ::ParameterPool * ( ::ParameterPool::*clone_function_type )(  ) ;
            
            ParameterPool_exposer.def( 
                "clone"
                , clone_function_type( &::ParameterPool::clone )
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::ParameterPool::cloneWithPrefix
        
            typedef ::ParameterPool * ( ::ParameterPool::*cloneWithPrefix_function_type )( ::std::string ) ;
            
            ParameterPool_exposer.def( 
                "cloneWithPrefix"
                , cloneWithPrefix_function_type( &::ParameterPool::cloneWithPrefix )
                , ( bp::arg("prefix") )
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::ParameterPool::copyToExternalPool
        
            typedef void ( ::ParameterPool::*copyToExternalPool_function_type )( ::std::string,::ParameterPool * ) ;
            
            ParameterPool_exposer.def( 
                "copyToExternalPool"
                , copyToExternalPool_function_type( &::ParameterPool::copyToExternalPool )
                , ( bp::arg("prefix"), bp::arg("external_pool") ) );
        
        }
        { //::ParameterPool::end
        
            typedef ::std::_Rb_tree_iterator< std::pair< std::string const, ParameterPool::RealPar > > ( ::ParameterPool::*end_function_type )(  ) ;
            
            ParameterPool_exposer.def( 
                "end"
                , end_function_type( &::ParameterPool::end ) );
        
        }
        { //::ParameterPool::end
        
            typedef ::std::_Rb_tree_const_iterator< std::pair< std::string const, ParameterPool::RealPar > > ( ::ParameterPool::*end_function_type )(  ) const;
            
            ParameterPool_exposer.def( 
                "end"
                , end_function_type( &::ParameterPool::end ) );
        
        }
        { //::ParameterPool::getParameter
        
            typedef ::ParameterPool::RealPar ( ::ParameterPool::*getParameter_function_type )( ::std::string ) const;
            
            ParameterPool_exposer.def( 
                "getParameter"
                , getParameter_function_type( &::ParameterPool::getParameter )
                , ( bp::arg("name") ) );
        
        }
        { //::ParameterPool::registerParameter
        
            typedef bool ( ::ParameterPool::*registerParameter_function_type )( ::std::string,double * ) ;
            
            ParameterPool_exposer.def( 
                "registerParameter"
                , registerParameter_function_type( &::ParameterPool::registerParameter )
                , ( bp::arg("name"), bp::arg("parpointer") ) );
        
        }
        { //::ParameterPool::size
        
            typedef ::size_t ( ::ParameterPool::*size_function_type )(  ) const;
            
            ParameterPool_exposer.def( 
                "size"
                , size_function_type( &::ParameterPool::size ) );
        
        }
        ParameterPool_exposer.def( bp::self_ns::str( bp::self ) );
    }

}

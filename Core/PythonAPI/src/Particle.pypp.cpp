// This file has been generated by Py++.

// BornAgain: simulate and fit scattering at grazing incidence 
//! @brief automatically generated boost::python code for PythonCoreAPI  

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter);
GCC_DIAG_OFF(missing-field-initializers);
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter);
GCC_DIAG_ON(missing-field-initializers);
#include "__call_policies.pypp.hpp"
#include "__convenience.pypp.hpp"
#include "PythonCoreList.h"
#include "Particle.pypp.h"

namespace bp = boost::python;

struct Particle_wrapper : Particle, bp::wrapper< Particle > {

    Particle_wrapper(::complex_t const & refractive_index, ::IFormFactor const & form_factor )
    : Particle( boost::ref(refractive_index), boost::ref(form_factor) )
      , bp::wrapper< Particle >(){
        // constructor
    
    }

    virtual ::Particle * clone(  ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone(  );
        else
            return this->Particle::clone(  );
    }
    
    
    ::Particle * default_clone(  ) const  {
        return Particle::clone( );
    }

    virtual ::IFormFactor * createFormFactor(  ) const  {
        if( bp::override func_createFormFactor = this->get_override( "createFormFactor" ) )
            return func_createFormFactor(  );
        else
            return this->Particle::createFormFactor(  );
    }
    
    
    ::IFormFactor * default_createFormFactor(  ) const  {
        return Particle::createFormFactor( );
    }

    virtual ::complex_t const getRefractiveIndex(  ) const  {
        if( bp::override func_getRefractiveIndex = this->get_override( "getRefractiveIndex" ) )
            return func_getRefractiveIndex(  );
        else
            return this->Particle::getRefractiveIndex(  );
    }
    
    
    ::complex_t const default_getRefractiveIndex(  ) const  {
        return Particle::getRefractiveIndex( );
    }

    virtual ::IFormFactor const * getSimpleFormFactor(  ) const  {
        if( bp::override func_getSimpleFormFactor = this->get_override( "getSimpleFormFactor" ) )
            return func_getSimpleFormFactor(  );
        else
            return this->Particle::getSimpleFormFactor(  );
    }
    
    
    ::IFormFactor const * default_getSimpleFormFactor(  ) const  {
        return Particle::getSimpleFormFactor( );
    }

    virtual bool hasDistributedFormFactor(  ) const  {
        if( bp::override func_hasDistributedFormFactor = this->get_override( "hasDistributedFormFactor" ) )
            return func_hasDistributedFormFactor(  );
        else
            return this->Particle::hasDistributedFormFactor(  );
    }
    
    
    bool default_hasDistributedFormFactor(  ) const  {
        return Particle::hasDistributedFormFactor( );
    }

    virtual void setAmbientRefractiveIndex( ::complex_t refractive_index ) {
        if( bp::override func_setAmbientRefractiveIndex = this->get_override( "setAmbientRefractiveIndex" ) )
            func_setAmbientRefractiveIndex( refractive_index );
        else
            this->Particle::setAmbientRefractiveIndex( refractive_index );
    }
    
    
    void default_setAmbientRefractiveIndex( ::complex_t refractive_index ) {
        Particle::setAmbientRefractiveIndex( refractive_index );
    }

    virtual bool areParametersChanged(  ) {
        if( bp::override func_areParametersChanged = this->get_override( "areParametersChanged" ) )
            return func_areParametersChanged(  );
        else
            return this->IParameterized::areParametersChanged(  );
    }
    
    
    bool default_areParametersChanged(  ) {
        return IParameterized::areParametersChanged( );
    }

    virtual void clearParameterPool(  ) {
        if( bp::override func_clearParameterPool = this->get_override( "clearParameterPool" ) )
            func_clearParameterPool(  );
        else
            this->IParameterized::clearParameterPool(  );
    }
    
    
    void default_clearParameterPool(  ) {
        IParameterized::clearParameterPool( );
    }

    virtual ::ParameterPool * createParameterTree(  ) const  {
        if( bp::override func_createParameterTree = this->get_override( "createParameterTree" ) )
            return func_createParameterTree(  );
        else
            return this->IParameterized::createParameterTree(  );
    }
    
    
    ::ParameterPool * default_createParameterTree(  ) const  {
        return IParameterized::createParameterTree( );
    }

    virtual ::ICompositeSample * getCompositeSample(  ) {
        if( bp::override func_getCompositeSample = this->get_override( "getCompositeSample" ) )
            return func_getCompositeSample(  );
        else
            return this->ICompositeSample::getCompositeSample(  );
    }
    
    
    ::ICompositeSample * default_getCompositeSample(  ) {
        return ICompositeSample::getCompositeSample( );
    }

    virtual ::ICompositeSample const * getCompositeSample(  ) const  {
        if( bp::override func_getCompositeSample = this->get_override( "getCompositeSample" ) )
            return func_getCompositeSample(  );
        else
            return this->ICompositeSample::getCompositeSample(  );
    }
    
    
    ::ICompositeSample const * default_getCompositeSample(  ) const  {
        return ICompositeSample::getCompositeSample( );
    }

    virtual void printParameters(  ) const  {
        if( bp::override func_printParameters = this->get_override( "printParameters" ) )
            func_printParameters(  );
        else
            this->IParameterized::printParameters(  );
    }
    
    
    void default_printParameters(  ) const  {
        IParameterized::printParameters( );
    }

    virtual void registerParameter( ::std::string const & name, double * parpointer ) {
        namespace bpl = boost::python;
        if( bpl::override func_registerParameter = this->get_override( "registerParameter" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_registerParameter.ptr(), name, parpointer );
        }
        else{
            IParameterized::registerParameter( name, parpointer );
        }
    }
    
    static void default_registerParameter( ::IParameterized & inst, ::std::string const & name, long unsigned int parpointer ){
        if( dynamic_cast< Particle_wrapper * >( boost::addressof( inst ) ) ){
            inst.::IParameterized::registerParameter(name, reinterpret_cast< double * >( parpointer ));
        }
        else{
            inst.registerParameter(name, reinterpret_cast< double * >( parpointer ));
        }
    }

    virtual bool setParameterValue( ::std::string const & name, double value ) {
        if( bp::override func_setParameterValue = this->get_override( "setParameterValue" ) )
            return func_setParameterValue( name, value );
        else
            return this->IParameterized::setParameterValue( name, value );
    }
    
    
    bool default_setParameterValue( ::std::string const & name, double value ) {
        return IParameterized::setParameterValue( name, value );
    }

    virtual void setParametersAreChanged(  ) {
        if( bp::override func_setParametersAreChanged = this->get_override( "setParametersAreChanged" ) )
            func_setParametersAreChanged(  );
        else
            this->IParameterized::setParametersAreChanged(  );
    }
    
    
    void default_setParametersAreChanged(  ) {
        IParameterized::setParametersAreChanged( );
    }

    virtual ::std::size_t size(  ) const  {
        if( bp::override func_size = this->get_override( "size" ) )
            return func_size(  );
        else
            return this->ICompositeSample::size(  );
    }
    
    
    ::std::size_t default_size(  ) const  {
        return ICompositeSample::size( );
    }

};

void register_Particle_class(){

    { //::Particle
        typedef bp::class_< Particle_wrapper, bp::bases< ICompositeSample >, boost::noncopyable > Particle_exposer_t;
        Particle_exposer_t Particle_exposer = Particle_exposer_t( "Particle", bp::init< complex_t const &, IFormFactor const & >(( bp::arg("refractive_index"), bp::arg("form_factor") )) );
        bp::scope Particle_scope( Particle_exposer );
        { //::Particle::clone
        
            typedef ::Particle * ( ::Particle::*clone_function_type )(  ) const;
            typedef ::Particle * ( Particle_wrapper::*default_clone_function_type )(  ) const;
            
            Particle_exposer.def( 
                "clone"
                , clone_function_type(&::Particle::clone)
                , default_clone_function_type(&Particle_wrapper::default_clone)
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::Particle::createFormFactor
        
            typedef ::IFormFactor * ( ::Particle::*createFormFactor_function_type )(  ) const;
            typedef ::IFormFactor * ( Particle_wrapper::*default_createFormFactor_function_type )(  ) const;
            
            Particle_exposer.def( 
                "createFormFactor"
                , createFormFactor_function_type(&::Particle::createFormFactor)
                , default_createFormFactor_function_type(&Particle_wrapper::default_createFormFactor)
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::Particle::getRefractiveIndex
        
            typedef ::complex_t const ( ::Particle::*getRefractiveIndex_function_type )(  ) const;
            typedef ::complex_t const ( Particle_wrapper::*default_getRefractiveIndex_function_type )(  ) const;
            
            Particle_exposer.def( 
                "getRefractiveIndex"
                , getRefractiveIndex_function_type(&::Particle::getRefractiveIndex)
                , default_getRefractiveIndex_function_type(&Particle_wrapper::default_getRefractiveIndex) );
        
        }
        { //::Particle::getSimpleFormFactor
        
            typedef ::IFormFactor const * ( ::Particle::*getSimpleFormFactor_function_type )(  ) const;
            typedef ::IFormFactor const * ( Particle_wrapper::*default_getSimpleFormFactor_function_type )(  ) const;
            
            Particle_exposer.def( 
                "getSimpleFormFactor"
                , getSimpleFormFactor_function_type(&::Particle::getSimpleFormFactor)
                , default_getSimpleFormFactor_function_type(&Particle_wrapper::default_getSimpleFormFactor)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::Particle::hasDistributedFormFactor
        
            typedef bool ( ::Particle::*hasDistributedFormFactor_function_type )(  ) const;
            typedef bool ( Particle_wrapper::*default_hasDistributedFormFactor_function_type )(  ) const;
            
            Particle_exposer.def( 
                "hasDistributedFormFactor"
                , hasDistributedFormFactor_function_type(&::Particle::hasDistributedFormFactor)
                , default_hasDistributedFormFactor_function_type(&Particle_wrapper::default_hasDistributedFormFactor) );
        
        }
        { //::Particle::setAmbientRefractiveIndex
        
            typedef void ( ::Particle::*setAmbientRefractiveIndex_function_type )( ::complex_t ) ;
            typedef void ( Particle_wrapper::*default_setAmbientRefractiveIndex_function_type )( ::complex_t ) ;
            
            Particle_exposer.def( 
                "setAmbientRefractiveIndex"
                , setAmbientRefractiveIndex_function_type(&::Particle::setAmbientRefractiveIndex)
                , default_setAmbientRefractiveIndex_function_type(&Particle_wrapper::default_setAmbientRefractiveIndex)
                , ( bp::arg("refractive_index") ) );
        
        }
        { //::IParameterized::areParametersChanged
        
            typedef bool ( ::IParameterized::*areParametersChanged_function_type )(  ) ;
            typedef bool ( Particle_wrapper::*default_areParametersChanged_function_type )(  ) ;
            
            Particle_exposer.def( 
                "areParametersChanged"
                , areParametersChanged_function_type(&::IParameterized::areParametersChanged)
                , default_areParametersChanged_function_type(&Particle_wrapper::default_areParametersChanged) );
        
        }
        { //::IParameterized::clearParameterPool
        
            typedef void ( ::IParameterized::*clearParameterPool_function_type )(  ) ;
            typedef void ( Particle_wrapper::*default_clearParameterPool_function_type )(  ) ;
            
            Particle_exposer.def( 
                "clearParameterPool"
                , clearParameterPool_function_type(&::IParameterized::clearParameterPool)
                , default_clearParameterPool_function_type(&Particle_wrapper::default_clearParameterPool) );
        
        }
        { //::IParameterized::createParameterTree
        
            typedef ::ParameterPool * ( ::IParameterized::*createParameterTree_function_type )(  ) const;
            typedef ::ParameterPool * ( Particle_wrapper::*default_createParameterTree_function_type )(  ) const;
            
            Particle_exposer.def( 
                "createParameterTree"
                , createParameterTree_function_type(&::IParameterized::createParameterTree)
                , default_createParameterTree_function_type(&Particle_wrapper::default_createParameterTree)
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::ICompositeSample::getCompositeSample
        
            typedef ::ICompositeSample * ( ::ICompositeSample::*getCompositeSample_function_type )(  ) ;
            typedef ::ICompositeSample * ( Particle_wrapper::*default_getCompositeSample_function_type )(  ) ;
            
            Particle_exposer.def( 
                "getCompositeSample"
                , getCompositeSample_function_type(&::ICompositeSample::getCompositeSample)
                , default_getCompositeSample_function_type(&Particle_wrapper::default_getCompositeSample)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::ICompositeSample::getCompositeSample
        
            typedef ::ICompositeSample const * ( ::ICompositeSample::*getCompositeSample_function_type )(  ) const;
            typedef ::ICompositeSample const * ( Particle_wrapper::*default_getCompositeSample_function_type )(  ) const;
            
            Particle_exposer.def( 
                "getCompositeSample"
                , getCompositeSample_function_type(&::ICompositeSample::getCompositeSample)
                , default_getCompositeSample_function_type(&Particle_wrapper::default_getCompositeSample)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::IParameterized::printParameters
        
            typedef void ( ::IParameterized::*printParameters_function_type )(  ) const;
            typedef void ( Particle_wrapper::*default_printParameters_function_type )(  ) const;
            
            Particle_exposer.def( 
                "printParameters"
                , printParameters_function_type(&::IParameterized::printParameters)
                , default_printParameters_function_type(&Particle_wrapper::default_printParameters) );
        
        }
        { //::IParameterized::registerParameter
        
            typedef void ( *default_registerParameter_function_type )( ::IParameterized &,::std::string const &,long unsigned int );
            
            Particle_exposer.def( 
                "registerParameter"
                , default_registerParameter_function_type( &Particle_wrapper::default_registerParameter )
                , ( bp::arg("inst"), bp::arg("name"), bp::arg("parpointer") ) );
        
        }
        { //::IParameterized::setParameterValue
        
            typedef bool ( ::IParameterized::*setParameterValue_function_type )( ::std::string const &,double ) ;
            typedef bool ( Particle_wrapper::*default_setParameterValue_function_type )( ::std::string const &,double ) ;
            
            Particle_exposer.def( 
                "setParameterValue"
                , setParameterValue_function_type(&::IParameterized::setParameterValue)
                , default_setParameterValue_function_type(&Particle_wrapper::default_setParameterValue)
                , ( bp::arg("name"), bp::arg("value") ) );
        
        }
        { //::IParameterized::setParametersAreChanged
        
            typedef void ( ::IParameterized::*setParametersAreChanged_function_type )(  ) ;
            typedef void ( Particle_wrapper::*default_setParametersAreChanged_function_type )(  ) ;
            
            Particle_exposer.def( 
                "setParametersAreChanged"
                , setParametersAreChanged_function_type(&::IParameterized::setParametersAreChanged)
                , default_setParametersAreChanged_function_type(&Particle_wrapper::default_setParametersAreChanged) );
        
        }
        { //::ICompositeSample::size
        
            typedef ::std::size_t ( ::ICompositeSample::*size_function_type )(  ) const;
            typedef ::std::size_t ( Particle_wrapper::*default_size_function_type )(  ) const;
            
            Particle_exposer.def( 
                "size"
                , size_function_type(&::ICompositeSample::size)
                , default_size_function_type(&Particle_wrapper::default_size) );
        
        }
    }

}

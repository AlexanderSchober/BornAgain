// This file has been generated by Py++.

// BornAgain: simulate and fit scattering at grazing incidence 
//! @brief automatically generated boost::python code for PythonCoreAPI  

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter);
GCC_DIAG_OFF(missing-field-initializers);
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter);
GCC_DIAG_ON(missing-field-initializers);
#include "PythonCoreList.h"
#include "ISelectionRule.pypp.h"

namespace bp = boost::python;

struct ISelectionRule_wrapper : ISelectionRule, bp::wrapper< ISelectionRule > {

    ISelectionRule_wrapper()
    : ISelectionRule()
      , bp::wrapper< ISelectionRule >(){
        // null constructor
        
    }

    virtual ::ISelectionRule * clone(  ) const {
        bp::override func_clone = this->get_override( "clone" );
        return func_clone(  );
    }

    virtual bool coordinateSelected( ::IndexVector3D const & coordinate ) const {
        bp::override func_coordinateSelected = this->get_override( "coordinateSelected" );
        return func_coordinateSelected( boost::ref(coordinate) );
    }

};

void register_ISelectionRule_class(){

    { //::ISelectionRule
        typedef bp::class_< ISelectionRule_wrapper, boost::noncopyable > ISelectionRule_exposer_t;
        ISelectionRule_exposer_t ISelectionRule_exposer = ISelectionRule_exposer_t( "ISelectionRule" );
        bp::scope ISelectionRule_scope( ISelectionRule_exposer );
        { //::ISelectionRule::clone
        
            typedef ::ISelectionRule * ( ::ISelectionRule::*clone_function_type )(  ) const;
            
            ISelectionRule_exposer.def( 
                "clone"
                , bp::pure_virtual( clone_function_type(&::ISelectionRule::clone) )
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::ISelectionRule::coordinateSelected
        
            typedef bool ( ::ISelectionRule::*coordinateSelected_function_type )( ::IndexVector3D const & ) const;
            
            ISelectionRule_exposer.def( 
                "coordinateSelected"
                , bp::pure_virtual( coordinateSelected_function_type(&::ISelectionRule::coordinateSelected) )
                , ( bp::arg("coordinate") ) );
        
        }
    }

}

// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonCoreList.h"
#include "LayerRoughness.pypp.h"

namespace bp = boost::python;

struct LayerRoughness_wrapper : LayerRoughness, bp::wrapper< LayerRoughness > {

    LayerRoughness_wrapper( )
    : LayerRoughness( )
      , bp::wrapper< LayerRoughness >(){
        // null constructor
    m_pyobj = 0;
    }

    LayerRoughness_wrapper(double sigma, double hurstParameter, double latteralCorrLength )
    : LayerRoughness( sigma, hurstParameter, latteralCorrLength )
      , bp::wrapper< LayerRoughness >(){
        // constructor
    m_pyobj = 0;
    }

    virtual ::LayerRoughness * clone(  ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone(  );
        else{
            return this->LayerRoughness::clone(  );
        }
    }
    
    ::LayerRoughness * default_clone(  ) const  {
        return LayerRoughness::clone( );
    }

    virtual ::ISample * cloneInvertB(  ) const  {
        if( bp::override func_cloneInvertB = this->get_override( "cloneInvertB" ) )
            return func_cloneInvertB(  );
        else{
            return this->ISample::cloneInvertB(  );
        }
    }
    
    ::ISample * default_cloneInvertB(  ) const  {
        return ISample::cloneInvertB( );
    }

    virtual bool containsMagneticMaterial(  ) const  {
        if( bp::override func_containsMagneticMaterial = this->get_override( "containsMagneticMaterial" ) )
            return func_containsMagneticMaterial(  );
        else{
            return this->ISample::containsMagneticMaterial(  );
        }
    }
    
    bool default_containsMagneticMaterial(  ) const  {
        return ISample::containsMagneticMaterial( );
    }

    virtual ::std::vector< const ISample* > getChildren(  ) const  {
        if( bp::override func_getChildren = this->get_override( "getChildren" ) )
            return func_getChildren(  );
        else{
            return this->ISample::getChildren(  );
        }
    }
    
    ::std::vector< const ISample* > default_getChildren(  ) const  {
        return ISample::getChildren( );
    }

    virtual void printSampleTree(  ) {
        if( bp::override func_printSampleTree = this->get_override( "printSampleTree" ) )
            func_printSampleTree(  );
        else{
            this->ISample::printSampleTree(  );
        }
    }
    
    void default_printSampleTree(  ) {
        ISample::printSampleTree( );
    }

    virtual ::std::size_t size(  ) const  {
        if( bp::override func_size = this->get_override( "size" ) )
            return func_size(  );
        else{
            return this->ISample::size(  );
        }
    }
    
    ::std::size_t default_size(  ) const  {
        return ISample::size( );
    }

    virtual void transferToCPP(  ) {
        
        if( !this->m_pyobj) {
            this->m_pyobj = boost::python::detail::wrapper_base_::get_owner(*this);
            Py_INCREF(this->m_pyobj);
        }
        
        if( bp::override func_transferToCPP = this->get_override( "transferToCPP" ) )
            func_transferToCPP(  );
        else{
            this->ICloneable::transferToCPP(  );
        }
    }
    
    void default_transferToCPP(  ) {
        
        if( !this->m_pyobj) {
            this->m_pyobj = boost::python::detail::wrapper_base_::get_owner(*this);
            Py_INCREF(this->m_pyobj);
        }
        
        ICloneable::transferToCPP( );
    }

    PyObject* m_pyobj;

};

void register_LayerRoughness_class(){

    { //::LayerRoughness
        typedef bp::class_< LayerRoughness_wrapper, std::auto_ptr< LayerRoughness_wrapper >, boost::noncopyable > LayerRoughness_exposer_t;
        LayerRoughness_exposer_t LayerRoughness_exposer = LayerRoughness_exposer_t( "LayerRoughness", "A Roughness of interface between two layers.", bp::init< >() );
        bp::scope LayerRoughness_scope( LayerRoughness_exposer );
        LayerRoughness_exposer.def( bp::init< double, double, double >(( bp::arg("sigma"), bp::arg("hurstParameter"), bp::arg("latteralCorrLength") )) );
        { //::LayerRoughness::clone
        
            typedef ::LayerRoughness * ( ::LayerRoughness::*clone_function_type)(  ) const;
            typedef ::LayerRoughness * ( LayerRoughness_wrapper::*default_clone_function_type)(  ) const;
            
            LayerRoughness_exposer.def( 
                "clone"
                , clone_function_type(&::LayerRoughness::clone)
                , default_clone_function_type(&LayerRoughness_wrapper::default_clone)
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::LayerRoughness::getCorrFun
        
            typedef double ( ::LayerRoughness::*getCorrFun_function_type)( ::kvector_t const & ) const;
            
            LayerRoughness_exposer.def( 
                "getCorrFun"
                , getCorrFun_function_type( &::LayerRoughness::getCorrFun )
                , ( bp::arg("k") )
                , "Returns power spectral density of the surface roughness." );
        
        }
        { //::LayerRoughness::getHurstParameter
        
            typedef double ( ::LayerRoughness::*getHurstParameter_function_type)(  ) const;
            
            LayerRoughness_exposer.def( 
                "getHurstParameter"
                , getHurstParameter_function_type( &::LayerRoughness::getHurstParameter )
                , "Sets hurst parameter. It describes how jagged the surface is." );
        
        }
        { //::LayerRoughness::getLatteralCorrLength
        
            typedef double ( ::LayerRoughness::*getLatteralCorrLength_function_type)(  ) const;
            
            LayerRoughness_exposer.def( 
                "getLatteralCorrLength"
                , getLatteralCorrLength_function_type( &::LayerRoughness::getLatteralCorrLength )
                , "Sets lateral correlation length." );
        
        }
        { //::LayerRoughness::getSigma
        
            typedef double ( ::LayerRoughness::*getSigma_function_type)(  ) const;
            
            LayerRoughness_exposer.def( 
                "getSigma"
                , getSigma_function_type( &::LayerRoughness::getSigma )
                , "Sets rms of roughness." );
        
        }
        { //::LayerRoughness::getSpectralFun
        
            typedef double ( ::LayerRoughness::*getSpectralFun_function_type)( ::kvector_t const & ) const;
            
            LayerRoughness_exposer.def( 
                "getSpectralFun"
                , getSpectralFun_function_type( &::LayerRoughness::getSpectralFun )
                , ( bp::arg("kvec") )
                , "Returns power spectral density of the surface roughness." );
        
        }
        { //::LayerRoughness::setHurstParameter
        
            typedef void ( ::LayerRoughness::*setHurstParameter_function_type)( double ) ;
            
            LayerRoughness_exposer.def( 
                "setHurstParameter"
                , setHurstParameter_function_type( &::LayerRoughness::setHurstParameter )
                , ( bp::arg("hurstParameter") )
                , "Sets hurst parameter. It describes how jagged the surface is." );
        
        }
        { //::LayerRoughness::setLatteralCorrLength
        
            typedef void ( ::LayerRoughness::*setLatteralCorrLength_function_type)( double ) ;
            
            LayerRoughness_exposer.def( 
                "setLatteralCorrLength"
                , setLatteralCorrLength_function_type( &::LayerRoughness::setLatteralCorrLength )
                , ( bp::arg("latteralCorrLength") )
                , "Sets lateral correlation length." );
        
        }
        { //::LayerRoughness::setSigma
        
            typedef void ( ::LayerRoughness::*setSigma_function_type)( double ) ;
            
            LayerRoughness_exposer.def( 
                "setSigma"
                , setSigma_function_type( &::LayerRoughness::setSigma )
                , ( bp::arg("sigma") )
                , "Sets rms of roughness." );
        
        }
        { //::ISample::cloneInvertB
        
            typedef ::ISample * ( ::ISample::*cloneInvertB_function_type)(  ) const;
            typedef ::ISample * ( LayerRoughness_wrapper::*default_cloneInvertB_function_type)(  ) const;
            
            LayerRoughness_exposer.def( 
                "cloneInvertB"
                , cloneInvertB_function_type(&::ISample::cloneInvertB)
                , default_cloneInvertB_function_type(&LayerRoughness_wrapper::default_cloneInvertB)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::ISample::containsMagneticMaterial
        
            typedef bool ( ::ISample::*containsMagneticMaterial_function_type)(  ) const;
            typedef bool ( LayerRoughness_wrapper::*default_containsMagneticMaterial_function_type)(  ) const;
            
            LayerRoughness_exposer.def( 
                "containsMagneticMaterial"
                , containsMagneticMaterial_function_type(&::ISample::containsMagneticMaterial)
                , default_containsMagneticMaterial_function_type(&LayerRoughness_wrapper::default_containsMagneticMaterial) );
        
        }
        { //::ISample::getChildren
        
            typedef ::std::vector< const ISample* > ( ::ISample::*getChildren_function_type)(  ) const;
            typedef ::std::vector< const ISample* > ( LayerRoughness_wrapper::*default_getChildren_function_type)(  ) const;
            
            LayerRoughness_exposer.def( 
                "getChildren"
                , getChildren_function_type(&::ISample::getChildren)
                , default_getChildren_function_type(&LayerRoughness_wrapper::default_getChildren) );
        
        }
        { //::ISample::printSampleTree
        
            typedef void ( ::ISample::*printSampleTree_function_type)(  ) ;
            typedef void ( LayerRoughness_wrapper::*default_printSampleTree_function_type)(  ) ;
            
            LayerRoughness_exposer.def( 
                "printSampleTree"
                , printSampleTree_function_type(&::ISample::printSampleTree)
                , default_printSampleTree_function_type(&LayerRoughness_wrapper::default_printSampleTree) );
        
        }
        { //::ISample::size
        
            typedef ::std::size_t ( ::ISample::*size_function_type)(  ) const;
            typedef ::std::size_t ( LayerRoughness_wrapper::*default_size_function_type)(  ) const;
            
            LayerRoughness_exposer.def( 
                "size"
                , size_function_type(&::ISample::size)
                , default_size_function_type(&LayerRoughness_wrapper::default_size) );
        
        }
        { //::ICloneable::transferToCPP
        
            typedef void ( ::ICloneable::*transferToCPP_function_type)(  ) ;
            typedef void ( LayerRoughness_wrapper::*default_transferToCPP_function_type)(  ) ;
            
            LayerRoughness_exposer.def( 
                "transferToCPP"
                , transferToCPP_function_type(&::ICloneable::transferToCPP)
                , default_transferToCPP_function_type(&LayerRoughness_wrapper::default_transferToCPP) );
        
        }
    }

}

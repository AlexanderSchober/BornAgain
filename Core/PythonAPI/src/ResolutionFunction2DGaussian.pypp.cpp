// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonCoreList.h"
#include "ResolutionFunction2DGaussian.pypp.h"

namespace bp = boost::python;

struct ResolutionFunction2DGaussian_wrapper : ResolutionFunction2DGaussian, bp::wrapper< ResolutionFunction2DGaussian > {

    ResolutionFunction2DGaussian_wrapper(double sigma_x, double sigma_y )
    : ResolutionFunction2DGaussian( sigma_x, sigma_y )
      , bp::wrapper< ResolutionFunction2DGaussian >(){
        // constructor
    m_pyobj = 0;
    }

    virtual ::ResolutionFunction2DGaussian * clone(  ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone(  );
        else{
            return this->ResolutionFunction2DGaussian::clone(  );
        }
    }
    
    ::ResolutionFunction2DGaussian * default_clone(  ) const  {
        return ResolutionFunction2DGaussian::clone( );
    }

    virtual double evaluateCDF( double x, double y ) const  {
        if( bp::override func_evaluateCDF = this->get_override( "evaluateCDF" ) )
            return func_evaluateCDF( x, y );
        else{
            return this->ResolutionFunction2DGaussian::evaluateCDF( x, y );
        }
    }
    
    double default_evaluateCDF( double x, double y ) const  {
        return ResolutionFunction2DGaussian::evaluateCDF( x, y );
    }

    PyObject* m_pyobj;

};

void register_ResolutionFunction2DGaussian_class(){

    { //::ResolutionFunction2DGaussian
        typedef bp::class_< ResolutionFunction2DGaussian_wrapper, bp::bases< IResolutionFunction2D >, std::auto_ptr< ResolutionFunction2DGaussian_wrapper >, boost::noncopyable > ResolutionFunction2DGaussian_exposer_t;
        ResolutionFunction2DGaussian_exposer_t ResolutionFunction2DGaussian_exposer = ResolutionFunction2DGaussian_exposer_t( "ResolutionFunction2DGaussian", "Simple gaussian two-dimensional resolution function.", bp::init< double, double >(( bp::arg("sigma_x"), bp::arg("sigma_y") )) );
        bp::scope ResolutionFunction2DGaussian_scope( ResolutionFunction2DGaussian_exposer );
        { //::ResolutionFunction2DGaussian::clone
        
            typedef ::ResolutionFunction2DGaussian * ( ::ResolutionFunction2DGaussian::*clone_function_type)(  ) const;
            typedef ::ResolutionFunction2DGaussian * ( ResolutionFunction2DGaussian_wrapper::*default_clone_function_type)(  ) const;
            
            ResolutionFunction2DGaussian_exposer.def( 
                "clone"
                , clone_function_type(&::ResolutionFunction2DGaussian::clone)
                , default_clone_function_type(&ResolutionFunction2DGaussian_wrapper::default_clone)
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::ResolutionFunction2DGaussian::evaluateCDF
        
            typedef double ( ::ResolutionFunction2DGaussian::*evaluateCDF_function_type)( double,double ) const;
            typedef double ( ResolutionFunction2DGaussian_wrapper::*default_evaluateCDF_function_type)( double,double ) const;
            
            ResolutionFunction2DGaussian_exposer.def( 
                "evaluateCDF"
                , evaluateCDF_function_type(&::ResolutionFunction2DGaussian::evaluateCDF)
                , default_evaluateCDF_function_type(&ResolutionFunction2DGaussian_wrapper::default_evaluateCDF)
                , ( bp::arg("x"), bp::arg("y") ) );
        
        }
        { //::ResolutionFunction2DGaussian::getSigmaX
        
            typedef double ( ::ResolutionFunction2DGaussian::*getSigmaX_function_type)(  ) const;
            
            ResolutionFunction2DGaussian_exposer.def( 
                "getSigmaX"
                , getSigmaX_function_type( &::ResolutionFunction2DGaussian::getSigmaX ) );
        
        }
        { //::ResolutionFunction2DGaussian::getSigmaY
        
            typedef double ( ::ResolutionFunction2DGaussian::*getSigmaY_function_type)(  ) const;
            
            ResolutionFunction2DGaussian_exposer.def( 
                "getSigmaY"
                , getSigmaY_function_type( &::ResolutionFunction2DGaussian::getSigmaY ) );
        
        }
    }

}

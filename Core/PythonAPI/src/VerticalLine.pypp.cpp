// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonCoreList.h"
#include "VerticalLine.pypp.h"

namespace bp = boost::python;

struct VerticalLine_wrapper : Geometry::VerticalLine, bp::wrapper< Geometry::VerticalLine > {

    VerticalLine_wrapper(double x )
    : Geometry::VerticalLine( x )
      , bp::wrapper< Geometry::VerticalLine >(){
        // constructor
    m_pyobj = 0;
    }

    virtual ::Geometry::VerticalLine * clone(  ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone(  );
        else{
            return this->Geometry::VerticalLine::clone(  );
        }
    }
    
    ::Geometry::VerticalLine * default_clone(  ) const  {
        return Geometry::VerticalLine::clone( );
    }

    virtual bool contains( double x, double y ) const  {
        if( bp::override func_contains = this->get_override( "contains" ) )
            return func_contains( x, y );
        else{
            return this->Geometry::VerticalLine::contains( x, y );
        }
    }
    
    bool default_contains( double x, double y ) const  {
        return Geometry::VerticalLine::contains( x, y );
    }

    virtual bool contains( ::Bin1D const & binx, ::Bin1D const & biny ) const  {
        if( bp::override func_contains = this->get_override( "contains" ) )
            return func_contains( boost::ref(binx), boost::ref(biny) );
        else{
            return this->Geometry::VerticalLine::contains( boost::ref(binx), boost::ref(biny) );
        }
    }
    
    bool default_contains( ::Bin1D const & binx, ::Bin1D const & biny ) const  {
        return Geometry::VerticalLine::contains( boost::ref(binx), boost::ref(biny) );
    }

    virtual void transferToCPP(  ) {
        
        if( !this->m_pyobj) {
            this->m_pyobj = boost::python::detail::wrapper_base_::get_owner(*this);
            Py_INCREF(this->m_pyobj);
        }
        
        if( bp::override func_transferToCPP = this->get_override( "transferToCPP" ) )
            func_transferToCPP(  );
        else{
            this->ICloneable::transferToCPP(  );
        }
    }
    
    void default_transferToCPP(  ) {
        
        if( !this->m_pyobj) {
            this->m_pyobj = boost::python::detail::wrapper_base_::get_owner(*this);
            Py_INCREF(this->m_pyobj);
        }
        
        ICloneable::transferToCPP( );
    }

    PyObject* m_pyobj;

};

void register_VerticalLine_class(){

    { //::Geometry::VerticalLine
        typedef bp::class_< VerticalLine_wrapper, bp::bases< Geometry::IShape2D >, std::auto_ptr< VerticalLine_wrapper >, boost::noncopyable > VerticalLine_exposer_t;
        VerticalLine_exposer_t VerticalLine_exposer = VerticalLine_exposer_t( "VerticalLine", "Vertical infinite lin.", bp::init< double >(( bp::arg("x") ), "Infinite vertical line constructor @param x The value at which it crosses x-axes \n\n:Parameters:\n  - 'x' - The value at which it crosses x-axes\n") );
        bp::scope VerticalLine_scope( VerticalLine_exposer );
        { //::Geometry::VerticalLine::clone
        
            typedef ::Geometry::VerticalLine * ( ::Geometry::VerticalLine::*clone_function_type)(  ) const;
            typedef ::Geometry::VerticalLine * ( VerticalLine_wrapper::*default_clone_function_type)(  ) const;
            
            VerticalLine_exposer.def( 
                "clone"
                , clone_function_type(&::Geometry::VerticalLine::clone)
                , default_clone_function_type(&VerticalLine_wrapper::default_clone)
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::Geometry::VerticalLine::contains
        
            typedef bool ( ::Geometry::VerticalLine::*contains_function_type)( double,double ) const;
            typedef bool ( VerticalLine_wrapper::*default_contains_function_type)( double,double ) const;
            
            VerticalLine_exposer.def( 
                "contains"
                , contains_function_type(&::Geometry::VerticalLine::contains)
                , default_contains_function_type(&VerticalLine_wrapper::default_contains)
                , ( bp::arg("x"), bp::arg("y") ) );
        
        }
        { //::Geometry::VerticalLine::contains
        
            typedef bool ( ::Geometry::VerticalLine::*contains_function_type)( ::Bin1D const &,::Bin1D const & ) const;
            typedef bool ( VerticalLine_wrapper::*default_contains_function_type)( ::Bin1D const &,::Bin1D const & ) const;
            
            VerticalLine_exposer.def( 
                "contains"
                , contains_function_type(&::Geometry::VerticalLine::contains)
                , default_contains_function_type(&VerticalLine_wrapper::default_contains)
                , ( bp::arg("binx"), bp::arg("biny") ) );
        
        }
        { //::ICloneable::transferToCPP
        
            typedef void ( ::ICloneable::*transferToCPP_function_type)(  ) ;
            typedef void ( VerticalLine_wrapper::*default_transferToCPP_function_type)(  ) ;
            
            VerticalLine_exposer.def( 
                "transferToCPP"
                , transferToCPP_function_type(&::ICloneable::transferToCPP)
                , default_transferToCPP_function_type(&VerticalLine_wrapper::default_transferToCPP) );
        
        }
    }

}

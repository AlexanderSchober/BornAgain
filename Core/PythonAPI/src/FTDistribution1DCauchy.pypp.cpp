// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonCoreList.h"
#include "FTDistribution1DCauchy.pypp.h"

namespace bp = boost::python;

struct FTDistribution1DCauchy_wrapper : FTDistribution1DCauchy, bp::wrapper< FTDistribution1DCauchy > {

    FTDistribution1DCauchy_wrapper(FTDistribution1DCauchy const & arg )
    : FTDistribution1DCauchy( arg )
      , bp::wrapper< FTDistribution1DCauchy >(){
        // copy constructor
        m_pyobj = 0;
    }

    FTDistribution1DCauchy_wrapper(double omega )
    : FTDistribution1DCauchy( omega )
      , bp::wrapper< FTDistribution1DCauchy >(){
        // constructor
    m_pyobj = 0;
    }

    virtual ::FTDistribution1DCauchy * clone(  ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone(  );
        else{
            return this->FTDistribution1DCauchy::clone(  );
        }
    }
    
    ::FTDistribution1DCauchy * default_clone(  ) const  {
        return FTDistribution1DCauchy::clone( );
    }

    virtual double evaluate( double q ) const  {
        if( bp::override func_evaluate = this->get_override( "evaluate" ) )
            return func_evaluate( q );
        else{
            return this->FTDistribution1DCauchy::evaluate( q );
        }
    }
    
    double default_evaluate( double q ) const  {
        return FTDistribution1DCauchy::evaluate( q );
    }

    PyObject* m_pyobj;

};

void register_FTDistribution1DCauchy_class(){

    { //::FTDistribution1DCauchy
        typedef bp::class_< FTDistribution1DCauchy_wrapper, bp::bases< IFTDistribution1D >, std::auto_ptr< FTDistribution1DCauchy_wrapper > > FTDistribution1DCauchy_exposer_t;
        FTDistribution1DCauchy_exposer_t FTDistribution1DCauchy_exposer = FTDistribution1DCauchy_exposer_t( "FTDistribution1DCauchy", "1 dimensional Cauchy distribution in Fourier space.", bp::init< double >(( bp::arg("omega") )) );
        bp::scope FTDistribution1DCauchy_scope( FTDistribution1DCauchy_exposer );
        { //::FTDistribution1DCauchy::clone
        
            typedef ::FTDistribution1DCauchy * ( ::FTDistribution1DCauchy::*clone_function_type)(  ) const;
            typedef ::FTDistribution1DCauchy * ( FTDistribution1DCauchy_wrapper::*default_clone_function_type)(  ) const;
            
            FTDistribution1DCauchy_exposer.def( 
                "clone"
                , clone_function_type(&::FTDistribution1DCauchy::clone)
                , default_clone_function_type(&FTDistribution1DCauchy_wrapper::default_clone)
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::FTDistribution1DCauchy::evaluate
        
            typedef double ( ::FTDistribution1DCauchy::*evaluate_function_type)( double ) const;
            typedef double ( FTDistribution1DCauchy_wrapper::*default_evaluate_function_type)( double ) const;
            
            FTDistribution1DCauchy_exposer.def( 
                "evaluate"
                , evaluate_function_type(&::FTDistribution1DCauchy::evaluate)
                , default_evaluate_function_type(&FTDistribution1DCauchy_wrapper::default_evaluate)
                , ( bp::arg("q") ) );
        
        }
    }

}

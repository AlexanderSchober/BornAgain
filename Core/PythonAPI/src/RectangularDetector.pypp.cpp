// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonCoreList.h"
#include "RectangularDetector.pypp.h"

namespace bp = boost::python;

struct RectangularDetector_wrapper : RectangularDetector, bp::wrapper< RectangularDetector > {

    RectangularDetector_wrapper(::kvector_t normal_to_detector, ::kvector_t u_direction )
    : RectangularDetector( normal_to_detector, u_direction )
      , bp::wrapper< RectangularDetector >(){
        // constructor
    m_pyobj = 0;
    }

    RectangularDetector_wrapper(::RectangularDetector const & other )
    : RectangularDetector( boost::ref(other) )
      , bp::wrapper< RectangularDetector >(){
        // copy constructor
    m_pyobj = 0;
    }

    virtual ::RectangularDetector * clone(  ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone(  );
        else{
            return this->RectangularDetector::clone(  );
        }
    }
    
    ::RectangularDetector * default_clone(  ) const  {
        return RectangularDetector::clone( );
    }

    PyObject* m_pyobj;

};

void register_RectangularDetector_class(){

    { //::RectangularDetector
        typedef bp::class_< RectangularDetector_wrapper, bp::bases< IDetector2D >, std::auto_ptr< RectangularDetector_wrapper > > RectangularDetector_exposer_t;
        RectangularDetector_exposer_t RectangularDetector_exposer = RectangularDetector_exposer_t( "RectangularDetector", "A rectangular plane detector with axes and resolution function.", bp::init< kvector_t, kvector_t >(( bp::arg("normal_to_detector"), bp::arg("u_direction") )) );
        bp::scope RectangularDetector_scope( RectangularDetector_exposer );
        RectangularDetector_exposer.def( bp::init< RectangularDetector const & >(( bp::arg("other") )) );
        { //::RectangularDetector::clone
        
            typedef ::RectangularDetector * ( ::RectangularDetector::*clone_function_type)(  ) const;
            typedef ::RectangularDetector * ( RectangularDetector_wrapper::*default_clone_function_type)(  ) const;
            
            RectangularDetector_exposer.def( 
                "clone"
                , clone_function_type(&::RectangularDetector::clone)
                , default_clone_function_type(&RectangularDetector_wrapper::default_clone)
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::RectangularDetector::operator=
        
            typedef ::RectangularDetector & ( ::RectangularDetector::*assign_function_type)( ::RectangularDetector const & ) ;
            
            RectangularDetector_exposer.def( 
                "assign"
                , assign_function_type( &::RectangularDetector::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
    }

}

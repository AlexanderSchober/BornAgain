// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonCoreList.h"
#include "cvector_t.pypp.h"

namespace bp = boost::python;

void register_cvector_t_class(){

    { //::Geometry::BasicVector3D< std::complex< double > >
        typedef bp::class_< Geometry::BasicVector3D< std::complex< double > > > cvector_t_exposer_t;
        cvector_t_exposer_t cvector_t_exposer = cvector_t_exposer_t( "cvector_t", "Three-dimensional vector template, for use with integer, double, or complex components.", bp::init< >("Default constructor.") );
        bp::scope cvector_t_scope( cvector_t_exposer );
        cvector_t_exposer.def( bp::init< std::complex< double >, std::complex< double >, std::complex< double > >(( bp::arg("x1"), bp::arg("y1"), bp::arg("z1") ), "Constructor from cartesian components.") );
        { //::Geometry::BasicVector3D< std::complex< double > >::conj
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::Geometry::BasicVector3D< std::complex< double > > ( exported_class_t::*conj_function_type)(  ) const;
            
            cvector_t_exposer.def( 
                "conj"
                , conj_function_type( &::Geometry::BasicVector3D< std::complex< double > >::conj )
                , "Returns complex conjugate vector." );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::mag
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef double ( exported_class_t::*mag_function_type)(  ) const;
            
            cvector_t_exposer.def( 
                "mag"
                , mag_function_type( &::Geometry::BasicVector3D< std::complex< double > >::mag )
                , "Returns magnitude of the vector." );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::mag2
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef double ( exported_class_t::*mag2_function_type)(  ) const;
            
            cvector_t_exposer.def( 
                "mag2"
                , mag2_function_type( &::Geometry::BasicVector3D< std::complex< double > >::mag2 )
                , "Returns squared magnitude squared of the vector." );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::magxy
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef double ( exported_class_t::*magxy_function_type)(  ) const;
            
            cvector_t_exposer.def( 
                "magxy"
                , magxy_function_type( &::Geometry::BasicVector3D< std::complex< double > >::magxy )
                , "Returns distance from z axis." );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::magxy2
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef double ( exported_class_t::*magxy2_function_type)(  ) const;
            
            cvector_t_exposer.def( 
                "magxy2"
                , magxy2_function_type( &::Geometry::BasicVector3D< std::complex< double > >::magxy2 )
                , "Returns squared distance from z axis." );
        
        }
        cvector_t_exposer.def( bp::self *= bp::other< double >() );
        cvector_t_exposer.def( bp::self += bp::self );
        cvector_t_exposer.def( bp::self -= bp::self );
        cvector_t_exposer.def( bp::self /= bp::other< double >() );
        { //::Geometry::BasicVector3D< std::complex< double > >::operator[]
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > ( exported_class_t::*__getitem___function_type)( int ) const;
            
            cvector_t_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::Geometry::BasicVector3D< std::complex< double > >::operator[] )
                , ( bp::arg("i") )
                , "Returns components by index." );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::operator[]
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > & ( exported_class_t::*__getitem___function_type)( int ) ;
            
            cvector_t_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::Geometry::BasicVector3D< std::complex< double > >::operator[] )
                , ( bp::arg("i") )
                , bp::return_internal_reference< >()
                , "Sets components by index." );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::project
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::Geometry::BasicVector3D< std::complex< double > > ( exported_class_t::*project_function_type)( ::Geometry::BasicVector3D< std::complex< double > > const & ) const;
            
            cvector_t_exposer.def( 
                "project"
                , project_function_type( &::Geometry::BasicVector3D< std::complex< double > >::project )
                , ( bp::arg("v") )
                , "Returns projection of this onto other vector: (this*v)*v/|v|^2." );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::setX
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef void ( exported_class_t::*setX_function_type)( ::std::complex< double > const & ) ;
            
            cvector_t_exposer.def( 
                "setX"
                , setX_function_type( &::Geometry::BasicVector3D< std::complex< double > >::setX )
                , ( bp::arg("a") )
                , "Sets x-component in cartesian coordinate system." );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::setXYZ
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef void ( exported_class_t::*setXYZ_function_type)( ::std::complex< double > const &,::std::complex< double > const &,::std::complex< double > const & ) ;
            
            cvector_t_exposer.def( 
                "setXYZ"
                , setXYZ_function_type( &::Geometry::BasicVector3D< std::complex< double > >::setXYZ )
                , ( bp::arg("x1"), bp::arg("y1"), bp::arg("z1") )
                , "Sets components in cartesian coordinate system." );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::setY
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef void ( exported_class_t::*setY_function_type)( ::std::complex< double > const & ) ;
            
            cvector_t_exposer.def( 
                "setY"
                , setY_function_type( &::Geometry::BasicVector3D< std::complex< double > >::setY )
                , ( bp::arg("a") )
                , "Sets x-component in cartesian coordinate system." );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::setZ
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef void ( exported_class_t::*setZ_function_type)( ::std::complex< double > const & ) ;
            
            cvector_t_exposer.def( 
                "setZ"
                , setZ_function_type( &::Geometry::BasicVector3D< std::complex< double > >::setZ )
                , ( bp::arg("a") )
                , "Sets y-component in cartesian coordinate system." );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::x
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > ( exported_class_t::*x_function_type)(  ) const;
            
            cvector_t_exposer.def( 
                "x"
                , x_function_type( &::Geometry::BasicVector3D< std::complex< double > >::x )
                , "Returns x-component in cartesian coordinate system." );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::y
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > ( exported_class_t::*y_function_type)(  ) const;
            
            cvector_t_exposer.def( 
                "y"
                , y_function_type( &::Geometry::BasicVector3D< std::complex< double > >::y )
                , "Returns x-component in cartesian coordinate system." );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::z
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > ( exported_class_t::*z_function_type)(  ) const;
            
            cvector_t_exposer.def( 
                "z"
                , z_function_type( &::Geometry::BasicVector3D< std::complex< double > >::z )
                , "Returns y-component in cartesian coordinate system." );
        
        }
    }

}

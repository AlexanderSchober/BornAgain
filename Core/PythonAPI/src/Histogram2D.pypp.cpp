// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonCoreList.h"
#include "Histogram2D.pypp.h"

namespace bp = boost::python;

struct Histogram2D_wrapper : Histogram2D, bp::wrapper< Histogram2D > {

    Histogram2D_wrapper(int nbinsx, double xlow, double xup, int nbinsy, double ylow, double yup )
    : Histogram2D( nbinsx, xlow, xup, nbinsy, ylow, yup )
      , bp::wrapper< Histogram2D >(){
        // constructor
    m_pyobj = 0;
    }

    Histogram2D_wrapper(int nbinsx, ::std::vector< double > const & xbins, int nbinsy, ::std::vector< double > const & ybins )
    : Histogram2D( nbinsx, boost::ref(xbins), nbinsy, boost::ref(ybins) )
      , bp::wrapper< Histogram2D >(){
        // constructor
    m_pyobj = 0;
    }

    Histogram2D_wrapper(::IAxis const & axis_x, ::IAxis const & axis_y )
    : Histogram2D( boost::ref(axis_x), boost::ref(axis_y) )
      , bp::wrapper< Histogram2D >(){
        // constructor
    m_pyobj = 0;
    }

    Histogram2D_wrapper(::OutputData< double > const & data )
    : Histogram2D( boost::ref(data) )
      , bp::wrapper< Histogram2D >(){
        // constructor
    m_pyobj = 0;
    }

    virtual ::Histogram2D * clone(  ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone(  );
        else{
            return this->Histogram2D::clone(  );
        }
    }
    
    ::Histogram2D * default_clone(  ) const  {
        return Histogram2D::clone( );
    }

    virtual ::std::size_t getRank(  ) const  {
        if( bp::override func_getRank = this->get_override( "getRank" ) )
            return func_getRank(  );
        else{
            return this->Histogram2D::getRank(  );
        }
    }
    
    ::std::size_t default_getRank(  ) const  {
        return Histogram2D::getRank( );
    }

    PyObject* m_pyobj;

};

void register_Histogram2D_class(){

    { //::Histogram2D
        typedef bp::class_< Histogram2D_wrapper, bp::bases< IHistogram >, std::auto_ptr< Histogram2D_wrapper >, boost::noncopyable > Histogram2D_exposer_t;
        Histogram2D_exposer_t Histogram2D_exposer = Histogram2D_exposer_t( "Histogram2D", bp::init< int, double, double, int, double, double >(( bp::arg("nbinsx"), bp::arg("xlow"), bp::arg("xup"), bp::arg("nbinsy"), bp::arg("ylow"), bp::arg("yup") ), "Constructor for fix bin size histograms.\n\n:Parameters:\n  - 'nbinsx' - number of bins on X-axis\n  - 'xlow' - low edge of the first bin of X-axis\n  - 'xup' - upper edge of the last bin of X-axis\n  - 'nbinsy' - number of bins on Y axis\n  - 'ylow' - low edge of the first bin of Y-axis\n  - 'yup' - upper edge of the last bin of Y-axis\n") );
        bp::scope Histogram2D_scope( Histogram2D_exposer );
        Histogram2D_exposer.def( bp::init< int, std::vector< double > const &, int, std::vector< double > const & >(( bp::arg("nbinsx"), bp::arg("xbins"), bp::arg("nbinsy"), bp::arg("ybins") ), "Constructor for variable bin size histograms.\n\n:Parameters:\n  - 'nbinsx' - number of bins on X-axis\n  - 'xbins' - Array of size nbins+1 containing low-edges for each\n  - 'nbinsy' - number of bins on Y-axis\n  - 'ybins' - Array of size nbins+1 containing low-edges for each\n") );
        Histogram2D_exposer.def( bp::init< IAxis const &, IAxis const & >(( bp::arg("axis_x"), bp::arg("axis_y") ), "Constructor for 2D histogram with custom axes.") );
        Histogram2D_exposer.def( bp::init< OutputData< double > const & >(( bp::arg("data") ), "Constructor for 2D histograms from basic OutputData object.") );
        { //::Histogram2D::clone
        
            typedef ::Histogram2D * ( ::Histogram2D::*clone_function_type)(  ) const;
            typedef ::Histogram2D * ( Histogram2D_wrapper::*default_clone_function_type)(  ) const;
            
            Histogram2D_exposer.def( 
                "clone"
                , clone_function_type(&::Histogram2D::clone)
                , default_clone_function_type(&Histogram2D_wrapper::default_clone)
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::Histogram2D::crop
        
            typedef ::Histogram2D * ( ::Histogram2D::*crop_function_type)( double,double,double,double ) ;
            
            Histogram2D_exposer.def( 
                "crop"
                , crop_function_type( &::Histogram2D::crop )
                , ( bp::arg("xmin"), bp::arg("ymin"), bp::arg("xmax"), bp::arg("ymax") )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "Create new histogram by applying rectangular clip." );
        
        }
        { //::Histogram2D::fill
        
            typedef int ( ::Histogram2D::*fill_function_type)( double,double,double ) ;
            
            Histogram2D_exposer.def( 
                "fill"
                , fill_function_type( &::Histogram2D::fill )
                , ( bp::arg("x"), bp::arg("y"), bp::arg("weight")=1.0e+0 )
                , "Increment bin with abscissa x and ordinate y with a weight." );
        
        }
        { //::Histogram2D::getRank
        
            typedef ::std::size_t ( ::Histogram2D::*getRank_function_type)(  ) const;
            typedef ::std::size_t ( Histogram2D_wrapper::*default_getRank_function_type)(  ) const;
            
            Histogram2D_exposer.def( 
                "getRank"
                , getRank_function_type(&::Histogram2D::getRank)
                , default_getRank_function_type(&Histogram2D_wrapper::default_getRank) );
        
        }
        { //::Histogram2D::projectionX
        
            typedef ::Histogram1D * ( ::Histogram2D::*projectionX_function_type)(  ) ;
            
            Histogram2D_exposer.def( 
                "projectionX"
                , projectionX_function_type( &::Histogram2D::projectionX )
                , bp::return_value_policy< bp::manage_new_object >()
                , "Project a 2D histogram into 1D histogram along X. The projection is made from all bins along y-axis. " );
        
        }
        { //::Histogram2D::projectionX
        
            typedef ::Histogram1D * ( ::Histogram2D::*projectionX_function_type)( double ) ;
            
            Histogram2D_exposer.def( 
                "projectionX"
                , projectionX_function_type( &::Histogram2D::projectionX )
                , ( bp::arg("yvalue") )
                , bp::return_value_policy< bp::manage_new_object >()
                , "Project a 2D histogram into 1D histogram along X.\n\n:Parameters:\n  - 'yvalue' - the value on y-axis at which projection is taken\n" );
        
        }
        { //::Histogram2D::projectionX
        
            typedef ::Histogram1D * ( ::Histogram2D::*projectionX_function_type)( double,double ) ;
            
            Histogram2D_exposer.def( 
                "projectionX"
                , projectionX_function_type( &::Histogram2D::projectionX )
                , ( bp::arg("ylow"), bp::arg("yup") )
                , bp::return_value_policy< bp::manage_new_object >()
                , "Project a 2D histogram into 1D histogram along X.\n\n:Parameters:\n  - 'ylow' - lower edje on y-axis\n  - 'yup' - upper edje on y-axis\n" );
        
        }
        { //::Histogram2D::projectionY
        
            typedef ::Histogram1D * ( ::Histogram2D::*projectionY_function_type)(  ) ;
            
            Histogram2D_exposer.def( 
                "projectionY"
                , projectionY_function_type( &::Histogram2D::projectionY )
                , bp::return_value_policy< bp::manage_new_object >()
                , "Project a 2D histogram into 1D histogram along Y. The projection is made from all bins along x-axis. " );
        
        }
        { //::Histogram2D::projectionY
        
            typedef ::Histogram1D * ( ::Histogram2D::*projectionY_function_type)( double ) ;
            
            Histogram2D_exposer.def( 
                "projectionY"
                , projectionY_function_type( &::Histogram2D::projectionY )
                , ( bp::arg("xvalue") )
                , bp::return_value_policy< bp::manage_new_object >()
                , "Project a 2D histogram into 1D histogram along Y.\n\n:Parameters:\n  - 'xvalue' - the value on x-axis at which projection is taken\n" );
        
        }
        { //::Histogram2D::projectionY
        
            typedef ::Histogram1D * ( ::Histogram2D::*projectionY_function_type)( double,double ) ;
            
            Histogram2D_exposer.def( 
                "projectionY"
                , projectionY_function_type( &::Histogram2D::projectionY )
                , ( bp::arg("xlow"), bp::arg("xup") )
                , bp::return_value_policy< bp::manage_new_object >()
                , "Project a 2D histogram into 1D histogram along Y.\n\n:Parameters:\n  - 'xlow' - lower edje on x-axis\n  - 'xup' - upper edje on x-axis\n" );
        
        }
    }

}

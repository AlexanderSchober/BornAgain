// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonCoreList.h"
#include "Histogram2D.pypp.h"

namespace bp = boost::python;

struct Histogram2D_wrapper : Histogram2D, bp::wrapper< Histogram2D > {

    Histogram2D_wrapper(int nbinsx, double xlow, double xup, int nbinsy, double ylow, double yup )
    : Histogram2D( nbinsx, xlow, xup, nbinsy, ylow, yup )
      , bp::wrapper< Histogram2D >(){
        // constructor
    
    }

    Histogram2D_wrapper(int nbinsx, ::std::vector< double > const & xbins, int nbinsy, ::std::vector< double > const & ybins )
    : Histogram2D( nbinsx, boost::ref(xbins), nbinsy, boost::ref(ybins) )
      , bp::wrapper< Histogram2D >(){
        // constructor
    
    }

    Histogram2D_wrapper(::IAxis const & axis_x, ::IAxis const & axis_y )
    : Histogram2D( boost::ref(axis_x), boost::ref(axis_y) )
      , bp::wrapper< Histogram2D >(){
        // constructor
    
    }

    Histogram2D_wrapper(::OutputData< double > const & data )
    : Histogram2D( boost::ref(data) )
      , bp::wrapper< Histogram2D >(){
        // constructor
    
    }

    virtual ::std::size_t getRank(  ) const  {
        if( bp::override func_getRank = this->get_override( "getRank" ) )
            return func_getRank(  );
        else{
            return this->Histogram2D::getRank(  );
        }
    }
    
    ::std::size_t default_getRank(  ) const  {
        return Histogram2D::getRank( );
    }

    virtual ::std::size_t getTotalNumberOfBins(  ) const  {
        if( bp::override func_getTotalNumberOfBins = this->get_override( "getTotalNumberOfBins" ) )
            return func_getTotalNumberOfBins(  );
        else{
            return this->IHistogram::getTotalNumberOfBins(  );
        }
    }
    
    ::std::size_t default_getTotalNumberOfBins(  ) const  {
        return IHistogram::getTotalNumberOfBins( );
    }

    virtual ::IAxis const * getXaxis(  ) const  {
        if( bp::override func_getXaxis = this->get_override( "getXaxis" ) )
            return func_getXaxis(  );
        else{
            return this->IHistogram::getXaxis(  );
        }
    }
    
    ::IAxis const * default_getXaxis(  ) const  {
        return IHistogram::getXaxis( );
    }

    virtual double getXaxisValue( ::std::size_t globalbin ) {
        if( bp::override func_getXaxisValue = this->get_override( "getXaxisValue" ) )
            return func_getXaxisValue( globalbin );
        else{
            return this->IHistogram::getXaxisValue( globalbin );
        }
    }
    
    double default_getXaxisValue( ::std::size_t globalbin ) {
        return IHistogram::getXaxisValue( globalbin );
    }

    virtual double getXmax(  ) const  {
        if( bp::override func_getXmax = this->get_override( "getXmax" ) )
            return func_getXmax(  );
        else{
            return this->IHistogram::getXmax(  );
        }
    }
    
    double default_getXmax(  ) const  {
        return IHistogram::getXmax( );
    }

    virtual double getXmin(  ) const  {
        if( bp::override func_getXmin = this->get_override( "getXmin" ) )
            return func_getXmin(  );
        else{
            return this->IHistogram::getXmin(  );
        }
    }
    
    double default_getXmin(  ) const  {
        return IHistogram::getXmin( );
    }

    virtual ::IAxis const * getYaxis(  ) const  {
        if( bp::override func_getYaxis = this->get_override( "getYaxis" ) )
            return func_getYaxis(  );
        else{
            return this->IHistogram::getYaxis(  );
        }
    }
    
    ::IAxis const * default_getYaxis(  ) const  {
        return IHistogram::getYaxis( );
    }

    virtual double getYaxisValue( ::std::size_t globalbin ) {
        if( bp::override func_getYaxisValue = this->get_override( "getYaxisValue" ) )
            return func_getYaxisValue( globalbin );
        else{
            return this->IHistogram::getYaxisValue( globalbin );
        }
    }
    
    double default_getYaxisValue( ::std::size_t globalbin ) {
        return IHistogram::getYaxisValue( globalbin );
    }

    virtual double getYmax(  ) const  {
        if( bp::override func_getYmax = this->get_override( "getYmax" ) )
            return func_getYmax(  );
        else{
            return this->IHistogram::getYmax(  );
        }
    }
    
    double default_getYmax(  ) const  {
        return IHistogram::getYmax( );
    }

    virtual double getYmin(  ) const  {
        if( bp::override func_getYmin = this->get_override( "getYmin" ) )
            return func_getYmin(  );
        else{
            return this->IHistogram::getYmin(  );
        }
    }
    
    double default_getYmin(  ) const  {
        return IHistogram::getYmin( );
    }

    virtual void reset(  ) {
        if( bp::override func_reset = this->get_override( "reset" ) )
            func_reset(  );
        else{
            this->IHistogram::reset(  );
        }
    }
    
    void default_reset(  ) {
        IHistogram::reset( );
    }

};

void register_Histogram2D_class(){

    { //::Histogram2D
        typedef bp::class_< Histogram2D_wrapper, bp::bases< IHistogram >, boost::noncopyable > Histogram2D_exposer_t;
        Histogram2D_exposer_t Histogram2D_exposer = Histogram2D_exposer_t( "Histogram2D", bp::init< int, double, double, int, double, double >(( bp::arg("nbinsx"), bp::arg("xlow"), bp::arg("xup"), bp::arg("nbinsy"), bp::arg("ylow"), bp::arg("yup") ), "Constructor for fix bin size histograms. @param nbinsx number of bins on X-axis @param xlow low edge of the first bin of X-axis @param xup upper edge of the last bin of X-axis @param nbinsy number of bins on Y axis @param ylow low edge of the first bin of Y-axis @param yup upper edge of the last bin of Y-axis \n\n:Parameters:\n  - 'nbinsx' - number of bins on X-axis\n  - 'xlow' - low edge of the first bin of X-axis\n  - 'xup' - upper edge of the last bin of X-axis\n  - 'nbinsy' - number of bins on Y axis\n  - 'ylow' - low edge of the first bin of Y-axis\n  - 'yup' - upper edge of the last bin of Y-axis\n") );
        bp::scope Histogram2D_scope( Histogram2D_exposer );
        Histogram2D_exposer.def( bp::init< int, std::vector< double > const &, int, std::vector< double > const & >(( bp::arg("nbinsx"), bp::arg("xbins"), bp::arg("nbinsy"), bp::arg("ybins") ), "Constructor for variable bin size histograms. @param nbinsx number of bins on X-axis @param xbins Array of size nbins+1 containing low-edges for each bin and upper edge of last bin. @param nbinsy number of bins on Y-axis @param ybins Array of size nbins+1 containing low-edges for each bin and upper edge of last bin. \n\n:Parameters:\n  - 'nbinsx' - number of bins on X-axis\n  - 'xbins' - Array of size nbins+1 containing low-edges for each\n  - 'nbinsy' - number of bins on Y-axis\n  - 'ybins' - Array of size nbins+1 containing low-edges for each\n") );
        Histogram2D_exposer.def( bp::init< IAxis const &, IAxis const & >(( bp::arg("axis_x"), bp::arg("axis_y") ), "Constructor for 2D histogram with custom axes.") );
        Histogram2D_exposer.def( bp::init< OutputData< double > const & >(( bp::arg("data") ), "Constructor for 2D histograms from basic OutputData object.") );
        { //::Histogram2D::crop
        
            typedef ::Histogram2D * ( ::Histogram2D::*crop_function_type)( double,double,double,double ) ;
            
            Histogram2D_exposer.def( 
                "crop"
                , crop_function_type( &::Histogram2D::crop )
                , ( bp::arg("xmin"), bp::arg("ymin"), bp::arg("xmax"), bp::arg("ymax") )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "Create new histogram by applying rectangular clip." );
        
        }
        { //::Histogram2D::fill
        
            typedef int ( ::Histogram2D::*fill_function_type)( double,double,double ) ;
            
            Histogram2D_exposer.def( 
                "fill"
                , fill_function_type( &::Histogram2D::fill )
                , ( bp::arg("x"), bp::arg("y"), bp::arg("weight")=1.0e+0 )
                , "Increment bin with abscissa x and ordinate y with a weight." );
        
        }
        { //::Histogram2D::getRank
        
            typedef ::std::size_t ( ::Histogram2D::*getRank_function_type)(  ) const;
            typedef ::std::size_t ( Histogram2D_wrapper::*default_getRank_function_type)(  ) const;
            
            Histogram2D_exposer.def( 
                "getRank"
                , getRank_function_type(&::Histogram2D::getRank)
                , default_getRank_function_type(&Histogram2D_wrapper::default_getRank) );
        
        }
        { //::Histogram2D::projectionX
        
            typedef ::Histogram1D * ( ::Histogram2D::*projectionX_function_type)( ::IHistogram::ProjectionType ) ;
            
            Histogram2D_exposer.def( 
                "projectionX"
                , projectionX_function_type( &::Histogram2D::projectionX )
                , ( bp::arg("projectionType")=::IHistogram::INTEGRAL )
                , bp::return_value_policy< bp::manage_new_object >()
                , "Project a 2D histogram into 1D histogram along X. The projection is made from all bins along y-axis. The content is either integrated or averaged. @param projectionType defines type of projection (INTEGRAL or AVERAGE) \n\n:Parameters:\n  - 'projectionType' - defines type of projection (INTEGRAL or AVERAGE)\n" );
        
        }
        { //::Histogram2D::projectionX
        
            typedef ::Histogram1D * ( ::Histogram2D::*projectionX_function_type)( double ) ;
            
            Histogram2D_exposer.def( 
                "projectionX"
                , projectionX_function_type( &::Histogram2D::projectionX )
                , ( bp::arg("yvalue") )
                , bp::return_value_policy< bp::manage_new_object >()
                , "Project a 2D histogram into 1D histogram along X. The projection is made from the y-bin corresponding to ordinate yvalue. @param yvalue the value on y-axis at which projection is taken \n\n:Parameters:\n  - 'yvalue' - the value on y-axis at which projection is taken\n" );
        
        }
        { //::Histogram2D::projectionX
        
            typedef ::Histogram1D * ( ::Histogram2D::*projectionX_function_type)( double,double,::IHistogram::ProjectionType ) ;
            
            Histogram2D_exposer.def( 
                "projectionX"
                , projectionX_function_type( &::Histogram2D::projectionX )
                , ( bp::arg("ylow"), bp::arg("yup"), bp::arg("projectionType")=::IHistogram::INTEGRAL )
                , bp::return_value_policy< bp::manage_new_object >()
                , "Project a 2D histogram into 1D histogram along X. The projection is made from all y-bins corresponding to ordinate between ylow and yup. The content is either integrated or averaged. @param ylow lower edje on y-axis @param yup upper edje on y-axis @param projectionType defines type of projection (INTEGRAL or AVERAGE) \n\n:Parameters:\n  - 'ylow' - lower edje on y-axis\n  - 'yup' - upper edje on y-axis\n  - 'projectionType' - defines type of projection (INTEGRAL or AVERAGE)\n" );
        
        }
        { //::Histogram2D::projectionY
        
            typedef ::Histogram1D * ( ::Histogram2D::*projectionY_function_type)( ::IHistogram::ProjectionType ) ;
            
            Histogram2D_exposer.def( 
                "projectionY"
                , projectionY_function_type( &::Histogram2D::projectionY )
                , ( bp::arg("projectionType")=::IHistogram::INTEGRAL )
                , bp::return_value_policy< bp::manage_new_object >()
                , "Project a 2D histogram into 1D histogram along Y. The projection is made from all bins along x-axis. The content is either integrated or averaged. @param projectionType defines type of projection (INTEGRAL or AVERAGE) \n\n:Parameters:\n  - 'projectionType' - defines type of projection (INTEGRAL or AVERAGE)\n" );
        
        }
        { //::Histogram2D::projectionY
        
            typedef ::Histogram1D * ( ::Histogram2D::*projectionY_function_type)( double ) ;
            
            Histogram2D_exposer.def( 
                "projectionY"
                , projectionY_function_type( &::Histogram2D::projectionY )
                , ( bp::arg("xvalue") )
                , bp::return_value_policy< bp::manage_new_object >()
                , "Project a 2D histogram into 1D histogram along Y. The projection is made from the x-bin corresponding to abscissa xvalue. @param xvalue the value on x-axis at which projection is taken \n\n:Parameters:\n  - 'xvalue' - the value on x-axis at which projection is taken\n" );
        
        }
        { //::Histogram2D::projectionY
        
            typedef ::Histogram1D * ( ::Histogram2D::*projectionY_function_type)( double,double,::IHistogram::ProjectionType ) ;
            
            Histogram2D_exposer.def( 
                "projectionY"
                , projectionY_function_type( &::Histogram2D::projectionY )
                , ( bp::arg("xlow"), bp::arg("xup"), bp::arg("projectionType")=::IHistogram::INTEGRAL )
                , bp::return_value_policy< bp::manage_new_object >()
                , "Project a 2D histogram into 1D histogram along Y. The projection is made from all x-bins corresponding to abscissa between xlow and xup. The content is either integrated or averaged. @param xlow lower edje on x-axis @param xup upper edje on x-axis @param projectionType defines type of projection (INTEGRAL or AVERAGE) \n\n:Parameters:\n  - 'xlow' - lower edje on x-axis\n  - 'xup' - upper edje on x-axis\n  - 'projectionType' - defines type of projection (INTEGRAL or AVERAGE)\n" );
        
        }
        { //::IHistogram::getTotalNumberOfBins
        
            typedef ::std::size_t ( ::IHistogram::*getTotalNumberOfBins_function_type)(  ) const;
            typedef ::std::size_t ( Histogram2D_wrapper::*default_getTotalNumberOfBins_function_type)(  ) const;
            
            Histogram2D_exposer.def( 
                "getTotalNumberOfBins"
                , getTotalNumberOfBins_function_type(&::IHistogram::getTotalNumberOfBins)
                , default_getTotalNumberOfBins_function_type(&Histogram2D_wrapper::default_getTotalNumberOfBins) );
        
        }
        { //::IHistogram::getXaxis
        
            typedef ::IAxis const * ( ::IHistogram::*getXaxis_function_type)(  ) const;
            typedef ::IAxis const * ( Histogram2D_wrapper::*default_getXaxis_function_type)(  ) const;
            
            Histogram2D_exposer.def( 
                "getXaxis"
                , getXaxis_function_type(&::IHistogram::getXaxis)
                , default_getXaxis_function_type(&Histogram2D_wrapper::default_getXaxis)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::IHistogram::getXaxisValue
        
            typedef double ( ::IHistogram::*getXaxisValue_function_type)( ::std::size_t ) ;
            typedef double ( Histogram2D_wrapper::*default_getXaxisValue_function_type)( ::std::size_t ) ;
            
            Histogram2D_exposer.def( 
                "getXaxisValue"
                , getXaxisValue_function_type(&::IHistogram::getXaxisValue)
                , default_getXaxisValue_function_type(&Histogram2D_wrapper::default_getXaxisValue)
                , ( bp::arg("globalbin") ) );
        
        }
        { //::IHistogram::getXmax
        
            typedef double ( ::IHistogram::*getXmax_function_type)(  ) const;
            typedef double ( Histogram2D_wrapper::*default_getXmax_function_type)(  ) const;
            
            Histogram2D_exposer.def( 
                "getXmax"
                , getXmax_function_type(&::IHistogram::getXmax)
                , default_getXmax_function_type(&Histogram2D_wrapper::default_getXmax) );
        
        }
        { //::IHistogram::getXmin
        
            typedef double ( ::IHistogram::*getXmin_function_type)(  ) const;
            typedef double ( Histogram2D_wrapper::*default_getXmin_function_type)(  ) const;
            
            Histogram2D_exposer.def( 
                "getXmin"
                , getXmin_function_type(&::IHistogram::getXmin)
                , default_getXmin_function_type(&Histogram2D_wrapper::default_getXmin) );
        
        }
        { //::IHistogram::getYaxis
        
            typedef ::IAxis const * ( ::IHistogram::*getYaxis_function_type)(  ) const;
            typedef ::IAxis const * ( Histogram2D_wrapper::*default_getYaxis_function_type)(  ) const;
            
            Histogram2D_exposer.def( 
                "getYaxis"
                , getYaxis_function_type(&::IHistogram::getYaxis)
                , default_getYaxis_function_type(&Histogram2D_wrapper::default_getYaxis)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::IHistogram::getYaxisValue
        
            typedef double ( ::IHistogram::*getYaxisValue_function_type)( ::std::size_t ) ;
            typedef double ( Histogram2D_wrapper::*default_getYaxisValue_function_type)( ::std::size_t ) ;
            
            Histogram2D_exposer.def( 
                "getYaxisValue"
                , getYaxisValue_function_type(&::IHistogram::getYaxisValue)
                , default_getYaxisValue_function_type(&Histogram2D_wrapper::default_getYaxisValue)
                , ( bp::arg("globalbin") ) );
        
        }
        { //::IHistogram::getYmax
        
            typedef double ( ::IHistogram::*getYmax_function_type)(  ) const;
            typedef double ( Histogram2D_wrapper::*default_getYmax_function_type)(  ) const;
            
            Histogram2D_exposer.def( 
                "getYmax"
                , getYmax_function_type(&::IHistogram::getYmax)
                , default_getYmax_function_type(&Histogram2D_wrapper::default_getYmax) );
        
        }
        { //::IHistogram::getYmin
        
            typedef double ( ::IHistogram::*getYmin_function_type)(  ) const;
            typedef double ( Histogram2D_wrapper::*default_getYmin_function_type)(  ) const;
            
            Histogram2D_exposer.def( 
                "getYmin"
                , getYmin_function_type(&::IHistogram::getYmin)
                , default_getYmin_function_type(&Histogram2D_wrapper::default_getYmin) );
        
        }
        { //::IHistogram::reset
        
            typedef void ( ::IHistogram::*reset_function_type)(  ) ;
            typedef void ( Histogram2D_wrapper::*default_reset_function_type)(  ) ;
            
            Histogram2D_exposer.def( 
                "reset"
                , reset_function_type(&::IHistogram::reset)
                , default_reset_function_type(&Histogram2D_wrapper::default_reset) );
        
        }
    }

}

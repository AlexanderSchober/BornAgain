// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonCoreList.h"
#include "ParticleComposition.pypp.h"

namespace bp = boost::python;

struct ParticleComposition_wrapper : ParticleComposition, bp::wrapper< ParticleComposition > {

    ParticleComposition_wrapper( )
    : ParticleComposition( )
      , bp::wrapper< ParticleComposition >(){
        // null constructor
    m_pyobj = 0;
    }

    virtual bool containsMagneticMaterial(  ) const  {
        if( bp::override func_containsMagneticMaterial = this->get_override( "containsMagneticMaterial" ) )
            return func_containsMagneticMaterial(  );
        else{
            return this->ISample::containsMagneticMaterial(  );
        }
    }
    
    bool default_containsMagneticMaterial(  ) const  {
        return ISample::containsMagneticMaterial( );
    }

    virtual ::std::vector< const ISample* > getChildren(  ) const  {
        if( bp::override func_getChildren = this->get_override( "getChildren" ) )
            return func_getChildren(  );
        else{
            return this->ICompositeSample::getChildren(  );
        }
    }
    
    ::std::vector< const ISample* > default_getChildren(  ) const  {
        return ICompositeSample::getChildren( );
    }

    virtual void printSampleTree(  ) {
        if( bp::override func_printSampleTree = this->get_override( "printSampleTree" ) )
            func_printSampleTree(  );
        else{
            this->ISample::printSampleTree(  );
        }
    }
    
    void default_printSampleTree(  ) {
        ISample::printSampleTree( );
    }

    virtual ::std::size_t size(  ) const  {
        if( bp::override func_size = this->get_override( "size" ) )
            return func_size(  );
        else{
            return this->ICompositeSample::size(  );
        }
    }
    
    ::std::size_t default_size(  ) const  {
        return ICompositeSample::size( );
    }

    virtual void transferToCPP(  ) {
        
        if( !this->m_pyobj) {
            this->m_pyobj = boost::python::detail::wrapper_base_::get_owner(*this);
            Py_INCREF(this->m_pyobj);
        }
        
        if( bp::override func_transferToCPP = this->get_override( "transferToCPP" ) )
            func_transferToCPP(  );
        else{
            this->ICloneable::transferToCPP(  );
        }
    }
    
    void default_transferToCPP(  ) {
        
        if( !this->m_pyobj) {
            this->m_pyobj = boost::python::detail::wrapper_base_::get_owner(*this);
            Py_INCREF(this->m_pyobj);
        }
        
        ICloneable::transferToCPP( );
    }

    PyObject* m_pyobj;

};

void register_ParticleComposition_class(){

    { //::ParticleComposition
        typedef bp::class_< ParticleComposition_wrapper, bp::bases< IParticle >, std::auto_ptr< ParticleComposition_wrapper >, boost::noncopyable > ParticleComposition_exposer_t;
        ParticleComposition_exposer_t ParticleComposition_exposer = ParticleComposition_exposer_t( "ParticleComposition", "A composition of particles at fixed position.", bp::init< >() );
        bp::scope ParticleComposition_scope( ParticleComposition_exposer );
        { //::ParticleComposition::addParticle
        
            typedef void ( ::ParticleComposition::*addParticle_function_type)( ::IParticle const & ) ;
            
            ParticleComposition_exposer.def( 
                "addParticle"
                , addParticle_function_type( &::ParticleComposition::addParticle )
                , ( bp::arg("particle") )
                , "Calls the ISampleVisitor's visit method." );
        
        }
        { //::ParticleComposition::addParticle
        
            typedef void ( ::ParticleComposition::*addParticle_function_type)( ::IParticle const &,::kvector_t ) ;
            
            ParticleComposition_exposer.def( 
                "addParticle"
                , addParticle_function_type( &::ParticleComposition::addParticle )
                , ( bp::arg("particle"), bp::arg("position") ) );
        
        }
        { //::ParticleComposition::addParticles
        
            typedef void ( ::ParticleComposition::*addParticles_function_type)( ::IParticle const &,::std::vector< Geometry::BasicVector3D<double> > ) ;
            
            ParticleComposition_exposer.def( 
                "addParticles"
                , addParticles_function_type( &::ParticleComposition::addParticles )
                , ( bp::arg("particle"), bp::arg("positions") ) );
        
        }
        { //::ISample::containsMagneticMaterial
        
            typedef bool ( ::ISample::*containsMagneticMaterial_function_type)(  ) const;
            typedef bool ( ParticleComposition_wrapper::*default_containsMagneticMaterial_function_type)(  ) const;
            
            ParticleComposition_exposer.def( 
                "containsMagneticMaterial"
                , containsMagneticMaterial_function_type(&::ISample::containsMagneticMaterial)
                , default_containsMagneticMaterial_function_type(&ParticleComposition_wrapper::default_containsMagneticMaterial) );
        
        }
        { //::ICompositeSample::getChildren
        
            typedef ::std::vector< const ISample* > ( ::ICompositeSample::*getChildren_function_type)(  ) const;
            typedef ::std::vector< const ISample* > ( ParticleComposition_wrapper::*default_getChildren_function_type)(  ) const;
            
            ParticleComposition_exposer.def( 
                "getChildren"
                , getChildren_function_type(&::ICompositeSample::getChildren)
                , default_getChildren_function_type(&ParticleComposition_wrapper::default_getChildren) );
        
        }
        { //::ISample::printSampleTree
        
            typedef void ( ::ISample::*printSampleTree_function_type)(  ) ;
            typedef void ( ParticleComposition_wrapper::*default_printSampleTree_function_type)(  ) ;
            
            ParticleComposition_exposer.def( 
                "printSampleTree"
                , printSampleTree_function_type(&::ISample::printSampleTree)
                , default_printSampleTree_function_type(&ParticleComposition_wrapper::default_printSampleTree) );
        
        }
        { //::ICompositeSample::size
        
            typedef ::std::size_t ( ::ICompositeSample::*size_function_type)(  ) const;
            typedef ::std::size_t ( ParticleComposition_wrapper::*default_size_function_type)(  ) const;
            
            ParticleComposition_exposer.def( 
                "size"
                , size_function_type(&::ICompositeSample::size)
                , default_size_function_type(&ParticleComposition_wrapper::default_size) );
        
        }
        { //::ICloneable::transferToCPP
        
            typedef void ( ::ICloneable::*transferToCPP_function_type)(  ) ;
            typedef void ( ParticleComposition_wrapper::*default_transferToCPP_function_type)(  ) ;
            
            ParticleComposition_exposer.def( 
                "transferToCPP"
                , transferToCPP_function_type(&::ICloneable::transferToCPP)
                , default_transferToCPP_function_type(&ParticleComposition_wrapper::default_transferToCPP) );
        
        }
    }

}

// This file has been generated by Py++.

// BornAgain: simulate and fit scattering at grazing incidence 
//! @brief automatically generated boost::python code for PythonCoreAPI  

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter);
GCC_DIAG_OFF(missing-field-initializers);
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter);
GCC_DIAG_ON(missing-field-initializers);
#include "PythonCoreList.h"
#include "StochasticParameter_t.pypp.h"

namespace bp = boost::python;

struct StochasticParameter_less__double__greater__wrapper : StochasticParameter< double >, bp::wrapper< StochasticParameter< double > > {

    StochasticParameter_less__double__greater__wrapper(double average )
    : StochasticParameter<double>( average )
      , bp::wrapper< StochasticParameter< double > >(){
        // constructor
    
    }

    virtual ::StochasticParameter< double > * clone(  ) const {
        bp::override func_clone = this->get_override( "clone" );
        return func_clone(  );
    }

    virtual double getFWHM(  ) const  {
        if( bp::override func_getFWHM = this->get_override( "getFWHM" ) )
            return func_getFWHM(  );
        else
            return this->StochasticParameter< double >::getFWHM(  );
    }
    
    
    double default_getFWHM(  ) const  {
        return StochasticParameter< double >::getFWHM( );
    }

    virtual double getRandom(  ) {
        if( bp::override func_getRandom = this->get_override( "getRandom" ) )
            return func_getRandom(  );
        else
            return this->StochasticParameter< double >::getRandom(  );
    }
    
    
    double default_getRandom(  ) {
        return StochasticParameter< double >::getRandom( );
    }

    virtual double probabilityDensity( double value ) const {
        bp::override func_probabilityDensity = this->get_override( "probabilityDensity" );
        return func_probabilityDensity( value );
    }

    virtual void setToAverage(  ) {
        if( bp::override func_setToAverage = this->get_override( "setToAverage" ) )
            func_setToAverage(  );
        else
            this->StochasticParameter< double >::setToAverage(  );
    }
    
    
    void default_setToAverage(  ) {
        StochasticParameter< double >::setToAverage( );
    }

    virtual void setToRandom(  ){
        bp::override func_setToRandom = this->get_override( "setToRandom" );
        func_setToRandom(  );
    }

};

void register_StochasticParameter_t_class(){

    { //::StochasticParameter< double >
        typedef bp::class_< StochasticParameter_less__double__greater__wrapper, boost::noncopyable > StochasticParameter_t_exposer_t;
        StochasticParameter_t_exposer_t StochasticParameter_t_exposer = StochasticParameter_t_exposer_t( "StochasticParameter_t", bp::init< double >(( bp::arg("average") )) );
        bp::scope StochasticParameter_t_scope( StochasticParameter_t_exposer );
        { //::StochasticParameter< double >::clone
        
            typedef StochasticParameter< double > exported_class_t;
            typedef ::StochasticParameter<double> * ( exported_class_t::*clone_function_type )(  ) const;
            
            StochasticParameter_t_exposer.def( 
                "clone"
                , bp::pure_virtual( clone_function_type(&::StochasticParameter< double >::clone) )
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::StochasticParameter< double >::getAverage
        
            typedef StochasticParameter< double > exported_class_t;
            typedef double ( exported_class_t::*getAverage_function_type )(  ) ;
            
            StochasticParameter_t_exposer.def( 
                "getAverage"
                , getAverage_function_type( &::StochasticParameter< double >::getAverage ) );
        
        }
        { //::StochasticParameter< double >::getCurrent
        
            typedef StochasticParameter< double > exported_class_t;
            typedef double ( exported_class_t::*getCurrent_function_type )(  ) const;
            
            StochasticParameter_t_exposer.def( 
                "getCurrent"
                , getCurrent_function_type( &::StochasticParameter< double >::getCurrent ) );
        
        }
        { //::StochasticParameter< double >::getFWHM
        
            typedef StochasticParameter< double > exported_class_t;
            typedef double ( exported_class_t::*getFWHM_function_type )(  ) const;
            typedef double ( StochasticParameter_less__double__greater__wrapper::*default_getFWHM_function_type )(  ) const;
            
            StochasticParameter_t_exposer.def( 
                "getFWHM"
                , getFWHM_function_type(&::StochasticParameter< double >::getFWHM)
                , default_getFWHM_function_type(&StochasticParameter_less__double__greater__wrapper::default_getFWHM) );
        
        }
        { //::StochasticParameter< double >::getRandom
        
            typedef StochasticParameter< double > exported_class_t;
            typedef double ( exported_class_t::*getRandom_function_type )(  ) ;
            typedef double ( StochasticParameter_less__double__greater__wrapper::*default_getRandom_function_type )(  ) ;
            
            StochasticParameter_t_exposer.def( 
                "getRandom"
                , getRandom_function_type(&::StochasticParameter< double >::getRandom)
                , default_getRandom_function_type(&StochasticParameter_less__double__greater__wrapper::default_getRandom) );
        
        }
        { //::StochasticParameter< double >::probabilityDensity
        
            typedef StochasticParameter< double > exported_class_t;
            typedef double ( exported_class_t::*probabilityDensity_function_type )( double ) const;
            
            StochasticParameter_t_exposer.def( 
                "probabilityDensity"
                , bp::pure_virtual( probabilityDensity_function_type(&::StochasticParameter< double >::probabilityDensity) )
                , ( bp::arg("value") ) );
        
        }
        { //::StochasticParameter< double >::setToAverage
        
            typedef StochasticParameter< double > exported_class_t;
            typedef void ( exported_class_t::*setToAverage_function_type )(  ) ;
            typedef void ( StochasticParameter_less__double__greater__wrapper::*default_setToAverage_function_type )(  ) ;
            
            StochasticParameter_t_exposer.def( 
                "setToAverage"
                , setToAverage_function_type(&::StochasticParameter< double >::setToAverage)
                , default_setToAverage_function_type(&StochasticParameter_less__double__greater__wrapper::default_setToAverage) );
        
        }
        { //::IStochasticParameter::setToRandom
        
            typedef void ( ::IStochasticParameter::*setToRandom_function_type )(  ) ;
            
            StochasticParameter_t_exposer.def( 
                "setToRandom"
                , bp::pure_virtual( setToRandom_function_type(&::IStochasticParameter::setToRandom) ) );
        
        }
    }

}

// This file has been generated by Py++.

// BornAgain: simulate and fit scattering at grazing incidence
//! @brief Automatically generated boost::python code for PythonCoreAPI

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonCoreList.h"
#include "IAxis.pypp.h"

namespace bp = boost::python;

struct IAxis_wrapper : IAxis, bp::wrapper< IAxis > {

    IAxis_wrapper(::std::string const & name )
    : IAxis( name )
      , bp::wrapper< IAxis >(){
        // constructor
    
    }

    virtual ::IAxis * clone(  ) const {
        bp::override func_clone = this->get_override( "clone" );
        return func_clone(  );
    }

    virtual ::IAxis * createDoubleBinSize(  ) const  {
        if( bp::override func_createDoubleBinSize = this->get_override( "createDoubleBinSize" ) )
            return func_createDoubleBinSize(  );
        else
            return this->IAxis::createDoubleBinSize(  );
    }
    
    
    ::IAxis * default_createDoubleBinSize(  ) const  {
        return IAxis::createDoubleBinSize( );
    }

    virtual ::std::size_t findClosestIndex( double value ) const {
        bp::override func_findClosestIndex = this->get_override( "findClosestIndex" );
        return func_findClosestIndex( value );
    }

    virtual ::Bin1D getBin( ::std::size_t index ) const {
        bp::override func_getBin = this->get_override( "getBin" );
        return func_getBin( index );
    }

    virtual ::std::vector< double > getBinBoundaries(  ) const  {
        if( bp::override func_getBinBoundaries = this->get_override( "getBinBoundaries" ) )
            return func_getBinBoundaries(  );
        else
            return this->IAxis::getBinBoundaries(  );
    }
    
    
    ::std::vector< double > default_getBinBoundaries(  ) const  {
        return IAxis::getBinBoundaries( );
    }

    virtual ::std::vector< double > getBinCenters(  ) const  {
        if( bp::override func_getBinCenters = this->get_override( "getBinCenters" ) )
            return func_getBinCenters(  );
        else
            return this->IAxis::getBinCenters(  );
    }
    
    
    ::std::vector< double > default_getBinCenters(  ) const  {
        return IAxis::getBinCenters( );
    }

    virtual double getMax(  ) const {
        bp::override func_getMax = this->get_override( "getMax" );
        return func_getMax(  );
    }

    virtual double getMin(  ) const {
        bp::override func_getMin = this->get_override( "getMin" );
        return func_getMin(  );
    }

    virtual ::std::size_t getSize(  ) const {
        bp::override func_getSize = this->get_override( "getSize" );
        return func_getSize(  );
    }

    virtual double operator[]( ::std::size_t index ) const {
        bp::override func___getitem__ = this->get_override( "__getitem__" );
        return func___getitem__( index );
    }

    virtual void print( ::std::ostream & ostr ) const {
        bp::override func_print = this->get_override( "print" );
        func_print( boost::ref(ostr) );
    }

};

void register_IAxis_class(){

    { //::IAxis
        typedef bp::class_< IAxis_wrapper, boost::noncopyable > IAxis_exposer_t;
        IAxis_exposer_t IAxis_exposer = IAxis_exposer_t( "IAxis", bp::init< std::string const & >(( bp::arg("name") )) );
        bp::scope IAxis_scope( IAxis_exposer );
        { //::IAxis::clone
        
            typedef ::IAxis * ( ::IAxis::*clone_function_type )(  ) const;
            
            IAxis_exposer.def( 
                "clone"
                , bp::pure_virtual( clone_function_type(&::IAxis::clone) )
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::IAxis::createDoubleBinSize
        
            typedef ::IAxis * ( ::IAxis::*createDoubleBinSize_function_type )(  ) const;
            typedef ::IAxis * ( IAxis_wrapper::*default_createDoubleBinSize_function_type )(  ) const;
            
            IAxis_exposer.def( 
                "createDoubleBinSize"
                , createDoubleBinSize_function_type(&::IAxis::createDoubleBinSize)
                , default_createDoubleBinSize_function_type(&IAxis_wrapper::default_createDoubleBinSize)
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::IAxis::findClosestIndex
        
            typedef ::std::size_t ( ::IAxis::*findClosestIndex_function_type )( double ) const;
            
            IAxis_exposer.def( 
                "findClosestIndex"
                , bp::pure_virtual( findClosestIndex_function_type(&::IAxis::findClosestIndex) )
                , ( bp::arg("value") ) );
        
        }
        { //::IAxis::getBin
        
            typedef ::Bin1D ( ::IAxis::*getBin_function_type )( ::std::size_t ) const;
            
            IAxis_exposer.def( 
                "getBin"
                , bp::pure_virtual( getBin_function_type(&::IAxis::getBin) )
                , ( bp::arg("index") ) );
        
        }
        { //::IAxis::getBinBoundaries
        
            typedef ::std::vector< double > ( ::IAxis::*getBinBoundaries_function_type )(  ) const;
            typedef ::std::vector< double > ( IAxis_wrapper::*default_getBinBoundaries_function_type )(  ) const;
            
            IAxis_exposer.def( 
                "getBinBoundaries"
                , getBinBoundaries_function_type(&::IAxis::getBinBoundaries)
                , default_getBinBoundaries_function_type(&IAxis_wrapper::default_getBinBoundaries) );
        
        }
        { //::IAxis::getBinCenters
        
            typedef ::std::vector< double > ( ::IAxis::*getBinCenters_function_type )(  ) const;
            typedef ::std::vector< double > ( IAxis_wrapper::*default_getBinCenters_function_type )(  ) const;
            
            IAxis_exposer.def( 
                "getBinCenters"
                , getBinCenters_function_type(&::IAxis::getBinCenters)
                , default_getBinCenters_function_type(&IAxis_wrapper::default_getBinCenters) );
        
        }
        { //::IAxis::getMax
        
            typedef double ( ::IAxis::*getMax_function_type )(  ) const;
            
            IAxis_exposer.def( 
                "getMax"
                , bp::pure_virtual( getMax_function_type(&::IAxis::getMax) ) );
        
        }
        { //::IAxis::getMin
        
            typedef double ( ::IAxis::*getMin_function_type )(  ) const;
            
            IAxis_exposer.def( 
                "getMin"
                , bp::pure_virtual( getMin_function_type(&::IAxis::getMin) ) );
        
        }
        { //::IAxis::getName
        
            typedef ::std::string ( ::IAxis::*getName_function_type )(  ) const;
            
            IAxis_exposer.def( 
                "getName"
                , getName_function_type( &::IAxis::getName ) );
        
        }
        { //::IAxis::getSize
        
            typedef ::std::size_t ( ::IAxis::*getSize_function_type )(  ) const;
            
            IAxis_exposer.def( 
                "getSize"
                , bp::pure_virtual( getSize_function_type(&::IAxis::getSize) ) );
        
        }
        { //::IAxis::operator[]
        
            typedef double ( ::IAxis::*__getitem___function_type )( ::std::size_t ) const;
            
            IAxis_exposer.def( 
                "__getitem__"
                , bp::pure_virtual( __getitem___function_type(&::IAxis::operator[]) )
                , ( bp::arg("index") ) );
        
        }
        { //::IAxis::print
        
            typedef void ( IAxis_wrapper::*print_function_type )( ::std::ostream & ) const;
            
            IAxis_exposer.def( 
                "print"
                , print_function_type( &IAxis_wrapper::print )
                , ( bp::arg("ostr") ) );
        
        }
        { //::IAxis::setName
        
            typedef void ( ::IAxis::*setName_function_type )( ::std::string ) ;
            
            IAxis_exposer.def( 
                "setName"
                , setName_function_type( &::IAxis::setName )
                , ( bp::arg("name") ) );
        
        }
        IAxis_exposer.def( bp::self != bp::self );
        IAxis_exposer.def( bp::self_ns::str( bp::self ) );
        IAxis_exposer.def( bp::self == bp::self );
    }

}

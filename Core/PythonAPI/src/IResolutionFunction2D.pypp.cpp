// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonCoreList.h"
#include "IResolutionFunction2D.pypp.h"

namespace bp = boost::python;

struct IResolutionFunction2D_wrapper : IResolutionFunction2D, bp::wrapper< IResolutionFunction2D > {

    IResolutionFunction2D_wrapper()
    : IResolutionFunction2D()
      , bp::wrapper< IResolutionFunction2D >(){
        // null constructor
        m_pyobj = 0;
    }

    virtual ::IResolutionFunction2D * clone(  ) const {
        bp::override func_clone = this->get_override( "clone" );
        return func_clone(  );
    }

    virtual double evaluateCDF( double x, double y ) const {
        bp::override func_evaluateCDF = this->get_override( "evaluateCDF" );
        return func_evaluateCDF( x, y );
    }

    PyObject* m_pyobj;

};

void register_IResolutionFunction2D_class(){

    { //::IResolutionFunction2D
        typedef bp::class_< IResolutionFunction2D_wrapper, bp::bases< IParameterized >, std::auto_ptr< IResolutionFunction2D_wrapper >, boost::noncopyable > IResolutionFunction2D_exposer_t;
        IResolutionFunction2D_exposer_t IResolutionFunction2D_exposer = IResolutionFunction2D_exposer_t( "IResolutionFunction2D", "Interface providing two-dimensional resolution function." );
        bp::scope IResolutionFunction2D_scope( IResolutionFunction2D_exposer );
        { //::IResolutionFunction2D::clone
        
            typedef ::IResolutionFunction2D * ( ::IResolutionFunction2D::*clone_function_type)(  ) const;
            
            IResolutionFunction2D_exposer.def( 
                "clone"
                , bp::pure_virtual( clone_function_type(&::IResolutionFunction2D::clone) )
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::IResolutionFunction2D::evaluateCDF
        
            typedef double ( ::IResolutionFunction2D::*evaluateCDF_function_type)( double,double ) const;
            
            IResolutionFunction2D_exposer.def( 
                "evaluateCDF"
                , bp::pure_virtual( evaluateCDF_function_type(&::IResolutionFunction2D::evaluateCDF) )
                , ( bp::arg("x"), bp::arg("y") ) );
        
        }
    }

}

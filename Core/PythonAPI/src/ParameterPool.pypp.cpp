// This file has been generated by Py++.

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter);
GCC_DIAG_OFF(missing-field-initializers);
#include "boost/python.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
GCC_DIAG_ON(unused-parameter);
GCC_DIAG_ON(missing-field-initializers);
#include "__call_policies.pypp.hpp"
#include "BasicVector3D.h"
#include "Experiment.h"
#include "FormFactorCrystal.h"
#include "FormFactorCylinder.h"
#include "FormFactorDecoratorDebyeWaller.h"
#include "FormFactorFullSphere.h"
#include "FormFactorGauss.h"
#include "FormFactorLorentz.h"
#include "FormFactorPrism3.h"
#include "FormFactorPyramid.h"
#include "FormFactorSphereGaussianRadius.h"
#include "GISASExperiment.h"
#include "HomogeneousMaterial.h"
#include "IClusteredParticles.h"
#include "ICompositeSample.h"
#include "IFormFactor.h"
#include "IFormFactorBorn.h"
#include "IFormFactorDecorator.h"
#include "IInterferenceFunction.h"
#include "InterferenceFunctionNone.h"
#include "InterferenceFunction1DParaCrystal.h"
#include "IMaterial.h"
#include "IParameterized.h"
#include "ISample.h"
#include "ISampleBuilder.h"
#include "ISelectionRule.h"
#include "ISingleton.h"
#include "Lattice.h"
#include "LatticeBasis.h"
#include "Layer.h"
#include "LayerDecorator.h"
#include "LayerRoughness.h"
#include "MaterialManager.h"
#include "MesoCrystal.h"
#include "MultiLayer.h"
#include "Particle.h"
#include "Crystal.h"
#include "ParticleDecoration.h"
#include "OpticalFresnel.h"
#include "ParameterPool.h"
#include "ParticleInfo.h"
#include "DiffuseParticleInfo.h"
#include "PythonOutputData.h"
#include "PythonPlusplusHelper.h"
#include "RealParameterWrapper.h"
#include "Transform3D.h"
#include "Units.h"
#include "Types.h"
#include "ParameterPool.pypp.h"

namespace bp = boost::python;

static boost::python::object registerParameter_42aac450584ec1a35a1b3a450dfcae38( ::ParameterPool & inst, ::std::string const & name, unsigned int parpointer ){
    bool result = inst.registerParameter(name, reinterpret_cast< double * >( parpointer ));
    return bp::object( result );
}

void register_ParameterPool_class(){

    bp::class_< ParameterPool, boost::noncopyable >( "ParameterPool", bp::init< >() )    
        .def( 
            "addParameter"
            , (bool ( ::ParameterPool::* )( ::std::string const &,::RealParameterWrapper ) )( &::ParameterPool::addParameter )
            , ( bp::arg("name"), bp::arg("par") ) )    
        .def( 
            "clear"
            , (void ( ::ParameterPool::* )(  ) )( &::ParameterPool::clear ) )    
        .def( 
            "clone"
            , (::ParameterPool * ( ::ParameterPool::* )(  ) )( &::ParameterPool::clone )
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "cloneWithPrefix"
            , (::ParameterPool * ( ::ParameterPool::* )( ::std::string const & ) )( &::ParameterPool::cloneWithPrefix )
            , ( bp::arg("prefix") )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "getParameter"
            , (::RealParameterWrapper ( ::ParameterPool::* )( ::std::string const & ) const)( &::ParameterPool::getParameter )
            , ( bp::arg("name") ) )    
        .def( 
            "registerParameter"
            , (boost::python::object (*)( ::ParameterPool &,::std::string const &,unsigned int ))( &registerParameter_42aac450584ec1a35a1b3a450dfcae38 )
            , ( bp::arg("inst"), bp::arg("name"), bp::arg("parpointer") ) )    
        .def( 
            "setMatchedParametersValue"
            , (int ( ::ParameterPool::* )( ::std::string const &,double ) )( &::ParameterPool::setMatchedParametersValue )
            , ( bp::arg("wildcards"), bp::arg("value") ) )    
        .def( 
            "setParameterValue"
            , (bool ( ::ParameterPool::* )( ::std::string const &,double ) )( &::ParameterPool::setParameterValue )
            , ( bp::arg("name"), bp::arg("value") ) )    
        .def( 
            "size"
            , (::size_t ( ::ParameterPool::* )(  ) const)( &::ParameterPool::size ) )    
        .def( bp::self_ns::str( bp::self ) );

}

// This file has been generated by Py++.

// BornAgain: simulate and fit scattering at grazing incidence 
//! @brief automatically generated boost::python code for PythonCoreAPI  

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter);
GCC_DIAG_OFF(missing-field-initializers);
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter);
GCC_DIAG_ON(missing-field-initializers);
#include "PythonCoreList.h"
#include "ParameterPool.pypp.h"

namespace bp = boost::python;

struct ParameterPool_wrapper : ParameterPool, bp::wrapper< ParameterPool > {

    ParameterPool_wrapper( )
    : ParameterPool( )
      , bp::wrapper< ParameterPool >(){
        // null constructor
    
    }

    virtual ::ParameterPool * clone(  ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone(  );
        else{
            return this->ParameterPool::clone(  );
        }
    }
    
    ::ParameterPool * default_clone(  ) const  {
        return ParameterPool::clone( );
    }

};

void register_ParameterPool_class(){

    { //::ParameterPool
        typedef bp::class_< ParameterPool_wrapper, bp::bases< ICloneable >, boost::noncopyable > ParameterPool_exposer_t;
        ParameterPool_exposer_t ParameterPool_exposer = ParameterPool_exposer_t( "ParameterPool", bp::init< >() );
        bp::scope ParameterPool_scope( ParameterPool_exposer );
        { //::ParameterPool::addParameter
        
            typedef bool ( ::ParameterPool::*addParameter_function_type )( ::std::string const &,::RealParameterWrapper ) ;
            
            ParameterPool_exposer.def( 
                "addParameter"
                , addParameter_function_type( &::ParameterPool::addParameter )
                , ( bp::arg("name"), bp::arg("par") ) );
        
        }
        { //::ParameterPool::clear
        
            typedef void ( ::ParameterPool::*clear_function_type )(  ) ;
            
            ParameterPool_exposer.def( 
                "clear"
                , clear_function_type( &::ParameterPool::clear ) );
        
        }
        { //::ParameterPool::clone
        
            typedef ::ParameterPool * ( ::ParameterPool::*clone_function_type )(  ) const;
            typedef ::ParameterPool * ( ParameterPool_wrapper::*default_clone_function_type )(  ) const;
            
            ParameterPool_exposer.def( 
                "clone"
                , clone_function_type(&::ParameterPool::clone)
                , default_clone_function_type(&ParameterPool_wrapper::default_clone)
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::ParameterPool::cloneWithPrefix
        
            typedef ::ParameterPool * ( ::ParameterPool::*cloneWithPrefix_function_type )( ::std::string const & ) const;
            
            ParameterPool_exposer.def( 
                "cloneWithPrefix"
                , cloneWithPrefix_function_type( &::ParameterPool::cloneWithPrefix )
                , ( bp::arg("prefix") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::ParameterPool::fixRatioBetweenParameters
        
            typedef int ( ::ParameterPool::*fixRatioBetweenParameters_function_type )( ::std::string const &,::std::string const &,double ) ;
            
            ParameterPool_exposer.def( 
                "fixRatioBetweenParameters"
                , fixRatioBetweenParameters_function_type( &::ParameterPool::fixRatioBetweenParameters )
                , ( bp::arg("to_change"), bp::arg("source"), bp::arg("ratio") ) );
        
        }
        { //::ParameterPool::getParameter
        
            typedef ::RealParameterWrapper ( ::ParameterPool::*getParameter_function_type )( ::std::string const & ) const;
            
            ParameterPool_exposer.def( 
                "getParameter"
                , getParameter_function_type( &::ParameterPool::getParameter )
                , ( bp::arg("name") ) );
        
        }
        { //::ParameterPool::setMatchedParametersValue
        
            typedef int ( ::ParameterPool::*setMatchedParametersValue_function_type )( ::std::string const &,double ) ;
            
            ParameterPool_exposer.def( 
                "setMatchedParametersValue"
                , setMatchedParametersValue_function_type( &::ParameterPool::setMatchedParametersValue )
                , ( bp::arg("wildcards"), bp::arg("value") ) );
        
        }
        { //::ParameterPool::setParameterValue
        
            typedef bool ( ::ParameterPool::*setParameterValue_function_type )( ::std::string const &,double ) ;
            
            ParameterPool_exposer.def( 
                "setParameterValue"
                , setParameterValue_function_type( &::ParameterPool::setParameterValue )
                , ( bp::arg("name"), bp::arg("value") ) );
        
        }
        { //::ParameterPool::size
        
            typedef ::size_t ( ::ParameterPool::*size_function_type )(  ) const;
            
            ParameterPool_exposer.def( 
                "size"
                , size_function_type( &::ParameterPool::size ) );
        
        }
    }

}

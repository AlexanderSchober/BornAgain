// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonCoreList.h"
#include "Beam.pypp.h"

namespace bp = boost::python;

void register_Beam_class(){

    { //::Beam
        typedef bp::class_< Beam, bp::bases< IParameterized > > Beam_exposer_t;
        Beam_exposer_t Beam_exposer = Beam_exposer_t( "Beam", "Ideal collimated beam defined by wavelength, direction and intensity.", bp::init< >() );
        bp::scope Beam_scope( Beam_exposer );
        Beam_exposer.def( bp::init< Beam const & >(( bp::arg("other") )) );
        { //::Beam::getAlpha
        
            typedef double ( ::Beam::*getAlpha_function_type)(  ) const;
            
            Beam_exposer.def( 
                "getAlpha"
                , getAlpha_function_type( &::Beam::getAlpha ) );
        
        }
        { //::Beam::getCentralK
        
            typedef ::cvector_t ( ::Beam::*getCentralK_function_type)(  ) const;
            
            Beam_exposer.def( 
                "getCentralK"
                , getCentralK_function_type( &::Beam::getCentralK )
                , "Get the value of the wavevector." );
        
        }
        { //::Beam::getIntensity
        
            typedef double ( ::Beam::*getIntensity_function_type)(  ) const;
            
            Beam_exposer.def( 
                "getIntensity"
                , getIntensity_function_type( &::Beam::getIntensity )
                , "Gets the beam intensity in neutrons/sec." );
        
        }
        { //::Beam::getPhi
        
            typedef double ( ::Beam::*getPhi_function_type)(  ) const;
            
            Beam_exposer.def( 
                "getPhi"
                , getPhi_function_type( &::Beam::getPhi ) );
        
        }
        { //::Beam::getWavelength
        
            typedef double ( ::Beam::*getWavelength_function_type)(  ) const;
            
            Beam_exposer.def( 
                "getWavelength"
                , getWavelength_function_type( &::Beam::getWavelength ) );
        
        }
        { //::Beam::operator=
        
            typedef ::Beam & ( ::Beam::*assign_function_type)( ::Beam const & ) ;
            
            Beam_exposer.def( 
                "assign"
                , assign_function_type( &::Beam::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        { //::Beam::setCentralK
        
            typedef void ( ::Beam::*setCentralK_function_type)( double,double,double ) ;
            
            Beam_exposer.def( 
                "setCentralK"
                , setCentralK_function_type( &::Beam::setCentralK )
                , ( bp::arg("wavelength"), bp::arg("alpha_i"), bp::arg("phi_i") )
                , "Sets the value of the incoming wavevector in terms of wavelength and incoming angles " );
        
        }
        { //::Beam::setIntensity
        
            typedef void ( ::Beam::*setIntensity_function_type)( double ) ;
            
            Beam_exposer.def( 
                "setIntensity"
                , setIntensity_function_type( &::Beam::setIntensity )
                , ( bp::arg("intensity") )
                , "Sets the beam intensity in neutrons/sec." );
        
        }
        { //::Beam::setPolarization
        
            typedef void ( ::Beam::*setPolarization_function_type)( ::kvector_t const & ) ;
            
            Beam_exposer.def( 
                "setPolarization"
                , setPolarization_function_type( &::Beam::setPolarization )
                , ( bp::arg("bloch_vector") )
                , "Sets the polarization density matrix according to the given Bloch vector." );
        
        }
    }

}

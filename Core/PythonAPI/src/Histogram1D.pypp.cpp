// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonCoreList.h"
#include "Histogram1D.pypp.h"

namespace bp = boost::python;

void register_Histogram1D_class(){

    { //::Histogram1D
        typedef bp::class_< Histogram1D, bp::bases< IHistogram >, boost::noncopyable > Histogram1D_exposer_t;
        Histogram1D_exposer_t Histogram1D_exposer = Histogram1D_exposer_t( "Histogram1D", bp::init< int, double, double >(( bp::arg("nbinsx"), bp::arg("xlow"), bp::arg("xup") ), "Constructor for fix bin size histograms. @param nbinsx number of bins @param xlow low edge of the first bin @param xup upper edge of the last bin \n\n:Parameters:\n  - 'nbinsx' - number of bins\n  - 'xlow' - low edge of the first bin\n  - 'xup' - upper edge of the last bin\n") );
        bp::scope Histogram1D_scope( Histogram1D_exposer );
        Histogram1D_exposer.def( bp::init< int, std::vector< double > const & >(( bp::arg("nbinsx"), bp::arg("xbins") ), "Constructor for variable bin size histograms. @param nbinsx number of bins @param xbins Array of size nbins+1 containing low-edges for each bin and upper edge of last bin. \n\n:Parameters:\n  - 'nbinsx' - number of bins\n  - 'xbins' - Array of size nbins+1 containing low-edges for each\n") );
        { //::Histogram1D::fill
        
            typedef int ( ::Histogram1D::*fill_function_type)( double,double ) ;
            
            Histogram1D_exposer.def( 
                "fill"
                , fill_function_type( &::Histogram1D::fill )
                , ( bp::arg("x"), bp::arg("weight")=1.0e+0 )
                , "Increment bin with abscissa x with a weight." );
        
        }
        { //::Histogram1D::getBinCenters
        
            typedef ::std::vector< double > ( ::Histogram1D::*getBinCenters_function_type)(  ) const;
            
            Histogram1D_exposer.def( 
                "getBinCenters"
                , getBinCenters_function_type( &::Histogram1D::getBinCenters ) );
        
        }
        { //::Histogram1D::getBinValues
        
            typedef ::std::vector< double > ( ::Histogram1D::*getBinValues_function_type)(  ) const;
            
            Histogram1D_exposer.def( 
                "getBinValues"
                , getBinValues_function_type( &::Histogram1D::getBinValues ) );
        
        }
        { //::Histogram1D::getXaxis
        
            typedef ::IAxis const * ( ::Histogram1D::*getXaxis_function_type)(  ) const;
            
            Histogram1D_exposer.def( 
                "getXaxis"
                , getXaxis_function_type( &::Histogram1D::getXaxis )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "Increment bin with abscissa x with a weight." );
        
        }
    }

}

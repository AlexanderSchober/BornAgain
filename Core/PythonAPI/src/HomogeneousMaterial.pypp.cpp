// This file has been generated by Py++.

// BornAgain: simulate and fit scattering at grazing incidence 
//! @brief automatically generated boost::python code for PythonCoreAPI  

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter);
GCC_DIAG_OFF(missing-field-initializers);
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter);
GCC_DIAG_ON(missing-field-initializers);
#include "PythonCoreList.h"
#include "HomogeneousMaterial.pypp.h"

namespace bp = boost::python;

void register_HomogeneousMaterial_class(){

    { //::HomogeneousMaterial
        typedef bp::class_< HomogeneousMaterial, bp::bases< IMaterial > > HomogeneousMaterial_exposer_t;
        HomogeneousMaterial_exposer_t HomogeneousMaterial_exposer = HomogeneousMaterial_exposer_t( "HomogeneousMaterial", bp::init< std::string const &, complex_t const & >(( bp::arg("name"), bp::arg("refractive_index") )) );
        bp::scope HomogeneousMaterial_scope( HomogeneousMaterial_exposer );
        HomogeneousMaterial_exposer.def( bp::init< std::string const &, double, double >(( bp::arg("name"), bp::arg("refractive_index_real"), bp::arg("refractive_index_imag") )) );
        HomogeneousMaterial_exposer.def( bp::init< complex_t const & >(( bp::arg("refractive_index") )) );
        { //::HomogeneousMaterial::getRefractiveIndex
        
            typedef ::complex_t ( ::HomogeneousMaterial::*getRefractiveIndex_function_type )(  ) const;
            
            HomogeneousMaterial_exposer.def( 
                "getRefractiveIndex"
                , getRefractiveIndex_function_type( &::HomogeneousMaterial::getRefractiveIndex ) );
        
        }
        { //::HomogeneousMaterial::setRefractiveIndex
        
            typedef void ( ::HomogeneousMaterial::*setRefractiveIndex_function_type )( ::complex_t const & ) ;
            
            HomogeneousMaterial_exposer.def( 
                "setRefractiveIndex"
                , setRefractiveIndex_function_type( &::HomogeneousMaterial::setRefractiveIndex )
                , ( bp::arg("refractive_index") ) );
        
        }
    }

}

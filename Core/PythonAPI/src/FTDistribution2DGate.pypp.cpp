// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonCoreList.h"
#include "FTDistribution2DGate.pypp.h"

namespace bp = boost::python;

struct FTDistribution2DGate_wrapper : FTDistribution2DGate, bp::wrapper< FTDistribution2DGate > {

    FTDistribution2DGate_wrapper(FTDistribution2DGate const & arg )
    : FTDistribution2DGate( arg )
      , bp::wrapper< FTDistribution2DGate >(){
        // copy constructor
        m_pyobj = 0;
    }

    FTDistribution2DGate_wrapper(double coherence_length_x, double coherence_length_y )
    : FTDistribution2DGate( coherence_length_x, coherence_length_y )
      , bp::wrapper< FTDistribution2DGate >(){
        // constructor
    m_pyobj = 0;
    }

    virtual ::FTDistribution2DGate * clone(  ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone(  );
        else{
            return this->FTDistribution2DGate::clone(  );
        }
    }
    
    ::FTDistribution2DGate * default_clone(  ) const  {
        return FTDistribution2DGate::clone( );
    }

    virtual double evaluate( double qx, double qy ) const  {
        if( bp::override func_evaluate = this->get_override( "evaluate" ) )
            return func_evaluate( qx, qy );
        else{
            return this->FTDistribution2DGate::evaluate( qx, qy );
        }
    }
    
    double default_evaluate( double qx, double qy ) const  {
        return FTDistribution2DGate::evaluate( qx, qy );
    }

    PyObject* m_pyobj;

};

void register_FTDistribution2DGate_class(){

    { //::FTDistribution2DGate
        typedef bp::class_< FTDistribution2DGate_wrapper, bp::bases< IFTDistribution2D >, std::auto_ptr< FTDistribution2DGate_wrapper > > FTDistribution2DGate_exposer_t;
        FTDistribution2DGate_exposer_t FTDistribution2DGate_exposer = FTDistribution2DGate_exposer_t( "FTDistribution2DGate", "2 dimensional gate distribution in Fourier space Corresponds to normalized constant if r<1 (and 0 otherwise) in real space.", bp::init< double, double >(( bp::arg("coherence_length_x"), bp::arg("coherence_length_y") )) );
        bp::scope FTDistribution2DGate_scope( FTDistribution2DGate_exposer );
        { //::FTDistribution2DGate::clone
        
            typedef ::FTDistribution2DGate * ( ::FTDistribution2DGate::*clone_function_type)(  ) const;
            typedef ::FTDistribution2DGate * ( FTDistribution2DGate_wrapper::*default_clone_function_type)(  ) const;
            
            FTDistribution2DGate_exposer.def( 
                "clone"
                , clone_function_type(&::FTDistribution2DGate::clone)
                , default_clone_function_type(&FTDistribution2DGate_wrapper::default_clone)
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::FTDistribution2DGate::evaluate
        
            typedef double ( ::FTDistribution2DGate::*evaluate_function_type)( double,double ) const;
            typedef double ( FTDistribution2DGate_wrapper::*default_evaluate_function_type)( double,double ) const;
            
            FTDistribution2DGate_exposer.def( 
                "evaluate"
                , evaluate_function_type(&::FTDistribution2DGate::evaluate)
                , default_evaluate_function_type(&FTDistribution2DGate_wrapper::default_evaluate)
                , ( bp::arg("qx"), bp::arg("qy") ) );
        
        }
    }

}

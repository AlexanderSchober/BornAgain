// This file has been generated by Py++.

// BornAgain: simulate and fit scattering at grazing incidence 
//! @brief automatically generated boost::python code for PythonCoreAPI  

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter);
GCC_DIAG_OFF(missing-field-initializers);
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter);
GCC_DIAG_ON(missing-field-initializers);
#include "PythonCoreList.h"
#include "AxisBin.pypp.h"

namespace bp = boost::python;

struct AxisBin_wrapper : AxisBin, bp::wrapper< AxisBin > {

    AxisBin_wrapper(AxisBin const & arg )
    : AxisBin( arg )
      , bp::wrapper< AxisBin >(){
        // copy constructor
        
    }

    AxisBin_wrapper(::std::string name )
    : AxisBin( name )
      , bp::wrapper< AxisBin >(){
        // constructor
    
    }

    AxisBin_wrapper(::std::string name, ::std::size_t nbr_bins, double start, double end )
    : AxisBin( name, nbr_bins, start, end )
      , bp::wrapper< AxisBin >(){
        // constructor
    
    }

    virtual ::AxisBin * clone(  ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone(  );
        else
            return this->AxisBin::clone(  );
    }
    
    
    ::AxisBin * default_clone(  ) const  {
        return AxisBin::clone( );
    }

    virtual ::AxisBin * createDoubleBinSize(  ) const  {
        if( bp::override func_createDoubleBinSize = this->get_override( "createDoubleBinSize" ) )
            return func_createDoubleBinSize(  );
        else
            return this->AxisBin::createDoubleBinSize(  );
    }
    
    
    ::AxisBin * default_createDoubleBinSize(  ) const  {
        return AxisBin::createDoubleBinSize( );
    }

    virtual ::std::size_t findClosestIndex( double value ) const  {
        if( bp::override func_findClosestIndex = this->get_override( "findClosestIndex" ) )
            return func_findClosestIndex( value );
        else
            return this->AxisBin::findClosestIndex( value );
    }
    
    
    ::std::size_t default_findClosestIndex( double value ) const  {
        return AxisBin::findClosestIndex( value );
    }

    virtual ::Bin1D getBin( ::std::size_t index ) const  {
        if( bp::override func_getBin = this->get_override( "getBin" ) )
            return func_getBin( index );
        else
            return this->AxisBin::getBin( index );
    }
    
    
    ::Bin1D default_getBin( ::std::size_t index ) const  {
        return AxisBin::getBin( index );
    }

    virtual double getMax(  ) const  {
        if( bp::override func_getMax = this->get_override( "getMax" ) )
            return func_getMax(  );
        else
            return this->AxisBin::getMax(  );
    }
    
    
    double default_getMax(  ) const  {
        return AxisBin::getMax( );
    }

    virtual double getMin(  ) const  {
        if( bp::override func_getMin = this->get_override( "getMin" ) )
            return func_getMin(  );
        else
            return this->AxisBin::getMin(  );
    }
    
    
    double default_getMin(  ) const  {
        return AxisBin::getMin( );
    }

    virtual ::std::size_t getSize(  ) const  {
        if( bp::override func_getSize = this->get_override( "getSize" ) )
            return func_getSize(  );
        else
            return this->AxisBin::getSize(  );
    }
    
    
    ::std::size_t default_getSize(  ) const  {
        return AxisBin::getSize( );
    }

    virtual double operator[]( ::std::size_t index ) const  {
        if( bp::override func___getitem__ = this->get_override( "__getitem__" ) )
            return func___getitem__( index );
        else
            return this->AxisBin::operator[]( index );
    }
    
    
    double default___getitem__( ::std::size_t index ) const  {
        return AxisBin::operator[]( index );
    }

};

void register_AxisBin_class(){

    { //::AxisBin
        typedef bp::class_< AxisBin_wrapper, bp::bases< IAxis > > AxisBin_exposer_t;
        AxisBin_exposer_t AxisBin_exposer = AxisBin_exposer_t( "AxisBin", bp::init< std::string >(( bp::arg("name") )) );
        bp::scope AxisBin_scope( AxisBin_exposer );
        AxisBin_exposer.def( bp::init< std::string, std::size_t, double, double >(( bp::arg("name"), bp::arg("nbr_bins"), bp::arg("start"), bp::arg("end") )) );
        { //::AxisBin::clone
        
            typedef ::AxisBin * ( ::AxisBin::*clone_function_type )(  ) const;
            typedef ::AxisBin * ( AxisBin_wrapper::*default_clone_function_type )(  ) const;
            
            AxisBin_exposer.def( 
                "clone"
                , clone_function_type(&::AxisBin::clone)
                , default_clone_function_type(&AxisBin_wrapper::default_clone)
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::AxisBin::createDoubleBinSize
        
            typedef ::AxisBin * ( ::AxisBin::*createDoubleBinSize_function_type )(  ) const;
            typedef ::AxisBin * ( AxisBin_wrapper::*default_createDoubleBinSize_function_type )(  ) const;
            
            AxisBin_exposer.def( 
                "createDoubleBinSize"
                , createDoubleBinSize_function_type(&::AxisBin::createDoubleBinSize)
                , default_createDoubleBinSize_function_type(&AxisBin_wrapper::default_createDoubleBinSize)
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::AxisBin::findClosestIndex
        
            typedef ::std::size_t ( ::AxisBin::*findClosestIndex_function_type )( double ) const;
            typedef ::std::size_t ( AxisBin_wrapper::*default_findClosestIndex_function_type )( double ) const;
            
            AxisBin_exposer.def( 
                "findClosestIndex"
                , findClosestIndex_function_type(&::AxisBin::findClosestIndex)
                , default_findClosestIndex_function_type(&AxisBin_wrapper::default_findClosestIndex)
                , ( bp::arg("value") ) );
        
        }
        { //::AxisBin::getBin
        
            typedef ::Bin1D ( ::AxisBin::*getBin_function_type )( ::std::size_t ) const;
            typedef ::Bin1D ( AxisBin_wrapper::*default_getBin_function_type )( ::std::size_t ) const;
            
            AxisBin_exposer.def( 
                "getBin"
                , getBin_function_type(&::AxisBin::getBin)
                , default_getBin_function_type(&AxisBin_wrapper::default_getBin)
                , ( bp::arg("index") ) );
        
        }
        { //::AxisBin::getMax
        
            typedef double ( ::AxisBin::*getMax_function_type )(  ) const;
            typedef double ( AxisBin_wrapper::*default_getMax_function_type )(  ) const;
            
            AxisBin_exposer.def( 
                "getMax"
                , getMax_function_type(&::AxisBin::getMax)
                , default_getMax_function_type(&AxisBin_wrapper::default_getMax) );
        
        }
        { //::AxisBin::getMin
        
            typedef double ( ::AxisBin::*getMin_function_type )(  ) const;
            typedef double ( AxisBin_wrapper::*default_getMin_function_type )(  ) const;
            
            AxisBin_exposer.def( 
                "getMin"
                , getMin_function_type(&::AxisBin::getMin)
                , default_getMin_function_type(&AxisBin_wrapper::default_getMin) );
        
        }
        { //::AxisBin::getSize
        
            typedef ::std::size_t ( ::AxisBin::*getSize_function_type )(  ) const;
            typedef ::std::size_t ( AxisBin_wrapper::*default_getSize_function_type )(  ) const;
            
            AxisBin_exposer.def( 
                "getSize"
                , getSize_function_type(&::AxisBin::getSize)
                , default_getSize_function_type(&AxisBin_wrapper::default_getSize) );
        
        }
        { //::AxisBin::initBins
        
            typedef void ( ::AxisBin::*initBins_function_type )( ::std::size_t,double,double ) ;
            
            AxisBin_exposer.def( 
                "initBins"
                , initBins_function_type( &::AxisBin::initBins )
                , ( bp::arg("nbr_bins"), bp::arg("start"), bp::arg("end") ) );
        
        }
        { //::AxisBin::operator[]
        
            typedef double ( ::AxisBin::*__getitem___function_type )( ::std::size_t ) const;
            typedef double ( AxisBin_wrapper::*default___getitem___function_type )( ::std::size_t ) const;
            
            AxisBin_exposer.def( 
                "__getitem__"
                , __getitem___function_type(&::AxisBin::operator[])
                , default___getitem___function_type(&AxisBin_wrapper::default___getitem__)
                , ( bp::arg("index") ) );
        
        }
        { //::AxisBin::push_back
        
            typedef void ( ::AxisBin::*push_back_function_type )( double ) ;
            
            AxisBin_exposer.def( 
                "push_back"
                , push_back_function_type( &::AxisBin::push_back )
                , ( bp::arg("limit") ) );
        
        }
    }

}

// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonCoreList.h"
#include "DistributionGate.pypp.h"

namespace bp = boost::python;

struct DistributionGate_wrapper : DistributionGate, bp::wrapper< DistributionGate > {

    DistributionGate_wrapper(DistributionGate const & arg )
    : DistributionGate( arg )
      , bp::wrapper< DistributionGate >(){
        // copy constructor
        m_pyobj = 0;
    }

    DistributionGate_wrapper( )
    : DistributionGate( )
      , bp::wrapper< DistributionGate >(){
        // null constructor
    m_pyobj = 0;
    }

    DistributionGate_wrapper(double min, double max )
    : DistributionGate( min, max )
      , bp::wrapper< DistributionGate >(){
        // constructor
    m_pyobj = 0;
    }

    virtual ::DistributionGate * clone(  ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone(  );
        else{
            return this->DistributionGate::clone(  );
        }
    }
    
    ::DistributionGate * default_clone(  ) const  {
        return DistributionGate::clone( );
    }

    virtual ::std::vector< double > generateValueList( ::std::size_t nbr_samples, double sigma_factor, ::AttLimits const & limits=::AttLimits( ) ) const  {
        if( bp::override func_generateValueList = this->get_override( "generateValueList" ) )
            return func_generateValueList( nbr_samples, sigma_factor, boost::ref(limits) );
        else{
            return this->DistributionGate::generateValueList( nbr_samples, sigma_factor, boost::ref(limits) );
        }
    }
    
    ::std::vector< double > default_generateValueList( ::std::size_t nbr_samples, double sigma_factor, ::AttLimits const & limits=::AttLimits( ) ) const  {
        return DistributionGate::generateValueList( nbr_samples, sigma_factor, boost::ref(limits) );
    }

    virtual double getMean(  ) const  {
        if( bp::override func_getMean = this->get_override( "getMean" ) )
            return func_getMean(  );
        else{
            return this->DistributionGate::getMean(  );
        }
    }
    
    double default_getMean(  ) const  {
        return DistributionGate::getMean( );
    }

    virtual double probabilityDensity( double x ) const  {
        if( bp::override func_probabilityDensity = this->get_override( "probabilityDensity" ) )
            return func_probabilityDensity( x );
        else{
            return this->DistributionGate::probabilityDensity( x );
        }
    }
    
    double default_probabilityDensity( double x ) const  {
        return DistributionGate::probabilityDensity( x );
    }

    virtual ::std::vector< double > generateValues( ::std::size_t nbr_samples, double xmin, double xmax ) const  {
        if( bp::override func_generateValues = this->get_override( "generateValues" ) )
            return func_generateValues( nbr_samples, xmin, xmax );
        else{
            return this->IDistribution1D::generateValues( nbr_samples, xmin, xmax );
        }
    }
    
    ::std::vector< double > default_generateValues( ::std::size_t nbr_samples, double xmin, double xmax ) const  {
        return IDistribution1D::generateValues( nbr_samples, xmin, xmax );
    }

    PyObject* m_pyobj;

};

void register_DistributionGate_class(){

    { //::DistributionGate
        typedef bp::class_< DistributionGate_wrapper, bp::bases< IDistribution1D >, std::auto_ptr< DistributionGate_wrapper > > DistributionGate_exposer_t;
        DistributionGate_exposer_t DistributionGate_exposer = DistributionGate_exposer_t( "DistributionGate", "uniform distribution function with half width hwh.", bp::init< >() );
        bp::scope DistributionGate_scope( DistributionGate_exposer );
        DistributionGate_exposer.def( bp::init< double, double >(( bp::arg("min"), bp::arg("max") )) );
        { //::DistributionGate::clone
        
            typedef ::DistributionGate * ( ::DistributionGate::*clone_function_type)(  ) const;
            typedef ::DistributionGate * ( DistributionGate_wrapper::*default_clone_function_type)(  ) const;
            
            DistributionGate_exposer.def( 
                "clone"
                , clone_function_type(&::DistributionGate::clone)
                , default_clone_function_type(&DistributionGate_wrapper::default_clone)
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::DistributionGate::generateValueList
        
            typedef ::std::vector< double > ( ::DistributionGate::*generateValueList_function_type)( ::std::size_t,double,::AttLimits const & ) const;
            typedef ::std::vector< double > ( DistributionGate_wrapper::*default_generateValueList_function_type)( ::std::size_t,double,::AttLimits const & ) const;
            
            DistributionGate_exposer.def( 
                "generateValueList"
                , generateValueList_function_type(&::DistributionGate::generateValueList)
                , default_generateValueList_function_type(&DistributionGate_wrapper::default_generateValueList)
                , ( bp::arg("nbr_samples"), bp::arg("sigma_factor"), bp::arg("limits")=::AttLimits( ) ) );
        
        }
        { //::DistributionGate::getMax
        
            typedef double ( ::DistributionGate::*getMax_function_type)(  ) const;
            
            DistributionGate_exposer.def( 
                "getMax"
                , getMax_function_type( &::DistributionGate::getMax )
                , "get the maximum value of the distribution." );
        
        }
        { //::DistributionGate::getMean
        
            typedef double ( ::DistributionGate::*getMean_function_type)(  ) const;
            typedef double ( DistributionGate_wrapper::*default_getMean_function_type)(  ) const;
            
            DistributionGate_exposer.def( 
                "getMean"
                , getMean_function_type(&::DistributionGate::getMean)
                , default_getMean_function_type(&DistributionGate_wrapper::default_getMean) );
        
        }
        { //::DistributionGate::getMin
        
            typedef double ( ::DistributionGate::*getMin_function_type)(  ) const;
            
            DistributionGate_exposer.def( 
                "getMin"
                , getMin_function_type( &::DistributionGate::getMin )
                , "get the minimum value of the distribution." );
        
        }
        { //::DistributionGate::probabilityDensity
        
            typedef double ( ::DistributionGate::*probabilityDensity_function_type)( double ) const;
            typedef double ( DistributionGate_wrapper::*default_probabilityDensity_function_type)( double ) const;
            
            DistributionGate_exposer.def( 
                "probabilityDensity"
                , probabilityDensity_function_type(&::DistributionGate::probabilityDensity)
                , default_probabilityDensity_function_type(&DistributionGate_wrapper::default_probabilityDensity)
                , ( bp::arg("x") ) );
        
        }
        { //::IDistribution1D::generateValues
        
            typedef ::std::vector< double > ( ::IDistribution1D::*generateValues_function_type)( ::std::size_t,double,double ) const;
            typedef ::std::vector< double > ( DistributionGate_wrapper::*default_generateValues_function_type)( ::std::size_t,double,double ) const;
            
            DistributionGate_exposer.def( 
                "generateValues"
                , generateValues_function_type(&::IDistribution1D::generateValues)
                , default_generateValues_function_type(&DistributionGate_wrapper::default_generateValues)
                , ( bp::arg("nbr_samples"), bp::arg("xmin"), bp::arg("xmax") ) );
        
        }
    }

}

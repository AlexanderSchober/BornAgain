// This file has been generated by Py++.

#include "boost/python.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "BasicVector3D.h"
#include "Experiment.h"
#include "FormFactorCylinder.h"
#include "FormFactorFullSphere.h"
#include "FormFactorPyramid.h"
#include "GISASExperiment.h"
#include "HomogeneousMaterial.h"
#include "IClusteredParticles.h"
#include "ICompositeSample.h"
#include "IFormFactor.h"
#include "IInterferenceFunction.h"
#include "InterferenceFunctionNone.h"
#include "InterferenceFunction1DParaCrystal.h"
#include "IMaterial.h"
#include "ISample.h"
#include "ISingleton.h"
#include "Lattice.h"
#include "LatticeBasis.h"
#include "Layer.h"
#include "LayerDecorator.h"
#include "LayerRoughness.h"
#include "MaterialManager.h"
#include "MesoCrystal.h"
#include "MultiLayer.h"
#include "Particle.h"
#include "Crystal.h"
#include "ParticleDecoration.h"
#include "OpticalFresnel.h"
#include "ParameterPool.h"
#include "PythonOutputData.h"
#include "PythonPlusplusHelper.h"
#include "Transform3D.h"
#include "Units.h"
#include "PythonInterface_classes_1.h"

namespace bp = boost::python;

struct Experiment_wrapper : Experiment, bp::wrapper< Experiment > {

    Experiment_wrapper( )
    : Experiment( )
      , bp::wrapper< Experiment >(){
        // null constructor
    
    }

    virtual void normalize(  ) {
        if( bp::override func_normalize = this->get_override( "normalize" ) )
            func_normalize(  );
        else{
            this->Experiment::normalize(  );
        }
    }
    
    void default_normalize(  ) {
        Experiment::normalize( );
    }

    virtual void runSimulation(  ) {
        if( bp::override func_runSimulation = this->get_override( "runSimulation" ) )
            func_runSimulation(  );
        else{
            this->Experiment::runSimulation(  );
        }
    }
    
    void default_runSimulation(  ) {
        Experiment::runSimulation( );
    }

};

struct ISample_wrapper : ISample, bp::wrapper< ISample > {

    ISample_wrapper( )
    : ISample( )
      , bp::wrapper< ISample >(){
        // null constructor
    
    }

    ISample_wrapper(::ISample const & other )
    : ISample( boost::ref(other) )
      , bp::wrapper< ISample >(){
        // copy constructor
    
    }

    virtual ::ParameterPool * createParameterTree(  ) {
        if( bp::override func_createParameterTree = this->get_override( "createParameterTree" ) )
            return func_createParameterTree(  );
        else{
            return this->ISample::createParameterTree(  );
        }
    }
    
    ::ParameterPool * default_createParameterTree(  ) {
        return ISample::createParameterTree( );
    }

    virtual void walk_and_print(  ) {
        if( bp::override func_walk_and_print = this->get_override( "walk_and_print" ) )
            func_walk_and_print(  );
        else{
            this->ISample::walk_and_print(  );
        }
    }
    
    void default_walk_and_print(  ) {
        ISample::walk_and_print( );
    }

};

struct IFormFactor_wrapper : IFormFactor, bp::wrapper< IFormFactor > {

    IFormFactor_wrapper( )
    : IFormFactor( )
      , bp::wrapper< IFormFactor >(){
        // null constructor
    
    }

    virtual ::IFormFactor * clone(  ) const {
        bp::override func_clone = this->get_override( "clone" );
        return func_clone(  );
    }

    virtual ::complex_t evaluate( ::cvector_t k_i, ::cvector_t k_f, double alpha_i, double alpha_f ) const {
        bp::override func_evaluate = this->get_override( "evaluate" );
        return func_evaluate( k_i, k_f, alpha_i, alpha_f );
    }

    virtual int getNumberOfStochasticParameters(  ) const  {
        if( bp::override func_getNumberOfStochasticParameters = this->get_override( "getNumberOfStochasticParameters" ) )
            return func_getNumberOfStochasticParameters(  );
        else{
            return this->IFormFactor::getNumberOfStochasticParameters(  );
        }
    }
    
    int default_getNumberOfStochasticParameters(  ) const  {
        return IFormFactor::getNumberOfStochasticParameters( );
    }

    virtual double getVolume(  ) const  {
        if( bp::override func_getVolume = this->get_override( "getVolume" ) )
            return func_getVolume(  );
        else{
            return this->IFormFactor::getVolume(  );
        }
    }
    
    double default_getVolume(  ) const  {
        return IFormFactor::getVolume( );
    }

    virtual void setAmbientRefractiveIndex( ::complex_t refractive_index ) {
        if( bp::override func_setAmbientRefractiveIndex = this->get_override( "setAmbientRefractiveIndex" ) )
            func_setAmbientRefractiveIndex( refractive_index );
        else{
            this->IFormFactor::setAmbientRefractiveIndex( refractive_index );
        }
    }
    
    void default_setAmbientRefractiveIndex( ::complex_t refractive_index ) {
        IFormFactor::setAmbientRefractiveIndex( refractive_index );
    }

    virtual ::ParameterPool * createParameterTree(  ) {
        if( bp::override func_createParameterTree = this->get_override( "createParameterTree" ) )
            return func_createParameterTree(  );
        else{
            return this->ISample::createParameterTree(  );
        }
    }
    
    ::ParameterPool * default_createParameterTree(  ) {
        return ISample::createParameterTree( );
    }

    virtual void walk_and_print(  ) {
        if( bp::override func_walk_and_print = this->get_override( "walk_and_print" ) )
            func_walk_and_print(  );
        else{
            this->ISample::walk_and_print(  );
        }
    }
    
    void default_walk_and_print(  ) {
        ISample::walk_and_print( );
    }

};

struct IBornFormFactor_wrapper : IBornFormFactor, bp::wrapper< IBornFormFactor > {

    IBornFormFactor_wrapper( )
    : IBornFormFactor( )
      , bp::wrapper< IBornFormFactor >(){
        // null constructor
    
    }

    virtual ::IBornFormFactor * clone(  ) const {
        bp::override func_clone = this->get_override( "clone" );
        return func_clone(  );
    }

    virtual ::complex_t evaluate( ::cvector_t k_i, ::cvector_t k_f, double alpha_i, double alpha_f ) const  {
        if( bp::override func_evaluate = this->get_override( "evaluate" ) )
            return func_evaluate( k_i, k_f, alpha_i, alpha_f );
        else{
            return this->IBornFormFactor::evaluate( k_i, k_f, alpha_i, alpha_f );
        }
    }
    
    ::complex_t default_evaluate( ::cvector_t k_i, ::cvector_t k_f, double alpha_i, double alpha_f ) const  {
        return IBornFormFactor::evaluate( k_i, k_f, alpha_i, alpha_f );
    }

    virtual ::complex_t evaluate_for_q( ::cvector_t q ) const {
        bp::override func_evaluate_for_q = this->get_override( "evaluate_for_q" );
        return func_evaluate_for_q( q );
    }

    virtual ::ParameterPool * createParameterTree(  ) {
        if( bp::override func_createParameterTree = this->get_override( "createParameterTree" ) )
            return func_createParameterTree(  );
        else{
            return this->ISample::createParameterTree(  );
        }
    }
    
    ::ParameterPool * default_createParameterTree(  ) {
        return ISample::createParameterTree( );
    }

    virtual int getNumberOfStochasticParameters(  ) const  {
        if( bp::override func_getNumberOfStochasticParameters = this->get_override( "getNumberOfStochasticParameters" ) )
            return func_getNumberOfStochasticParameters(  );
        else{
            return this->IFormFactor::getNumberOfStochasticParameters(  );
        }
    }
    
    int default_getNumberOfStochasticParameters(  ) const  {
        return IFormFactor::getNumberOfStochasticParameters( );
    }

    virtual double getVolume(  ) const  {
        if( bp::override func_getVolume = this->get_override( "getVolume" ) )
            return func_getVolume(  );
        else{
            return this->IFormFactor::getVolume(  );
        }
    }
    
    double default_getVolume(  ) const  {
        return IFormFactor::getVolume( );
    }

    virtual void setAmbientRefractiveIndex( ::complex_t refractive_index ) {
        if( bp::override func_setAmbientRefractiveIndex = this->get_override( "setAmbientRefractiveIndex" ) )
            func_setAmbientRefractiveIndex( refractive_index );
        else{
            this->IFormFactor::setAmbientRefractiveIndex( refractive_index );
        }
    }
    
    void default_setAmbientRefractiveIndex( ::complex_t refractive_index ) {
        IFormFactor::setAmbientRefractiveIndex( refractive_index );
    }

    virtual void walk_and_print(  ) {
        if( bp::override func_walk_and_print = this->get_override( "walk_and_print" ) )
            func_walk_and_print(  );
        else{
            this->ISample::walk_and_print(  );
        }
    }
    
    void default_walk_and_print(  ) {
        ISample::walk_and_print( );
    }

};

struct FormFactorCylinder_wrapper : FormFactorCylinder, bp::wrapper< FormFactorCylinder > {

    FormFactorCylinder_wrapper(double height, double radius )
    : FormFactorCylinder( height, radius )
      , bp::wrapper< FormFactorCylinder >(){
        // constructor
    
    }

    virtual ::ParameterPool * createParameterTree(  ) {
        if( bp::override func_createParameterTree = this->get_override( "createParameterTree" ) )
            return func_createParameterTree(  );
        else{
            return this->ISample::createParameterTree(  );
        }
    }
    
    ::ParameterPool * default_createParameterTree(  ) {
        return ISample::createParameterTree( );
    }

    virtual ::complex_t evaluate( ::cvector_t k_i, ::cvector_t k_f, double alpha_i, double alpha_f ) const  {
        if( bp::override func_evaluate = this->get_override( "evaluate" ) )
            return func_evaluate( k_i, k_f, alpha_i, alpha_f );
        else{
            return this->IBornFormFactor::evaluate( k_i, k_f, alpha_i, alpha_f );
        }
    }
    
    ::complex_t default_evaluate( ::cvector_t k_i, ::cvector_t k_f, double alpha_i, double alpha_f ) const  {
        return IBornFormFactor::evaluate( k_i, k_f, alpha_i, alpha_f );
    }

    virtual int getNumberOfStochasticParameters(  ) const  {
        if( bp::override func_getNumberOfStochasticParameters = this->get_override( "getNumberOfStochasticParameters" ) )
            return func_getNumberOfStochasticParameters(  );
        else{
            return this->IFormFactor::getNumberOfStochasticParameters(  );
        }
    }
    
    int default_getNumberOfStochasticParameters(  ) const  {
        return IFormFactor::getNumberOfStochasticParameters( );
    }

    virtual double getVolume(  ) const  {
        if( bp::override func_getVolume = this->get_override( "getVolume" ) )
            return func_getVolume(  );
        else{
            return this->IFormFactor::getVolume(  );
        }
    }
    
    double default_getVolume(  ) const  {
        return IFormFactor::getVolume( );
    }

    virtual void setAmbientRefractiveIndex( ::complex_t refractive_index ) {
        if( bp::override func_setAmbientRefractiveIndex = this->get_override( "setAmbientRefractiveIndex" ) )
            func_setAmbientRefractiveIndex( refractive_index );
        else{
            this->IFormFactor::setAmbientRefractiveIndex( refractive_index );
        }
    }
    
    void default_setAmbientRefractiveIndex( ::complex_t refractive_index ) {
        IFormFactor::setAmbientRefractiveIndex( refractive_index );
    }

    virtual void walk_and_print(  ) {
        if( bp::override func_walk_and_print = this->get_override( "walk_and_print" ) )
            func_walk_and_print(  );
        else{
            this->ISample::walk_and_print(  );
        }
    }
    
    void default_walk_and_print(  ) {
        ISample::walk_and_print( );
    }

};

struct FormFactorFullSphere_wrapper : FormFactorFullSphere, bp::wrapper< FormFactorFullSphere > {

    FormFactorFullSphere_wrapper(FormFactorFullSphere const & arg )
    : FormFactorFullSphere( arg )
      , bp::wrapper< FormFactorFullSphere >(){
        // copy constructor
        
    }

    FormFactorFullSphere_wrapper(double radius )
    : FormFactorFullSphere( radius )
      , bp::wrapper< FormFactorFullSphere >(){
        // constructor
    
    }

    virtual ::ParameterPool * createParameterTree(  ) {
        if( bp::override func_createParameterTree = this->get_override( "createParameterTree" ) )
            return func_createParameterTree(  );
        else{
            return this->ISample::createParameterTree(  );
        }
    }
    
    ::ParameterPool * default_createParameterTree(  ) {
        return ISample::createParameterTree( );
    }

    virtual ::complex_t evaluate( ::cvector_t k_i, ::cvector_t k_f, double alpha_i, double alpha_f ) const  {
        if( bp::override func_evaluate = this->get_override( "evaluate" ) )
            return func_evaluate( k_i, k_f, alpha_i, alpha_f );
        else{
            return this->IBornFormFactor::evaluate( k_i, k_f, alpha_i, alpha_f );
        }
    }
    
    ::complex_t default_evaluate( ::cvector_t k_i, ::cvector_t k_f, double alpha_i, double alpha_f ) const  {
        return IBornFormFactor::evaluate( k_i, k_f, alpha_i, alpha_f );
    }

    virtual int getNumberOfStochasticParameters(  ) const  {
        if( bp::override func_getNumberOfStochasticParameters = this->get_override( "getNumberOfStochasticParameters" ) )
            return func_getNumberOfStochasticParameters(  );
        else{
            return this->IFormFactor::getNumberOfStochasticParameters(  );
        }
    }
    
    int default_getNumberOfStochasticParameters(  ) const  {
        return IFormFactor::getNumberOfStochasticParameters( );
    }

    virtual double getVolume(  ) const  {
        if( bp::override func_getVolume = this->get_override( "getVolume" ) )
            return func_getVolume(  );
        else{
            return this->IFormFactor::getVolume(  );
        }
    }
    
    double default_getVolume(  ) const  {
        return IFormFactor::getVolume( );
    }

    virtual void setAmbientRefractiveIndex( ::complex_t refractive_index ) {
        if( bp::override func_setAmbientRefractiveIndex = this->get_override( "setAmbientRefractiveIndex" ) )
            func_setAmbientRefractiveIndex( refractive_index );
        else{
            this->IFormFactor::setAmbientRefractiveIndex( refractive_index );
        }
    }
    
    void default_setAmbientRefractiveIndex( ::complex_t refractive_index ) {
        IFormFactor::setAmbientRefractiveIndex( refractive_index );
    }

    virtual void walk_and_print(  ) {
        if( bp::override func_walk_and_print = this->get_override( "walk_and_print" ) )
            func_walk_and_print(  );
        else{
            this->ISample::walk_and_print(  );
        }
    }
    
    void default_walk_and_print(  ) {
        ISample::walk_and_print( );
    }

};

struct FormFactorPyramid_wrapper : FormFactorPyramid, bp::wrapper< FormFactorPyramid > {

    FormFactorPyramid_wrapper(double height, double half_side, double alpha )
    : FormFactorPyramid( height, half_side, alpha )
      , bp::wrapper< FormFactorPyramid >(){
        // constructor
    
    }

    virtual ::ParameterPool * createParameterTree(  ) {
        if( bp::override func_createParameterTree = this->get_override( "createParameterTree" ) )
            return func_createParameterTree(  );
        else{
            return this->ISample::createParameterTree(  );
        }
    }
    
    ::ParameterPool * default_createParameterTree(  ) {
        return ISample::createParameterTree( );
    }

    virtual ::complex_t evaluate( ::cvector_t k_i, ::cvector_t k_f, double alpha_i, double alpha_f ) const  {
        if( bp::override func_evaluate = this->get_override( "evaluate" ) )
            return func_evaluate( k_i, k_f, alpha_i, alpha_f );
        else{
            return this->IBornFormFactor::evaluate( k_i, k_f, alpha_i, alpha_f );
        }
    }
    
    ::complex_t default_evaluate( ::cvector_t k_i, ::cvector_t k_f, double alpha_i, double alpha_f ) const  {
        return IBornFormFactor::evaluate( k_i, k_f, alpha_i, alpha_f );
    }

    virtual int getNumberOfStochasticParameters(  ) const  {
        if( bp::override func_getNumberOfStochasticParameters = this->get_override( "getNumberOfStochasticParameters" ) )
            return func_getNumberOfStochasticParameters(  );
        else{
            return this->IFormFactor::getNumberOfStochasticParameters(  );
        }
    }
    
    int default_getNumberOfStochasticParameters(  ) const  {
        return IFormFactor::getNumberOfStochasticParameters( );
    }

    virtual double getVolume(  ) const  {
        if( bp::override func_getVolume = this->get_override( "getVolume" ) )
            return func_getVolume(  );
        else{
            return this->IFormFactor::getVolume(  );
        }
    }
    
    double default_getVolume(  ) const  {
        return IFormFactor::getVolume( );
    }

    virtual void setAmbientRefractiveIndex( ::complex_t refractive_index ) {
        if( bp::override func_setAmbientRefractiveIndex = this->get_override( "setAmbientRefractiveIndex" ) )
            func_setAmbientRefractiveIndex( refractive_index );
        else{
            this->IFormFactor::setAmbientRefractiveIndex( refractive_index );
        }
    }
    
    void default_setAmbientRefractiveIndex( ::complex_t refractive_index ) {
        IFormFactor::setAmbientRefractiveIndex( refractive_index );
    }

    virtual void walk_and_print(  ) {
        if( bp::override func_walk_and_print = this->get_override( "walk_and_print" ) )
            func_walk_and_print(  );
        else{
            this->ISample::walk_and_print(  );
        }
    }
    
    void default_walk_and_print(  ) {
        ISample::walk_and_print( );
    }

};

struct GISASExperiment_wrapper : GISASExperiment, bp::wrapper< GISASExperiment > {

    GISASExperiment_wrapper( )
    : GISASExperiment( )
      , bp::wrapper< GISASExperiment >(){
        // null constructor
    
    }

    virtual void normalize(  ) {
        if( bp::override func_normalize = this->get_override( "normalize" ) )
            func_normalize(  );
        else{
            this->GISASExperiment::normalize(  );
        }
    }
    
    void default_normalize(  ) {
        GISASExperiment::normalize( );
    }

    virtual void runSimulation(  ) {
        if( bp::override func_runSimulation = this->get_override( "runSimulation" ) )
            func_runSimulation(  );
        else{
            this->GISASExperiment::runSimulation(  );
        }
    }
    
    void default_runSimulation(  ) {
        GISASExperiment::runSimulation( );
    }

};

struct ReflectX3D_wrapper : Geometry::ReflectX3D, bp::wrapper< Geometry::ReflectX3D > {

    ReflectX3D_wrapper(Geometry::ReflectX3D const & arg )
    : Geometry::ReflectX3D( arg )
      , bp::wrapper< Geometry::ReflectX3D >(){
        // copy constructor
        
    }

    ReflectX3D_wrapper(double x=0 )
    : Geometry::ReflectX3D( x )
      , bp::wrapper< Geometry::ReflectX3D >(){
        // constructor
    
    }

    void setTransform( double XX, double XY, double XZ, double DX, double YX, double YY, double YZ, double DY, double ZX, double ZY, double ZZ, double DZ ){
        Geometry::Transform3D::setTransform( XX, XY, XZ, DX, YX, YY, YZ, DY, ZX, ZY, ZZ, DZ );
    }

};

struct ReflectY3D_wrapper : Geometry::ReflectY3D, bp::wrapper< Geometry::ReflectY3D > {

    ReflectY3D_wrapper(Geometry::ReflectY3D const & arg )
    : Geometry::ReflectY3D( arg )
      , bp::wrapper< Geometry::ReflectY3D >(){
        // copy constructor
        
    }

    ReflectY3D_wrapper(double y=0 )
    : Geometry::ReflectY3D( y )
      , bp::wrapper< Geometry::ReflectY3D >(){
        // constructor
    
    }

    void setTransform( double XX, double XY, double XZ, double DX, double YX, double YY, double YZ, double DY, double ZX, double ZY, double ZZ, double DZ ){
        Geometry::Transform3D::setTransform( XX, XY, XZ, DX, YX, YY, YZ, DY, ZX, ZY, ZZ, DZ );
    }

};

void register_classes_1(){

    { //::std::vector< OpticalFresnel::FresnelCoeff >
        typedef bp::class_< std::vector< OpticalFresnel::FresnelCoeff > > MultiLayerCoeff_t_exposer_t;
        MultiLayerCoeff_t_exposer_t MultiLayerCoeff_t_exposer = MultiLayerCoeff_t_exposer_t( "MultiLayerCoeff_t" );
        bp::scope MultiLayerCoeff_t_scope( MultiLayerCoeff_t_exposer );
        MultiLayerCoeff_t_exposer.def( bp::vector_indexing_suite< ::std::vector< OpticalFresnel::FresnelCoeff > >() );
    }

    { //::std::vector< DiffuseNanoParticleInfo* >
        typedef bp::class_< std::vector< DiffuseParticleInfo* > > vector_less__DiffuseNanoParticleInfo_ptr___greater__exposer_t;
        vector_less__DiffuseNanoParticleInfo_ptr___greater__exposer_t vector_less__DiffuseNanoParticleInfo_ptr___greater__exposer = vector_less__DiffuseNanoParticleInfo_ptr___greater__exposer_t( "vector_less__DiffuseNanoParticleInfo_ptr___greater_" );
        bp::scope vector_less__DiffuseNanoParticleInfo_ptr___greater__scope( vector_less__DiffuseNanoParticleInfo_ptr___greater__exposer );
        vector_less__DiffuseNanoParticleInfo_ptr___greater__exposer.def( bp::vector_indexing_suite< ::std::vector< DiffuseParticleInfo* > >() );
    }

    bp::class_< Experiment_wrapper, boost::noncopyable >( "Experiment", bp::init< >() )    
        .def( 
            "normalize"
            , (void ( ::Experiment::* )(  ) )(&::Experiment::normalize)
            , (void ( Experiment_wrapper::* )(  ) )(&Experiment_wrapper::default_normalize) )    
        .def( 
            "runSimulation"
            , (void ( ::Experiment::* )(  ) )(&::Experiment::runSimulation)
            , (void ( Experiment_wrapper::* )(  ) )(&Experiment_wrapper::default_runSimulation) )    
        .def( 
            "setBeamIntensity"
            , (void ( ::Experiment::* )( double ) )( &::Experiment::setBeamIntensity )
            , ( bp::arg("intensity") ) )    
        .def( 
            "setBeamParameters"
            , (void ( ::Experiment::* )( double,double,double ) )( &::Experiment::setBeamParameters )
            , ( bp::arg("lambda"), bp::arg("alpha_i"), bp::arg("phi_i") ) )    
        .def( 
            "setSample"
            , (void ( ::Experiment::* )( ::ISample * ) )( &::Experiment::setSample )
            , ( bp::arg("p_sample") ) );

    { //::ISample
        typedef bp::class_< ISample_wrapper > ISample_exposer_t;
        ISample_exposer_t ISample_exposer = ISample_exposer_t( "ISample", bp::no_init );
        bp::scope ISample_scope( ISample_exposer );
        ISample_exposer.def( bp::init< >() );
        ISample_exposer.def( bp::init< ISample const & >(( bp::arg("other") )) );
        { //::ISample::createParameterTree
        
            typedef ::ParameterPool * ( ::ISample::*createParameterTree_function_type )(  ) ;
            typedef ::ParameterPool * ( ISample_wrapper::*default_createParameterTree_function_type )(  ) ;
            
            ISample_exposer.def( 
                "createParameterTree"
                , createParameterTree_function_type(&::ISample::createParameterTree)
                , default_createParameterTree_function_type(&ISample_wrapper::default_createParameterTree)
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::ISample::operator=
        
            typedef ::ISample & ( ::ISample::*assign_function_type )( ::ISample const & ) ;
            
            ISample_exposer.def( 
                "assign"
                , assign_function_type( &::ISample::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        { //::ISample::walk_and_print
        
            typedef void ( ::ISample::*walk_and_print_function_type )(  ) ;
            typedef void ( ISample_wrapper::*default_walk_and_print_function_type )(  ) ;
            
            ISample_exposer.def( 
                "walk_and_print"
                , walk_and_print_function_type(&::ISample::walk_and_print)
                , default_walk_and_print_function_type(&ISample_wrapper::default_walk_and_print) );
        
        }
        ISample_exposer.def( bp::self_ns::str( bp::self ) );
    }

    bp::class_< IFormFactor_wrapper, bp::bases< ISample >, boost::noncopyable >( "IFormFactor", bp::init< >() )    
        .def( 
            "clone"
            , bp::pure_virtual( (::IFormFactor * ( ::IFormFactor::* )(  ) const)(&::IFormFactor::clone) )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "evaluate"
            , bp::pure_virtual( (::complex_t ( ::IFormFactor::* )( ::cvector_t,::cvector_t,double,double ) const)(&::IFormFactor::evaluate) )
            , ( bp::arg("k_i"), bp::arg("k_f"), bp::arg("alpha_i"), bp::arg("alpha_f") ) )    
        .def( 
            "getNumberOfStochasticParameters"
            , (int ( ::IFormFactor::* )(  ) const)(&::IFormFactor::getNumberOfStochasticParameters)
            , (int ( IFormFactor_wrapper::* )(  ) const)(&IFormFactor_wrapper::default_getNumberOfStochasticParameters) )    
        .def( 
            "getVolume"
            , (double ( ::IFormFactor::* )(  ) const)(&::IFormFactor::getVolume)
            , (double ( IFormFactor_wrapper::* )(  ) const)(&IFormFactor_wrapper::default_getVolume) )    
        .def( 
            "setAmbientRefractiveIndex"
            , (void ( ::IFormFactor::* )( ::complex_t ) )(&::IFormFactor::setAmbientRefractiveIndex)
            , (void ( IFormFactor_wrapper::* )( ::complex_t ) )(&IFormFactor_wrapper::default_setAmbientRefractiveIndex)
            , ( bp::arg("refractive_index") ) )    
        .def( 
            "createParameterTree"
            , (::ParameterPool * ( ::ISample::* )(  ) )(&::ISample::createParameterTree)
            , (::ParameterPool * ( IFormFactor_wrapper::* )(  ) )(&IFormFactor_wrapper::default_createParameterTree)
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "walk_and_print"
            , (void ( ::ISample::* )(  ) )(&::ISample::walk_and_print)
            , (void ( IFormFactor_wrapper::* )(  ) )(&IFormFactor_wrapper::default_walk_and_print) );

    bp::class_< IBornFormFactor_wrapper, bp::bases< IFormFactor >, boost::noncopyable >( "IBornFormFactor", bp::init< >() )    
        .def( 
            "clone"
            , bp::pure_virtual( (::IBornFormFactor * ( ::IBornFormFactor::* )(  ) const)(&::IBornFormFactor::clone) )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "evaluate"
            , (::complex_t ( ::IBornFormFactor::* )( ::cvector_t,::cvector_t,double,double ) const)(&::IBornFormFactor::evaluate)
            , (::complex_t ( IBornFormFactor_wrapper::* )( ::cvector_t,::cvector_t,double,double ) const)(&IBornFormFactor_wrapper::default_evaluate)
            , ( bp::arg("k_i"), bp::arg("k_f"), bp::arg("alpha_i"), bp::arg("alpha_f") ) )    
        .def( 
            "evaluate_for_q"
            , (::complex_t ( IBornFormFactor_wrapper::* )( ::cvector_t ) const)(&IBornFormFactor_wrapper::evaluate_for_q)
            , ( bp::arg("q") ) )    
        .def( 
            "createParameterTree"
            , (::ParameterPool * ( ::ISample::* )(  ) )(&::ISample::createParameterTree)
            , (::ParameterPool * ( IBornFormFactor_wrapper::* )(  ) )(&IBornFormFactor_wrapper::default_createParameterTree)
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "getNumberOfStochasticParameters"
            , (int ( ::IFormFactor::* )(  ) const)(&::IFormFactor::getNumberOfStochasticParameters)
            , (int ( IBornFormFactor_wrapper::* )(  ) const)(&IBornFormFactor_wrapper::default_getNumberOfStochasticParameters) )    
        .def( 
            "getVolume"
            , (double ( ::IFormFactor::* )(  ) const)(&::IFormFactor::getVolume)
            , (double ( IBornFormFactor_wrapper::* )(  ) const)(&IBornFormFactor_wrapper::default_getVolume) )    
        .def( 
            "setAmbientRefractiveIndex"
            , (void ( ::IFormFactor::* )( ::complex_t ) )(&::IFormFactor::setAmbientRefractiveIndex)
            , (void ( IBornFormFactor_wrapper::* )( ::complex_t ) )(&IBornFormFactor_wrapper::default_setAmbientRefractiveIndex)
            , ( bp::arg("refractive_index") ) )    
        .def( 
            "walk_and_print"
            , (void ( ::ISample::* )(  ) )(&::ISample::walk_and_print)
            , (void ( IBornFormFactor_wrapper::* )(  ) )(&IBornFormFactor_wrapper::default_walk_and_print) );

    bp::class_< FormFactorCylinder_wrapper, bp::bases< IBornFormFactor >, boost::noncopyable >( "FormFactorCylinder", bp::init< double, double >(( bp::arg("height"), bp::arg("radius") )) )    
        .def( 
            "createParameterTree"
            , (::ParameterPool * ( ::ISample::* )(  ) )(&::ISample::createParameterTree)
            , (::ParameterPool * ( FormFactorCylinder_wrapper::* )(  ) )(&FormFactorCylinder_wrapper::default_createParameterTree)
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "evaluate"
            , (::complex_t ( ::IBornFormFactor::* )( ::cvector_t,::cvector_t,double,double ) const)(&::IBornFormFactor::evaluate)
            , (::complex_t ( FormFactorCylinder_wrapper::* )( ::cvector_t,::cvector_t,double,double ) const)(&FormFactorCylinder_wrapper::default_evaluate)
            , ( bp::arg("k_i"), bp::arg("k_f"), bp::arg("alpha_i"), bp::arg("alpha_f") ) )    
        .def( 
            "getNumberOfStochasticParameters"
            , (int ( ::IFormFactor::* )(  ) const)(&::IFormFactor::getNumberOfStochasticParameters)
            , (int ( FormFactorCylinder_wrapper::* )(  ) const)(&FormFactorCylinder_wrapper::default_getNumberOfStochasticParameters) )    
        .def( 
            "getVolume"
            , (double ( ::IFormFactor::* )(  ) const)(&::IFormFactor::getVolume)
            , (double ( FormFactorCylinder_wrapper::* )(  ) const)(&FormFactorCylinder_wrapper::default_getVolume) )    
        .def( 
            "setAmbientRefractiveIndex"
            , (void ( ::IFormFactor::* )( ::complex_t ) )(&::IFormFactor::setAmbientRefractiveIndex)
            , (void ( FormFactorCylinder_wrapper::* )( ::complex_t ) )(&FormFactorCylinder_wrapper::default_setAmbientRefractiveIndex)
            , ( bp::arg("refractive_index") ) )    
        .def( 
            "walk_and_print"
            , (void ( ::ISample::* )(  ) )(&::ISample::walk_and_print)
            , (void ( FormFactorCylinder_wrapper::* )(  ) )(&FormFactorCylinder_wrapper::default_walk_and_print) );

    bp::class_< FormFactorFullSphere_wrapper, bp::bases< IBornFormFactor > >( "FormFactorFullSphere", bp::init< double >(( bp::arg("radius") )) )    
        .def( 
            "createParameterTree"
            , (::ParameterPool * ( ::ISample::* )(  ) )(&::ISample::createParameterTree)
            , (::ParameterPool * ( FormFactorFullSphere_wrapper::* )(  ) )(&FormFactorFullSphere_wrapper::default_createParameterTree)
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "evaluate"
            , (::complex_t ( ::IBornFormFactor::* )( ::cvector_t,::cvector_t,double,double ) const)(&::IBornFormFactor::evaluate)
            , (::complex_t ( FormFactorFullSphere_wrapper::* )( ::cvector_t,::cvector_t,double,double ) const)(&FormFactorFullSphere_wrapper::default_evaluate)
            , ( bp::arg("k_i"), bp::arg("k_f"), bp::arg("alpha_i"), bp::arg("alpha_f") ) )    
        .def( 
            "getNumberOfStochasticParameters"
            , (int ( ::IFormFactor::* )(  ) const)(&::IFormFactor::getNumberOfStochasticParameters)
            , (int ( FormFactorFullSphere_wrapper::* )(  ) const)(&FormFactorFullSphere_wrapper::default_getNumberOfStochasticParameters) )    
        .def( 
            "getVolume"
            , (double ( ::IFormFactor::* )(  ) const)(&::IFormFactor::getVolume)
            , (double ( FormFactorFullSphere_wrapper::* )(  ) const)(&FormFactorFullSphere_wrapper::default_getVolume) )    
        .def( 
            "setAmbientRefractiveIndex"
            , (void ( ::IFormFactor::* )( ::complex_t ) )(&::IFormFactor::setAmbientRefractiveIndex)
            , (void ( FormFactorFullSphere_wrapper::* )( ::complex_t ) )(&FormFactorFullSphere_wrapper::default_setAmbientRefractiveIndex)
            , ( bp::arg("refractive_index") ) )    
        .def( 
            "walk_and_print"
            , (void ( ::ISample::* )(  ) )(&::ISample::walk_and_print)
            , (void ( FormFactorFullSphere_wrapper::* )(  ) )(&FormFactorFullSphere_wrapper::default_walk_and_print) );

    bp::class_< FormFactorPyramid_wrapper, bp::bases< IBornFormFactor >, boost::noncopyable >( "FormFactorPyramid", bp::init< double, double, double >(( bp::arg("height"), bp::arg("half_side"), bp::arg("alpha") )) )    
        .def( 
            "createParameterTree"
            , (::ParameterPool * ( ::ISample::* )(  ) )(&::ISample::createParameterTree)
            , (::ParameterPool * ( FormFactorPyramid_wrapper::* )(  ) )(&FormFactorPyramid_wrapper::default_createParameterTree)
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "evaluate"
            , (::complex_t ( ::IBornFormFactor::* )( ::cvector_t,::cvector_t,double,double ) const)(&::IBornFormFactor::evaluate)
            , (::complex_t ( FormFactorPyramid_wrapper::* )( ::cvector_t,::cvector_t,double,double ) const)(&FormFactorPyramid_wrapper::default_evaluate)
            , ( bp::arg("k_i"), bp::arg("k_f"), bp::arg("alpha_i"), bp::arg("alpha_f") ) )    
        .def( 
            "getNumberOfStochasticParameters"
            , (int ( ::IFormFactor::* )(  ) const)(&::IFormFactor::getNumberOfStochasticParameters)
            , (int ( FormFactorPyramid_wrapper::* )(  ) const)(&FormFactorPyramid_wrapper::default_getNumberOfStochasticParameters) )    
        .def( 
            "getVolume"
            , (double ( ::IFormFactor::* )(  ) const)(&::IFormFactor::getVolume)
            , (double ( FormFactorPyramid_wrapper::* )(  ) const)(&FormFactorPyramid_wrapper::default_getVolume) )    
        .def( 
            "setAmbientRefractiveIndex"
            , (void ( ::IFormFactor::* )( ::complex_t ) )(&::IFormFactor::setAmbientRefractiveIndex)
            , (void ( FormFactorPyramid_wrapper::* )( ::complex_t ) )(&FormFactorPyramid_wrapper::default_setAmbientRefractiveIndex)
            , ( bp::arg("refractive_index") ) )    
        .def( 
            "walk_and_print"
            , (void ( ::ISample::* )(  ) )(&::ISample::walk_and_print)
            , (void ( FormFactorPyramid_wrapper::* )(  ) )(&FormFactorPyramid_wrapper::default_walk_and_print) );

    bp::class_< GISASExperiment_wrapper, bp::bases< Experiment >, boost::noncopyable >( "GISASExperiment", bp::init< >() )    
        .def( 
            "normalize"
            , (void ( ::GISASExperiment::* )(  ) )(&::GISASExperiment::normalize)
            , (void ( GISASExperiment_wrapper::* )(  ) )(&GISASExperiment_wrapper::default_normalize) )    
        .def( 
            "runSimulation"
            , (void ( ::GISASExperiment::* )(  ) )(&::GISASExperiment::runSimulation)
            , (void ( GISASExperiment_wrapper::* )(  ) )(&GISASExperiment_wrapper::default_runSimulation) )    
        .def( 
            "setDetectorParameters"
            , (void ( ::GISASExperiment::* )( ::size_t,double,double,::size_t,double,double,bool ) )( &::GISASExperiment::setDetectorParameters )
            , ( bp::arg("n_phi"), bp::arg("phi_f_min"), bp::arg("phi_f_max"), bp::arg("n_alpha"), bp::arg("alpha_f_min"), bp::arg("alpha_f_max"), bp::arg("isgisaxs_style")=(bool)(false) ) );

    { //::Geometry::BasicVector3D< double >
        typedef bp::class_< Geometry::BasicVector3D< double > > kvector_t_exposer_t;
        kvector_t_exposer_t kvector_t_exposer = kvector_t_exposer_t( "kvector_t", bp::init< >() );
        bp::scope kvector_t_scope( kvector_t_exposer );
        bp::scope().attr("X") = (int)Geometry::BasicVector3D<double>::X;
        bp::scope().attr("Y") = (int)Geometry::BasicVector3D<double>::Y;
        bp::scope().attr("Z") = (int)Geometry::BasicVector3D<double>::Z;
        bp::scope().attr("NUM_COORDINATES") = (int)Geometry::BasicVector3D<double>::NUM_COORDINATES;
        bp::scope().attr("SIZE") = (int)Geometry::BasicVector3D<double>::SIZE;
        kvector_t_exposer.def( bp::init< double, double, double >(( bp::arg("x1"), bp::arg("y1"), bp::arg("z1") )) );
        { //::Geometry::BasicVector3D< double >::angle
        
            typedef Geometry::BasicVector3D< double > exported_class_t;
            typedef double ( exported_class_t::*angle_function_type )( ::Geometry::BasicVector3D< double > const & ) const;
            
            kvector_t_exposer.def( 
                "angle"
                , angle_function_type( &::Geometry::BasicVector3D< double >::angle )
                , ( bp::arg("v") ) );
        
        }
        { //::Geometry::BasicVector3D< double >::cosTheta
        
            typedef Geometry::BasicVector3D< double > exported_class_t;
            typedef double ( exported_class_t::*cosTheta_function_type )(  ) const;
            
            kvector_t_exposer.def( 
                "cosTheta"
                , cosTheta_function_type( &::Geometry::BasicVector3D< double >::cosTheta ) );
        
        }
        { //::Geometry::BasicVector3D< double >::cross
        
            typedef Geometry::BasicVector3D< double > exported_class_t;
            typedef ::Geometry::BasicVector3D< double > ( exported_class_t::*cross_function_type )( ::Geometry::BasicVector3D< double > const & ) const;
            
            kvector_t_exposer.def( 
                "cross"
                , cross_function_type( &::Geometry::BasicVector3D< double >::cross )
                , ( bp::arg("v") ) );
        
        }
        { //::Geometry::BasicVector3D< double >::dot
        
            typedef Geometry::BasicVector3D< double > exported_class_t;
            typedef double ( exported_class_t::*dot_function_type )( ::Geometry::BasicVector3D< double > const & ) const;
            
            kvector_t_exposer.def( 
                "dot"
                , dot_function_type( &::Geometry::BasicVector3D< double >::dot )
                , ( bp::arg("v") ) );
        
        }
        { //::Geometry::BasicVector3D< double >::getPhi
        
            typedef Geometry::BasicVector3D< double > exported_class_t;
            typedef double ( exported_class_t::*getPhi_function_type )(  ) const;
            
            kvector_t_exposer.def( 
                "getPhi"
                , getPhi_function_type( &::Geometry::BasicVector3D< double >::getPhi ) );
        
        }
        { //::Geometry::BasicVector3D< double >::getR
        
            typedef Geometry::BasicVector3D< double > exported_class_t;
            typedef double ( exported_class_t::*getR_function_type )(  ) const;
            
            kvector_t_exposer.def( 
                "getR"
                , getR_function_type( &::Geometry::BasicVector3D< double >::getR ) );
        
        }
        { //::Geometry::BasicVector3D< double >::getTheta
        
            typedef Geometry::BasicVector3D< double > exported_class_t;
            typedef double ( exported_class_t::*getTheta_function_type )(  ) const;
            
            kvector_t_exposer.def( 
                "getTheta"
                , getTheta_function_type( &::Geometry::BasicVector3D< double >::getTheta ) );
        
        }
        { //::Geometry::BasicVector3D< double >::mag
        
            typedef Geometry::BasicVector3D< double > exported_class_t;
            typedef double ( exported_class_t::*mag_function_type )(  ) const;
            
            kvector_t_exposer.def( 
                "mag"
                , mag_function_type( &::Geometry::BasicVector3D< double >::mag ) );
        
        }
        { //::Geometry::BasicVector3D< double >::mag2
        
            typedef Geometry::BasicVector3D< double > exported_class_t;
            typedef double ( exported_class_t::*mag2_function_type )(  ) const;
            
            kvector_t_exposer.def( 
                "mag2"
                , mag2_function_type( &::Geometry::BasicVector3D< double >::mag2 ) );
        
        }
        { //::Geometry::BasicVector3D< double >::magxy
        
            typedef Geometry::BasicVector3D< double > exported_class_t;
            typedef double ( exported_class_t::*magxy_function_type )(  ) const;
            
            kvector_t_exposer.def( 
                "magxy"
                , magxy_function_type( &::Geometry::BasicVector3D< double >::magxy ) );
        
        }
        kvector_t_exposer.def( bp::self *= bp::other< double >() );
        kvector_t_exposer.def( bp::self += bp::self );
        kvector_t_exposer.def( bp::self -= bp::self );
        kvector_t_exposer.def( bp::self /= bp::other< double >() );
        { //::Geometry::BasicVector3D< double >::operator=
        
            typedef Geometry::BasicVector3D< double > exported_class_t;
            typedef ::Geometry::BasicVector3D< double > & ( exported_class_t::*assign_function_type )( ::Geometry::BasicVector3D< double > const & ) ;
            
            kvector_t_exposer.def( 
                "assign"
                , assign_function_type( &::Geometry::BasicVector3D< double >::operator= )
                , ( bp::arg("v") )
                , bp::return_self< >() );
        
        }
        { //::Geometry::BasicVector3D< double >::operator[]
        
            typedef Geometry::BasicVector3D< double > exported_class_t;
            typedef double ( exported_class_t::*__getitem___function_type )( int ) const;
            
            kvector_t_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::Geometry::BasicVector3D< double >::operator[] )
                , ( bp::arg("i") ) );
        
        }
        { //::Geometry::BasicVector3D< double >::operator[]
        
            typedef Geometry::BasicVector3D< double > exported_class_t;
            typedef double & ( exported_class_t::*__getitem___function_type )( int ) ;
            
            kvector_t_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::Geometry::BasicVector3D< double >::operator[] )
                , ( bp::arg("i") )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::Geometry::BasicVector3D< double >::orthogonal
        
            typedef Geometry::BasicVector3D< double > exported_class_t;
            typedef ::Geometry::BasicVector3D< double > ( exported_class_t::*orthogonal_function_type )(  ) const;
            
            kvector_t_exposer.def( 
                "orthogonal"
                , orthogonal_function_type( &::Geometry::BasicVector3D< double >::orthogonal ) );
        
        }
        { //::Geometry::BasicVector3D< double >::perp
        
            typedef Geometry::BasicVector3D< double > exported_class_t;
            typedef double ( exported_class_t::*perp_function_type )(  ) const;
            
            kvector_t_exposer.def( 
                "perp"
                , perp_function_type( &::Geometry::BasicVector3D< double >::perp ) );
        
        }
        { //::Geometry::BasicVector3D< double >::perp
        
            typedef Geometry::BasicVector3D< double > exported_class_t;
            typedef double ( exported_class_t::*perp_function_type )( ::Geometry::BasicVector3D< double > const & ) const;
            
            kvector_t_exposer.def( 
                "perp"
                , perp_function_type( &::Geometry::BasicVector3D< double >::perp )
                , ( bp::arg("v") ) );
        
        }
        { //::Geometry::BasicVector3D< double >::perp2
        
            typedef Geometry::BasicVector3D< double > exported_class_t;
            typedef double ( exported_class_t::*perp2_function_type )(  ) const;
            
            kvector_t_exposer.def( 
                "perp2"
                , perp2_function_type( &::Geometry::BasicVector3D< double >::perp2 ) );
        
        }
        { //::Geometry::BasicVector3D< double >::perp2
        
            typedef Geometry::BasicVector3D< double > exported_class_t;
            typedef double ( exported_class_t::*perp2_function_type )( ::Geometry::BasicVector3D< double > const & ) const;
            
            kvector_t_exposer.def( 
                "perp2"
                , perp2_function_type( &::Geometry::BasicVector3D< double >::perp2 )
                , ( bp::arg("v") ) );
        
        }
        { //::Geometry::BasicVector3D< double >::phi
        
            typedef Geometry::BasicVector3D< double > exported_class_t;
            typedef double ( exported_class_t::*phi_function_type )(  ) const;
            
            kvector_t_exposer.def( 
                "phi"
                , phi_function_type( &::Geometry::BasicVector3D< double >::phi ) );
        
        }
        { //::Geometry::BasicVector3D< double >::r
        
            typedef Geometry::BasicVector3D< double > exported_class_t;
            typedef double ( exported_class_t::*r_function_type )(  ) const;
            
            kvector_t_exposer.def( 
                "r"
                , r_function_type( &::Geometry::BasicVector3D< double >::r ) );
        
        }
        { //::Geometry::BasicVector3D< double >::rho
        
            typedef Geometry::BasicVector3D< double > exported_class_t;
            typedef double ( exported_class_t::*rho_function_type )(  ) const;
            
            kvector_t_exposer.def( 
                "rho"
                , rho_function_type( &::Geometry::BasicVector3D< double >::rho ) );
        
        }
        { //::Geometry::BasicVector3D< double >::rotate
        
            typedef Geometry::BasicVector3D< double > exported_class_t;
            typedef ::Geometry::BasicVector3D< double > & ( exported_class_t::*rotate_function_type )( double,::Geometry::BasicVector3D< double > const & ) ;
            
            kvector_t_exposer.def( 
                "rotate"
                , rotate_function_type( &::Geometry::BasicVector3D< double >::rotate )
                , ( bp::arg("a"), bp::arg("v") )
                , bp::return_internal_reference< >() );
        
        }
        { //::Geometry::BasicVector3D< double >::rotateX
        
            typedef Geometry::BasicVector3D< double > exported_class_t;
            typedef ::Geometry::BasicVector3D< double > & ( exported_class_t::*rotateX_function_type )( double ) ;
            
            kvector_t_exposer.def( 
                "rotateX"
                , rotateX_function_type( &::Geometry::BasicVector3D< double >::rotateX )
                , ( bp::arg("a") )
                , bp::return_internal_reference< >() );
        
        }
        { //::Geometry::BasicVector3D< double >::rotateY
        
            typedef Geometry::BasicVector3D< double > exported_class_t;
            typedef ::Geometry::BasicVector3D< double > & ( exported_class_t::*rotateY_function_type )( double ) ;
            
            kvector_t_exposer.def( 
                "rotateY"
                , rotateY_function_type( &::Geometry::BasicVector3D< double >::rotateY )
                , ( bp::arg("a") )
                , bp::return_internal_reference< >() );
        
        }
        { //::Geometry::BasicVector3D< double >::rotateZ
        
            typedef Geometry::BasicVector3D< double > exported_class_t;
            typedef ::Geometry::BasicVector3D< double > & ( exported_class_t::*rotateZ_function_type )( double ) ;
            
            kvector_t_exposer.def( 
                "rotateZ"
                , rotateZ_function_type( &::Geometry::BasicVector3D< double >::rotateZ )
                , ( bp::arg("a") )
                , bp::return_internal_reference< >() );
        
        }
        { //::Geometry::BasicVector3D< double >::set
        
            typedef Geometry::BasicVector3D< double > exported_class_t;
            typedef void ( exported_class_t::*set_function_type )( double,double,double ) ;
            
            kvector_t_exposer.def( 
                "set"
                , set_function_type( &::Geometry::BasicVector3D< double >::set )
                , ( bp::arg("x1"), bp::arg("y1"), bp::arg("z1") ) );
        
        }
        { //::Geometry::BasicVector3D< double >::setLambdaAlphaPhi
        
            typedef Geometry::BasicVector3D< double > exported_class_t;
            typedef void ( exported_class_t::*setLambdaAlphaPhi_function_type )( double,double,double ) ;
            
            kvector_t_exposer.def( 
                "setLambdaAlphaPhi"
                , setLambdaAlphaPhi_function_type( &::Geometry::BasicVector3D< double >::setLambdaAlphaPhi )
                , ( bp::arg("lambda"), bp::arg("alpha"), bp::arg("phi") ) );
        
        }
        { //::Geometry::BasicVector3D< double >::setMag
        
            typedef Geometry::BasicVector3D< double > exported_class_t;
            typedef void ( exported_class_t::*setMag_function_type )( double ) ;
            
            kvector_t_exposer.def( 
                "setMag"
                , setMag_function_type( &::Geometry::BasicVector3D< double >::setMag )
                , ( bp::arg("ma") ) );
        
        }
        { //::Geometry::BasicVector3D< double >::setPerp
        
            typedef Geometry::BasicVector3D< double > exported_class_t;
            typedef void ( exported_class_t::*setPerp_function_type )( double ) ;
            
            kvector_t_exposer.def( 
                "setPerp"
                , setPerp_function_type( &::Geometry::BasicVector3D< double >::setPerp )
                , ( bp::arg("rh") ) );
        
        }
        { //::Geometry::BasicVector3D< double >::setPhi
        
            typedef Geometry::BasicVector3D< double > exported_class_t;
            typedef void ( exported_class_t::*setPhi_function_type )( double ) ;
            
            kvector_t_exposer.def( 
                "setPhi"
                , setPhi_function_type( &::Geometry::BasicVector3D< double >::setPhi )
                , ( bp::arg("ph") ) );
        
        }
        { //::Geometry::BasicVector3D< double >::setR
        
            typedef Geometry::BasicVector3D< double > exported_class_t;
            typedef void ( exported_class_t::*setR_function_type )( double ) ;
            
            kvector_t_exposer.def( 
                "setR"
                , setR_function_type( &::Geometry::BasicVector3D< double >::setR )
                , ( bp::arg("ma") ) );
        
        }
        { //::Geometry::BasicVector3D< double >::setTheta
        
            typedef Geometry::BasicVector3D< double > exported_class_t;
            typedef void ( exported_class_t::*setTheta_function_type )( double ) ;
            
            kvector_t_exposer.def( 
                "setTheta"
                , setTheta_function_type( &::Geometry::BasicVector3D< double >::setTheta )
                , ( bp::arg("th") ) );
        
        }
        { //::Geometry::BasicVector3D< double >::setX
        
            typedef Geometry::BasicVector3D< double > exported_class_t;
            typedef void ( exported_class_t::*setX_function_type )( double ) ;
            
            kvector_t_exposer.def( 
                "setX"
                , setX_function_type( &::Geometry::BasicVector3D< double >::setX )
                , ( bp::arg("a") ) );
        
        }
        { //::Geometry::BasicVector3D< double >::setXYZ
        
            typedef Geometry::BasicVector3D< double > exported_class_t;
            typedef void ( exported_class_t::*setXYZ_function_type )( double,double,double ) ;
            
            kvector_t_exposer.def( 
                "setXYZ"
                , setXYZ_function_type( &::Geometry::BasicVector3D< double >::setXYZ )
                , ( bp::arg("x1"), bp::arg("y1"), bp::arg("z1") ) );
        
        }
        { //::Geometry::BasicVector3D< double >::setY
        
            typedef Geometry::BasicVector3D< double > exported_class_t;
            typedef void ( exported_class_t::*setY_function_type )( double ) ;
            
            kvector_t_exposer.def( 
                "setY"
                , setY_function_type( &::Geometry::BasicVector3D< double >::setY )
                , ( bp::arg("a") ) );
        
        }
        { //::Geometry::BasicVector3D< double >::setZ
        
            typedef Geometry::BasicVector3D< double > exported_class_t;
            typedef void ( exported_class_t::*setZ_function_type )( double ) ;
            
            kvector_t_exposer.def( 
                "setZ"
                , setZ_function_type( &::Geometry::BasicVector3D< double >::setZ )
                , ( bp::arg("a") ) );
        
        }
        { //::Geometry::BasicVector3D< double >::theta
        
            typedef Geometry::BasicVector3D< double > exported_class_t;
            typedef double ( exported_class_t::*theta_function_type )(  ) const;
            
            kvector_t_exposer.def( 
                "theta"
                , theta_function_type( &::Geometry::BasicVector3D< double >::theta ) );
        
        }
        { //::Geometry::BasicVector3D< double >::transform
        
            typedef Geometry::BasicVector3D< double > exported_class_t;
            typedef ::Geometry::BasicVector3D< double > & ( exported_class_t::*transform_function_type )( ::Geometry::Transform3D const & ) ;
            
            kvector_t_exposer.def( 
                "transform"
                , transform_function_type( &::Geometry::BasicVector3D< double >::transform )
                , ( bp::arg("m") )
                , bp::return_internal_reference< >() );
        
        }
        { //::Geometry::BasicVector3D< double >::unit
        
            typedef Geometry::BasicVector3D< double > exported_class_t;
            typedef ::Geometry::BasicVector3D< double > ( exported_class_t::*unit_function_type )(  ) const;
            
            kvector_t_exposer.def( 
                "unit"
                , unit_function_type( &::Geometry::BasicVector3D< double >::unit ) );
        
        }
        { //::Geometry::BasicVector3D< double >::x
        
            typedef Geometry::BasicVector3D< double > exported_class_t;
            typedef double ( exported_class_t::*x_function_type )(  ) const;
            
            kvector_t_exposer.def( 
                "x"
                , x_function_type( &::Geometry::BasicVector3D< double >::x ) );
        
        }
        { //::Geometry::BasicVector3D< double >::y
        
            typedef Geometry::BasicVector3D< double > exported_class_t;
            typedef double ( exported_class_t::*y_function_type )(  ) const;
            
            kvector_t_exposer.def( 
                "y"
                , y_function_type( &::Geometry::BasicVector3D< double >::y ) );
        
        }
        { //::Geometry::BasicVector3D< double >::z
        
            typedef Geometry::BasicVector3D< double > exported_class_t;
            typedef double ( exported_class_t::*z_function_type )(  ) const;
            
            kvector_t_exposer.def( 
                "z"
                , z_function_type( &::Geometry::BasicVector3D< double >::z ) );
        
        }
        kvector_t_exposer.def( bp::self != bp::self );
        kvector_t_exposer.def( bp::other< double >() * bp::self );
        kvector_t_exposer.def( bp::self * bp::self );
        kvector_t_exposer.def( bp::self * bp::other< double >() );
        kvector_t_exposer.def( bp::self + bp::self );
        kvector_t_exposer.def( +bp::self );
        kvector_t_exposer.def( bp::self - bp::self );
        kvector_t_exposer.def( -bp::self );
        kvector_t_exposer.def( bp::self / bp::other< double >() );
        kvector_t_exposer.def( bp::self_ns::str( bp::self ) );
        kvector_t_exposer.def( bp::self == bp::self );
    }

    { //::Geometry::BasicVector3D< std::complex< double > >
        typedef bp::class_< Geometry::BasicVector3D< std::complex< double > > > cvector_t_exposer_t;
        cvector_t_exposer_t cvector_t_exposer = cvector_t_exposer_t( "cvector_t", bp::init< >() );
        bp::scope cvector_t_scope( cvector_t_exposer );
        bp::scope().attr("X") = (int)Geometry::BasicVector3D<std::complex<double> >::X;
        bp::scope().attr("Y") = (int)Geometry::BasicVector3D<std::complex<double> >::Y;
        bp::scope().attr("Z") = (int)Geometry::BasicVector3D<std::complex<double> >::Z;
        bp::scope().attr("NUM_COORDINATES") = (int)Geometry::BasicVector3D<std::complex<double> >::NUM_COORDINATES;
        bp::scope().attr("SIZE") = (int)Geometry::BasicVector3D<std::complex<double> >::SIZE;
        cvector_t_exposer.def( bp::init< std::complex< double >, std::complex< double >, std::complex< double > >(( bp::arg("x1"), bp::arg("y1"), bp::arg("z1") )) );
        { //::Geometry::BasicVector3D< std::complex< double > >::angle
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > ( exported_class_t::*angle_function_type )( ::Geometry::BasicVector3D< std::complex< double > > const & ) const;
            
            cvector_t_exposer.def( 
                "angle"
                , angle_function_type( &::Geometry::BasicVector3D< std::complex< double > >::angle )
                , ( bp::arg("v") ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::cosTheta
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > ( exported_class_t::*cosTheta_function_type )(  ) const;
            
            cvector_t_exposer.def( 
                "cosTheta"
                , cosTheta_function_type( &::Geometry::BasicVector3D< std::complex< double > >::cosTheta ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::cross
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::Geometry::BasicVector3D< std::complex< double > > ( exported_class_t::*cross_function_type )( ::Geometry::BasicVector3D< std::complex< double > > const & ) const;
            
            cvector_t_exposer.def( 
                "cross"
                , cross_function_type( &::Geometry::BasicVector3D< std::complex< double > >::cross )
                , ( bp::arg("v") ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::dot
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > ( exported_class_t::*dot_function_type )( ::Geometry::BasicVector3D< std::complex< double > > const & ) const;
            
            cvector_t_exposer.def( 
                "dot"
                , dot_function_type( &::Geometry::BasicVector3D< std::complex< double > >::dot )
                , ( bp::arg("v") ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::getPhi
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > ( exported_class_t::*getPhi_function_type )(  ) const;
            
            cvector_t_exposer.def( 
                "getPhi"
                , getPhi_function_type( &::Geometry::BasicVector3D< std::complex< double > >::getPhi ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::getR
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > ( exported_class_t::*getR_function_type )(  ) const;
            
            cvector_t_exposer.def( 
                "getR"
                , getR_function_type( &::Geometry::BasicVector3D< std::complex< double > >::getR ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::getTheta
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > ( exported_class_t::*getTheta_function_type )(  ) const;
            
            cvector_t_exposer.def( 
                "getTheta"
                , getTheta_function_type( &::Geometry::BasicVector3D< std::complex< double > >::getTheta ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::mag
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > ( exported_class_t::*mag_function_type )(  ) const;
            
            cvector_t_exposer.def( 
                "mag"
                , mag_function_type( &::Geometry::BasicVector3D< std::complex< double > >::mag ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::mag2
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > ( exported_class_t::*mag2_function_type )(  ) const;
            
            cvector_t_exposer.def( 
                "mag2"
                , mag2_function_type( &::Geometry::BasicVector3D< std::complex< double > >::mag2 ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::magxy
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > ( exported_class_t::*magxy_function_type )(  ) const;
            
            cvector_t_exposer.def( 
                "magxy"
                , magxy_function_type( &::Geometry::BasicVector3D< std::complex< double > >::magxy ) );
        
        }
        cvector_t_exposer.def( bp::self *= bp::other< double >() );
        cvector_t_exposer.def( bp::self += bp::self );
        cvector_t_exposer.def( bp::self -= bp::self );
        cvector_t_exposer.def( bp::self /= bp::other< double >() );
        { //::Geometry::BasicVector3D< std::complex< double > >::operator=
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::Geometry::BasicVector3D< std::complex< double > > & ( exported_class_t::*assign_function_type )( ::Geometry::BasicVector3D< std::complex< double > > const & ) ;
            
            cvector_t_exposer.def( 
                "assign"
                , assign_function_type( &::Geometry::BasicVector3D< std::complex< double > >::operator= )
                , ( bp::arg("v") )
                , bp::return_self< >() );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::operator[]
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > ( exported_class_t::*__getitem___function_type )( int ) const;
            
            cvector_t_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::Geometry::BasicVector3D< std::complex< double > >::operator[] )
                , ( bp::arg("i") ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::operator[]
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > & ( exported_class_t::*__getitem___function_type )( int ) ;
            
            cvector_t_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::Geometry::BasicVector3D< std::complex< double > >::operator[] )
                , ( bp::arg("i") )
                , bp::return_internal_reference< >() );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::orthogonal
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::Geometry::BasicVector3D< std::complex< double > > ( exported_class_t::*orthogonal_function_type )(  ) const;
            
            cvector_t_exposer.def( 
                "orthogonal"
                , orthogonal_function_type( &::Geometry::BasicVector3D< std::complex< double > >::orthogonal ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::perp
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > ( exported_class_t::*perp_function_type )(  ) const;
            
            cvector_t_exposer.def( 
                "perp"
                , perp_function_type( &::Geometry::BasicVector3D< std::complex< double > >::perp ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::perp
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > ( exported_class_t::*perp_function_type )( ::Geometry::BasicVector3D< std::complex< double > > const & ) const;
            
            cvector_t_exposer.def( 
                "perp"
                , perp_function_type( &::Geometry::BasicVector3D< std::complex< double > >::perp )
                , ( bp::arg("v") ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::perp2
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > ( exported_class_t::*perp2_function_type )(  ) const;
            
            cvector_t_exposer.def( 
                "perp2"
                , perp2_function_type( &::Geometry::BasicVector3D< std::complex< double > >::perp2 ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::perp2
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > ( exported_class_t::*perp2_function_type )( ::Geometry::BasicVector3D< std::complex< double > > const & ) const;
            
            cvector_t_exposer.def( 
                "perp2"
                , perp2_function_type( &::Geometry::BasicVector3D< std::complex< double > >::perp2 )
                , ( bp::arg("v") ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::phi
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > ( exported_class_t::*phi_function_type )(  ) const;
            
            cvector_t_exposer.def( 
                "phi"
                , phi_function_type( &::Geometry::BasicVector3D< std::complex< double > >::phi ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::r
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > ( exported_class_t::*r_function_type )(  ) const;
            
            cvector_t_exposer.def( 
                "r"
                , r_function_type( &::Geometry::BasicVector3D< std::complex< double > >::r ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::rho
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > ( exported_class_t::*rho_function_type )(  ) const;
            
            cvector_t_exposer.def( 
                "rho"
                , rho_function_type( &::Geometry::BasicVector3D< std::complex< double > >::rho ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::rotate
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::Geometry::BasicVector3D< std::complex< double > > & ( exported_class_t::*rotate_function_type )( ::std::complex< double >,::Geometry::BasicVector3D< std::complex< double > > const & ) ;
            
            cvector_t_exposer.def( 
                "rotate"
                , rotate_function_type( &::Geometry::BasicVector3D< std::complex< double > >::rotate )
                , ( bp::arg("a"), bp::arg("v") )
                    /* undefined call policies */ );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::rotateX
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::Geometry::BasicVector3D< std::complex< double > > & ( exported_class_t::*rotateX_function_type )( ::std::complex< double > ) ;
            
            cvector_t_exposer.def( 
                "rotateX"
                , rotateX_function_type( &::Geometry::BasicVector3D< std::complex< double > >::rotateX )
                , ( bp::arg("a") )
                    /* undefined call policies */ );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::rotateY
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::Geometry::BasicVector3D< std::complex< double > > & ( exported_class_t::*rotateY_function_type )( ::std::complex< double > ) ;
            
            cvector_t_exposer.def( 
                "rotateY"
                , rotateY_function_type( &::Geometry::BasicVector3D< std::complex< double > >::rotateY )
                , ( bp::arg("a") )
                    /* undefined call policies */ );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::rotateZ
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::Geometry::BasicVector3D< std::complex< double > > & ( exported_class_t::*rotateZ_function_type )( ::std::complex< double > ) ;
            
            cvector_t_exposer.def( 
                "rotateZ"
                , rotateZ_function_type( &::Geometry::BasicVector3D< std::complex< double > >::rotateZ )
                , ( bp::arg("a") )
                    /* undefined call policies */ );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::set
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef void ( exported_class_t::*set_function_type )( ::std::complex< double >,::std::complex< double >,::std::complex< double > ) ;
            
            cvector_t_exposer.def( 
                "set"
                , set_function_type( &::Geometry::BasicVector3D< std::complex< double > >::set )
                , ( bp::arg("x1"), bp::arg("y1"), bp::arg("z1") ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::setLambdaAlphaPhi
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef void ( exported_class_t::*setLambdaAlphaPhi_function_type )( ::std::complex< double >,::std::complex< double >,::std::complex< double > ) ;
            
            cvector_t_exposer.def( 
                "setLambdaAlphaPhi"
                , setLambdaAlphaPhi_function_type( &::Geometry::BasicVector3D< std::complex< double > >::setLambdaAlphaPhi )
                , ( bp::arg("lambda"), bp::arg("alpha"), bp::arg("phi") ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::setMag
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef void ( exported_class_t::*setMag_function_type )( ::std::complex< double > ) ;
            
            cvector_t_exposer.def( 
                "setMag"
                , setMag_function_type( &::Geometry::BasicVector3D< std::complex< double > >::setMag )
                , ( bp::arg("ma") ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::setPerp
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef void ( exported_class_t::*setPerp_function_type )( ::std::complex< double > ) ;
            
            cvector_t_exposer.def( 
                "setPerp"
                , setPerp_function_type( &::Geometry::BasicVector3D< std::complex< double > >::setPerp )
                , ( bp::arg("rh") ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::setPhi
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef void ( exported_class_t::*setPhi_function_type )( ::std::complex< double > ) ;
            
            cvector_t_exposer.def( 
                "setPhi"
                , setPhi_function_type( &::Geometry::BasicVector3D< std::complex< double > >::setPhi )
                , ( bp::arg("ph") ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::setR
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef void ( exported_class_t::*setR_function_type )( ::std::complex< double > ) ;
            
            cvector_t_exposer.def( 
                "setR"
                , setR_function_type( &::Geometry::BasicVector3D< std::complex< double > >::setR )
                , ( bp::arg("ma") ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::setTheta
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef void ( exported_class_t::*setTheta_function_type )( ::std::complex< double > ) ;
            
            cvector_t_exposer.def( 
                "setTheta"
                , setTheta_function_type( &::Geometry::BasicVector3D< std::complex< double > >::setTheta )
                , ( bp::arg("th") ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::setX
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef void ( exported_class_t::*setX_function_type )( ::std::complex< double > ) ;
            
            cvector_t_exposer.def( 
                "setX"
                , setX_function_type( &::Geometry::BasicVector3D< std::complex< double > >::setX )
                , ( bp::arg("a") ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::setXYZ
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef void ( exported_class_t::*setXYZ_function_type )( ::std::complex< double >,::std::complex< double >,::std::complex< double > ) ;
            
            cvector_t_exposer.def( 
                "setXYZ"
                , setXYZ_function_type( &::Geometry::BasicVector3D< std::complex< double > >::setXYZ )
                , ( bp::arg("x1"), bp::arg("y1"), bp::arg("z1") ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::setY
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef void ( exported_class_t::*setY_function_type )( ::std::complex< double > ) ;
            
            cvector_t_exposer.def( 
                "setY"
                , setY_function_type( &::Geometry::BasicVector3D< std::complex< double > >::setY )
                , ( bp::arg("a") ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::setZ
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef void ( exported_class_t::*setZ_function_type )( ::std::complex< double > ) ;
            
            cvector_t_exposer.def( 
                "setZ"
                , setZ_function_type( &::Geometry::BasicVector3D< std::complex< double > >::setZ )
                , ( bp::arg("a") ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::theta
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > ( exported_class_t::*theta_function_type )(  ) const;
            
            cvector_t_exposer.def( 
                "theta"
                , theta_function_type( &::Geometry::BasicVector3D< std::complex< double > >::theta ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::transform
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::Geometry::BasicVector3D< std::complex< double > > & ( exported_class_t::*transform_function_type )( ::Geometry::Transform3D const & ) ;
            
            cvector_t_exposer.def( 
                "transform"
                , transform_function_type( &::Geometry::BasicVector3D< std::complex< double > >::transform )
                , ( bp::arg("m") )
                    /* undefined call policies */ );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::unit
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::Geometry::BasicVector3D< std::complex< double > > ( exported_class_t::*unit_function_type )(  ) const;
            
            cvector_t_exposer.def( 
                "unit"
                , unit_function_type( &::Geometry::BasicVector3D< std::complex< double > >::unit ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::x
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > ( exported_class_t::*x_function_type )(  ) const;
            
            cvector_t_exposer.def( 
                "x"
                , x_function_type( &::Geometry::BasicVector3D< std::complex< double > >::x ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::y
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > ( exported_class_t::*y_function_type )(  ) const;
            
            cvector_t_exposer.def( 
                "y"
                , y_function_type( &::Geometry::BasicVector3D< std::complex< double > >::y ) );
        
        }
        { //::Geometry::BasicVector3D< std::complex< double > >::z
        
            typedef Geometry::BasicVector3D< std::complex< double > > exported_class_t;
            typedef ::std::complex< double > ( exported_class_t::*z_function_type )(  ) const;
            
            cvector_t_exposer.def( 
                "z"
                , z_function_type( &::Geometry::BasicVector3D< std::complex< double > >::z ) );
        
        }
        cvector_t_exposer.def( bp::self != bp::self );
        cvector_t_exposer.def( bp::self * bp::self );
        cvector_t_exposer.def( bp::self * bp::other< std::complex< double > >() );
        cvector_t_exposer.def( bp::self + bp::self );
        cvector_t_exposer.def( +bp::self );
        cvector_t_exposer.def( bp::self - bp::self );
        cvector_t_exposer.def( -bp::self );
        cvector_t_exposer.def( bp::self / bp::other< std::complex< double > >() );
        cvector_t_exposer.def( bp::self_ns::str( bp::self ) );
        cvector_t_exposer.def( bp::self == bp::self );
    }

    bp::class_< ReflectX3D_wrapper >( "ReflectX3D", bp::init< bp::optional< double > >(( bp::arg("x")=0 )) )    
        .def( 
            "setTransform"
            , (void ( ReflectX3D_wrapper::* )( double,double,double,double,double,double,double,double,double,double,double,double ) )(&ReflectX3D_wrapper::setTransform)
            , ( bp::arg("XX"), bp::arg("XY"), bp::arg("XZ"), bp::arg("DX"), bp::arg("YX"), bp::arg("YY"), bp::arg("YZ"), bp::arg("DY"), bp::arg("ZX"), bp::arg("ZY"), bp::arg("ZZ"), bp::arg("DZ") ) );

    bp::class_< ReflectY3D_wrapper >( "ReflectY3D", bp::init< bp::optional< double > >(( bp::arg("y")=0 )) )    
        .def( 
            "setTransform"
            , (void ( ReflectY3D_wrapper::* )( double,double,double,double,double,double,double,double,double,double,double,double ) )(&ReflectY3D_wrapper::setTransform)
            , ( bp::arg("XX"), bp::arg("XY"), bp::arg("XZ"), bp::arg("DX"), bp::arg("YX"), bp::arg("YY"), bp::arg("YZ"), bp::arg("DY"), bp::arg("ZX"), bp::arg("ZY"), bp::arg("ZZ"), bp::arg("DZ") ) );

}

// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonCoreList.h"
#include "IFTDecayFunction2D.pypp.h"

namespace bp = boost::python;

struct IFTDecayFunction2D_wrapper : IFTDecayFunction2D, bp::wrapper< IFTDecayFunction2D > {

    IFTDecayFunction2D_wrapper(double decay_length_x, double decay_length_y )
    : IFTDecayFunction2D( decay_length_x, decay_length_y )
      , bp::wrapper< IFTDecayFunction2D >(){
        // constructor
    m_pyobj = 0;
    }

    virtual ::IFTDecayFunction2D * clone(  ) const {
        bp::override func_clone = this->get_override( "clone" );
        return func_clone(  );
    }

    virtual double evaluate( double qx, double qy ) const {
        bp::override func_evaluate = this->get_override( "evaluate" );
        return func_evaluate( qx, qy );
    }

    PyObject* m_pyobj;

};

void register_IFTDecayFunction2D_class(){

    { //::IFTDecayFunction2D
        typedef bp::class_< IFTDecayFunction2D_wrapper, bp::bases< IParameterized >, std::auto_ptr< IFTDecayFunction2D_wrapper >, boost::noncopyable > IFTDecayFunction2D_exposer_t;
        IFTDecayFunction2D_exposer_t IFTDecayFunction2D_exposer = IFTDecayFunction2D_exposer_t( "IFTDecayFunction2D", "Interface for 2 dimensional decay function in reciprocal space.", bp::init< double, double >(( bp::arg("decay_length_x"), bp::arg("decay_length_y") )) );
        bp::scope IFTDecayFunction2D_scope( IFTDecayFunction2D_exposer );
        { //::IFTDecayFunction2D::clone
        
            typedef ::IFTDecayFunction2D * ( ::IFTDecayFunction2D::*clone_function_type)(  ) const;
            
            IFTDecayFunction2D_exposer.def( 
                "clone"
                , bp::pure_virtual( clone_function_type(&::IFTDecayFunction2D::clone) )
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::IFTDecayFunction2D::evaluate
        
            typedef double ( ::IFTDecayFunction2D::*evaluate_function_type)( double,double ) const;
            
            IFTDecayFunction2D_exposer.def( 
                "evaluate"
                , bp::pure_virtual( evaluate_function_type(&::IFTDecayFunction2D::evaluate) )
                , ( bp::arg("qx"), bp::arg("qy") )
                , "evaluate Fourier transformed decay function for q in X,Y coordinates." );
        
        }
        { //::IFTDecayFunction2D::getDecayLengthX
        
            typedef double ( ::IFTDecayFunction2D::*getDecayLengthX_function_type)(  ) const;
            
            IFTDecayFunction2D_exposer.def( 
                "getDecayLengthX"
                , getDecayLengthX_function_type( &::IFTDecayFunction2D::getDecayLengthX )
                , "get coherence length in X-direction." );
        
        }
        { //::IFTDecayFunction2D::getDecayLengthY
        
            typedef double ( ::IFTDecayFunction2D::*getDecayLengthY_function_type)(  ) const;
            
            IFTDecayFunction2D_exposer.def( 
                "getDecayLengthY"
                , getDecayLengthY_function_type( &::IFTDecayFunction2D::getDecayLengthY )
                , "get coherence length in Y-direction." );
        
        }
        { //::IFTDecayFunction2D::getDelta
        
            typedef double ( ::IFTDecayFunction2D::*getDelta_function_type)(  ) const;
            
            IFTDecayFunction2D_exposer.def( 
                "getDelta"
                , getDelta_function_type( &::IFTDecayFunction2D::getDelta )
                , "get angle between X- and Y-axis of distribution (in direct space)." );
        
        }
        { //::IFTDecayFunction2D::getGamma
        
            typedef double ( ::IFTDecayFunction2D::*getGamma_function_type)(  ) const;
            
            IFTDecayFunction2D_exposer.def( 
                "getGamma"
                , getGamma_function_type( &::IFTDecayFunction2D::getGamma )
                , "get angle between first lattice vector and X-axis of distribution (both in direct space)." );
        
        }
        { //::IFTDecayFunction2D::setGamma
        
            typedef void ( ::IFTDecayFunction2D::*setGamma_function_type)( double ) ;
            
            IFTDecayFunction2D_exposer.def( 
                "setGamma"
                , setGamma_function_type( &::IFTDecayFunction2D::setGamma )
                , ( bp::arg("gamma") )
                , "set angle between first lattice vector and X-axis of distribution (both in direct space)." );
        
        }
        { //::IFTDecayFunction2D::transformToStarBasis
        
            typedef void ( ::IFTDecayFunction2D::*transformToStarBasis_function_type)( double,double,double,double,double,double &,double & ) const;
            
            IFTDecayFunction2D_exposer.def( 
                "transformToStarBasis"
                , transformToStarBasis_function_type( &::IFTDecayFunction2D::transformToStarBasis )
                , ( bp::arg("qX"), bp::arg("qY"), bp::arg("alpha"), bp::arg("a"), bp::arg("b"), bp::arg("qa"), bp::arg("qb") )
                , "transform back to a*, b* basis:." );
        
        }
    }

}

// This file has been generated by Py++.

// BornAgain: simulate and fit scattering at grazing incidence 
//! @brief automatically generated boost::python code for PythonCoreAPI  

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter);
GCC_DIAG_OFF(missing-field-initializers);
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter);
GCC_DIAG_ON(missing-field-initializers);
#include "PythonCoreList.h"
#include "MaterialManager.pypp.h"

namespace bp = boost::python;

void register_MaterialManager_class(){

    { //::MaterialManager
        typedef bp::class_< MaterialManager, boost::noncopyable > MaterialManager_exposer_t;
        MaterialManager_exposer_t MaterialManager_exposer = MaterialManager_exposer_t( "MaterialManager", bp::no_init );
        bp::scope MaterialManager_scope( MaterialManager_exposer );
        { //::MaterialManager::deleteMaterial
        
            typedef bool ( ::MaterialManager::*deleteMaterial_function_type )( ::std::string const & ) ;
            
            MaterialManager_exposer.def( 
                "deleteMaterial"
                , deleteMaterial_function_type( &::MaterialManager::deleteMaterial )
                , ( bp::arg("name") ) );
        
        }
        { //::MaterialManager::getHomogeneousMagneticMaterial
        
            typedef ::IMaterial const * ( *getHomogeneousMagneticMaterial_function_type )( ::std::string const &,::complex_t const &,::kvector_t const & );
            
            MaterialManager_exposer.def( 
                "getHomogeneousMagneticMaterial"
                , getHomogeneousMagneticMaterial_function_type( &::MaterialManager::getHomogeneousMagneticMaterial )
                , ( bp::arg("name"), bp::arg("refractive_index"), bp::arg("magnetic_field") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::MaterialManager::getHomogeneousMagneticMaterial
        
            typedef ::IMaterial const * ( *getHomogeneousMagneticMaterial_function_type )( ::std::string const &,double,double,::kvector_t const & );
            
            MaterialManager_exposer.def( 
                "getHomogeneousMagneticMaterial"
                , getHomogeneousMagneticMaterial_function_type( &::MaterialManager::getHomogeneousMagneticMaterial )
                , ( bp::arg("name"), bp::arg("refractive_index_delta"), bp::arg("refractive_index_beta"), bp::arg("magnetic_field") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::MaterialManager::getHomogeneousMaterial
        
            typedef ::IMaterial const * ( *getHomogeneousMaterial_function_type )( ::std::string const &,::complex_t const & );
            
            MaterialManager_exposer.def( 
                "getHomogeneousMaterial"
                , getHomogeneousMaterial_function_type( &::MaterialManager::getHomogeneousMaterial )
                , ( bp::arg("name"), bp::arg("refractive_index") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::MaterialManager::getHomogeneousMaterial
        
            typedef ::IMaterial const * ( *getHomogeneousMaterial_function_type )( ::std::string const &,double,double );
            
            MaterialManager_exposer.def( 
                "getHomogeneousMaterial"
                , getHomogeneousMaterial_function_type( &::MaterialManager::getHomogeneousMaterial )
                , ( bp::arg("name"), bp::arg("refractive_index_delta"), bp::arg("refractive_index_beta") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::MaterialManager::getInvertedMaterial
        
            typedef ::IMaterial const * ( *getInvertedMaterial_function_type )( ::std::string const & );
            
            MaterialManager_exposer.def( 
                "getInvertedMaterial"
                , getInvertedMaterial_function_type( &::MaterialManager::getInvertedMaterial )
                , ( bp::arg("name") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::MaterialManager::getMaterial
        
            typedef ::IMaterial const * ( *getMaterial_function_type )( ::std::string const & );
            
            MaterialManager_exposer.def( 
                "getMaterial"
                , getMaterial_function_type( &::MaterialManager::getMaterial )
                , ( bp::arg("name") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::MaterialManager::getNumberOfMaterials
        
            typedef int ( *getNumberOfMaterials_function_type )(  );
            
            MaterialManager_exposer.def( 
                "getNumberOfMaterials"
                , getNumberOfMaterials_function_type( &::MaterialManager::getNumberOfMaterials ) );
        
        }
        { //::MaterialManager::setMaterialName
        
            typedef bool ( ::MaterialManager::*setMaterialName_function_type )( ::std::string const &,::std::string const & ) ;
            
            MaterialManager_exposer.def( 
                "setMaterialName"
                , setMaterialName_function_type( &::MaterialManager::setMaterialName )
                , ( bp::arg("old_name"), bp::arg("new_name") ) );
        
        }
        { //::MaterialManager::setMaterialRefractiveIndex
        
            typedef bool ( ::MaterialManager::*setMaterialRefractiveIndex_function_type )( ::std::string const &,::complex_t const & ) ;
            
            MaterialManager_exposer.def( 
                "setMaterialRefractiveIndex"
                , setMaterialRefractiveIndex_function_type( &::MaterialManager::setMaterialRefractiveIndex )
                , ( bp::arg("name"), bp::arg("index") ) );
        
        }
        MaterialManager_exposer.staticmethod( "getHomogeneousMagneticMaterial" );
        MaterialManager_exposer.staticmethod( "getHomogeneousMaterial" );
        MaterialManager_exposer.staticmethod( "getInvertedMaterial" );
        MaterialManager_exposer.staticmethod( "getMaterial" );
        MaterialManager_exposer.staticmethod( "getNumberOfMaterials" );
    }

}

// This file has been generated by Py++.

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter);
GCC_DIAG_OFF(missing-field-initializers);
#include "boost/python.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
GCC_DIAG_ON(unused-parameter);
GCC_DIAG_ON(missing-field-initializers);
#include "BasicVector3D.h"
#include "Bin.h"
#include "Crystal.h"
#include "DiffuseParticleInfo.h"
#include "FTDistributions.h"
#include "FormFactorBox.h"
#include "FormFactorCrystal.h"
#include "FormFactorCylinder.h"
#include "FormFactorDecoratorDebyeWaller.h"
#include "FormFactorFullSphere.h"
#include "FormFactorGauss.h"
#include "FormFactorLorentz.h"
#include "FormFactorParallelepiped.h"
#include "FormFactorPrism3.h"
#include "FormFactorPyramid.h"
#include "FormFactorSphereGaussianRadius.h"
#include "HomogeneousMaterial.h"
#include "ICloneable.h"
#include "IClusteredParticles.h"
#include "ICompositeSample.h"
#include "IDecoration.h"
#include "IFormFactor.h"
#include "IFormFactorBorn.h"
#include "IFormFactorDecorator.h"
#include "IInterferenceFunction.h"
#include "IMaterial.h"
#include "IParameterized.h"
#include "ISample.h"
#include "ISampleBuilder.h"
#include "ISelectionRule.h"
#include "ISingleton.h"
#include "Instrument.h"
#include "InterferenceFunction1DParaCrystal.h"
#include "InterferenceFunction2DLattice.h"
#include "InterferenceFunction2DParaCrystal.h"
#include "InterferenceFunctionNone.h"
#include "IResolutionFunction2D.h"
#include "Lattice.h"
#include "Lattice2DIFParameters.h"
#include "LatticeBasis.h"
#include "Layer.h"
#include "LayerDecorator.h"
#include "LayerRoughness.h"
#include "Lattice2DIFParameters.h"
#include "MaterialManager.h"
#include "MesoCrystal.h"
#include "MultiLayer.h"
#include "OpticalFresnel.h"
#include "ParameterPool.h"
#include "Particle.h"
#include "ParticleBuilder.h"
#include "ParticleCoreShell.h"
#include "ParticleDecoration.h"
#include "OutputData.h"
#include "OutputDataIOFactory.h"
#include "ParticleInfo.h"
#include "PositionParticleInfo.h"
#include "PythonOutputData.h"
#include "PythonPlusplusHelper.h"
#include "RealParameterWrapper.h"
#include "Rotate3D.h"
#include "Simulation.h"
#include "SimulationParameters.h"
#include "IStochasticParameter.h"
#include "ResolutionFunction2DSimple.h"
#include "StochasticGaussian.h"
#include "StochasticSampledParameter.h"
#include "StochasticDoubleGate.h"
#include "ITransform3D.h"
#include "Types.h"
#include "Units.h"
#include "RotateZ_3D.pypp.h"

namespace bp = boost::python;

struct RotateZ_3D_wrapper : Geometry::RotateZ_3D, bp::wrapper< Geometry::RotateZ_3D > {

    RotateZ_3D_wrapper(Geometry::RotateZ_3D const & arg )
    : Geometry::RotateZ_3D( arg )
      , bp::wrapper< Geometry::RotateZ_3D >(){
        // copy constructor
        
    }

    RotateZ_3D_wrapper(double a )
    : Geometry::RotateZ_3D( a )
      , bp::wrapper< Geometry::RotateZ_3D >(){
        // constructor
    
    }

    virtual void print( ::std::ostream & ostr ) const  {
        if( bp::override func_print = this->get_override( "print" ) )
            func_print( boost::ref(ostr) );
        else{
            this->Geometry::RotateZ_3D::print( boost::ref(ostr) );
        }
    }
    
    void default_print( ::std::ostream & ostr ) const  {
        Geometry::RotateZ_3D::print( boost::ref(ostr) );
    }

    virtual ::Geometry::BasicVector3D< double > transformed( ::Geometry::BasicVector3D< double > const & v ) const  {
        if( bp::override func_transformed = this->get_override( "transformed" ) )
            return func_transformed( boost::ref(v) );
        else{
            return this->Geometry::RotateZ_3D::transformed( boost::ref(v) );
        }
    }
    
    ::Geometry::BasicVector3D< double > default_transformed( ::Geometry::BasicVector3D< double > const & v ) const  {
        return Geometry::RotateZ_3D::transformed( boost::ref(v) );
    }

    virtual ::Geometry::BasicVector3D< std::complex< double > > transformed( ::Geometry::BasicVector3D< std::complex< double > > const & v ) const  {
        if( bp::override func_transformed = this->get_override( "transformed" ) )
            return func_transformed( boost::ref(v) );
        else{
            return this->Geometry::RotateZ_3D::transformed( boost::ref(v) );
        }
    }
    
    ::Geometry::BasicVector3D< std::complex< double > > default_transformed( ::Geometry::BasicVector3D< std::complex< double > > const & v ) const  {
        return Geometry::RotateZ_3D::transformed( boost::ref(v) );
    }

    virtual ::Geometry::PTransform3D inverse(  ) const  {
        if( bp::override func_inverse = this->get_override( "inverse" ) )
            return func_inverse(  );
        else{
            return this->Geometry::ITransform3D::inverse(  );
        }
    }
    
    ::Geometry::PTransform3D default_inverse(  ) const  {
        return Geometry::ITransform3D::inverse( );
    }

};

void register_RotateZ_3D_class(){

    bp::class_< RotateZ_3D_wrapper, bp::bases< Geometry::ITransform3D > >( "RotateZ_3D", bp::init< double >(( bp::arg("a") )) )    
        .def( 
            "print"
            , (void ( ::Geometry::RotateZ_3D::* )( ::std::ostream & ) const)(&::Geometry::RotateZ_3D::print)
            , (void ( RotateZ_3D_wrapper::* )( ::std::ostream & ) const)(&RotateZ_3D_wrapper::default_print)
            , ( bp::arg("ostr") ) )    
        .def( 
            "transformed"
            , (::Geometry::BasicVector3D< double > ( ::Geometry::RotateZ_3D::* )( ::Geometry::BasicVector3D< double > const & ) const)(&::Geometry::RotateZ_3D::transformed)
            , (::Geometry::BasicVector3D< double > ( RotateZ_3D_wrapper::* )( ::Geometry::BasicVector3D< double > const & ) const)(&RotateZ_3D_wrapper::default_transformed)
            , ( bp::arg("v") ) )    
        .def( 
            "transformed"
            , (::Geometry::BasicVector3D< std::complex< double > > ( ::Geometry::RotateZ_3D::* )( ::Geometry::BasicVector3D< std::complex< double > > const & ) const)(&::Geometry::RotateZ_3D::transformed)
            , (::Geometry::BasicVector3D< std::complex< double > > ( RotateZ_3D_wrapper::* )( ::Geometry::BasicVector3D< std::complex< double > > const & ) const)(&RotateZ_3D_wrapper::default_transformed)
            , ( bp::arg("v") ) )    
        .def( 
            "inverse"
            , (::Geometry::PTransform3D ( ::Geometry::ITransform3D::* )(  ) const)(&::Geometry::ITransform3D::inverse)
            , (::Geometry::PTransform3D ( RotateZ_3D_wrapper::* )(  ) const)(&RotateZ_3D_wrapper::default_inverse) );

}

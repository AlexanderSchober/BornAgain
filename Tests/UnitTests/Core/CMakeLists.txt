############################################################################
# CMakeLists.txt file for building and running unit tests
############################################################################

include_directories(
    ${BornAgainCore_INCLUDE_DIRS}
    ${Boost_INCLUDE_DIRS}
    ${EIGEN3_INCLUDE_DIR}
    ${GSL_INCLUDE_DIR}
    )
if(BORNAGAIN_OPENMPI)
    include_directories(${MPI_INCLUDE_PATH})
endif()

function(UNIT_TEST_DIRECTORY TEST_NAME SUBDIR LINK_LIB)
    enable_testing()

    include_directories(
        ${gtest_SOURCE_DIR}/include
        ${gtest_SOURCE_DIR}
        )

    file(GLOB INCLUDE_FILES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} "${SUBDIR}/*.h")

    # write compound include file
    list(SORT INCLUDE_FILES)
    set(TMP "/* Generated by CMake. Do not edit. */
#ifdef _MSC_VER
#define _VARIADIC_MAX 10
#endif
#include <gtest/gtest.h>
")
    foreach(FILE ${INCLUDE_FILES})
        set(TMP "${TMP}#include \"${FILE}\"\n")
    endforeach()
    set(TMP "${TMP}
struct ErrorStreamRedirect {
    ErrorStreamRedirect( std::streambuf * new_buffer )
        : old( std::cerr.rdbuf( new_buffer ) )
    { }

    ~ErrorStreamRedirect( ) {
        std::cerr.rdbuf( old )\;
    }

private:
    std::streambuf * old\;
}\;

int main(int argc, char** argv)
{
    std::cout << \"UnitTest::main ...\\n\"\;
    ::testing::InitGoogleTest(&argc, argv)\;

    // redirect std::cerr stream
    std::stringstream oss\;
    ErrorStreamRedirect redirecter( oss.rdbuf() )\;
    (void)redirecter\;

    // run all google tests
    return RUN_ALL_TESTS()\;
}
")
    set(TEST_SRC "_${TEST_NAME}.cpp")
    file(WRITE ${TEST_SRC} ${TMP})

    set(EXE ${TEST_NAME})
    add_executable(${EXE} ${TEST_SRC})
    target_link_libraries(${EXE} gtest ${LINK_LIB})

    # to build executable right in lib directory to not to have problems with finding libBornAgainCore.dll under Windows
    set_property(TARGET ${EXE} PROPERTY RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

    add_test(${TEST_NAME} ${EXE})

    # add execution of TestCore just after compilation
    add_custom_command(TARGET ${TEST_NAME} POST_BUILD COMMAND ${EXE})

endfunction()

UNIT_TEST_DIRECTORY(TestCore0 "0" ${BornAgainCore_LIBRARY})
UNIT_TEST_DIRECTORY(TestCore1 "1" ${BornAgainCore_LIBRARY})
UNIT_TEST_DIRECTORY(TestCore2 "2" ${BornAgainCore_LIBRARY})
UNIT_TEST_DIRECTORY(TestCore3 "3" ${BornAgainCore_LIBRARY})
UNIT_TEST_DIRECTORY(TestCore4 "4" ${BornAgainCore_LIBRARY})
UNIT_TEST_DIRECTORY(TestCore5 "5" ${BornAgainCore_LIBRARY})
UNIT_TEST_DIRECTORY(TestCore6 "6" ${BornAgainCore_LIBRARY})

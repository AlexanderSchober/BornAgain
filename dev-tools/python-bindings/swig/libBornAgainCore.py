# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libBornAgainCore', [dirname(__file__)])
        except ImportError:
            import _libBornAgainCore
            return _libBornAgainCore
        if fp is not None:
            try:
                _mod = imp.load_module('_libBornAgainCore', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _libBornAgainCore = swig_import_helper()
    del swig_import_helper
else:
    import _libBornAgainCore
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _libBornAgainCore.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _libBornAgainCore.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _libBornAgainCore.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _libBornAgainCore.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _libBornAgainCore.SwigPyIterator_equal(self, x)

    def copy(self):
        return _libBornAgainCore.SwigPyIterator_copy(self)

    def next(self):
        return _libBornAgainCore.SwigPyIterator_next(self)

    def __next__(self):
        return _libBornAgainCore.SwigPyIterator___next__(self)

    def previous(self):
        return _libBornAgainCore.SwigPyIterator_previous(self)

    def advance(self, n):
        return _libBornAgainCore.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _libBornAgainCore.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _libBornAgainCore.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _libBornAgainCore.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _libBornAgainCore.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _libBornAgainCore.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _libBornAgainCore.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _libBornAgainCore.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


_libBornAgainCore.SHARED_PTR_DISOWN_swigconstant(_libBornAgainCore)
SHARED_PTR_DISOWN = _libBornAgainCore.SHARED_PTR_DISOWN
class vdouble1d_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vdouble1d_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vdouble1d_t, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libBornAgainCore.vdouble1d_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libBornAgainCore.vdouble1d_t___nonzero__(self)

    def __bool__(self):
        return _libBornAgainCore.vdouble1d_t___bool__(self)

    def __len__(self):
        return _libBornAgainCore.vdouble1d_t___len__(self)

    def __getslice__(self, i, j):
        return _libBornAgainCore.vdouble1d_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libBornAgainCore.vdouble1d_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libBornAgainCore.vdouble1d_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libBornAgainCore.vdouble1d_t___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libBornAgainCore.vdouble1d_t___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libBornAgainCore.vdouble1d_t___setitem__(self, *args)

    def pop(self):
        return _libBornAgainCore.vdouble1d_t_pop(self)

    def append(self, x):
        return _libBornAgainCore.vdouble1d_t_append(self, x)

    def empty(self):
        return _libBornAgainCore.vdouble1d_t_empty(self)

    def size(self):
        return _libBornAgainCore.vdouble1d_t_size(self)

    def swap(self, v):
        return _libBornAgainCore.vdouble1d_t_swap(self, v)

    def begin(self):
        return _libBornAgainCore.vdouble1d_t_begin(self)

    def end(self):
        return _libBornAgainCore.vdouble1d_t_end(self)

    def rbegin(self):
        return _libBornAgainCore.vdouble1d_t_rbegin(self)

    def rend(self):
        return _libBornAgainCore.vdouble1d_t_rend(self)

    def clear(self):
        return _libBornAgainCore.vdouble1d_t_clear(self)

    def get_allocator(self):
        return _libBornAgainCore.vdouble1d_t_get_allocator(self)

    def pop_back(self):
        return _libBornAgainCore.vdouble1d_t_pop_back(self)

    def erase(self, *args):
        return _libBornAgainCore.vdouble1d_t_erase(self, *args)

    def __init__(self, *args):
        this = _libBornAgainCore.new_vdouble1d_t(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _libBornAgainCore.vdouble1d_t_push_back(self, x)

    def front(self):
        return _libBornAgainCore.vdouble1d_t_front(self)

    def back(self):
        return _libBornAgainCore.vdouble1d_t_back(self)

    def assign(self, n, x):
        return _libBornAgainCore.vdouble1d_t_assign(self, n, x)

    def resize(self, *args):
        return _libBornAgainCore.vdouble1d_t_resize(self, *args)

    def insert(self, *args):
        return _libBornAgainCore.vdouble1d_t_insert(self, *args)

    def reserve(self, n):
        return _libBornAgainCore.vdouble1d_t_reserve(self, n)

    def capacity(self):
        return _libBornAgainCore.vdouble1d_t_capacity(self)
    __swig_destroy__ = _libBornAgainCore.delete_vdouble1d_t
    __del__ = lambda self: None
vdouble1d_t_swigregister = _libBornAgainCore.vdouble1d_t_swigregister
vdouble1d_t_swigregister(vdouble1d_t)

class vdouble2d_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vdouble2d_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vdouble2d_t, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libBornAgainCore.vdouble2d_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libBornAgainCore.vdouble2d_t___nonzero__(self)

    def __bool__(self):
        return _libBornAgainCore.vdouble2d_t___bool__(self)

    def __len__(self):
        return _libBornAgainCore.vdouble2d_t___len__(self)

    def __getslice__(self, i, j):
        return _libBornAgainCore.vdouble2d_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libBornAgainCore.vdouble2d_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libBornAgainCore.vdouble2d_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libBornAgainCore.vdouble2d_t___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libBornAgainCore.vdouble2d_t___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libBornAgainCore.vdouble2d_t___setitem__(self, *args)

    def pop(self):
        return _libBornAgainCore.vdouble2d_t_pop(self)

    def append(self, x):
        return _libBornAgainCore.vdouble2d_t_append(self, x)

    def empty(self):
        return _libBornAgainCore.vdouble2d_t_empty(self)

    def size(self):
        return _libBornAgainCore.vdouble2d_t_size(self)

    def swap(self, v):
        return _libBornAgainCore.vdouble2d_t_swap(self, v)

    def begin(self):
        return _libBornAgainCore.vdouble2d_t_begin(self)

    def end(self):
        return _libBornAgainCore.vdouble2d_t_end(self)

    def rbegin(self):
        return _libBornAgainCore.vdouble2d_t_rbegin(self)

    def rend(self):
        return _libBornAgainCore.vdouble2d_t_rend(self)

    def clear(self):
        return _libBornAgainCore.vdouble2d_t_clear(self)

    def get_allocator(self):
        return _libBornAgainCore.vdouble2d_t_get_allocator(self)

    def pop_back(self):
        return _libBornAgainCore.vdouble2d_t_pop_back(self)

    def erase(self, *args):
        return _libBornAgainCore.vdouble2d_t_erase(self, *args)

    def __init__(self, *args):
        this = _libBornAgainCore.new_vdouble2d_t(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _libBornAgainCore.vdouble2d_t_push_back(self, x)

    def front(self):
        return _libBornAgainCore.vdouble2d_t_front(self)

    def back(self):
        return _libBornAgainCore.vdouble2d_t_back(self)

    def assign(self, n, x):
        return _libBornAgainCore.vdouble2d_t_assign(self, n, x)

    def resize(self, *args):
        return _libBornAgainCore.vdouble2d_t_resize(self, *args)

    def insert(self, *args):
        return _libBornAgainCore.vdouble2d_t_insert(self, *args)

    def reserve(self, n):
        return _libBornAgainCore.vdouble2d_t_reserve(self, n)

    def capacity(self):
        return _libBornAgainCore.vdouble2d_t_capacity(self)
    __swig_destroy__ = _libBornAgainCore.delete_vdouble2d_t
    __del__ = lambda self: None
vdouble2d_t_swigregister = _libBornAgainCore.vdouble2d_t_swigregister
vdouble2d_t_swigregister(vdouble2d_t)

class vector_integer_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_integer_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_integer_t, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libBornAgainCore.vector_integer_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libBornAgainCore.vector_integer_t___nonzero__(self)

    def __bool__(self):
        return _libBornAgainCore.vector_integer_t___bool__(self)

    def __len__(self):
        return _libBornAgainCore.vector_integer_t___len__(self)

    def __getslice__(self, i, j):
        return _libBornAgainCore.vector_integer_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libBornAgainCore.vector_integer_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libBornAgainCore.vector_integer_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libBornAgainCore.vector_integer_t___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libBornAgainCore.vector_integer_t___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libBornAgainCore.vector_integer_t___setitem__(self, *args)

    def pop(self):
        return _libBornAgainCore.vector_integer_t_pop(self)

    def append(self, x):
        return _libBornAgainCore.vector_integer_t_append(self, x)

    def empty(self):
        return _libBornAgainCore.vector_integer_t_empty(self)

    def size(self):
        return _libBornAgainCore.vector_integer_t_size(self)

    def swap(self, v):
        return _libBornAgainCore.vector_integer_t_swap(self, v)

    def begin(self):
        return _libBornAgainCore.vector_integer_t_begin(self)

    def end(self):
        return _libBornAgainCore.vector_integer_t_end(self)

    def rbegin(self):
        return _libBornAgainCore.vector_integer_t_rbegin(self)

    def rend(self):
        return _libBornAgainCore.vector_integer_t_rend(self)

    def clear(self):
        return _libBornAgainCore.vector_integer_t_clear(self)

    def get_allocator(self):
        return _libBornAgainCore.vector_integer_t_get_allocator(self)

    def pop_back(self):
        return _libBornAgainCore.vector_integer_t_pop_back(self)

    def erase(self, *args):
        return _libBornAgainCore.vector_integer_t_erase(self, *args)

    def __init__(self, *args):
        this = _libBornAgainCore.new_vector_integer_t(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _libBornAgainCore.vector_integer_t_push_back(self, x)

    def front(self):
        return _libBornAgainCore.vector_integer_t_front(self)

    def back(self):
        return _libBornAgainCore.vector_integer_t_back(self)

    def assign(self, n, x):
        return _libBornAgainCore.vector_integer_t_assign(self, n, x)

    def resize(self, *args):
        return _libBornAgainCore.vector_integer_t_resize(self, *args)

    def insert(self, *args):
        return _libBornAgainCore.vector_integer_t_insert(self, *args)

    def reserve(self, n):
        return _libBornAgainCore.vector_integer_t_reserve(self, n)

    def capacity(self):
        return _libBornAgainCore.vector_integer_t_capacity(self)
    __swig_destroy__ = _libBornAgainCore.delete_vector_integer_t
    __del__ = lambda self: None
vector_integer_t_swigregister = _libBornAgainCore.vector_integer_t_swigregister
vector_integer_t_swigregister(vector_integer_t)

class vector_longinteger_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_longinteger_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_longinteger_t, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libBornAgainCore.vector_longinteger_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libBornAgainCore.vector_longinteger_t___nonzero__(self)

    def __bool__(self):
        return _libBornAgainCore.vector_longinteger_t___bool__(self)

    def __len__(self):
        return _libBornAgainCore.vector_longinteger_t___len__(self)

    def __getslice__(self, i, j):
        return _libBornAgainCore.vector_longinteger_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libBornAgainCore.vector_longinteger_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libBornAgainCore.vector_longinteger_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libBornAgainCore.vector_longinteger_t___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libBornAgainCore.vector_longinteger_t___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libBornAgainCore.vector_longinteger_t___setitem__(self, *args)

    def pop(self):
        return _libBornAgainCore.vector_longinteger_t_pop(self)

    def append(self, x):
        return _libBornAgainCore.vector_longinteger_t_append(self, x)

    def empty(self):
        return _libBornAgainCore.vector_longinteger_t_empty(self)

    def size(self):
        return _libBornAgainCore.vector_longinteger_t_size(self)

    def swap(self, v):
        return _libBornAgainCore.vector_longinteger_t_swap(self, v)

    def begin(self):
        return _libBornAgainCore.vector_longinteger_t_begin(self)

    def end(self):
        return _libBornAgainCore.vector_longinteger_t_end(self)

    def rbegin(self):
        return _libBornAgainCore.vector_longinteger_t_rbegin(self)

    def rend(self):
        return _libBornAgainCore.vector_longinteger_t_rend(self)

    def clear(self):
        return _libBornAgainCore.vector_longinteger_t_clear(self)

    def get_allocator(self):
        return _libBornAgainCore.vector_longinteger_t_get_allocator(self)

    def pop_back(self):
        return _libBornAgainCore.vector_longinteger_t_pop_back(self)

    def erase(self, *args):
        return _libBornAgainCore.vector_longinteger_t_erase(self, *args)

    def __init__(self, *args):
        this = _libBornAgainCore.new_vector_longinteger_t(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _libBornAgainCore.vector_longinteger_t_push_back(self, x)

    def front(self):
        return _libBornAgainCore.vector_longinteger_t_front(self)

    def back(self):
        return _libBornAgainCore.vector_longinteger_t_back(self)

    def assign(self, n, x):
        return _libBornAgainCore.vector_longinteger_t_assign(self, n, x)

    def resize(self, *args):
        return _libBornAgainCore.vector_longinteger_t_resize(self, *args)

    def insert(self, *args):
        return _libBornAgainCore.vector_longinteger_t_insert(self, *args)

    def reserve(self, n):
        return _libBornAgainCore.vector_longinteger_t_reserve(self, n)

    def capacity(self):
        return _libBornAgainCore.vector_longinteger_t_capacity(self)
    __swig_destroy__ = _libBornAgainCore.delete_vector_longinteger_t
    __del__ = lambda self: None
vector_longinteger_t_swigregister = _libBornAgainCore.vector_longinteger_t_swigregister
vector_longinteger_t_swigregister(vector_longinteger_t)

class vector_complex_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_complex_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_complex_t, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libBornAgainCore.vector_complex_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libBornAgainCore.vector_complex_t___nonzero__(self)

    def __bool__(self):
        return _libBornAgainCore.vector_complex_t___bool__(self)

    def __len__(self):
        return _libBornAgainCore.vector_complex_t___len__(self)

    def __getslice__(self, i, j):
        return _libBornAgainCore.vector_complex_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libBornAgainCore.vector_complex_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libBornAgainCore.vector_complex_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libBornAgainCore.vector_complex_t___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libBornAgainCore.vector_complex_t___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libBornAgainCore.vector_complex_t___setitem__(self, *args)

    def pop(self):
        return _libBornAgainCore.vector_complex_t_pop(self)

    def append(self, x):
        return _libBornAgainCore.vector_complex_t_append(self, x)

    def empty(self):
        return _libBornAgainCore.vector_complex_t_empty(self)

    def size(self):
        return _libBornAgainCore.vector_complex_t_size(self)

    def swap(self, v):
        return _libBornAgainCore.vector_complex_t_swap(self, v)

    def begin(self):
        return _libBornAgainCore.vector_complex_t_begin(self)

    def end(self):
        return _libBornAgainCore.vector_complex_t_end(self)

    def rbegin(self):
        return _libBornAgainCore.vector_complex_t_rbegin(self)

    def rend(self):
        return _libBornAgainCore.vector_complex_t_rend(self)

    def clear(self):
        return _libBornAgainCore.vector_complex_t_clear(self)

    def get_allocator(self):
        return _libBornAgainCore.vector_complex_t_get_allocator(self)

    def pop_back(self):
        return _libBornAgainCore.vector_complex_t_pop_back(self)

    def erase(self, *args):
        return _libBornAgainCore.vector_complex_t_erase(self, *args)

    def __init__(self, *args):
        this = _libBornAgainCore.new_vector_complex_t(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _libBornAgainCore.vector_complex_t_push_back(self, x)

    def front(self):
        return _libBornAgainCore.vector_complex_t_front(self)

    def back(self):
        return _libBornAgainCore.vector_complex_t_back(self)

    def assign(self, n, x):
        return _libBornAgainCore.vector_complex_t_assign(self, n, x)

    def resize(self, *args):
        return _libBornAgainCore.vector_complex_t_resize(self, *args)

    def insert(self, *args):
        return _libBornAgainCore.vector_complex_t_insert(self, *args)

    def reserve(self, n):
        return _libBornAgainCore.vector_complex_t_reserve(self, n)

    def capacity(self):
        return _libBornAgainCore.vector_complex_t_capacity(self)
    __swig_destroy__ = _libBornAgainCore.delete_vector_complex_t
    __del__ = lambda self: None
vector_complex_t_swigregister = _libBornAgainCore.vector_complex_t_swigregister
vector_complex_t_swigregister(vector_complex_t)

class vector_string_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_string_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_string_t, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libBornAgainCore.vector_string_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libBornAgainCore.vector_string_t___nonzero__(self)

    def __bool__(self):
        return _libBornAgainCore.vector_string_t___bool__(self)

    def __len__(self):
        return _libBornAgainCore.vector_string_t___len__(self)

    def __getslice__(self, i, j):
        return _libBornAgainCore.vector_string_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libBornAgainCore.vector_string_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libBornAgainCore.vector_string_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libBornAgainCore.vector_string_t___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libBornAgainCore.vector_string_t___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libBornAgainCore.vector_string_t___setitem__(self, *args)

    def pop(self):
        return _libBornAgainCore.vector_string_t_pop(self)

    def append(self, x):
        return _libBornAgainCore.vector_string_t_append(self, x)

    def empty(self):
        return _libBornAgainCore.vector_string_t_empty(self)

    def size(self):
        return _libBornAgainCore.vector_string_t_size(self)

    def swap(self, v):
        return _libBornAgainCore.vector_string_t_swap(self, v)

    def begin(self):
        return _libBornAgainCore.vector_string_t_begin(self)

    def end(self):
        return _libBornAgainCore.vector_string_t_end(self)

    def rbegin(self):
        return _libBornAgainCore.vector_string_t_rbegin(self)

    def rend(self):
        return _libBornAgainCore.vector_string_t_rend(self)

    def clear(self):
        return _libBornAgainCore.vector_string_t_clear(self)

    def get_allocator(self):
        return _libBornAgainCore.vector_string_t_get_allocator(self)

    def pop_back(self):
        return _libBornAgainCore.vector_string_t_pop_back(self)

    def erase(self, *args):
        return _libBornAgainCore.vector_string_t_erase(self, *args)

    def __init__(self, *args):
        this = _libBornAgainCore.new_vector_string_t(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _libBornAgainCore.vector_string_t_push_back(self, x)

    def front(self):
        return _libBornAgainCore.vector_string_t_front(self)

    def back(self):
        return _libBornAgainCore.vector_string_t_back(self)

    def assign(self, n, x):
        return _libBornAgainCore.vector_string_t_assign(self, n, x)

    def resize(self, *args):
        return _libBornAgainCore.vector_string_t_resize(self, *args)

    def insert(self, *args):
        return _libBornAgainCore.vector_string_t_insert(self, *args)

    def reserve(self, n):
        return _libBornAgainCore.vector_string_t_reserve(self, n)

    def capacity(self):
        return _libBornAgainCore.vector_string_t_capacity(self)
    __swig_destroy__ = _libBornAgainCore.delete_vector_string_t
    __del__ = lambda self: None
vector_string_t_swigregister = _libBornAgainCore.vector_string_t_swigregister
vector_string_t_swigregister(vector_string_t)


_libBornAgainCore.GCCXML_SKIP_THIS_swigconstant(_libBornAgainCore)
GCCXML_SKIP_THIS = _libBornAgainCore.GCCXML_SKIP_THIS
class AttLimits(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AttLimits, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AttLimits, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _libBornAgainCore.new_AttLimits()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_AttLimits
    __del__ = lambda self: None

    def hasLowerLimit(self):
        return _libBornAgainCore.AttLimits_hasLowerLimit(self)

    def getLowerLimit(self):
        return _libBornAgainCore.AttLimits_getLowerLimit(self)

    def setLowerLimit(self, value):
        return _libBornAgainCore.AttLimits_setLowerLimit(self, value)

    def removeLowerLimit(self):
        return _libBornAgainCore.AttLimits_removeLowerLimit(self)

    def hasUpperLimit(self):
        return _libBornAgainCore.AttLimits_hasUpperLimit(self)

    def getUpperLimit(self):
        return _libBornAgainCore.AttLimits_getUpperLimit(self)

    def setUpperLimit(self, value):
        return _libBornAgainCore.AttLimits_setUpperLimit(self, value)

    def removeUpperLimit(self):
        return _libBornAgainCore.AttLimits_removeUpperLimit(self)

    def hasLowerAndUpperLimits(self):
        return _libBornAgainCore.AttLimits_hasLowerAndUpperLimits(self)

    def setFixed(self, is_fixed):
        return _libBornAgainCore.AttLimits_setFixed(self, is_fixed)

    def isFixed(self):
        return _libBornAgainCore.AttLimits_isFixed(self)

    def setLimits(self, xmin, xmax):
        return _libBornAgainCore.AttLimits_setLimits(self, xmin, xmax)

    def removeLimits(self):
        return _libBornAgainCore.AttLimits_removeLimits(self)

    def isInRange(self, value):
        return _libBornAgainCore.AttLimits_isInRange(self, value)
    __swig_getmethods__["lowerLimited"] = lambda x: _libBornAgainCore.AttLimits_lowerLimited
    if _newclass:
        lowerLimited = staticmethod(_libBornAgainCore.AttLimits_lowerLimited)
    __swig_getmethods__["positive"] = lambda x: _libBornAgainCore.AttLimits_positive
    if _newclass:
        positive = staticmethod(_libBornAgainCore.AttLimits_positive)
    __swig_getmethods__["n_positive"] = lambda x: _libBornAgainCore.AttLimits_n_positive
    if _newclass:
        n_positive = staticmethod(_libBornAgainCore.AttLimits_n_positive)
    __swig_getmethods__["upperLimited"] = lambda x: _libBornAgainCore.AttLimits_upperLimited
    if _newclass:
        upperLimited = staticmethod(_libBornAgainCore.AttLimits_upperLimited)
    __swig_getmethods__["limited"] = lambda x: _libBornAgainCore.AttLimits_limited
    if _newclass:
        limited = staticmethod(_libBornAgainCore.AttLimits_limited)
    __swig_getmethods__["limitless"] = lambda x: _libBornAgainCore.AttLimits_limitless
    if _newclass:
        limitless = staticmethod(_libBornAgainCore.AttLimits_limitless)
    __swig_getmethods__["fixed"] = lambda x: _libBornAgainCore.AttLimits_fixed
    if _newclass:
        fixed = staticmethod(_libBornAgainCore.AttLimits_fixed)

    def __eq__(self, other):
        return _libBornAgainCore.AttLimits___eq__(self, other)

    def __ne__(self, other):
        return _libBornAgainCore.AttLimits___ne__(self, other)
AttLimits_swigregister = _libBornAgainCore.AttLimits_swigregister
AttLimits_swigregister(AttLimits)

def AttLimits_lowerLimited(bound_value):
    return _libBornAgainCore.AttLimits_lowerLimited(bound_value)
AttLimits_lowerLimited = _libBornAgainCore.AttLimits_lowerLimited

def AttLimits_positive():
    return _libBornAgainCore.AttLimits_positive()
AttLimits_positive = _libBornAgainCore.AttLimits_positive

def AttLimits_n_positive():
    return _libBornAgainCore.AttLimits_n_positive()
AttLimits_n_positive = _libBornAgainCore.AttLimits_n_positive

def AttLimits_upperLimited(bound_value):
    return _libBornAgainCore.AttLimits_upperLimited(bound_value)
AttLimits_upperLimited = _libBornAgainCore.AttLimits_upperLimited

def AttLimits_limited(left_bound_value, right_bound_value):
    return _libBornAgainCore.AttLimits_limited(left_bound_value, right_bound_value)
AttLimits_limited = _libBornAgainCore.AttLimits_limited

def AttLimits_limitless():
    return _libBornAgainCore.AttLimits_limitless()
AttLimits_limitless = _libBornAgainCore.AttLimits_limitless

def AttLimits_fixed():
    return _libBornAgainCore.AttLimits_fixed()
AttLimits_fixed = _libBornAgainCore.AttLimits_fixed


def toComplexVector(real_vector):
    return _libBornAgainCore.toComplexVector(real_vector)
toComplexVector = _libBornAgainCore.toComplexVector

def GetMajorVersionNumber():
    return _libBornAgainCore.GetMajorVersionNumber()
GetMajorVersionNumber = _libBornAgainCore.GetMajorVersionNumber

def GetMinorVersionNumber():
    return _libBornAgainCore.GetMinorVersionNumber()
GetMinorVersionNumber = _libBornAgainCore.GetMinorVersionNumber

def GetPatchVersionNumber():
    return _libBornAgainCore.GetPatchVersionNumber()
GetPatchVersionNumber = _libBornAgainCore.GetPatchVersionNumber

def GetName():
    return _libBornAgainCore.GetName()
GetName = _libBornAgainCore.GetName

def GetVersionNumber():
    return _libBornAgainCore.GetVersionNumber()
GetVersionNumber = _libBornAgainCore.GetVersionNumber
class Bin1D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bin1D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bin1D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libBornAgainCore.new_Bin1D(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["m_lower"] = _libBornAgainCore.Bin1D_m_lower_set
    __swig_getmethods__["m_lower"] = _libBornAgainCore.Bin1D_m_lower_get
    if _newclass:
        m_lower = _swig_property(_libBornAgainCore.Bin1D_m_lower_get, _libBornAgainCore.Bin1D_m_lower_set)
    __swig_setmethods__["m_upper"] = _libBornAgainCore.Bin1D_m_upper_set
    __swig_getmethods__["m_upper"] = _libBornAgainCore.Bin1D_m_upper_get
    if _newclass:
        m_upper = _swig_property(_libBornAgainCore.Bin1D_m_upper_get, _libBornAgainCore.Bin1D_m_upper_set)

    def getMidPoint(self):
        return _libBornAgainCore.Bin1D_getMidPoint(self)

    def getBinSize(self):
        return _libBornAgainCore.Bin1D_getBinSize(self)
    __swig_destroy__ = _libBornAgainCore.delete_Bin1D
    __del__ = lambda self: None
Bin1D_swigregister = _libBornAgainCore.Bin1D_swigregister
Bin1D_swigregister(Bin1D)
cvar = _libBornAgainCore.cvar
PI2 = cvar.PI2
major_version_number = cvar.major_version_number
minor_version_number = cvar.minor_version_number
patch_version_number = cvar.patch_version_number

class Bin1DKVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bin1DKVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bin1DKVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libBornAgainCore.new_Bin1DKVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def getMidPoint(self):
        return _libBornAgainCore.Bin1DKVector_getMidPoint(self)

    def getDelta(self):
        return _libBornAgainCore.Bin1DKVector_getDelta(self)
    __swig_setmethods__["m_q_lower"] = _libBornAgainCore.Bin1DKVector_m_q_lower_set
    __swig_getmethods__["m_q_lower"] = _libBornAgainCore.Bin1DKVector_m_q_lower_get
    if _newclass:
        m_q_lower = _swig_property(_libBornAgainCore.Bin1DKVector_m_q_lower_get, _libBornAgainCore.Bin1DKVector_m_q_lower_set)
    __swig_setmethods__["m_q_upper"] = _libBornAgainCore.Bin1DKVector_m_q_upper_set
    __swig_getmethods__["m_q_upper"] = _libBornAgainCore.Bin1DKVector_m_q_upper_get
    if _newclass:
        m_q_upper = _swig_property(_libBornAgainCore.Bin1DKVector_m_q_upper_get, _libBornAgainCore.Bin1DKVector_m_q_upper_set)
    __swig_destroy__ = _libBornAgainCore.delete_Bin1DKVector
    __del__ = lambda self: None
Bin1DKVector_swigregister = _libBornAgainCore.Bin1DKVector_swigregister
Bin1DKVector_swigregister(Bin1DKVector)

class Bin1DCVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bin1DCVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bin1DCVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libBornAgainCore.new_Bin1DCVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def getMidPoint(self):
        return _libBornAgainCore.Bin1DCVector_getMidPoint(self)

    def getDelta(self):
        return _libBornAgainCore.Bin1DCVector_getDelta(self)
    __swig_setmethods__["m_q_lower"] = _libBornAgainCore.Bin1DCVector_m_q_lower_set
    __swig_getmethods__["m_q_lower"] = _libBornAgainCore.Bin1DCVector_m_q_lower_get
    if _newclass:
        m_q_lower = _swig_property(_libBornAgainCore.Bin1DCVector_m_q_lower_get, _libBornAgainCore.Bin1DCVector_m_q_lower_set)
    __swig_setmethods__["m_q_upper"] = _libBornAgainCore.Bin1DCVector_m_q_upper_set
    __swig_getmethods__["m_q_upper"] = _libBornAgainCore.Bin1DCVector_m_q_upper_get
    if _newclass:
        m_q_upper = _swig_property(_libBornAgainCore.Bin1DCVector_m_q_upper_get, _libBornAgainCore.Bin1DCVector_m_q_upper_set)
    __swig_destroy__ = _libBornAgainCore.delete_Bin1DCVector
    __del__ = lambda self: None
Bin1DCVector_swigregister = _libBornAgainCore.Bin1DCVector_swigregister
Bin1DCVector_swigregister(Bin1DCVector)

class IAxis(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IAxis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IAxis, name)
    __repr__ = _swig_repr

    def __init__(self, name):
        if self.__class__ == IAxis:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_IAxis(_self, name)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def clone(self):
        return _libBornAgainCore.IAxis_clone(self)

    def createDoubleBinSize(self):
        return _libBornAgainCore.IAxis_createDoubleBinSize(self)
    __swig_destroy__ = _libBornAgainCore.delete_IAxis
    __del__ = lambda self: None

    def getSize(self):
        return _libBornAgainCore.IAxis_getSize(self)

    def getName(self):
        return _libBornAgainCore.IAxis_getName(self)

    def setName(self, name):
        return _libBornAgainCore.IAxis_setName(self, name)

    def getBin(self, index):
        return _libBornAgainCore.IAxis_getBin(self, index)

    def getMin(self):
        return _libBornAgainCore.IAxis_getMin(self)

    def getMax(self):
        return _libBornAgainCore.IAxis_getMax(self)

    def getBinCenter(self, index):
        return _libBornAgainCore.IAxis_getBinCenter(self, index)

    def findClosestIndex(self, value):
        return _libBornAgainCore.IAxis_findClosestIndex(self, value)

    def getBinCenters(self):
        return _libBornAgainCore.IAxis_getBinCenters(self)

    def getBinBoundaries(self):
        return _libBornAgainCore.IAxis_getBinBoundaries(self)

    def createClippedAxis(self, left, right):
        return _libBornAgainCore.IAxis_createClippedAxis(self, left, right)

    def contains(self, value):
        return _libBornAgainCore.IAxis_contains(self, value)

    def _print(self, ostr):
        return _libBornAgainCore.IAxis__print(self, ostr)

    def equals(self, other):
        return _libBornAgainCore.IAxis_equals(self, other)

    def __ne__(self, rhs):
        return _libBornAgainCore.IAxis___ne__(self, rhs)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_IAxis(self)
        return weakref_proxy(self)
IAxis_swigregister = _libBornAgainCore.IAxis_swigregister
IAxis_swigregister(IAxis)


def HaveSameNameAndShape(left, right):
    return _libBornAgainCore.HaveSameNameAndShape(left, right)
HaveSameNameAndShape = _libBornAgainCore.HaveSameNameAndShape
class VariableBinAxis(IAxis):
    __swig_setmethods__ = {}
    for _s in [IAxis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VariableBinAxis, name, value)
    __swig_getmethods__ = {}
    for _s in [IAxis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VariableBinAxis, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_VariableBinAxis
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.VariableBinAxis_clone(self)

    def getSize(self):
        return _libBornAgainCore.VariableBinAxis_getSize(self)

    def getBin(self, index):
        return _libBornAgainCore.VariableBinAxis_getBin(self, index)

    def getMin(self):
        return _libBornAgainCore.VariableBinAxis_getMin(self)

    def getMax(self):
        return _libBornAgainCore.VariableBinAxis_getMax(self)

    def getBinCenter(self, index):
        return _libBornAgainCore.VariableBinAxis_getBinCenter(self, index)

    def findClosestIndex(self, value):
        return _libBornAgainCore.VariableBinAxis_findClosestIndex(self, value)

    def getBinCenters(self):
        return _libBornAgainCore.VariableBinAxis_getBinCenters(self)

    def getBinBoundaries(self):
        return _libBornAgainCore.VariableBinAxis_getBinBoundaries(self)

    def createClippedAxis(self, left, right):
        return _libBornAgainCore.VariableBinAxis_createClippedAxis(self, left, right)

    def __init__(self, *args):
        if self.__class__ == VariableBinAxis:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_VariableBinAxis(_self, *args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def _print(self, ostr):
        return _libBornAgainCore.VariableBinAxis__print(self, ostr)

    def equals(self, other):
        return _libBornAgainCore.VariableBinAxis_equals(self, other)

    def __getitem__(self, i):
        return _libBornAgainCore.VariableBinAxis___getitem__(self, i)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_VariableBinAxis(self)
        return weakref_proxy(self)
VariableBinAxis_swigregister = _libBornAgainCore.VariableBinAxis_swigregister
VariableBinAxis_swigregister(VariableBinAxis)

class ConstKBinAxis(VariableBinAxis):
    __swig_setmethods__ = {}
    for _s in [VariableBinAxis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstKBinAxis, name, value)
    __swig_getmethods__ = {}
    for _s in [VariableBinAxis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstKBinAxis, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_ConstKBinAxis
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.ConstKBinAxis_clone(self)

    def createClippedAxis(self, left, right):
        return _libBornAgainCore.ConstKBinAxis_createClippedAxis(self, left, right)

    def __init__(self, *args):
        if self.__class__ == ConstKBinAxis:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_ConstKBinAxis(_self, *args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def _print(self, ostr):
        return _libBornAgainCore.ConstKBinAxis__print(self, ostr)

    def equals(self, other):
        return _libBornAgainCore.ConstKBinAxis_equals(self, other)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_ConstKBinAxis(self)
        return weakref_proxy(self)
ConstKBinAxis_swigregister = _libBornAgainCore.ConstKBinAxis_swigregister
ConstKBinAxis_swigregister(ConstKBinAxis)

class ICloneable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICloneable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ICloneable, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == ICloneable:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_ICloneable(_self, )
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_ICloneable
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.ICloneable_clone(self)

    def transferToCPP(self):
        return self.__disown__()
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_ICloneable(self)
        return weakref_proxy(self)
ICloneable_swigregister = _libBornAgainCore.ICloneable_swigregister
ICloneable_swigregister(ICloneable)

class INamed(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, INamed, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, INamed, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == INamed:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_INamed(_self, *args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_INamed
    __del__ = lambda self: None

    def getName(self):
        return _libBornAgainCore.INamed_getName(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_INamed(self)
        return weakref_proxy(self)
INamed_swigregister = _libBornAgainCore.INamed_swigregister
INamed_swigregister(INamed)

class INamedShared(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, INamedShared, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, INamedShared, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == INamedShared:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_INamedShared(_self, *args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_INamedShared
    __del__ = lambda self: None

    def getName(self):
        return _libBornAgainCore.INamedShared_getName(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_INamedShared(self)
        return weakref_proxy(self)
INamedShared_swigregister = _libBornAgainCore.INamedShared_swigregister
INamedShared_swigregister(INamedShared)

class IParameterized(INamed):
    __swig_setmethods__ = {}
    for _s in [INamed]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IParameterized, name, value)
    __swig_getmethods__ = {}
    for _s in [INamed]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IParameterized, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == IParameterized:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_IParameterized(_self, *args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_IParameterized
    __del__ = lambda self: None

    def getParameterPool(self):
        return _libBornAgainCore.IParameterized_getParameterPool(self)

    def createParameterTree(self):
        return _libBornAgainCore.IParameterized_createParameterTree(self)

    def printParameters(self):
        return _libBornAgainCore.IParameterized_printParameters(self)

    def registerParameter(self, *args):
        return _libBornAgainCore.IParameterized_registerParameter(self, *args)

    def setParameterValue(self, name, value):
        return _libBornAgainCore.IParameterized_setParameterValue(self, name, value)

    def clearParameterPool(self):
        return _libBornAgainCore.IParameterized_clearParameterPool(self)

    def addParametersToExternalPool(self, path, external_pool, copy_number=-1):
        return _libBornAgainCore.IParameterized_addParametersToExternalPool(self, path, external_pool, copy_number)

    def _print(self, ostr):
        return _libBornAgainCore.IParameterized__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.IParameterized_init_parameters(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_IParameterized(self)
        return weakref_proxy(self)
IParameterized_swigregister = _libBornAgainCore.IParameterized_swigregister
IParameterized_swigregister(IParameterized)

class ParameterPattern(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParameterPattern, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParameterPattern, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libBornAgainCore.new_ParameterPattern(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def beginsWith(self, start_type):
        return _libBornAgainCore.ParameterPattern_beginsWith(self, start_type)

    def add(self, object_type):
        return _libBornAgainCore.ParameterPattern_add(self, object_type)

    def toStdString(self):
        return _libBornAgainCore.ParameterPattern_toStdString(self)
    __swig_destroy__ = _libBornAgainCore.delete_ParameterPattern
    __del__ = lambda self: None
ParameterPattern_swigregister = _libBornAgainCore.ParameterPattern_swigregister
ParameterPattern_swigregister(ParameterPattern)

class IParameterizedShared(INamedShared):
    __swig_setmethods__ = {}
    for _s in [INamedShared]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IParameterizedShared, name, value)
    __swig_getmethods__ = {}
    for _s in [INamedShared]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IParameterizedShared, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == IParameterizedShared:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_IParameterizedShared(_self, *args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_IParameterizedShared
    __del__ = lambda self: None

    def getParameterPool(self):
        return _libBornAgainCore.IParameterizedShared_getParameterPool(self)

    def createParameterTree(self):
        return _libBornAgainCore.IParameterizedShared_createParameterTree(self)

    def printParameters(self):
        return _libBornAgainCore.IParameterizedShared_printParameters(self)

    def setParameterValue(self, name, value):
        return _libBornAgainCore.IParameterizedShared_setParameterValue(self, name, value)

    def clearParameterPool(self):
        return _libBornAgainCore.IParameterizedShared_clearParameterPool(self)

    def addParametersToExternalPool(self, path, external_pool, copy_number=-1):
        return _libBornAgainCore.IParameterizedShared_addParametersToExternalPool(self, path, external_pool, copy_number)

    def _print(self, ostr):
        return _libBornAgainCore.IParameterizedShared__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.IParameterizedShared_init_parameters(self)

    def registerParameter(self, *args):
        return _libBornAgainCore.IParameterizedShared_registerParameter(self, *args)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_IParameterizedShared(self)
        return weakref_proxy(self)
IParameterizedShared_swigregister = _libBornAgainCore.IParameterizedShared_swigregister
IParameterizedShared_swigregister(IParameterizedShared)

class ISample(ICloneable, IParameterized):
    __swig_setmethods__ = {}
    for _s in [ICloneable, IParameterized]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ISample, name, value)
    __swig_getmethods__ = {}
    for _s in [ICloneable, IParameterized]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ISample, name)
    __repr__ = _swig_repr

    def clone(self):
        return _libBornAgainCore.ISample_clone(self)

    def cloneInvertB(self):
        return _libBornAgainCore.ISample_cloneInvertB(self)

    def accept(self, p_visitor):
        return _libBornAgainCore.ISample_accept(self, p_visitor)

    def createDWBASimulation(self):
        return _libBornAgainCore.ISample_createDWBASimulation(self)

    def printSampleTree(self):
        return _libBornAgainCore.ISample_printSampleTree(self)

    def containsMagneticMaterial(self):
        return _libBornAgainCore.ISample_containsMagneticMaterial(self)

    def getChildren(self):
        return _libBornAgainCore.ISample_getChildren(self)

    def size(self):
        return _libBornAgainCore.ISample_size(self)

    def __init__(self):
        if self.__class__ == ISample:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_ISample(_self, )
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_ISample
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_ISample(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.ISample__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.ISample_init_parameters(self)
ISample_swigregister = _libBornAgainCore.ISample_swigregister
ISample_swigregister(ISample)

class ICompositeSample(ISample):
    __swig_setmethods__ = {}
    for _s in [ISample]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICompositeSample, name, value)
    __swig_getmethods__ = {}
    for _s in [ISample]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ICompositeSample, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == ICompositeSample:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_ICompositeSample(_self, )
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_ICompositeSample
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.ICompositeSample_clone(self)

    def accept(self, visitor):
        return _libBornAgainCore.ICompositeSample_accept(self, visitor)

    def registerChild(self, sample):
        return _libBornAgainCore.ICompositeSample_registerChild(self, sample)

    def deregisterChild(self, sample):
        return _libBornAgainCore.ICompositeSample_deregisterChild(self, sample)

    def getChildren(self):
        return _libBornAgainCore.ICompositeSample_getChildren(self)

    def size(self):
        return _libBornAgainCore.ICompositeSample_size(self)

    def addParametersToExternalPool(self, path, external_pool, copy_number=-1):
        return _libBornAgainCore.ICompositeSample_addParametersToExternalPool(self, path, external_pool, copy_number)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_ICompositeSample(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.ICompositeSample__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.ICompositeSample_init_parameters(self)
ICompositeSample_swigregister = _libBornAgainCore.ICompositeSample_swigregister
ICompositeSample_swigregister(ICompositeSample)

class IClusteredParticles(ICompositeSample):
    __swig_setmethods__ = {}
    for _s in [ICompositeSample]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IClusteredParticles, name, value)
    __swig_getmethods__ = {}
    for _s in [ICompositeSample]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IClusteredParticles, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == IClusteredParticles:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_IClusteredParticles(_self, )
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_IClusteredParticles
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.IClusteredParticles_clone(self)

    def cloneInvertB(self):
        return _libBornAgainCore.IClusteredParticles_cloneInvertB(self)

    def accept(self, visitor):
        return _libBornAgainCore.IClusteredParticles_accept(self, visitor)

    def setAmbientMaterial(self, material):
        return _libBornAgainCore.IClusteredParticles_setAmbientMaterial(self, material)

    def getAmbientMaterial(self):
        return _libBornAgainCore.IClusteredParticles_getAmbientMaterial(self)

    def createTotalFormFactor(self, meso_crystal_form_factor, p_rotation, translation):
        return _libBornAgainCore.IClusteredParticles_createTotalFormFactor(self, meso_crystal_form_factor, p_rotation, translation)

    def applyRotation(self, rotation):
        return _libBornAgainCore.IClusteredParticles_applyRotation(self, rotation)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_IClusteredParticles(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.IClusteredParticles__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.IClusteredParticles_init_parameters(self)
IClusteredParticles_swigregister = _libBornAgainCore.IClusteredParticles_swigregister
IClusteredParticles_swigregister(IClusteredParticles)

class IShape2D(ICloneable):
    __swig_setmethods__ = {}
    for _s in [ICloneable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IShape2D, name, value)
    __swig_getmethods__ = {}
    for _s in [ICloneable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IShape2D, name)
    __repr__ = _swig_repr

    def clone(self):
        return _libBornAgainCore.IShape2D_clone(self)

    def contains(self, *args):
        return _libBornAgainCore.IShape2D_contains(self, *args)

    def _print(self, ostr):
        return _libBornAgainCore.IShape2D__print(self, ostr)

    def __init__(self):
        if self.__class__ == IShape2D:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_IShape2D(_self, )
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_IShape2D
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_IShape2D(self)
        return weakref_proxy(self)
IShape2D_swigregister = _libBornAgainCore.IShape2D_swigregister
IShape2D_swigregister(IShape2D)

class Crystal(IClusteredParticles):
    __swig_setmethods__ = {}
    for _s in [IClusteredParticles]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Crystal, name, value)
    __swig_getmethods__ = {}
    for _s in [IClusteredParticles]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Crystal, name)
    __repr__ = _swig_repr

    def __init__(self, lattice_basis, lattice):
        if self.__class__ == Crystal:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_Crystal(_self, lattice_basis, lattice)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_Crystal
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.Crystal_clone(self)

    def cloneInvertB(self):
        return _libBornAgainCore.Crystal_cloneInvertB(self)

    def accept(self, visitor):
        return _libBornAgainCore.Crystal_accept(self, visitor)

    def setAmbientMaterial(self, material):
        return _libBornAgainCore.Crystal_setAmbientMaterial(self, material)

    def getAmbientMaterial(self):
        return _libBornAgainCore.Crystal_getAmbientMaterial(self)

    def createTotalFormFactor(self, meso_crystal_form_factor, p_rotation, translation):
        return _libBornAgainCore.Crystal_createTotalFormFactor(self, meso_crystal_form_factor, p_rotation, translation)

    def getTransformedLattice(self, p_rotation):
        return _libBornAgainCore.Crystal_getTransformedLattice(self, p_rotation)

    def getLatticeBasis(self):
        return _libBornAgainCore.Crystal_getLatticeBasis(self)

    def setDWFactor(self, dw_factor):
        return _libBornAgainCore.Crystal_setDWFactor(self, dw_factor)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_Crystal(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.Crystal__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.Crystal_init_parameters(self)
Crystal_swigregister = _libBornAgainCore.Crystal_swigregister
Crystal_swigregister(Crystal)

class CustomBinAxis(VariableBinAxis):
    __swig_setmethods__ = {}
    for _s in [VariableBinAxis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CustomBinAxis, name, value)
    __swig_getmethods__ = {}
    for _s in [VariableBinAxis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CustomBinAxis, name)
    __repr__ = _swig_repr

    def __init__(self, name, nbins, start, end):
        if self.__class__ == CustomBinAxis:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_CustomBinAxis(_self, name, nbins, start, end)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_CustomBinAxis
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.CustomBinAxis_clone(self)

    def getBin(self, index):
        return _libBornAgainCore.CustomBinAxis_getBin(self, index)

    def getBinCenters(self):
        return _libBornAgainCore.CustomBinAxis_getBinCenters(self)

    def createClippedAxis(self, left, right):
        return _libBornAgainCore.CustomBinAxis_createClippedAxis(self, left, right)

    def _print(self, ostr):
        return _libBornAgainCore.CustomBinAxis__print(self, ostr)

    def equals(self, other):
        return _libBornAgainCore.CustomBinAxis_equals(self, other)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_CustomBinAxis(self)
        return weakref_proxy(self)
CustomBinAxis_swigregister = _libBornAgainCore.CustomBinAxis_swigregister
CustomBinAxis_swigregister(CustomBinAxis)

class IDistribution1D(IParameterized):
    __swig_setmethods__ = {}
    for _s in [IParameterized]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IDistribution1D, name, value)
    __swig_getmethods__ = {}
    for _s in [IParameterized]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IDistribution1D, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == IDistribution1D:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_IDistribution1D(_self, )
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_IDistribution1D
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.IDistribution1D_clone(self)

    def probabilityDensity(self, x):
        return _libBornAgainCore.IDistribution1D_probabilityDensity(self, x)

    def getMean(self):
        return _libBornAgainCore.IDistribution1D_getMean(self)

    def generateSamples(self, *args):
        return _libBornAgainCore.IDistribution1D_generateSamples(self, *args)

    def generateValueList(self, *args):
        return _libBornAgainCore.IDistribution1D_generateValueList(self, *args)

    def generateValues(self, nbr_samples, xmin, xmax):
        return _libBornAgainCore.IDistribution1D_generateValues(self, nbr_samples, xmin, xmax)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_IDistribution1D(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.IDistribution1D__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.IDistribution1D_init_parameters(self)
IDistribution1D_swigregister = _libBornAgainCore.IDistribution1D_swigregister
IDistribution1D_swigregister(IDistribution1D)

class DistributionGate(IDistribution1D):
    __swig_setmethods__ = {}
    for _s in [IDistribution1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DistributionGate, name, value)
    __swig_getmethods__ = {}
    for _s in [IDistribution1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DistributionGate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == DistributionGate:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_DistributionGate(_self, *args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_DistributionGate
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.DistributionGate_clone(self)

    def probabilityDensity(self, x):
        return _libBornAgainCore.DistributionGate_probabilityDensity(self, x)

    def getMean(self):
        return _libBornAgainCore.DistributionGate_getMean(self)

    def getMin(self):
        return _libBornAgainCore.DistributionGate_getMin(self)

    def getMax(self):
        return _libBornAgainCore.DistributionGate_getMax(self)

    def generateValueList(self, *args):
        return _libBornAgainCore.DistributionGate_generateValueList(self, *args)

    def init_parameters(self):
        return _libBornAgainCore.DistributionGate_init_parameters(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_DistributionGate(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.DistributionGate__print(self, ostr)
DistributionGate_swigregister = _libBornAgainCore.DistributionGate_swigregister
DistributionGate_swigregister(DistributionGate)

class DistributionLorentz(IDistribution1D):
    __swig_setmethods__ = {}
    for _s in [IDistribution1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DistributionLorentz, name, value)
    __swig_getmethods__ = {}
    for _s in [IDistribution1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DistributionLorentz, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == DistributionLorentz:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_DistributionLorentz(_self, *args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_DistributionLorentz
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.DistributionLorentz_clone(self)

    def probabilityDensity(self, x):
        return _libBornAgainCore.DistributionLorentz_probabilityDensity(self, x)

    def getMean(self):
        return _libBornAgainCore.DistributionLorentz_getMean(self)

    def getHWHM(self):
        return _libBornAgainCore.DistributionLorentz_getHWHM(self)

    def generateValueList(self, *args):
        return _libBornAgainCore.DistributionLorentz_generateValueList(self, *args)

    def init_parameters(self):
        return _libBornAgainCore.DistributionLorentz_init_parameters(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_DistributionLorentz(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.DistributionLorentz__print(self, ostr)
DistributionLorentz_swigregister = _libBornAgainCore.DistributionLorentz_swigregister
DistributionLorentz_swigregister(DistributionLorentz)

class DistributionGaussian(IDistribution1D):
    __swig_setmethods__ = {}
    for _s in [IDistribution1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DistributionGaussian, name, value)
    __swig_getmethods__ = {}
    for _s in [IDistribution1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DistributionGaussian, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == DistributionGaussian:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_DistributionGaussian(_self, *args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_DistributionGaussian
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.DistributionGaussian_clone(self)

    def probabilityDensity(self, x):
        return _libBornAgainCore.DistributionGaussian_probabilityDensity(self, x)

    def getMean(self):
        return _libBornAgainCore.DistributionGaussian_getMean(self)

    def getStdDev(self):
        return _libBornAgainCore.DistributionGaussian_getStdDev(self)

    def generateValueList(self, *args):
        return _libBornAgainCore.DistributionGaussian_generateValueList(self, *args)

    def init_parameters(self):
        return _libBornAgainCore.DistributionGaussian_init_parameters(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_DistributionGaussian(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.DistributionGaussian__print(self, ostr)
DistributionGaussian_swigregister = _libBornAgainCore.DistributionGaussian_swigregister
DistributionGaussian_swigregister(DistributionGaussian)

class DistributionLogNormal(IDistribution1D):
    __swig_setmethods__ = {}
    for _s in [IDistribution1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DistributionLogNormal, name, value)
    __swig_getmethods__ = {}
    for _s in [IDistribution1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DistributionLogNormal, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == DistributionLogNormal:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_DistributionLogNormal(_self, *args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_DistributionLogNormal
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.DistributionLogNormal_clone(self)

    def probabilityDensity(self, x):
        return _libBornAgainCore.DistributionLogNormal_probabilityDensity(self, x)

    def getMean(self):
        return _libBornAgainCore.DistributionLogNormal_getMean(self)

    def getMedian(self):
        return _libBornAgainCore.DistributionLogNormal_getMedian(self)

    def getScalePar(self):
        return _libBornAgainCore.DistributionLogNormal_getScalePar(self)

    def generateValueList(self, *args):
        return _libBornAgainCore.DistributionLogNormal_generateValueList(self, *args)

    def init_parameters(self):
        return _libBornAgainCore.DistributionLogNormal_init_parameters(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_DistributionLogNormal(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.DistributionLogNormal__print(self, ostr)
DistributionLogNormal_swigregister = _libBornAgainCore.DistributionLogNormal_swigregister
DistributionLogNormal_swigregister(DistributionLogNormal)

class DistributionCosine(IDistribution1D):
    __swig_setmethods__ = {}
    for _s in [IDistribution1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DistributionCosine, name, value)
    __swig_getmethods__ = {}
    for _s in [IDistribution1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DistributionCosine, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == DistributionCosine:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_DistributionCosine(_self, *args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_DistributionCosine
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.DistributionCosine_clone(self)

    def probabilityDensity(self, x):
        return _libBornAgainCore.DistributionCosine_probabilityDensity(self, x)

    def getMean(self):
        return _libBornAgainCore.DistributionCosine_getMean(self)

    def getSigma(self):
        return _libBornAgainCore.DistributionCosine_getSigma(self)

    def generateValueList(self, *args):
        return _libBornAgainCore.DistributionCosine_generateValueList(self, *args)

    def init_parameters(self):
        return _libBornAgainCore.DistributionCosine_init_parameters(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_DistributionCosine(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.DistributionCosine__print(self, ostr)
DistributionCosine_swigregister = _libBornAgainCore.DistributionCosine_swigregister
DistributionCosine_swigregister(DistributionCosine)

class Ellipse(IShape2D):
    __swig_setmethods__ = {}
    for _s in [IShape2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ellipse, name, value)
    __swig_getmethods__ = {}
    for _s in [IShape2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Ellipse, name)
    __repr__ = _swig_repr

    def __init__(self, xcenter, ycenter, xradius, yradius, theta=0.0):
        if self.__class__ == Ellipse:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_Ellipse(_self, xcenter, ycenter, xradius, yradius, theta)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def clone(self):
        return _libBornAgainCore.Ellipse_clone(self)

    def contains(self, *args):
        return _libBornAgainCore.Ellipse_contains(self, *args)

    def getCenterX(self):
        return _libBornAgainCore.Ellipse_getCenterX(self)

    def getCenterY(self):
        return _libBornAgainCore.Ellipse_getCenterY(self)

    def getRadiusX(self):
        return _libBornAgainCore.Ellipse_getRadiusX(self)

    def getRadiusY(self):
        return _libBornAgainCore.Ellipse_getRadiusY(self)

    def getTheta(self):
        return _libBornAgainCore.Ellipse_getTheta(self)
    __swig_destroy__ = _libBornAgainCore.delete_Ellipse
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_Ellipse(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.Ellipse__print(self, ostr)
Ellipse_swigregister = _libBornAgainCore.Ellipse_swigregister
Ellipse_swigregister(Ellipse)

class FixedBinAxis(IAxis):
    __swig_setmethods__ = {}
    for _s in [IAxis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FixedBinAxis, name, value)
    __swig_getmethods__ = {}
    for _s in [IAxis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FixedBinAxis, name)
    __repr__ = _swig_repr

    def __init__(self, name, nbins, start, end):
        if self.__class__ == FixedBinAxis:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_FixedBinAxis(_self, name, nbins, start, end)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_FixedBinAxis
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.FixedBinAxis_clone(self)

    def getSize(self):
        return _libBornAgainCore.FixedBinAxis_getSize(self)

    def getBin(self, index):
        return _libBornAgainCore.FixedBinAxis_getBin(self, index)

    def getMin(self):
        return _libBornAgainCore.FixedBinAxis_getMin(self)

    def getMax(self):
        return _libBornAgainCore.FixedBinAxis_getMax(self)

    def getBinCenter(self, index):
        return _libBornAgainCore.FixedBinAxis_getBinCenter(self, index)

    def findClosestIndex(self, value):
        return _libBornAgainCore.FixedBinAxis_findClosestIndex(self, value)

    def getBinCenters(self):
        return _libBornAgainCore.FixedBinAxis_getBinCenters(self)

    def getBinBoundaries(self):
        return _libBornAgainCore.FixedBinAxis_getBinBoundaries(self)

    def createClippedAxis(self, left, right):
        return _libBornAgainCore.FixedBinAxis_createClippedAxis(self, left, right)

    def _print(self, ostr):
        return _libBornAgainCore.FixedBinAxis__print(self, ostr)

    def equals(self, other):
        return _libBornAgainCore.FixedBinAxis_equals(self, other)

    def __getitem__(self, i):
        return _libBornAgainCore.FixedBinAxis___getitem__(self, i)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FixedBinAxis(self)
        return weakref_proxy(self)
FixedBinAxis_swigregister = _libBornAgainCore.FixedBinAxis_swigregister
FixedBinAxis_swigregister(FixedBinAxis)

class IFormFactor(ISample):
    __swig_setmethods__ = {}
    for _s in [ISample]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IFormFactor, name, value)
    __swig_getmethods__ = {}
    for _s in [ISample]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IFormFactor, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == IFormFactor:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_IFormFactor(_self, )
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_IFormFactor
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.IFormFactor_clone(self)

    def accept(self, visitor):
        return _libBornAgainCore.IFormFactor_accept(self, visitor)

    def setAmbientMaterial(self, arg0):
        return _libBornAgainCore.IFormFactor_setAmbientMaterial(self, arg0)

    def evaluate(self, wavevectors):
        return _libBornAgainCore.IFormFactor_evaluate(self, wavevectors)

    def getVolume(self):
        return _libBornAgainCore.IFormFactor_getVolume(self)

    def getRadius(self):
        return _libBornAgainCore.IFormFactor_getRadius(self)

    def setSpecularInfo(self, p_in_coeffs, p_out_coeffs):
        return _libBornAgainCore.IFormFactor_setSpecularInfo(self, p_in_coeffs, p_out_coeffs)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_IFormFactor(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.IFormFactor__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.IFormFactor_init_parameters(self)
IFormFactor_swigregister = _libBornAgainCore.IFormFactor_swigregister
IFormFactor_swigregister(IFormFactor)

class IFormFactorBorn(IFormFactor):
    __swig_setmethods__ = {}
    for _s in [IFormFactor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IFormFactorBorn, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IFormFactorBorn, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == IFormFactorBorn:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_IFormFactorBorn(_self, )
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_IFormFactorBorn
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.IFormFactorBorn_clone(self)

    def accept(self, visitor):
        return _libBornAgainCore.IFormFactorBorn_accept(self, visitor)

    def evaluate(self, wavevectors):
        return _libBornAgainCore.IFormFactorBorn_evaluate(self, wavevectors)

    def evaluate_for_q(self, q):
        return _libBornAgainCore.IFormFactorBorn_evaluate_for_q(self, q)

    def check_initialization(self):
        return _libBornAgainCore.IFormFactorBorn_check_initialization(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_IFormFactorBorn(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.IFormFactorBorn__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.IFormFactorBorn_init_parameters(self)
IFormFactorBorn_swigregister = _libBornAgainCore.IFormFactorBorn_swigregister
IFormFactorBorn_swigregister(IFormFactorBorn)

class IFormFactorDecorator(IFormFactor):
    __swig_setmethods__ = {}
    for _s in [IFormFactor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IFormFactorDecorator, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IFormFactorDecorator, name)
    __repr__ = _swig_repr

    def __init__(self, form_factor):
        if self.__class__ == IFormFactorDecorator:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_IFormFactorDecorator(_self, form_factor)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_IFormFactorDecorator
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.IFormFactorDecorator_clone(self)

    def accept(self, visitor):
        return _libBornAgainCore.IFormFactorDecorator_accept(self, visitor)

    def setAmbientMaterial(self, material):
        return _libBornAgainCore.IFormFactorDecorator_setAmbientMaterial(self, material)

    def getVolume(self):
        return _libBornAgainCore.IFormFactorDecorator_getVolume(self)

    def getRadius(self):
        return _libBornAgainCore.IFormFactorDecorator_getRadius(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_IFormFactorDecorator(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.IFormFactorDecorator__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.IFormFactorDecorator_init_parameters(self)
IFormFactorDecorator_swigregister = _libBornAgainCore.IFormFactorDecorator_swigregister
IFormFactorDecorator_swigregister(IFormFactorDecorator)

class FormFactorAnisoPyramid(IFormFactorBorn):
    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorAnisoPyramid, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorAnisoPyramid, name)
    __repr__ = _swig_repr

    def __init__(self, length, width, height, alpha):
        if self.__class__ == FormFactorAnisoPyramid:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_FormFactorAnisoPyramid(_self, length, width, height, alpha)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorAnisoPyramid
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.FormFactorAnisoPyramid_clone(self)

    def accept(self, visitor):
        return _libBornAgainCore.FormFactorAnisoPyramid_accept(self, visitor)

    def getRadius(self):
        return _libBornAgainCore.FormFactorAnisoPyramid_getRadius(self)

    def getHeight(self):
        return _libBornAgainCore.FormFactorAnisoPyramid_getHeight(self)

    def getLength(self):
        return _libBornAgainCore.FormFactorAnisoPyramid_getLength(self)

    def getWidth(self):
        return _libBornAgainCore.FormFactorAnisoPyramid_getWidth(self)

    def getAlpha(self):
        return _libBornAgainCore.FormFactorAnisoPyramid_getAlpha(self)

    def evaluate_for_q(self, q):
        return _libBornAgainCore.FormFactorAnisoPyramid_evaluate_for_q(self, q)

    def check_initialization(self):
        return _libBornAgainCore.FormFactorAnisoPyramid_check_initialization(self)

    def init_parameters(self):
        return _libBornAgainCore.FormFactorAnisoPyramid_init_parameters(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FormFactorAnisoPyramid(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.FormFactorAnisoPyramid__print(self, ostr)
FormFactorAnisoPyramid_swigregister = _libBornAgainCore.FormFactorAnisoPyramid_swigregister
FormFactorAnisoPyramid_swigregister(FormFactorAnisoPyramid)

class FormFactorBox(IFormFactorBorn):
    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorBox, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorBox, name)
    __repr__ = _swig_repr

    def __init__(self, length, width, height):
        if self.__class__ == FormFactorBox:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_FormFactorBox(_self, length, width, height)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def clone(self):
        return _libBornAgainCore.FormFactorBox_clone(self)

    def accept(self, visitor):
        return _libBornAgainCore.FormFactorBox_accept(self, visitor)

    def getLength(self):
        return _libBornAgainCore.FormFactorBox_getLength(self)

    def getHeight(self):
        return _libBornAgainCore.FormFactorBox_getHeight(self)

    def getRadius(self):
        return _libBornAgainCore.FormFactorBox_getRadius(self)

    def getWidth(self):
        return _libBornAgainCore.FormFactorBox_getWidth(self)

    def evaluate_for_q(self, q):
        return _libBornAgainCore.FormFactorBox_evaluate_for_q(self, q)

    def check_initialization(self):
        return _libBornAgainCore.FormFactorBox_check_initialization(self)

    def init_parameters(self):
        return _libBornAgainCore.FormFactorBox_init_parameters(self)
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorBox
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FormFactorBox(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.FormFactorBox__print(self, ostr)
FormFactorBox_swigregister = _libBornAgainCore.FormFactorBox_swigregister
FormFactorBox_swigregister(FormFactorBox)

class FormFactorCone(IFormFactorBorn):
    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorCone, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorCone, name)
    __repr__ = _swig_repr

    def __init__(self, radius, height, alpha):
        if self.__class__ == FormFactorCone:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_FormFactorCone(_self, radius, height, alpha)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorCone
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.FormFactorCone_clone(self)

    def accept(self, visitor):
        return _libBornAgainCore.FormFactorCone_accept(self, visitor)

    def getHeight(self):
        return _libBornAgainCore.FormFactorCone_getHeight(self)

    def getRadius(self):
        return _libBornAgainCore.FormFactorCone_getRadius(self)

    def getAlpha(self):
        return _libBornAgainCore.FormFactorCone_getAlpha(self)

    def evaluate_for_q(self, q):
        return _libBornAgainCore.FormFactorCone_evaluate_for_q(self, q)

    def check_initialization(self):
        return _libBornAgainCore.FormFactorCone_check_initialization(self)

    def init_parameters(self):
        return _libBornAgainCore.FormFactorCone_init_parameters(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FormFactorCone(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.FormFactorCone__print(self, ostr)
FormFactorCone_swigregister = _libBornAgainCore.FormFactorCone_swigregister
FormFactorCone_swigregister(FormFactorCone)

class FormFactorCone6(IFormFactorBorn):
    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorCone6, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorCone6, name)
    __repr__ = _swig_repr

    def __init__(self, radius, height, alpha):
        if self.__class__ == FormFactorCone6:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_FormFactorCone6(_self, radius, height, alpha)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorCone6
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.FormFactorCone6_clone(self)

    def accept(self, visitor):
        return _libBornAgainCore.FormFactorCone6_accept(self, visitor)

    def getHeight(self):
        return _libBornAgainCore.FormFactorCone6_getHeight(self)

    def getRadius(self):
        return _libBornAgainCore.FormFactorCone6_getRadius(self)

    def getAlpha(self):
        return _libBornAgainCore.FormFactorCone6_getAlpha(self)

    def evaluate_for_q(self, q):
        return _libBornAgainCore.FormFactorCone6_evaluate_for_q(self, q)

    def check_initialization(self):
        return _libBornAgainCore.FormFactorCone6_check_initialization(self)

    def init_parameters(self):
        return _libBornAgainCore.FormFactorCone6_init_parameters(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FormFactorCone6(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.FormFactorCone6__print(self, ostr)
FormFactorCone6_swigregister = _libBornAgainCore.FormFactorCone6_swigregister
FormFactorCone6_swigregister(FormFactorCone6)

class FormFactorCrystal(IFormFactorBorn):
    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorCrystal, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorCrystal, name)
    __repr__ = _swig_repr

    def __init__(self, lattice, basis_form_factor, meso_form_factor):
        if self.__class__ == FormFactorCrystal:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_FormFactorCrystal(_self, lattice, basis_form_factor, meso_form_factor)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorCrystal
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.FormFactorCrystal_clone(self)

    def accept(self, visitor):
        return _libBornAgainCore.FormFactorCrystal_accept(self, visitor)

    def getVolume(self):
        return _libBornAgainCore.FormFactorCrystal_getVolume(self)

    def getRadius(self):
        return _libBornAgainCore.FormFactorCrystal_getRadius(self)

    def evaluate(self, wavevectors):
        return _libBornAgainCore.FormFactorCrystal_evaluate(self, wavevectors)

    def evaluate_for_q(self, q):
        return _libBornAgainCore.FormFactorCrystal_evaluate_for_q(self, q)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FormFactorCrystal(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.FormFactorCrystal__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.FormFactorCrystal_init_parameters(self)

    def check_initialization(self):
        return _libBornAgainCore.FormFactorCrystal_check_initialization(self)
FormFactorCrystal_swigregister = _libBornAgainCore.FormFactorCrystal_swigregister
FormFactorCrystal_swigregister(FormFactorCrystal)

class FormFactorCuboctahedron(IFormFactorBorn):
    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorCuboctahedron, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorCuboctahedron, name)
    __repr__ = _swig_repr

    def __init__(self, length, height, height_ratio, alpha):
        if self.__class__ == FormFactorCuboctahedron:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_FormFactorCuboctahedron(_self, length, height, height_ratio, alpha)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorCuboctahedron
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.FormFactorCuboctahedron_clone(self)

    def accept(self, visitor):
        return _libBornAgainCore.FormFactorCuboctahedron_accept(self, visitor)

    def getRadius(self):
        return _libBornAgainCore.FormFactorCuboctahedron_getRadius(self)

    def getHeight(self):
        return _libBornAgainCore.FormFactorCuboctahedron_getHeight(self)

    def getHeightRatio(self):
        return _libBornAgainCore.FormFactorCuboctahedron_getHeightRatio(self)

    def getLength(self):
        return _libBornAgainCore.FormFactorCuboctahedron_getLength(self)

    def getAlpha(self):
        return _libBornAgainCore.FormFactorCuboctahedron_getAlpha(self)

    def evaluate_for_q(self, q):
        return _libBornAgainCore.FormFactorCuboctahedron_evaluate_for_q(self, q)

    def check_initialization(self):
        return _libBornAgainCore.FormFactorCuboctahedron_check_initialization(self)

    def init_parameters(self):
        return _libBornAgainCore.FormFactorCuboctahedron_init_parameters(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FormFactorCuboctahedron(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.FormFactorCuboctahedron__print(self, ostr)
FormFactorCuboctahedron_swigregister = _libBornAgainCore.FormFactorCuboctahedron_swigregister
FormFactorCuboctahedron_swigregister(FormFactorCuboctahedron)

class FormFactorCylinder(IFormFactorBorn):
    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorCylinder, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorCylinder, name)
    __repr__ = _swig_repr

    def __init__(self, radius, height):
        if self.__class__ == FormFactorCylinder:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_FormFactorCylinder(_self, radius, height)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorCylinder
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.FormFactorCylinder_clone(self)

    def accept(self, visitor):
        return _libBornAgainCore.FormFactorCylinder_accept(self, visitor)

    def getHeight(self):
        return _libBornAgainCore.FormFactorCylinder_getHeight(self)

    def getRadius(self):
        return _libBornAgainCore.FormFactorCylinder_getRadius(self)

    def evaluate_for_q(self, q):
        return _libBornAgainCore.FormFactorCylinder_evaluate_for_q(self, q)

    def check_initialization(self):
        return _libBornAgainCore.FormFactorCylinder_check_initialization(self)

    def init_parameters(self):
        return _libBornAgainCore.FormFactorCylinder_init_parameters(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FormFactorCylinder(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.FormFactorCylinder__print(self, ostr)
FormFactorCylinder_swigregister = _libBornAgainCore.FormFactorCylinder_swigregister
FormFactorCylinder_swigregister(FormFactorCylinder)

class FormFactorDecoratorDebyeWaller(IFormFactorDecorator):
    __swig_setmethods__ = {}
    for _s in [IFormFactorDecorator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorDecoratorDebyeWaller, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorDecorator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorDecoratorDebyeWaller, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == FormFactorDecoratorDebyeWaller:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_FormFactorDecoratorDebyeWaller(_self, *args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorDecoratorDebyeWaller
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.FormFactorDecoratorDebyeWaller_clone(self)

    def accept(self, visitor):
        return _libBornAgainCore.FormFactorDecoratorDebyeWaller_accept(self, visitor)

    def evaluate(self, wavevectors):
        return _libBornAgainCore.FormFactorDecoratorDebyeWaller_evaluate(self, wavevectors)

    def check_initialization(self):
        return _libBornAgainCore.FormFactorDecoratorDebyeWaller_check_initialization(self)

    def init_parameters(self):
        return _libBornAgainCore.FormFactorDecoratorDebyeWaller_init_parameters(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FormFactorDecoratorDebyeWaller(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.FormFactorDecoratorDebyeWaller__print(self, ostr)
FormFactorDecoratorDebyeWaller_swigregister = _libBornAgainCore.FormFactorDecoratorDebyeWaller_swigregister
FormFactorDecoratorDebyeWaller_swigregister(FormFactorDecoratorDebyeWaller)

class FormFactorEllipsoidalCylinder(IFormFactorBorn):
    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorEllipsoidalCylinder, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorEllipsoidalCylinder, name)
    __repr__ = _swig_repr

    def __init__(self, radius_x, radius_y, height):
        if self.__class__ == FormFactorEllipsoidalCylinder:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_FormFactorEllipsoidalCylinder(_self, radius_x, radius_y, height)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def clone(self):
        return _libBornAgainCore.FormFactorEllipsoidalCylinder_clone(self)

    def accept(self, visitor):
        return _libBornAgainCore.FormFactorEllipsoidalCylinder_accept(self, visitor)

    def getRadius(self):
        return _libBornAgainCore.FormFactorEllipsoidalCylinder_getRadius(self)

    def getRadiusX(self):
        return _libBornAgainCore.FormFactorEllipsoidalCylinder_getRadiusX(self)

    def getRadiusY(self):
        return _libBornAgainCore.FormFactorEllipsoidalCylinder_getRadiusY(self)

    def getHeight(self):
        return _libBornAgainCore.FormFactorEllipsoidalCylinder_getHeight(self)

    def evaluate_for_q(self, q):
        return _libBornAgainCore.FormFactorEllipsoidalCylinder_evaluate_for_q(self, q)

    def check_initialization(self):
        return _libBornAgainCore.FormFactorEllipsoidalCylinder_check_initialization(self)

    def init_parameters(self):
        return _libBornAgainCore.FormFactorEllipsoidalCylinder_init_parameters(self)
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorEllipsoidalCylinder
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FormFactorEllipsoidalCylinder(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.FormFactorEllipsoidalCylinder__print(self, ostr)
FormFactorEllipsoidalCylinder_swigregister = _libBornAgainCore.FormFactorEllipsoidalCylinder_swigregister
FormFactorEllipsoidalCylinder_swigregister(FormFactorEllipsoidalCylinder)

class FormFactorFullSphere(IFormFactorBorn):
    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorFullSphere, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorFullSphere, name)
    __repr__ = _swig_repr

    def __init__(self, radius):
        if self.__class__ == FormFactorFullSphere:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_FormFactorFullSphere(_self, radius)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def clone(self):
        return _libBornAgainCore.FormFactorFullSphere_clone(self)

    def accept(self, visitor):
        return _libBornAgainCore.FormFactorFullSphere_accept(self, visitor)

    def getRadius(self):
        return _libBornAgainCore.FormFactorFullSphere_getRadius(self)

    def evaluate_for_q(self, q):
        return _libBornAgainCore.FormFactorFullSphere_evaluate_for_q(self, q)

    def check_initialization(self):
        return _libBornAgainCore.FormFactorFullSphere_check_initialization(self)

    def init_parameters(self):
        return _libBornAgainCore.FormFactorFullSphere_init_parameters(self)
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorFullSphere
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FormFactorFullSphere(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.FormFactorFullSphere__print(self, ostr)
FormFactorFullSphere_swigregister = _libBornAgainCore.FormFactorFullSphere_swigregister
FormFactorFullSphere_swigregister(FormFactorFullSphere)

class FormFactorFullSpheroid(IFormFactorBorn):
    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorFullSpheroid, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorFullSpheroid, name)
    __repr__ = _swig_repr

    def __init__(self, radius, height):
        if self.__class__ == FormFactorFullSpheroid:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_FormFactorFullSpheroid(_self, radius, height)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorFullSpheroid
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.FormFactorFullSpheroid_clone(self)

    def accept(self, visitor):
        return _libBornAgainCore.FormFactorFullSpheroid_accept(self, visitor)

    def getHeight(self):
        return _libBornAgainCore.FormFactorFullSpheroid_getHeight(self)

    def getRadius(self):
        return _libBornAgainCore.FormFactorFullSpheroid_getRadius(self)

    def evaluate_for_q(self, q):
        return _libBornAgainCore.FormFactorFullSpheroid_evaluate_for_q(self, q)

    def check_initialization(self):
        return _libBornAgainCore.FormFactorFullSpheroid_check_initialization(self)

    def init_parameters(self):
        return _libBornAgainCore.FormFactorFullSpheroid_init_parameters(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FormFactorFullSpheroid(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.FormFactorFullSpheroid__print(self, ostr)
FormFactorFullSpheroid_swigregister = _libBornAgainCore.FormFactorFullSpheroid_swigregister
FormFactorFullSpheroid_swigregister(FormFactorFullSpheroid)

class FormFactorGauss(IFormFactorBorn):
    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorGauss, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorGauss, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == FormFactorGauss:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_FormFactorGauss(_self, *args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorGauss
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.FormFactorGauss_clone(self)

    def accept(self, visitor):
        return _libBornAgainCore.FormFactorGauss_accept(self, visitor)

    def evaluate_for_q(self, q):
        return _libBornAgainCore.FormFactorGauss_evaluate_for_q(self, q)

    def getHeight(self):
        return _libBornAgainCore.FormFactorGauss_getHeight(self)

    def getRadius(self):
        return _libBornAgainCore.FormFactorGauss_getRadius(self)

    def check_initialization(self):
        return _libBornAgainCore.FormFactorGauss_check_initialization(self)

    def init_parameters(self):
        return _libBornAgainCore.FormFactorGauss_init_parameters(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FormFactorGauss(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.FormFactorGauss__print(self, ostr)
FormFactorGauss_swigregister = _libBornAgainCore.FormFactorGauss_swigregister
FormFactorGauss_swigregister(FormFactorGauss)

class FormFactorHemiEllipsoid(IFormFactorBorn):
    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorHemiEllipsoid, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorHemiEllipsoid, name)
    __repr__ = _swig_repr

    def __init__(self, radius_x, radius_y, height):
        if self.__class__ == FormFactorHemiEllipsoid:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_FormFactorHemiEllipsoid(_self, radius_x, radius_y, height)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorHemiEllipsoid
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.FormFactorHemiEllipsoid_clone(self)

    def accept(self, visitor):
        return _libBornAgainCore.FormFactorHemiEllipsoid_accept(self, visitor)

    def getRadius(self):
        return _libBornAgainCore.FormFactorHemiEllipsoid_getRadius(self)

    def getHeight(self):
        return _libBornAgainCore.FormFactorHemiEllipsoid_getHeight(self)

    def getRadiusX(self):
        return _libBornAgainCore.FormFactorHemiEllipsoid_getRadiusX(self)

    def getRadiusY(self):
        return _libBornAgainCore.FormFactorHemiEllipsoid_getRadiusY(self)

    def evaluate_for_q(self, q):
        return _libBornAgainCore.FormFactorHemiEllipsoid_evaluate_for_q(self, q)

    def check_initialization(self):
        return _libBornAgainCore.FormFactorHemiEllipsoid_check_initialization(self)

    def init_parameters(self):
        return _libBornAgainCore.FormFactorHemiEllipsoid_init_parameters(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FormFactorHemiEllipsoid(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.FormFactorHemiEllipsoid__print(self, ostr)
FormFactorHemiEllipsoid_swigregister = _libBornAgainCore.FormFactorHemiEllipsoid_swigregister
FormFactorHemiEllipsoid_swigregister(FormFactorHemiEllipsoid)

class FormFactorLorentz(IFormFactorBorn):
    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorLorentz, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorLorentz, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == FormFactorLorentz:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_FormFactorLorentz(_self, *args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def clone(self):
        return _libBornAgainCore.FormFactorLorentz_clone(self)

    def accept(self, visitor):
        return _libBornAgainCore.FormFactorLorentz_accept(self, visitor)

    def getRadius(self):
        return _libBornAgainCore.FormFactorLorentz_getRadius(self)

    def getHeight(self):
        return _libBornAgainCore.FormFactorLorentz_getHeight(self)

    def getWidth(self):
        return _libBornAgainCore.FormFactorLorentz_getWidth(self)

    def evaluate_for_q(self, q):
        return _libBornAgainCore.FormFactorLorentz_evaluate_for_q(self, q)

    def check_initialization(self):
        return _libBornAgainCore.FormFactorLorentz_check_initialization(self)

    def init_parameters(self):
        return _libBornAgainCore.FormFactorLorentz_init_parameters(self)
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorLorentz
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FormFactorLorentz(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.FormFactorLorentz__print(self, ostr)
FormFactorLorentz_swigregister = _libBornAgainCore.FormFactorLorentz_swigregister
FormFactorLorentz_swigregister(FormFactorLorentz)

class FormFactorPrism3(IFormFactorBorn):
    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorPrism3, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorPrism3, name)
    __repr__ = _swig_repr

    def __init__(self, length, height):
        if self.__class__ == FormFactorPrism3:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_FormFactorPrism3(_self, length, height)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def clone(self):
        return _libBornAgainCore.FormFactorPrism3_clone(self)

    def accept(self, visitor):
        return _libBornAgainCore.FormFactorPrism3_accept(self, visitor)

    def getRadius(self):
        return _libBornAgainCore.FormFactorPrism3_getRadius(self)

    def getHeight(self):
        return _libBornAgainCore.FormFactorPrism3_getHeight(self)

    def getLength(self):
        return _libBornAgainCore.FormFactorPrism3_getLength(self)

    def evaluate_for_q(self, q):
        return _libBornAgainCore.FormFactorPrism3_evaluate_for_q(self, q)

    def check_initialization(self):
        return _libBornAgainCore.FormFactorPrism3_check_initialization(self)

    def init_parameters(self):
        return _libBornAgainCore.FormFactorPrism3_init_parameters(self)
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorPrism3
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FormFactorPrism3(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.FormFactorPrism3__print(self, ostr)
FormFactorPrism3_swigregister = _libBornAgainCore.FormFactorPrism3_swigregister
FormFactorPrism3_swigregister(FormFactorPrism3)

class FormFactorPrism6(IFormFactorBorn):
    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorPrism6, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorPrism6, name)
    __repr__ = _swig_repr

    def __init__(self, radius, height):
        if self.__class__ == FormFactorPrism6:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_FormFactorPrism6(_self, radius, height)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def clone(self):
        return _libBornAgainCore.FormFactorPrism6_clone(self)

    def accept(self, visitor):
        return _libBornAgainCore.FormFactorPrism6_accept(self, visitor)

    def getHeight(self):
        return _libBornAgainCore.FormFactorPrism6_getHeight(self)

    def getRadius(self):
        return _libBornAgainCore.FormFactorPrism6_getRadius(self)

    def evaluate_for_q(self, q):
        return _libBornAgainCore.FormFactorPrism6_evaluate_for_q(self, q)

    def check_initialization(self):
        return _libBornAgainCore.FormFactorPrism6_check_initialization(self)

    def init_parameters(self):
        return _libBornAgainCore.FormFactorPrism6_init_parameters(self)
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorPrism6
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FormFactorPrism6(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.FormFactorPrism6__print(self, ostr)
FormFactorPrism6_swigregister = _libBornAgainCore.FormFactorPrism6_swigregister
FormFactorPrism6_swigregister(FormFactorPrism6)

class FormFactorPyramid(IFormFactorBorn):
    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorPyramid, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorPyramid, name)
    __repr__ = _swig_repr

    def __init__(self, length, height, alpha):
        if self.__class__ == FormFactorPyramid:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_FormFactorPyramid(_self, length, height, alpha)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorPyramid
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.FormFactorPyramid_clone(self)

    def accept(self, visitor):
        return _libBornAgainCore.FormFactorPyramid_accept(self, visitor)

    def getRadius(self):
        return _libBornAgainCore.FormFactorPyramid_getRadius(self)

    def getHeight(self):
        return _libBornAgainCore.FormFactorPyramid_getHeight(self)

    def getLength(self):
        return _libBornAgainCore.FormFactorPyramid_getLength(self)

    def getAlpha(self):
        return _libBornAgainCore.FormFactorPyramid_getAlpha(self)

    def evaluate_for_q(self, q):
        return _libBornAgainCore.FormFactorPyramid_evaluate_for_q(self, q)

    def check_initialization(self):
        return _libBornAgainCore.FormFactorPyramid_check_initialization(self)

    def init_parameters(self):
        return _libBornAgainCore.FormFactorPyramid_init_parameters(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FormFactorPyramid(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.FormFactorPyramid__print(self, ostr)
FormFactorPyramid_swigregister = _libBornAgainCore.FormFactorPyramid_swigregister
FormFactorPyramid_swigregister(FormFactorPyramid)

class FormFactorRipple1(IFormFactorBorn):
    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorRipple1, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorRipple1, name)
    __repr__ = _swig_repr

    def __init__(self, length, width, height):
        if self.__class__ == FormFactorRipple1:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_FormFactorRipple1(_self, length, width, height)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorRipple1
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.FormFactorRipple1_clone(self)

    def accept(self, visitor):
        return _libBornAgainCore.FormFactorRipple1_accept(self, visitor)

    def getRadius(self):
        return _libBornAgainCore.FormFactorRipple1_getRadius(self)

    def getHeight(self):
        return _libBornAgainCore.FormFactorRipple1_getHeight(self)

    def getWidth(self):
        return _libBornAgainCore.FormFactorRipple1_getWidth(self)

    def getLength(self):
        return _libBornAgainCore.FormFactorRipple1_getLength(self)

    def evaluate_for_q(self, q):
        return _libBornAgainCore.FormFactorRipple1_evaluate_for_q(self, q)

    def check_initialization(self):
        return _libBornAgainCore.FormFactorRipple1_check_initialization(self)

    def init_parameters(self):
        return _libBornAgainCore.FormFactorRipple1_init_parameters(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FormFactorRipple1(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.FormFactorRipple1__print(self, ostr)
FormFactorRipple1_swigregister = _libBornAgainCore.FormFactorRipple1_swigregister
FormFactorRipple1_swigregister(FormFactorRipple1)

class FormFactorRipple2(IFormFactorBorn):
    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorRipple2, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorRipple2, name)
    __repr__ = _swig_repr

    def __init__(self, length, width, height, asymetry):
        if self.__class__ == FormFactorRipple2:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_FormFactorRipple2(_self, length, width, height, asymetry)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorRipple2
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.FormFactorRipple2_clone(self)

    def accept(self, visitor):
        return _libBornAgainCore.FormFactorRipple2_accept(self, visitor)

    def getRadius(self):
        return _libBornAgainCore.FormFactorRipple2_getRadius(self)

    def getHeight(self):
        return _libBornAgainCore.FormFactorRipple2_getHeight(self)

    def getWidth(self):
        return _libBornAgainCore.FormFactorRipple2_getWidth(self)

    def getLength(self):
        return _libBornAgainCore.FormFactorRipple2_getLength(self)

    def getAsymmetry(self):
        return _libBornAgainCore.FormFactorRipple2_getAsymmetry(self)

    def evaluate_for_q(self, q):
        return _libBornAgainCore.FormFactorRipple2_evaluate_for_q(self, q)

    def check_initialization(self):
        return _libBornAgainCore.FormFactorRipple2_check_initialization(self)

    def init_parameters(self):
        return _libBornAgainCore.FormFactorRipple2_init_parameters(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FormFactorRipple2(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.FormFactorRipple2__print(self, ostr)
FormFactorRipple2_swigregister = _libBornAgainCore.FormFactorRipple2_swigregister
FormFactorRipple2_swigregister(FormFactorRipple2)

class FormFactorSphereGaussianRadius(IFormFactorBorn):
    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorSphereGaussianRadius, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorSphereGaussianRadius, name)
    __repr__ = _swig_repr

    def __init__(self, mean, sigma):
        if self.__class__ == FormFactorSphereGaussianRadius:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_FormFactorSphereGaussianRadius(_self, mean, sigma)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def clone(self):
        return _libBornAgainCore.FormFactorSphereGaussianRadius_clone(self)
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorSphereGaussianRadius
    __del__ = lambda self: None

    def accept(self, visitor):
        return _libBornAgainCore.FormFactorSphereGaussianRadius_accept(self, visitor)

    def getRadius(self):
        return _libBornAgainCore.FormFactorSphereGaussianRadius_getRadius(self)

    def evaluate_for_q(self, q):
        return _libBornAgainCore.FormFactorSphereGaussianRadius_evaluate_for_q(self, q)

    def check_initialization(self):
        return _libBornAgainCore.FormFactorSphereGaussianRadius_check_initialization(self)

    def init_parameters(self):
        return _libBornAgainCore.FormFactorSphereGaussianRadius_init_parameters(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FormFactorSphereGaussianRadius(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.FormFactorSphereGaussianRadius__print(self, ostr)
FormFactorSphereGaussianRadius_swigregister = _libBornAgainCore.FormFactorSphereGaussianRadius_swigregister
FormFactorSphereGaussianRadius_swigregister(FormFactorSphereGaussianRadius)

class FormFactorSphereLogNormalRadius(IFormFactorBorn):
    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorSphereLogNormalRadius, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorSphereLogNormalRadius, name)
    __repr__ = _swig_repr

    def __init__(self, mean, scale_param, n_samples):
        if self.__class__ == FormFactorSphereLogNormalRadius:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_FormFactorSphereLogNormalRadius(_self, mean, scale_param, n_samples)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def clone(self):
        return _libBornAgainCore.FormFactorSphereLogNormalRadius_clone(self)
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorSphereLogNormalRadius
    __del__ = lambda self: None

    def accept(self, visitor):
        return _libBornAgainCore.FormFactorSphereLogNormalRadius_accept(self, visitor)

    def getRadius(self):
        return _libBornAgainCore.FormFactorSphereLogNormalRadius_getRadius(self)

    def evaluate_for_q(self, q):
        return _libBornAgainCore.FormFactorSphereLogNormalRadius_evaluate_for_q(self, q)

    def check_initialization(self):
        return _libBornAgainCore.FormFactorSphereLogNormalRadius_check_initialization(self)

    def init_parameters(self):
        return _libBornAgainCore.FormFactorSphereLogNormalRadius_init_parameters(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FormFactorSphereLogNormalRadius(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.FormFactorSphereLogNormalRadius__print(self, ostr)
FormFactorSphereLogNormalRadius_swigregister = _libBornAgainCore.FormFactorSphereLogNormalRadius_swigregister
FormFactorSphereLogNormalRadius_swigregister(FormFactorSphereLogNormalRadius)

class FormFactorSphereUniformRadius(IFormFactorBorn):
    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorSphereUniformRadius, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorSphereUniformRadius, name)
    __repr__ = _swig_repr

    def __init__(self, mean, full_width):
        if self.__class__ == FormFactorSphereUniformRadius:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_FormFactorSphereUniformRadius(_self, mean, full_width)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def clone(self):
        return _libBornAgainCore.FormFactorSphereUniformRadius_clone(self)
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorSphereUniformRadius
    __del__ = lambda self: None

    def accept(self, visitor):
        return _libBornAgainCore.FormFactorSphereUniformRadius_accept(self, visitor)

    def getRadius(self):
        return _libBornAgainCore.FormFactorSphereUniformRadius_getRadius(self)

    def evaluate_for_q(self, q):
        return _libBornAgainCore.FormFactorSphereUniformRadius_evaluate_for_q(self, q)

    def check_initialization(self):
        return _libBornAgainCore.FormFactorSphereUniformRadius_check_initialization(self)

    def init_parameters(self):
        return _libBornAgainCore.FormFactorSphereUniformRadius_init_parameters(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FormFactorSphereUniformRadius(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.FormFactorSphereUniformRadius__print(self, ostr)
FormFactorSphereUniformRadius_swigregister = _libBornAgainCore.FormFactorSphereUniformRadius_swigregister
FormFactorSphereUniformRadius_swigregister(FormFactorSphereUniformRadius)

class FormFactorTetrahedron(IFormFactorBorn):
    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorTetrahedron, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorTetrahedron, name)
    __repr__ = _swig_repr

    def __init__(self, length, height, alpha):
        if self.__class__ == FormFactorTetrahedron:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_FormFactorTetrahedron(_self, length, height, alpha)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorTetrahedron
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.FormFactorTetrahedron_clone(self)

    def accept(self, visitor):
        return _libBornAgainCore.FormFactorTetrahedron_accept(self, visitor)

    def getRadius(self):
        return _libBornAgainCore.FormFactorTetrahedron_getRadius(self)

    def getHeight(self):
        return _libBornAgainCore.FormFactorTetrahedron_getHeight(self)

    def getLength(self):
        return _libBornAgainCore.FormFactorTetrahedron_getLength(self)

    def getAlpha(self):
        return _libBornAgainCore.FormFactorTetrahedron_getAlpha(self)

    def evaluate_for_q(self, q):
        return _libBornAgainCore.FormFactorTetrahedron_evaluate_for_q(self, q)

    def check_initialization(self):
        return _libBornAgainCore.FormFactorTetrahedron_check_initialization(self)

    def init_parameters(self):
        return _libBornAgainCore.FormFactorTetrahedron_init_parameters(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FormFactorTetrahedron(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.FormFactorTetrahedron__print(self, ostr)
FormFactorTetrahedron_swigregister = _libBornAgainCore.FormFactorTetrahedron_swigregister
FormFactorTetrahedron_swigregister(FormFactorTetrahedron)

class FormFactorTrivial(IFormFactorBorn):
    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorTrivial, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorTrivial, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == FormFactorTrivial:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_FormFactorTrivial(_self, )
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def clone(self):
        return _libBornAgainCore.FormFactorTrivial_clone(self)

    def accept(self, visitor):
        return _libBornAgainCore.FormFactorTrivial_accept(self, visitor)

    def getRadius(self):
        return _libBornAgainCore.FormFactorTrivial_getRadius(self)

    def evaluate_for_q(self, q):
        return _libBornAgainCore.FormFactorTrivial_evaluate_for_q(self, q)

    def check_initialization(self):
        return _libBornAgainCore.FormFactorTrivial_check_initialization(self)

    def init_parameters(self):
        return _libBornAgainCore.FormFactorTrivial_init_parameters(self)
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorTrivial
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FormFactorTrivial(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.FormFactorTrivial__print(self, ostr)
FormFactorTrivial_swigregister = _libBornAgainCore.FormFactorTrivial_swigregister
FormFactorTrivial_swigregister(FormFactorTrivial)

class FormFactorTruncatedCube(IFormFactorBorn):
    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorTruncatedCube, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorTruncatedCube, name)
    __repr__ = _swig_repr

    def __init__(self, length, removed_length):
        if self.__class__ == FormFactorTruncatedCube:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_FormFactorTruncatedCube(_self, length, removed_length)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def clone(self):
        return _libBornAgainCore.FormFactorTruncatedCube_clone(self)

    def accept(self, visitor):
        return _libBornAgainCore.FormFactorTruncatedCube_accept(self, visitor)

    def getRadius(self):
        return _libBornAgainCore.FormFactorTruncatedCube_getRadius(self)

    def getLength(self):
        return _libBornAgainCore.FormFactorTruncatedCube_getLength(self)

    def getRemovedLength(self):
        return _libBornAgainCore.FormFactorTruncatedCube_getRemovedLength(self)

    def check_initialization(self):
        return _libBornAgainCore.FormFactorTruncatedCube_check_initialization(self)

    def init_parameters(self):
        return _libBornAgainCore.FormFactorTruncatedCube_init_parameters(self)

    def evaluate_for_q(self, q):
        return _libBornAgainCore.FormFactorTruncatedCube_evaluate_for_q(self, q)
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorTruncatedCube
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FormFactorTruncatedCube(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.FormFactorTruncatedCube__print(self, ostr)
FormFactorTruncatedCube_swigregister = _libBornAgainCore.FormFactorTruncatedCube_swigregister
FormFactorTruncatedCube_swigregister(FormFactorTruncatedCube)

class FormFactorTruncatedSphere(IFormFactorBorn):
    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorTruncatedSphere, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorTruncatedSphere, name)
    __repr__ = _swig_repr

    def __init__(self, radius, height):
        if self.__class__ == FormFactorTruncatedSphere:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_FormFactorTruncatedSphere(_self, radius, height)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorTruncatedSphere
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.FormFactorTruncatedSphere_clone(self)

    def accept(self, visitor):
        return _libBornAgainCore.FormFactorTruncatedSphere_accept(self, visitor)

    def getRadius(self):
        return _libBornAgainCore.FormFactorTruncatedSphere_getRadius(self)

    def getHeight(self):
        return _libBornAgainCore.FormFactorTruncatedSphere_getHeight(self)

    def check_initialization(self):
        return _libBornAgainCore.FormFactorTruncatedSphere_check_initialization(self)

    def init_parameters(self):
        return _libBornAgainCore.FormFactorTruncatedSphere_init_parameters(self)

    def evaluate_for_q(self, q):
        return _libBornAgainCore.FormFactorTruncatedSphere_evaluate_for_q(self, q)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FormFactorTruncatedSphere(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.FormFactorTruncatedSphere__print(self, ostr)
FormFactorTruncatedSphere_swigregister = _libBornAgainCore.FormFactorTruncatedSphere_swigregister
FormFactorTruncatedSphere_swigregister(FormFactorTruncatedSphere)

class FormFactorTruncatedSpheroid(IFormFactorBorn):
    __swig_setmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorTruncatedSpheroid, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactorBorn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorTruncatedSpheroid, name)
    __repr__ = _swig_repr

    def __init__(self, radius, height, height_flattening):
        if self.__class__ == FormFactorTruncatedSpheroid:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_FormFactorTruncatedSpheroid(_self, radius, height, height_flattening)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorTruncatedSpheroid
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.FormFactorTruncatedSpheroid_clone(self)

    def accept(self, visitor):
        return _libBornAgainCore.FormFactorTruncatedSpheroid_accept(self, visitor)

    def getHeight(self):
        return _libBornAgainCore.FormFactorTruncatedSpheroid_getHeight(self)

    def getHeightFlattening(self):
        return _libBornAgainCore.FormFactorTruncatedSpheroid_getHeightFlattening(self)

    def getRadius(self):
        return _libBornAgainCore.FormFactorTruncatedSpheroid_getRadius(self)

    def evaluate_for_q(self, q):
        return _libBornAgainCore.FormFactorTruncatedSpheroid_evaluate_for_q(self, q)

    def check_initialization(self):
        return _libBornAgainCore.FormFactorTruncatedSpheroid_check_initialization(self)

    def init_parameters(self):
        return _libBornAgainCore.FormFactorTruncatedSpheroid_init_parameters(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FormFactorTruncatedSpheroid(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.FormFactorTruncatedSpheroid__print(self, ostr)
FormFactorTruncatedSpheroid_swigregister = _libBornAgainCore.FormFactorTruncatedSpheroid_swigregister
FormFactorTruncatedSpheroid_swigregister(FormFactorTruncatedSpheroid)

class FormFactorWeighted(IFormFactor):
    __swig_setmethods__ = {}
    for _s in [IFormFactor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormFactorWeighted, name, value)
    __swig_getmethods__ = {}
    for _s in [IFormFactor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FormFactorWeighted, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == FormFactorWeighted:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_FormFactorWeighted(_self, )
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_FormFactorWeighted
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.FormFactorWeighted_clone(self)

    def accept(self, visitor):
        return _libBornAgainCore.FormFactorWeighted_accept(self, visitor)

    def getRadius(self):
        return _libBornAgainCore.FormFactorWeighted_getRadius(self)

    def addFormFactor(self, form_factor, weight=1.0):
        return _libBornAgainCore.FormFactorWeighted_addFormFactor(self, form_factor, weight)

    def setAmbientMaterial(self, material):
        return _libBornAgainCore.FormFactorWeighted_setAmbientMaterial(self, material)

    def evaluate(self, wavevectors):
        return _libBornAgainCore.FormFactorWeighted_evaluate(self, wavevectors)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FormFactorWeighted(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.FormFactorWeighted__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.FormFactorWeighted_init_parameters(self)
FormFactorWeighted_swigregister = _libBornAgainCore.FormFactorWeighted_swigregister
FormFactorWeighted_swigregister(FormFactorWeighted)

class IFTDistribution1D(IParameterized):
    __swig_setmethods__ = {}
    for _s in [IParameterized]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IFTDistribution1D, name, value)
    __swig_getmethods__ = {}
    for _s in [IParameterized]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IFTDistribution1D, name)
    __repr__ = _swig_repr

    def __init__(self, omega):
        if self.__class__ == IFTDistribution1D:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_IFTDistribution1D(_self, omega)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_IFTDistribution1D
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.IFTDistribution1D_clone(self)

    def evaluate(self, q):
        return _libBornAgainCore.IFTDistribution1D_evaluate(self, q)

    def setOmega(self, omega):
        return _libBornAgainCore.IFTDistribution1D_setOmega(self, omega)

    def getOmega(self):
        return _libBornAgainCore.IFTDistribution1D_getOmega(self)

    def _print(self, ostr):
        return _libBornAgainCore.IFTDistribution1D__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.IFTDistribution1D_init_parameters(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_IFTDistribution1D(self)
        return weakref_proxy(self)
IFTDistribution1D_swigregister = _libBornAgainCore.IFTDistribution1D_swigregister
IFTDistribution1D_swigregister(IFTDistribution1D)

class FTDistribution1DCauchy(IFTDistribution1D):
    __swig_setmethods__ = {}
    for _s in [IFTDistribution1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FTDistribution1DCauchy, name, value)
    __swig_getmethods__ = {}
    for _s in [IFTDistribution1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FTDistribution1DCauchy, name)
    __repr__ = _swig_repr

    def __init__(self, omega):
        if self.__class__ == FTDistribution1DCauchy:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_FTDistribution1DCauchy(_self, omega)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_FTDistribution1DCauchy
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.FTDistribution1DCauchy_clone(self)

    def evaluate(self, q):
        return _libBornAgainCore.FTDistribution1DCauchy_evaluate(self, q)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FTDistribution1DCauchy(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.FTDistribution1DCauchy__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.FTDistribution1DCauchy_init_parameters(self)
FTDistribution1DCauchy_swigregister = _libBornAgainCore.FTDistribution1DCauchy_swigregister
FTDistribution1DCauchy_swigregister(FTDistribution1DCauchy)

class FTDistribution1DGauss(IFTDistribution1D):
    __swig_setmethods__ = {}
    for _s in [IFTDistribution1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FTDistribution1DGauss, name, value)
    __swig_getmethods__ = {}
    for _s in [IFTDistribution1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FTDistribution1DGauss, name)
    __repr__ = _swig_repr

    def __init__(self, omega):
        if self.__class__ == FTDistribution1DGauss:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_FTDistribution1DGauss(_self, omega)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_FTDistribution1DGauss
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.FTDistribution1DGauss_clone(self)

    def evaluate(self, q):
        return _libBornAgainCore.FTDistribution1DGauss_evaluate(self, q)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FTDistribution1DGauss(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.FTDistribution1DGauss__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.FTDistribution1DGauss_init_parameters(self)
FTDistribution1DGauss_swigregister = _libBornAgainCore.FTDistribution1DGauss_swigregister
FTDistribution1DGauss_swigregister(FTDistribution1DGauss)

class FTDistribution1DGate(IFTDistribution1D):
    __swig_setmethods__ = {}
    for _s in [IFTDistribution1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FTDistribution1DGate, name, value)
    __swig_getmethods__ = {}
    for _s in [IFTDistribution1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FTDistribution1DGate, name)
    __repr__ = _swig_repr

    def __init__(self, omega):
        if self.__class__ == FTDistribution1DGate:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_FTDistribution1DGate(_self, omega)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_FTDistribution1DGate
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.FTDistribution1DGate_clone(self)

    def evaluate(self, q):
        return _libBornAgainCore.FTDistribution1DGate_evaluate(self, q)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FTDistribution1DGate(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.FTDistribution1DGate__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.FTDistribution1DGate_init_parameters(self)
FTDistribution1DGate_swigregister = _libBornAgainCore.FTDistribution1DGate_swigregister
FTDistribution1DGate_swigregister(FTDistribution1DGate)

class FTDistribution1DTriangle(IFTDistribution1D):
    __swig_setmethods__ = {}
    for _s in [IFTDistribution1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FTDistribution1DTriangle, name, value)
    __swig_getmethods__ = {}
    for _s in [IFTDistribution1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FTDistribution1DTriangle, name)
    __repr__ = _swig_repr

    def __init__(self, omega):
        if self.__class__ == FTDistribution1DTriangle:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_FTDistribution1DTriangle(_self, omega)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_FTDistribution1DTriangle
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.FTDistribution1DTriangle_clone(self)

    def evaluate(self, q):
        return _libBornAgainCore.FTDistribution1DTriangle_evaluate(self, q)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FTDistribution1DTriangle(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.FTDistribution1DTriangle__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.FTDistribution1DTriangle_init_parameters(self)
FTDistribution1DTriangle_swigregister = _libBornAgainCore.FTDistribution1DTriangle_swigregister
FTDistribution1DTriangle_swigregister(FTDistribution1DTriangle)

class FTDistribution1DCosine(IFTDistribution1D):
    __swig_setmethods__ = {}
    for _s in [IFTDistribution1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FTDistribution1DCosine, name, value)
    __swig_getmethods__ = {}
    for _s in [IFTDistribution1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FTDistribution1DCosine, name)
    __repr__ = _swig_repr

    def __init__(self, omega):
        if self.__class__ == FTDistribution1DCosine:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_FTDistribution1DCosine(_self, omega)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_FTDistribution1DCosine
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.FTDistribution1DCosine_clone(self)

    def evaluate(self, q):
        return _libBornAgainCore.FTDistribution1DCosine_evaluate(self, q)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FTDistribution1DCosine(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.FTDistribution1DCosine__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.FTDistribution1DCosine_init_parameters(self)
FTDistribution1DCosine_swigregister = _libBornAgainCore.FTDistribution1DCosine_swigregister
FTDistribution1DCosine_swigregister(FTDistribution1DCosine)

class FTDistribution1DVoigt(IFTDistribution1D):
    __swig_setmethods__ = {}
    for _s in [IFTDistribution1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FTDistribution1DVoigt, name, value)
    __swig_getmethods__ = {}
    for _s in [IFTDistribution1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FTDistribution1DVoigt, name)
    __repr__ = _swig_repr

    def __init__(self, omega, eta):
        if self.__class__ == FTDistribution1DVoigt:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_FTDistribution1DVoigt(_self, omega, eta)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_FTDistribution1DVoigt
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.FTDistribution1DVoigt_clone(self)

    def evaluate(self, q):
        return _libBornAgainCore.FTDistribution1DVoigt_evaluate(self, q)

    def getEta(self):
        return _libBornAgainCore.FTDistribution1DVoigt_getEta(self)

    def init_parameters(self):
        return _libBornAgainCore.FTDistribution1DVoigt_init_parameters(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FTDistribution1DVoigt(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.FTDistribution1DVoigt__print(self, ostr)
FTDistribution1DVoigt_swigregister = _libBornAgainCore.FTDistribution1DVoigt_swigregister
FTDistribution1DVoigt_swigregister(FTDistribution1DVoigt)

class IFTDistribution2D(IParameterized):
    __swig_setmethods__ = {}
    for _s in [IParameterized]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IFTDistribution2D, name, value)
    __swig_getmethods__ = {}
    for _s in [IParameterized]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IFTDistribution2D, name)
    __repr__ = _swig_repr

    def __init__(self, coherence_length_x, coherence_length_y):
        if self.__class__ == IFTDistribution2D:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_IFTDistribution2D(_self, coherence_length_x, coherence_length_y)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_IFTDistribution2D
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.IFTDistribution2D_clone(self)

    def setGamma(self, gamma):
        return _libBornAgainCore.IFTDistribution2D_setGamma(self, gamma)

    def getGamma(self):
        return _libBornAgainCore.IFTDistribution2D_getGamma(self)

    def getDelta(self):
        return _libBornAgainCore.IFTDistribution2D_getDelta(self)

    def getCoherenceLengthX(self):
        return _libBornAgainCore.IFTDistribution2D_getCoherenceLengthX(self)

    def getCoherenceLengthY(self):
        return _libBornAgainCore.IFTDistribution2D_getCoherenceLengthY(self)

    def evaluate(self, qx, qy):
        return _libBornAgainCore.IFTDistribution2D_evaluate(self, qx, qy)

    def _print(self, ostr):
        return _libBornAgainCore.IFTDistribution2D__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.IFTDistribution2D_init_parameters(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_IFTDistribution2D(self)
        return weakref_proxy(self)
IFTDistribution2D_swigregister = _libBornAgainCore.IFTDistribution2D_swigregister
IFTDistribution2D_swigregister(IFTDistribution2D)

class FTDistribution2DCauchy(IFTDistribution2D):
    __swig_setmethods__ = {}
    for _s in [IFTDistribution2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FTDistribution2DCauchy, name, value)
    __swig_getmethods__ = {}
    for _s in [IFTDistribution2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FTDistribution2DCauchy, name)
    __repr__ = _swig_repr

    def __init__(self, coherence_length_x, coherence_length_y):
        if self.__class__ == FTDistribution2DCauchy:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_FTDistribution2DCauchy(_self, coherence_length_x, coherence_length_y)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_FTDistribution2DCauchy
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.FTDistribution2DCauchy_clone(self)

    def evaluate(self, qx, qy):
        return _libBornAgainCore.FTDistribution2DCauchy_evaluate(self, qx, qy)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FTDistribution2DCauchy(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.FTDistribution2DCauchy__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.FTDistribution2DCauchy_init_parameters(self)
FTDistribution2DCauchy_swigregister = _libBornAgainCore.FTDistribution2DCauchy_swigregister
FTDistribution2DCauchy_swigregister(FTDistribution2DCauchy)

class FTDistribution2DGauss(IFTDistribution2D):
    __swig_setmethods__ = {}
    for _s in [IFTDistribution2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FTDistribution2DGauss, name, value)
    __swig_getmethods__ = {}
    for _s in [IFTDistribution2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FTDistribution2DGauss, name)
    __repr__ = _swig_repr

    def __init__(self, coherence_length_x, coherence_length_y):
        if self.__class__ == FTDistribution2DGauss:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_FTDistribution2DGauss(_self, coherence_length_x, coherence_length_y)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_FTDistribution2DGauss
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.FTDistribution2DGauss_clone(self)

    def evaluate(self, qx, qy):
        return _libBornAgainCore.FTDistribution2DGauss_evaluate(self, qx, qy)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FTDistribution2DGauss(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.FTDistribution2DGauss__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.FTDistribution2DGauss_init_parameters(self)
FTDistribution2DGauss_swigregister = _libBornAgainCore.FTDistribution2DGauss_swigregister
FTDistribution2DGauss_swigregister(FTDistribution2DGauss)

class FTDistribution2DGate(IFTDistribution2D):
    __swig_setmethods__ = {}
    for _s in [IFTDistribution2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FTDistribution2DGate, name, value)
    __swig_getmethods__ = {}
    for _s in [IFTDistribution2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FTDistribution2DGate, name)
    __repr__ = _swig_repr

    def __init__(self, coherence_length_x, coherence_length_y):
        if self.__class__ == FTDistribution2DGate:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_FTDistribution2DGate(_self, coherence_length_x, coherence_length_y)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_FTDistribution2DGate
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.FTDistribution2DGate_clone(self)

    def evaluate(self, qx, qy):
        return _libBornAgainCore.FTDistribution2DGate_evaluate(self, qx, qy)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FTDistribution2DGate(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.FTDistribution2DGate__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.FTDistribution2DGate_init_parameters(self)
FTDistribution2DGate_swigregister = _libBornAgainCore.FTDistribution2DGate_swigregister
FTDistribution2DGate_swigregister(FTDistribution2DGate)

class FTDistribution2DCone(IFTDistribution2D):
    __swig_setmethods__ = {}
    for _s in [IFTDistribution2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FTDistribution2DCone, name, value)
    __swig_getmethods__ = {}
    for _s in [IFTDistribution2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FTDistribution2DCone, name)
    __repr__ = _swig_repr

    def __init__(self, coherence_length_x, coherence_length_y):
        if self.__class__ == FTDistribution2DCone:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_FTDistribution2DCone(_self, coherence_length_x, coherence_length_y)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_FTDistribution2DCone
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.FTDistribution2DCone_clone(self)

    def evaluate(self, qx, qy):
        return _libBornAgainCore.FTDistribution2DCone_evaluate(self, qx, qy)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FTDistribution2DCone(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.FTDistribution2DCone__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.FTDistribution2DCone_init_parameters(self)
FTDistribution2DCone_swigregister = _libBornAgainCore.FTDistribution2DCone_swigregister
FTDistribution2DCone_swigregister(FTDistribution2DCone)

class FTDistribution2DVoigt(IFTDistribution2D):
    __swig_setmethods__ = {}
    for _s in [IFTDistribution2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FTDistribution2DVoigt, name, value)
    __swig_getmethods__ = {}
    for _s in [IFTDistribution2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FTDistribution2DVoigt, name)
    __repr__ = _swig_repr

    def __init__(self, coherence_length_x, coherence_length_y, eta):
        if self.__class__ == FTDistribution2DVoigt:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_FTDistribution2DVoigt(_self, coherence_length_x, coherence_length_y, eta)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_FTDistribution2DVoigt
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.FTDistribution2DVoigt_clone(self)

    def evaluate(self, qx, qy):
        return _libBornAgainCore.FTDistribution2DVoigt_evaluate(self, qx, qy)

    def getEta(self):
        return _libBornAgainCore.FTDistribution2DVoigt_getEta(self)

    def init_parameters(self):
        return _libBornAgainCore.FTDistribution2DVoigt_init_parameters(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FTDistribution2DVoigt(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.FTDistribution2DVoigt__print(self, ostr)
FTDistribution2DVoigt_swigregister = _libBornAgainCore.FTDistribution2DVoigt_swigregister
FTDistribution2DVoigt_swigregister(FTDistribution2DVoigt)

class IFTDecayFunction1D(IParameterized):
    __swig_setmethods__ = {}
    for _s in [IParameterized]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IFTDecayFunction1D, name, value)
    __swig_getmethods__ = {}
    for _s in [IParameterized]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IFTDecayFunction1D, name)
    __repr__ = _swig_repr

    def __init__(self, omega):
        if self.__class__ == IFTDecayFunction1D:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_IFTDecayFunction1D(_self, omega)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_IFTDecayFunction1D
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.IFTDecayFunction1D_clone(self)

    def evaluate(self, q):
        return _libBornAgainCore.IFTDecayFunction1D_evaluate(self, q)

    def setOmega(self, omega):
        return _libBornAgainCore.IFTDecayFunction1D_setOmega(self, omega)

    def getOmega(self):
        return _libBornAgainCore.IFTDecayFunction1D_getOmega(self)

    def _print(self, ostr):
        return _libBornAgainCore.IFTDecayFunction1D__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.IFTDecayFunction1D_init_parameters(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_IFTDecayFunction1D(self)
        return weakref_proxy(self)
IFTDecayFunction1D_swigregister = _libBornAgainCore.IFTDecayFunction1D_swigregister
IFTDecayFunction1D_swigregister(IFTDecayFunction1D)

class FTDecayFunction1DCauchy(IFTDecayFunction1D):
    __swig_setmethods__ = {}
    for _s in [IFTDecayFunction1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FTDecayFunction1DCauchy, name, value)
    __swig_getmethods__ = {}
    for _s in [IFTDecayFunction1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FTDecayFunction1DCauchy, name)
    __repr__ = _swig_repr

    def __init__(self, omega):
        if self.__class__ == FTDecayFunction1DCauchy:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_FTDecayFunction1DCauchy(_self, omega)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_FTDecayFunction1DCauchy
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.FTDecayFunction1DCauchy_clone(self)

    def evaluate(self, q):
        return _libBornAgainCore.FTDecayFunction1DCauchy_evaluate(self, q)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FTDecayFunction1DCauchy(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.FTDecayFunction1DCauchy__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.FTDecayFunction1DCauchy_init_parameters(self)
FTDecayFunction1DCauchy_swigregister = _libBornAgainCore.FTDecayFunction1DCauchy_swigregister
FTDecayFunction1DCauchy_swigregister(FTDecayFunction1DCauchy)

class FTDecayFunction1DGauss(IFTDecayFunction1D):
    __swig_setmethods__ = {}
    for _s in [IFTDecayFunction1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FTDecayFunction1DGauss, name, value)
    __swig_getmethods__ = {}
    for _s in [IFTDecayFunction1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FTDecayFunction1DGauss, name)
    __repr__ = _swig_repr

    def __init__(self, omega):
        if self.__class__ == FTDecayFunction1DGauss:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_FTDecayFunction1DGauss(_self, omega)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_FTDecayFunction1DGauss
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.FTDecayFunction1DGauss_clone(self)

    def evaluate(self, q):
        return _libBornAgainCore.FTDecayFunction1DGauss_evaluate(self, q)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FTDecayFunction1DGauss(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.FTDecayFunction1DGauss__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.FTDecayFunction1DGauss_init_parameters(self)
FTDecayFunction1DGauss_swigregister = _libBornAgainCore.FTDecayFunction1DGauss_swigregister
FTDecayFunction1DGauss_swigregister(FTDecayFunction1DGauss)

class FTDecayFunction1DTriangle(IFTDecayFunction1D):
    __swig_setmethods__ = {}
    for _s in [IFTDecayFunction1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FTDecayFunction1DTriangle, name, value)
    __swig_getmethods__ = {}
    for _s in [IFTDecayFunction1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FTDecayFunction1DTriangle, name)
    __repr__ = _swig_repr

    def __init__(self, omega):
        if self.__class__ == FTDecayFunction1DTriangle:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_FTDecayFunction1DTriangle(_self, omega)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_FTDecayFunction1DTriangle
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.FTDecayFunction1DTriangle_clone(self)

    def evaluate(self, q):
        return _libBornAgainCore.FTDecayFunction1DTriangle_evaluate(self, q)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FTDecayFunction1DTriangle(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.FTDecayFunction1DTriangle__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.FTDecayFunction1DTriangle_init_parameters(self)
FTDecayFunction1DTriangle_swigregister = _libBornAgainCore.FTDecayFunction1DTriangle_swigregister
FTDecayFunction1DTriangle_swigregister(FTDecayFunction1DTriangle)

class FTDecayFunction1DVoigt(IFTDecayFunction1D):
    __swig_setmethods__ = {}
    for _s in [IFTDecayFunction1D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FTDecayFunction1DVoigt, name, value)
    __swig_getmethods__ = {}
    for _s in [IFTDecayFunction1D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FTDecayFunction1DVoigt, name)
    __repr__ = _swig_repr

    def __init__(self, omega, eta):
        if self.__class__ == FTDecayFunction1DVoigt:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_FTDecayFunction1DVoigt(_self, omega, eta)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_FTDecayFunction1DVoigt
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.FTDecayFunction1DVoigt_clone(self)

    def evaluate(self, q):
        return _libBornAgainCore.FTDecayFunction1DVoigt_evaluate(self, q)

    def getEta(self):
        return _libBornAgainCore.FTDecayFunction1DVoigt_getEta(self)

    def init_parameters(self):
        return _libBornAgainCore.FTDecayFunction1DVoigt_init_parameters(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FTDecayFunction1DVoigt(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.FTDecayFunction1DVoigt__print(self, ostr)
FTDecayFunction1DVoigt_swigregister = _libBornAgainCore.FTDecayFunction1DVoigt_swigregister
FTDecayFunction1DVoigt_swigregister(FTDecayFunction1DVoigt)

class IFTDecayFunction2D(IParameterized):
    __swig_setmethods__ = {}
    for _s in [IParameterized]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IFTDecayFunction2D, name, value)
    __swig_getmethods__ = {}
    for _s in [IParameterized]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IFTDecayFunction2D, name)
    __repr__ = _swig_repr

    def __init__(self, decay_length_x, decay_length_y):
        if self.__class__ == IFTDecayFunction2D:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_IFTDecayFunction2D(_self, decay_length_x, decay_length_y)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_IFTDecayFunction2D
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.IFTDecayFunction2D_clone(self)

    def setGamma(self, gamma):
        return _libBornAgainCore.IFTDecayFunction2D_setGamma(self, gamma)

    def getGamma(self):
        return _libBornAgainCore.IFTDecayFunction2D_getGamma(self)

    def getDelta(self):
        return _libBornAgainCore.IFTDecayFunction2D_getDelta(self)

    def getDecayLengthX(self):
        return _libBornAgainCore.IFTDecayFunction2D_getDecayLengthX(self)

    def getDecayLengthY(self):
        return _libBornAgainCore.IFTDecayFunction2D_getDecayLengthY(self)

    def evaluate(self, qx, qy):
        return _libBornAgainCore.IFTDecayFunction2D_evaluate(self, qx, qy)

    def transformToStarBasis(self, qX, qY, alpha, a, b, qa, qb):
        return _libBornAgainCore.IFTDecayFunction2D_transformToStarBasis(self, qX, qY, alpha, a, b, qa, qb)

    def _print(self, ostr):
        return _libBornAgainCore.IFTDecayFunction2D__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.IFTDecayFunction2D_init_parameters(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_IFTDecayFunction2D(self)
        return weakref_proxy(self)
IFTDecayFunction2D_swigregister = _libBornAgainCore.IFTDecayFunction2D_swigregister
IFTDecayFunction2D_swigregister(IFTDecayFunction2D)

class FTDecayFunction2DCauchy(IFTDecayFunction2D):
    __swig_setmethods__ = {}
    for _s in [IFTDecayFunction2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FTDecayFunction2DCauchy, name, value)
    __swig_getmethods__ = {}
    for _s in [IFTDecayFunction2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FTDecayFunction2DCauchy, name)
    __repr__ = _swig_repr

    def __init__(self, decay_length_x, decay_length_y):
        if self.__class__ == FTDecayFunction2DCauchy:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_FTDecayFunction2DCauchy(_self, decay_length_x, decay_length_y)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_FTDecayFunction2DCauchy
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.FTDecayFunction2DCauchy_clone(self)

    def evaluate(self, qx, qy):
        return _libBornAgainCore.FTDecayFunction2DCauchy_evaluate(self, qx, qy)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FTDecayFunction2DCauchy(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.FTDecayFunction2DCauchy__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.FTDecayFunction2DCauchy_init_parameters(self)
FTDecayFunction2DCauchy_swigregister = _libBornAgainCore.FTDecayFunction2DCauchy_swigregister
FTDecayFunction2DCauchy_swigregister(FTDecayFunction2DCauchy)

class FTDecayFunction2DGauss(IFTDecayFunction2D):
    __swig_setmethods__ = {}
    for _s in [IFTDecayFunction2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FTDecayFunction2DGauss, name, value)
    __swig_getmethods__ = {}
    for _s in [IFTDecayFunction2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FTDecayFunction2DGauss, name)
    __repr__ = _swig_repr

    def __init__(self, decay_length_x, decay_length_y):
        if self.__class__ == FTDecayFunction2DGauss:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_FTDecayFunction2DGauss(_self, decay_length_x, decay_length_y)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_FTDecayFunction2DGauss
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.FTDecayFunction2DGauss_clone(self)

    def evaluate(self, qx, qy):
        return _libBornAgainCore.FTDecayFunction2DGauss_evaluate(self, qx, qy)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FTDecayFunction2DGauss(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.FTDecayFunction2DGauss__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.FTDecayFunction2DGauss_init_parameters(self)
FTDecayFunction2DGauss_swigregister = _libBornAgainCore.FTDecayFunction2DGauss_swigregister
FTDecayFunction2DGauss_swigregister(FTDecayFunction2DGauss)

class FTDecayFunction2DVoigt(IFTDecayFunction2D):
    __swig_setmethods__ = {}
    for _s in [IFTDecayFunction2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FTDecayFunction2DVoigt, name, value)
    __swig_getmethods__ = {}
    for _s in [IFTDecayFunction2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FTDecayFunction2DVoigt, name)
    __repr__ = _swig_repr

    def __init__(self, decay_length_x, decay_length_y, eta):
        if self.__class__ == FTDecayFunction2DVoigt:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_FTDecayFunction2DVoigt(_self, decay_length_x, decay_length_y, eta)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_FTDecayFunction2DVoigt
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.FTDecayFunction2DVoigt_clone(self)

    def evaluate(self, qx, qy):
        return _libBornAgainCore.FTDecayFunction2DVoigt_evaluate(self, qx, qy)

    def getEta(self):
        return _libBornAgainCore.FTDecayFunction2DVoigt_getEta(self)

    def init_parameters(self):
        return _libBornAgainCore.FTDecayFunction2DVoigt_init_parameters(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_FTDecayFunction2DVoigt(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.FTDecayFunction2DVoigt__print(self, ostr)
FTDecayFunction2DVoigt_swigregister = _libBornAgainCore.FTDecayFunction2DVoigt_swigregister
FTDecayFunction2DVoigt_swigregister(FTDecayFunction2DVoigt)

class IMaterial(INamed):
    __swig_setmethods__ = {}
    for _s in [INamed]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMaterial, name, value)
    __swig_getmethods__ = {}
    for _s in [INamed]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IMaterial, name)
    __repr__ = _swig_repr

    def __init__(self, name):
        if self.__class__ == IMaterial:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_IMaterial(_self, name)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_IMaterial
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.IMaterial_clone(self)

    def isScalarMaterial(self):
        return _libBornAgainCore.IMaterial_isScalarMaterial(self)

    def getRefractiveIndex(self):
        return _libBornAgainCore.IMaterial_getRefractiveIndex(self)

    def createTransformedMaterial(self, rotation):
        return _libBornAgainCore.IMaterial_createTransformedMaterial(self, rotation)

    def _print(self, ostr):
        return _libBornAgainCore.IMaterial__print(self, ostr)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_IMaterial(self)
        return weakref_proxy(self)
IMaterial_swigregister = _libBornAgainCore.IMaterial_swigregister
IMaterial_swigregister(IMaterial)

class Simulation(ICloneable, IParameterized):
    __swig_setmethods__ = {}
    for _s in [ICloneable, IParameterized]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Simulation, name, value)
    __swig_getmethods__ = {}
    for _s in [ICloneable, IParameterized]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Simulation, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_Simulation
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.Simulation_clone(self)

    def prepareSimulation(self):
        return _libBornAgainCore.Simulation_prepareSimulation(self)

    def runSimulation(self):
        return _libBornAgainCore.Simulation_runSimulation(self)

    def runOMPISimulation(self):
        return _libBornAgainCore.Simulation_runOMPISimulation(self)

    def setSample(self, sample):
        return _libBornAgainCore.Simulation_setSample(self, sample)

    def getSample(self):
        return _libBornAgainCore.Simulation_getSample(self)

    def setSampleBuilder(self, sample_builder):
        return _libBornAgainCore.Simulation_setSampleBuilder(self, sample_builder)

    def getSampleBuilder(self):
        return _libBornAgainCore.Simulation_getSampleBuilder(self)

    def getSimulationParameters(self):
        return _libBornAgainCore.Simulation_getSimulationParameters(self)

    def setSimulationParameters(self, sim_params):
        return _libBornAgainCore.Simulation_setSimulationParameters(self, sim_params)

    def setThreadInfo(self, thread_info):
        return _libBornAgainCore.Simulation_setThreadInfo(self, thread_info)

    def setProgramOptions(self, p_options):
        return _libBornAgainCore.Simulation_setProgramOptions(self, p_options)

    def getNumberOfSimulationElements(self):
        return _libBornAgainCore.Simulation_getNumberOfSimulationElements(self)

    def getDetectorIntensity(self, *args):
        return _libBornAgainCore.Simulation_getDetectorIntensity(self, *args)

    def addParametersToExternalPool(self, path, external_pool, copy_number=-1):
        return _libBornAgainCore.Simulation_addParametersToExternalPool(self, path, external_pool, copy_number)

    def addParameterDistribution(self, *args):
        return _libBornAgainCore.Simulation_addParameterDistribution(self, *args)

    def getDistributionHandler(self):
        return _libBornAgainCore.Simulation_getDistributionHandler(self)

    def __init__(self, *args):
        if self.__class__ == Simulation:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_Simulation(_self, *args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def init_parameters(self):
        return _libBornAgainCore.Simulation_init_parameters(self)

    def initSimulationElementVector(self):
        return _libBornAgainCore.Simulation_initSimulationElementVector(self)

    def transferResultsToIntensityMap(self):
        return _libBornAgainCore.Simulation_transferResultsToIntensityMap(self)

    def getBeamIntensity(self):
        return _libBornAgainCore.Simulation_getBeamIntensity(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_Simulation(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.Simulation__print(self, ostr)
Simulation_swigregister = _libBornAgainCore.Simulation_swigregister
Simulation_swigregister(Simulation)

class GISASSimulation(Simulation):
    __swig_setmethods__ = {}
    for _s in [Simulation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GISASSimulation, name, value)
    __swig_getmethods__ = {}
    for _s in [Simulation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GISASSimulation, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_GISASSimulation
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.GISASSimulation_clone(self)

    def prepareSimulation(self):
        return _libBornAgainCore.GISASSimulation_prepareSimulation(self)

    def getNumberOfSimulationElements(self):
        return _libBornAgainCore.GISASSimulation_getNumberOfSimulationElements(self)

    def getOutputData(self):
        return _libBornAgainCore.GISASSimulation_getOutputData(self)

    def getDetectorIntensity(self, *args):
        return _libBornAgainCore.GISASSimulation_getDetectorIntensity(self, *args)

    def getIntensityData(self, *args):
        return _libBornAgainCore.GISASSimulation_getIntensityData(self, *args)

    def setInstrument(self, instrument):
        return _libBornAgainCore.GISASSimulation_setInstrument(self, instrument)

    def getInstrument(self, *args):
        return _libBornAgainCore.GISASSimulation_getInstrument(self, *args)

    def setBeamParameters(self, wavelength, alpha_i, phi_i):
        return _libBornAgainCore.GISASSimulation_setBeamParameters(self, wavelength, alpha_i, phi_i)

    def setBeamIntensity(self, intensity):
        return _libBornAgainCore.GISASSimulation_setBeamIntensity(self, intensity)

    def setBeamPolarization(self, bloch_vector):
        return _libBornAgainCore.GISASSimulation_setBeamPolarization(self, bloch_vector)

    def setDetector(self, detector):
        return _libBornAgainCore.GISASSimulation_setDetector(self, detector)

    def setDetectorParameters(self, *args):
        return _libBornAgainCore.GISASSimulation_setDetectorParameters(self, *args)

    def setDetectorResolutionFunction(self, resolution_function):
        return _libBornAgainCore.GISASSimulation_setDetectorResolutionFunction(self, resolution_function)

    def removeDetectorResolutionFunction(self):
        return _libBornAgainCore.GISASSimulation_removeDetectorResolutionFunction(self)

    def setAnalyzerProperties(self, direction, efficiency, total_transmission=1.0):
        return _libBornAgainCore.GISASSimulation_setAnalyzerProperties(self, direction, efficiency, total_transmission)

    def removeMasks(self):
        return _libBornAgainCore.GISASSimulation_removeMasks(self)

    def addMask(self, shape, mask_value=True):
        return _libBornAgainCore.GISASSimulation_addMask(self, shape, mask_value)

    def maskAll(self):
        return _libBornAgainCore.GISASSimulation_maskAll(self)

    def addParametersToExternalPool(self, path, external_pool, copy_number=-1):
        return _libBornAgainCore.GISASSimulation_addParametersToExternalPool(self, path, external_pool, copy_number)

    def __init__(self, *args):
        if self.__class__ == GISASSimulation:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_GISASSimulation(_self, *args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def init_parameters(self):
        return _libBornAgainCore.GISASSimulation_init_parameters(self)

    def initSimulationElementVector(self):
        return _libBornAgainCore.GISASSimulation_initSimulationElementVector(self)

    def transferResultsToIntensityMap(self):
        return _libBornAgainCore.GISASSimulation_transferResultsToIntensityMap(self)

    def getBeamIntensity(self):
        return _libBornAgainCore.GISASSimulation_getBeamIntensity(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_GISASSimulation(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.GISASSimulation__print(self, ostr)
GISASSimulation_swigregister = _libBornAgainCore.GISASSimulation_swigregister
GISASSimulation_swigregister(GISASSimulation)

class IHistogram(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IHistogram, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IHistogram, name)
    __repr__ = _swig_repr
    INTEGRAL = _libBornAgainCore.IHistogram_INTEGRAL
    AVERAGE = _libBornAgainCore.IHistogram_AVERAGE
    ERROR = _libBornAgainCore.IHistogram_ERROR
    NENTRIES = _libBornAgainCore.IHistogram_NENTRIES
    __swig_destroy__ = _libBornAgainCore.delete_IHistogram
    __del__ = lambda self: None

    def __init__(self, *args):
        if self.__class__ == IHistogram:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_IHistogram(_self, *args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def clone(self):
        return _libBornAgainCore.IHistogram_clone(self)

    def getRank(self):
        return _libBornAgainCore.IHistogram_getRank(self)

    def getTotalNumberOfBins(self):
        return _libBornAgainCore.IHistogram_getTotalNumberOfBins(self)

    def getXaxis(self):
        return _libBornAgainCore.IHistogram_getXaxis(self)

    def getYaxis(self):
        return _libBornAgainCore.IHistogram_getYaxis(self)

    def getXmin(self):
        return _libBornAgainCore.IHistogram_getXmin(self)

    def getXmax(self):
        return _libBornAgainCore.IHistogram_getXmax(self)

    def getNbinsX(self):
        return _libBornAgainCore.IHistogram_getNbinsX(self)

    def getYmin(self):
        return _libBornAgainCore.IHistogram_getYmin(self)

    def getYmax(self):
        return _libBornAgainCore.IHistogram_getYmax(self)

    def getNbinsY(self):
        return _libBornAgainCore.IHistogram_getNbinsY(self)

    def getGlobalBin(self, binx, biny=0):
        return _libBornAgainCore.IHistogram_getGlobalBin(self, binx, biny)

    def findGlobalBin(self, x, y):
        return _libBornAgainCore.IHistogram_findGlobalBin(self, x, y)

    def getXaxisIndex(self, globalbin):
        return _libBornAgainCore.IHistogram_getXaxisIndex(self, globalbin)

    def getYaxisIndex(self, globalbin):
        return _libBornAgainCore.IHistogram_getYaxisIndex(self, globalbin)

    def getXaxisValue(self, globalbin):
        return _libBornAgainCore.IHistogram_getXaxisValue(self, globalbin)

    def getYaxisValue(self, globalbin):
        return _libBornAgainCore.IHistogram_getYaxisValue(self, globalbin)

    def getBinContent(self, *args):
        return _libBornAgainCore.IHistogram_getBinContent(self, *args)

    def setBinContent(self, globalbin, value):
        return _libBornAgainCore.IHistogram_setBinContent(self, globalbin, value)

    def addBinContent(self, globalbin, value):
        return _libBornAgainCore.IHistogram_addBinContent(self, globalbin, value)

    def getBinError(self, *args):
        return _libBornAgainCore.IHistogram_getBinError(self, *args)

    def getBinAverage(self, *args):
        return _libBornAgainCore.IHistogram_getBinAverage(self, *args)

    def getBinNumberOfEntries(self, *args):
        return _libBornAgainCore.IHistogram_getBinNumberOfEntries(self, *args)

    def getMaximum(self):
        return _libBornAgainCore.IHistogram_getMaximum(self)

    def getMaximumBinIndex(self):
        return _libBornAgainCore.IHistogram_getMaximumBinIndex(self)

    def getMinimum(self):
        return _libBornAgainCore.IHistogram_getMinimum(self)

    def getMinimumBinIndex(self):
        return _libBornAgainCore.IHistogram_getMinimumBinIndex(self)

    def scale(self, value):
        return _libBornAgainCore.IHistogram_scale(self, value)

    def integral(self):
        return _libBornAgainCore.IHistogram_integral(self)

    def getArray(self, *args):
        return _libBornAgainCore.IHistogram_getArray(self, *args)

    def reset(self):
        return _libBornAgainCore.IHistogram_reset(self)
    __swig_getmethods__["createHistogram"] = lambda x: _libBornAgainCore.IHistogram_createHistogram
    if _newclass:
        createHistogram = staticmethod(_libBornAgainCore.IHistogram_createHistogram)
    __swig_getmethods__["createFrom"] = lambda x: _libBornAgainCore.IHistogram_createFrom
    if _newclass:
        createFrom = staticmethod(_libBornAgainCore.IHistogram_createFrom)

    def createOutputData(self, *args):
        return _libBornAgainCore.IHistogram_createOutputData(self, *args)

    def hasSameShape(self, other):
        return _libBornAgainCore.IHistogram_hasSameShape(self, other)

    def hasSameDimensions(self, other):
        return _libBornAgainCore.IHistogram_hasSameDimensions(self, other)

    def __iadd__(self, right):
        return _libBornAgainCore.IHistogram___iadd__(self, right)

    def relativeDifferenceHistogram(self, rhs):
        return _libBornAgainCore.IHistogram_relativeDifferenceHistogram(self, rhs)

    def save(self, filename):
        return _libBornAgainCore.IHistogram_save(self, filename)

    def load(self, filename):
        return _libBornAgainCore.IHistogram_load(self, filename)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_IHistogram(self)
        return weakref_proxy(self)
IHistogram_swigregister = _libBornAgainCore.IHistogram_swigregister
IHistogram_swigregister(IHistogram)

def IHistogram_createHistogram(source):
    return _libBornAgainCore.IHistogram_createHistogram(source)
IHistogram_createHistogram = _libBornAgainCore.IHistogram_createHistogram

def IHistogram_createFrom(filename):
    return _libBornAgainCore.IHistogram_createFrom(filename)
IHistogram_createFrom = _libBornAgainCore.IHistogram_createFrom

class Histogram1D(IHistogram):
    __swig_setmethods__ = {}
    for _s in [IHistogram]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Histogram1D, name, value)
    __swig_getmethods__ = {}
    for _s in [IHistogram]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Histogram1D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == Histogram1D:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_Histogram1D(_self, *args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def clone(self):
        return _libBornAgainCore.Histogram1D_clone(self)

    def getRank(self):
        return _libBornAgainCore.Histogram1D_getRank(self)

    def fill(self, x, weight=1.0):
        return _libBornAgainCore.Histogram1D_fill(self, x, weight)

    def getBinCenters(self):
        return _libBornAgainCore.Histogram1D_getBinCenters(self)

    def getBinValues(self):
        return _libBornAgainCore.Histogram1D_getBinValues(self)

    def getBinErrors(self):
        return _libBornAgainCore.Histogram1D_getBinErrors(self)

    def getBinCentersNumpy(self):
        return _libBornAgainCore.Histogram1D_getBinCentersNumpy(self)

    def getBinValuesNumpy(self):
        return _libBornAgainCore.Histogram1D_getBinValuesNumpy(self)

    def getBinErrorsNumpy(self):
        return _libBornAgainCore.Histogram1D_getBinErrorsNumpy(self)

    def crop(self, xmin, xmax):
        return _libBornAgainCore.Histogram1D_crop(self, xmin, xmax)
    __swig_destroy__ = _libBornAgainCore.delete_Histogram1D
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_Histogram1D(self)
        return weakref_proxy(self)
Histogram1D_swigregister = _libBornAgainCore.Histogram1D_swigregister
Histogram1D_swigregister(Histogram1D)

class Histogram2D(IHistogram):
    __swig_setmethods__ = {}
    for _s in [IHistogram]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Histogram2D, name, value)
    __swig_getmethods__ = {}
    for _s in [IHistogram]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Histogram2D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == Histogram2D:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_Histogram2D(_self, *args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def clone(self):
        return _libBornAgainCore.Histogram2D_clone(self)

    def getRank(self):
        return _libBornAgainCore.Histogram2D_getRank(self)

    def fill(self, x, y, weight=1.0):
        return _libBornAgainCore.Histogram2D_fill(self, x, y, weight)

    def projectionX(self, *args):
        return _libBornAgainCore.Histogram2D_projectionX(self, *args)

    def projectionY(self, *args):
        return _libBornAgainCore.Histogram2D_projectionY(self, *args)

    def crop(self, xmin, ymin, xmax, ymax):
        return _libBornAgainCore.Histogram2D_crop(self, xmin, ymin, xmax, ymax)
    __swig_destroy__ = _libBornAgainCore.delete_Histogram2D
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_Histogram2D(self)
        return weakref_proxy(self)
Histogram2D_swigregister = _libBornAgainCore.Histogram2D_swigregister
Histogram2D_swigregister(Histogram2D)

class HomogeneousMaterial(IMaterial):
    __swig_setmethods__ = {}
    for _s in [IMaterial]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HomogeneousMaterial, name, value)
    __swig_getmethods__ = {}
    for _s in [IMaterial]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HomogeneousMaterial, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == HomogeneousMaterial:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_HomogeneousMaterial(_self, *args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_HomogeneousMaterial
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.HomogeneousMaterial_clone(self)

    def getRefractiveIndex(self):
        return _libBornAgainCore.HomogeneousMaterial_getRefractiveIndex(self)

    def setRefractiveIndex(self, refractive_index):
        return _libBornAgainCore.HomogeneousMaterial_setRefractiveIndex(self, refractive_index)

    def createTransformedMaterial(self, rotation):
        return _libBornAgainCore.HomogeneousMaterial_createTransformedMaterial(self, rotation)

    def _print(self, ostr):
        return _libBornAgainCore.HomogeneousMaterial__print(self, ostr)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_HomogeneousMaterial(self)
        return weakref_proxy(self)
HomogeneousMaterial_swigregister = _libBornAgainCore.HomogeneousMaterial_swigregister
HomogeneousMaterial_swigregister(HomogeneousMaterial)

class HomogeneousMagneticMaterial(HomogeneousMaterial):
    __swig_setmethods__ = {}
    for _s in [HomogeneousMaterial]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HomogeneousMagneticMaterial, name, value)
    __swig_getmethods__ = {}
    for _s in [HomogeneousMaterial]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HomogeneousMagneticMaterial, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == HomogeneousMagneticMaterial:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_HomogeneousMagneticMaterial(_self, *args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def clone(self):
        return _libBornAgainCore.HomogeneousMagneticMaterial_clone(self)

    def getMagneticField(self):
        return _libBornAgainCore.HomogeneousMagneticMaterial_getMagneticField(self)

    def setMagneticField(self, magnetic_field):
        return _libBornAgainCore.HomogeneousMagneticMaterial_setMagneticField(self, magnetic_field)

    def isScalarMaterial(self):
        return _libBornAgainCore.HomogeneousMagneticMaterial_isScalarMaterial(self)

    def createTransformedMaterial(self, rotation):
        return _libBornAgainCore.HomogeneousMagneticMaterial_createTransformedMaterial(self, rotation)

    def _print(self, ostr):
        return _libBornAgainCore.HomogeneousMagneticMaterial__print(self, ostr)
    __swig_destroy__ = _libBornAgainCore.delete_HomogeneousMagneticMaterial
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_HomogeneousMagneticMaterial(self)
        return weakref_proxy(self)
HomogeneousMagneticMaterial_swigregister = _libBornAgainCore.HomogeneousMagneticMaterial_swigregister
HomogeneousMagneticMaterial_swigregister(HomogeneousMagneticMaterial)

class IDetector2D(IParameterized):
    __swig_setmethods__ = {}
    for _s in [IParameterized]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IDetector2D, name, value)
    __swig_getmethods__ = {}
    for _s in [IParameterized]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IDetector2D, name)
    __repr__ = _swig_repr
    DEFAULT = _libBornAgainCore.IDetector2D_DEFAULT
    NBINS = _libBornAgainCore.IDetector2D_NBINS
    RADIANS = _libBornAgainCore.IDetector2D_RADIANS
    DEGREES = _libBornAgainCore.IDetector2D_DEGREES
    MM = _libBornAgainCore.IDetector2D_MM
    QYQZ = _libBornAgainCore.IDetector2D_QYQZ

    def __init__(self, *args):
        if self.__class__ == IDetector2D:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_IDetector2D(_self, *args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def clone(self):
        return _libBornAgainCore.IDetector2D_clone(self)
    __swig_destroy__ = _libBornAgainCore.delete_IDetector2D
    __del__ = lambda self: None

    def init(self, beam):
        return _libBornAgainCore.IDetector2D_init(self, beam)

    def addAxis(self, axis):
        return _libBornAgainCore.IDetector2D_addAxis(self, axis)

    def getAxis(self, index):
        return _libBornAgainCore.IDetector2D_getAxis(self, index)

    def getDimension(self):
        return _libBornAgainCore.IDetector2D_getDimension(self)

    def clear(self):
        return _libBornAgainCore.IDetector2D_clear(self)

    def matchDetectorAxes(self, output_data):
        return _libBornAgainCore.IDetector2D_matchDetectorAxes(self, output_data)

    def setDetectorParameters(self, n_x, x_min, x_max, n_y, y_min, y_max):
        return _libBornAgainCore.IDetector2D_setDetectorParameters(self, n_x, x_min, x_max, n_y, y_min, y_max)

    def setDetectorAxes(self, axis0, axis1):
        return _libBornAgainCore.IDetector2D_setDetectorAxes(self, axis0, axis1)

    def setDetectorResolution(self, p_detector_resolution):
        return _libBornAgainCore.IDetector2D_setDetectorResolution(self, p_detector_resolution)

    def applyDetectorResolution(self, p_intensity_map):
        return _libBornAgainCore.IDetector2D_applyDetectorResolution(self, p_intensity_map)

    def getDetectorResolutionFunction(self):
        return _libBornAgainCore.IDetector2D_getDetectorResolutionFunction(self)

    def setAnalyzerProperties(self, direction, efficiency, total_transmission=1.0):
        return _libBornAgainCore.IDetector2D_setAnalyzerProperties(self, direction, efficiency, total_transmission)

    def removeMasks(self):
        return _libBornAgainCore.IDetector2D_removeMasks(self)

    def addMask(self, shape, mask_value=True):
        return _libBornAgainCore.IDetector2D_addMask(self, shape, mask_value)

    def maskAll(self):
        return _libBornAgainCore.IDetector2D_maskAll(self)

    def getDetectorMask(self):
        return _libBornAgainCore.IDetector2D_getDetectorMask(self)

    def getNumberOfMaskedChannels(self):
        return _libBornAgainCore.IDetector2D_getNumberOfMaskedChannels(self)

    def isMasked(self, index):
        return _libBornAgainCore.IDetector2D_isMasked(self, index)

    def hasMasks(self):
        return _libBornAgainCore.IDetector2D_hasMasks(self)

    def addParametersToExternalPool(self, path, external_pool, copy_number=-1):
        return _libBornAgainCore.IDetector2D_addParametersToExternalPool(self, path, external_pool, copy_number)

    def createDetectorMap(self, beam, units_type):
        return _libBornAgainCore.IDetector2D_createDetectorMap(self, beam, units_type)

    def getValidAxesUnits(self):
        return _libBornAgainCore.IDetector2D_getValidAxesUnits(self)

    def getDefaultAxesUnits(self):
        return _libBornAgainCore.IDetector2D_getDefaultAxesUnits(self)

    def createPixelMap(self, index):
        return _libBornAgainCore.IDetector2D_createPixelMap(self, index)

    def init_parameters(self):
        return _libBornAgainCore.IDetector2D_init_parameters(self)

    def createAxis(self, index, n_bins, min, max):
        return _libBornAgainCore.IDetector2D_createAxis(self, index, n_bins, min, max)

    def getAxisName(self, index):
        return _libBornAgainCore.IDetector2D_getAxisName(self, index)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_IDetector2D(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.IDetector2D__print(self, ostr)
IDetector2D_swigregister = _libBornAgainCore.IDetector2D_swigregister
IDetector2D_swigregister(IDetector2D)

class ILayout(ICompositeSample):
    __swig_setmethods__ = {}
    for _s in [ICompositeSample]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ILayout, name, value)
    __swig_getmethods__ = {}
    for _s in [ICompositeSample]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ILayout, name)
    __repr__ = _swig_repr
    DA = _libBornAgainCore.ILayout_DA
    SSCA = _libBornAgainCore.ILayout_SSCA

    def __init__(self):
        if self.__class__ == ILayout:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_ILayout(_self, )
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_ILayout
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.ILayout_clone(self)

    def accept(self, visitor):
        return _libBornAgainCore.ILayout_accept(self, visitor)

    def cloneInvertB(self):
        return _libBornAgainCore.ILayout_cloneInvertB(self)

    def getNumberOfParticles(self):
        return _libBornAgainCore.ILayout_getNumberOfParticles(self)

    def getParticle(self, index):
        return _libBornAgainCore.ILayout_getParticle(self, index)

    def getParticles(self):
        return _libBornAgainCore.ILayout_getParticles(self)

    def getAbundanceOfParticle(self, index):
        return _libBornAgainCore.ILayout_getAbundanceOfParticle(self, index)

    def getTotalAbundance(self):
        return _libBornAgainCore.ILayout_getTotalAbundance(self)

    def getInterferenceFunction(self):
        return _libBornAgainCore.ILayout_getInterferenceFunction(self)

    def getTotalParticleSurfaceDensity(self):
        return _libBornAgainCore.ILayout_getTotalParticleSurfaceDensity(self)

    def setTotalParticleSurfaceDensity(self, particle_density):
        return _libBornAgainCore.ILayout_setTotalParticleSurfaceDensity(self, particle_density)

    def getApproximation(self):
        return _libBornAgainCore.ILayout_getApproximation(self)

    def setApproximation(self, approximation):
        return _libBornAgainCore.ILayout_setApproximation(self, approximation)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_ILayout(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.ILayout__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.ILayout_init_parameters(self)
ILayout_swigregister = _libBornAgainCore.ILayout_swigregister
ILayout_swigregister(ILayout)

class IInterferenceFunction(ISample):
    __swig_setmethods__ = {}
    for _s in [ISample]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IInterferenceFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [ISample]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IInterferenceFunction, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IInterferenceFunction
    __del__ = lambda self: None

    def evaluate(self, q):
        return _libBornAgainCore.IInterferenceFunction_evaluate(self, q)

    def clone(self):
        return _libBornAgainCore.IInterferenceFunction_clone(self)

    def accept(self, visitor):
        return _libBornAgainCore.IInterferenceFunction_accept(self, visitor)

    def getKappa(self):
        return _libBornAgainCore.IInterferenceFunction_getKappa(self)

    def getParticleDensity(self):
        return _libBornAgainCore.IInterferenceFunction_getParticleDensity(self)

    def __init__(self):
        if self.__class__ == IInterferenceFunction:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_IInterferenceFunction(_self, )
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_IInterferenceFunction(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.IInterferenceFunction__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.IInterferenceFunction_init_parameters(self)
IInterferenceFunction_swigregister = _libBornAgainCore.IInterferenceFunction_swigregister
IInterferenceFunction_swigregister(IInterferenceFunction)

class IntensityDataFunctions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntensityDataFunctions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntensityDataFunctions, name)
    __repr__ = _swig_repr
    __swig_getmethods__["getRelativeDifference"] = lambda x: _libBornAgainCore.IntensityDataFunctions_getRelativeDifference
    if _newclass:
        getRelativeDifference = staticmethod(_libBornAgainCore.IntensityDataFunctions_getRelativeDifference)
    __swig_getmethods__["createClippedDataSet"] = lambda x: _libBornAgainCore.IntensityDataFunctions_createClippedDataSet
    if _newclass:
        createClippedDataSet = staticmethod(_libBornAgainCore.IntensityDataFunctions_createClippedDataSet)
    __swig_getmethods__["applyDetectorResolution"] = lambda x: _libBornAgainCore.IntensityDataFunctions_applyDetectorResolution
    if _newclass:
        applyDetectorResolution = staticmethod(_libBornAgainCore.IntensityDataFunctions_applyDetectorResolution)

    def __init__(self):
        this = _libBornAgainCore.new_IntensityDataFunctions()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_IntensityDataFunctions
    __del__ = lambda self: None
IntensityDataFunctions_swigregister = _libBornAgainCore.IntensityDataFunctions_swigregister
IntensityDataFunctions_swigregister(IntensityDataFunctions)

def IntensityDataFunctions_getRelativeDifference(*args):
    return _libBornAgainCore.IntensityDataFunctions_getRelativeDifference(*args)
IntensityDataFunctions_getRelativeDifference = _libBornAgainCore.IntensityDataFunctions_getRelativeDifference

def IntensityDataFunctions_createClippedDataSet(origin, x1, y1, x2, y2):
    return _libBornAgainCore.IntensityDataFunctions_createClippedDataSet(origin, x1, y1, x2, y2)
IntensityDataFunctions_createClippedDataSet = _libBornAgainCore.IntensityDataFunctions_createClippedDataSet

def IntensityDataFunctions_applyDetectorResolution(origin, resolution_function):
    return _libBornAgainCore.IntensityDataFunctions_applyDetectorResolution(origin, resolution_function)
IntensityDataFunctions_applyDetectorResolution = _libBornAgainCore.IntensityDataFunctions_applyDetectorResolution

class IntensityDataIOFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntensityDataIOFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntensityDataIOFactory, name)
    __repr__ = _swig_repr
    __swig_getmethods__["readOutputData"] = lambda x: _libBornAgainCore.IntensityDataIOFactory_readOutputData
    if _newclass:
        readOutputData = staticmethod(_libBornAgainCore.IntensityDataIOFactory_readOutputData)
    __swig_getmethods__["readIntensityData"] = lambda x: _libBornAgainCore.IntensityDataIOFactory_readIntensityData
    if _newclass:
        readIntensityData = staticmethod(_libBornAgainCore.IntensityDataIOFactory_readIntensityData)
    __swig_getmethods__["writeOutputData"] = lambda x: _libBornAgainCore.IntensityDataIOFactory_writeOutputData
    if _newclass:
        writeOutputData = staticmethod(_libBornAgainCore.IntensityDataIOFactory_writeOutputData)
    __swig_getmethods__["writeIntensityData"] = lambda x: _libBornAgainCore.IntensityDataIOFactory_writeIntensityData
    if _newclass:
        writeIntensityData = staticmethod(_libBornAgainCore.IntensityDataIOFactory_writeIntensityData)

    def __init__(self):
        this = _libBornAgainCore.new_IntensityDataIOFactory()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_IntensityDataIOFactory
    __del__ = lambda self: None
IntensityDataIOFactory_swigregister = _libBornAgainCore.IntensityDataIOFactory_swigregister
IntensityDataIOFactory_swigregister(IntensityDataIOFactory)

def IntensityDataIOFactory_readOutputData(file_name):
    return _libBornAgainCore.IntensityDataIOFactory_readOutputData(file_name)
IntensityDataIOFactory_readOutputData = _libBornAgainCore.IntensityDataIOFactory_readOutputData

def IntensityDataIOFactory_readIntensityData(file_name):
    return _libBornAgainCore.IntensityDataIOFactory_readIntensityData(file_name)
IntensityDataIOFactory_readIntensityData = _libBornAgainCore.IntensityDataIOFactory_readIntensityData

def IntensityDataIOFactory_writeOutputData(data, file_name):
    return _libBornAgainCore.IntensityDataIOFactory_writeOutputData(data, file_name)
IntensityDataIOFactory_writeOutputData = _libBornAgainCore.IntensityDataIOFactory_writeOutputData

def IntensityDataIOFactory_writeIntensityData(histogram, file_name):
    return _libBornAgainCore.IntensityDataIOFactory_writeIntensityData(histogram, file_name)
IntensityDataIOFactory_writeIntensityData = _libBornAgainCore.IntensityDataIOFactory_writeIntensityData

class Instrument(IParameterized):
    __swig_setmethods__ = {}
    for _s in [IParameterized]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Instrument, name, value)
    __swig_getmethods__ = {}
    for _s in [IParameterized]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Instrument, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == Instrument:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_Instrument(_self, *args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_Instrument
    __del__ = lambda self: None

    def getBeam(self):
        return _libBornAgainCore.Instrument_getBeam(self)

    def setBeam(self, beam):
        return _libBornAgainCore.Instrument_setBeam(self, beam)

    def setBeamParameters(self, wavelength, alpha_i, phi_i):
        return _libBornAgainCore.Instrument_setBeamParameters(self, wavelength, alpha_i, phi_i)

    def setBeamIntensity(self, intensity):
        return _libBornAgainCore.Instrument_setBeamIntensity(self, intensity)

    def setBeamPolarization(self, bloch_vector):
        return _libBornAgainCore.Instrument_setBeamPolarization(self, bloch_vector)

    def getBeamIntensity(self):
        return _libBornAgainCore.Instrument_getBeamIntensity(self)

    def getDetector(self, *args):
        return _libBornAgainCore.Instrument_getDetector(self, *args)

    def getDetectorAxis(self, index):
        return _libBornAgainCore.Instrument_getDetectorAxis(self, index)

    def getDetectorDimension(self):
        return _libBornAgainCore.Instrument_getDetectorDimension(self)

    def setDetector(self, detector):
        return _libBornAgainCore.Instrument_setDetector(self, detector)

    def matchDetectorAxes(self, output_data):
        return _libBornAgainCore.Instrument_matchDetectorAxes(self, output_data)

    def setDetectorParameters(self, n_x, x_min, x_max, n_y, y_min, y_max):
        return _libBornAgainCore.Instrument_setDetectorParameters(self, n_x, x_min, x_max, n_y, y_min, y_max)

    def setDetectorAxes(self, axis0, axis1):
        return _libBornAgainCore.Instrument_setDetectorAxes(self, axis0, axis1)

    def setDetectorResolutionFunction(self, p_resolution_function):
        return _libBornAgainCore.Instrument_setDetectorResolutionFunction(self, p_resolution_function)

    def setAnalyzerProperties(self, direction, efficiency, total_transmission=1.0):
        return _libBornAgainCore.Instrument_setAnalyzerProperties(self, direction, efficiency, total_transmission)

    def applyDetectorResolution(self, p_intensity_map):
        return _libBornAgainCore.Instrument_applyDetectorResolution(self, p_intensity_map)

    def getDetectorIntensity(self, *args):
        return _libBornAgainCore.Instrument_getDetectorIntensity(self, *args)

    def addParametersToExternalPool(self, path, external_pool, copy_number=-1):
        return _libBornAgainCore.Instrument_addParametersToExternalPool(self, path, external_pool, copy_number)

    def initDetector(self):
        return _libBornAgainCore.Instrument_initDetector(self)

    def _print(self, ostr):
        return _libBornAgainCore.Instrument__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.Instrument_init_parameters(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_Instrument(self)
        return weakref_proxy(self)
Instrument_swigregister = _libBornAgainCore.Instrument_swigregister
Instrument_swigregister(Instrument)

class InterferenceFunction1DLattice(IInterferenceFunction):
    __swig_setmethods__ = {}
    for _s in [IInterferenceFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterferenceFunction1DLattice, name, value)
    __swig_getmethods__ = {}
    for _s in [IInterferenceFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InterferenceFunction1DLattice, name)
    __repr__ = _swig_repr

    def __init__(self, length, xi):
        if self.__class__ == InterferenceFunction1DLattice:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_InterferenceFunction1DLattice(_self, length, xi)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_InterferenceFunction1DLattice
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.InterferenceFunction1DLattice_clone(self)

    def accept(self, visitor):
        return _libBornAgainCore.InterferenceFunction1DLattice_accept(self, visitor)

    def setDecayFunction(self, pdf):
        return _libBornAgainCore.InterferenceFunction1DLattice_setDecayFunction(self, pdf)

    def getLatticeParameters(self):
        return _libBornAgainCore.InterferenceFunction1DLattice_getLatticeParameters(self)

    def getDecayFunction(self):
        return _libBornAgainCore.InterferenceFunction1DLattice_getDecayFunction(self)

    def evaluate(self, q):
        return _libBornAgainCore.InterferenceFunction1DLattice_evaluate(self, q)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_InterferenceFunction1DLattice(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.InterferenceFunction1DLattice__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.InterferenceFunction1DLattice_init_parameters(self)
InterferenceFunction1DLattice_swigregister = _libBornAgainCore.InterferenceFunction1DLattice_swigregister
InterferenceFunction1DLattice_swigregister(InterferenceFunction1DLattice)

class InterferenceFunctionRadialParaCrystal(IInterferenceFunction):
    __swig_setmethods__ = {}
    for _s in [IInterferenceFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterferenceFunctionRadialParaCrystal, name, value)
    __swig_getmethods__ = {}
    for _s in [IInterferenceFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InterferenceFunctionRadialParaCrystal, name)
    __repr__ = _swig_repr

    def __init__(self, peak_distance, damping_length=0.0):
        if self.__class__ == InterferenceFunctionRadialParaCrystal:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_InterferenceFunctionRadialParaCrystal(_self, peak_distance, damping_length)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_InterferenceFunctionRadialParaCrystal
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.InterferenceFunctionRadialParaCrystal_clone(self)

    def accept(self, visitor):
        return _libBornAgainCore.InterferenceFunctionRadialParaCrystal_accept(self, visitor)

    def setDomainSize(self, size):
        return _libBornAgainCore.InterferenceFunctionRadialParaCrystal_setDomainSize(self, size)

    def getDomainSize(self):
        return _libBornAgainCore.InterferenceFunctionRadialParaCrystal_getDomainSize(self)

    def setKappa(self, kappa):
        return _libBornAgainCore.InterferenceFunctionRadialParaCrystal_setKappa(self, kappa)

    def getKappa(self):
        return _libBornAgainCore.InterferenceFunctionRadialParaCrystal_getKappa(self)

    def evaluate(self, q):
        return _libBornAgainCore.InterferenceFunctionRadialParaCrystal_evaluate(self, q)

    def FTPDF(self, qpar):
        return _libBornAgainCore.InterferenceFunctionRadialParaCrystal_FTPDF(self, qpar)

    def setProbabilityDistribution(self, pdf):
        return _libBornAgainCore.InterferenceFunctionRadialParaCrystal_setProbabilityDistribution(self, pdf)

    def getProbabilityDistribution(self):
        return _libBornAgainCore.InterferenceFunctionRadialParaCrystal_getProbabilityDistribution(self)

    def getPeakDistance(self):
        return _libBornAgainCore.InterferenceFunctionRadialParaCrystal_getPeakDistance(self)

    def getDampingLength(self):
        return _libBornAgainCore.InterferenceFunctionRadialParaCrystal_getDampingLength(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_InterferenceFunctionRadialParaCrystal(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.InterferenceFunctionRadialParaCrystal__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.InterferenceFunctionRadialParaCrystal_init_parameters(self)
InterferenceFunctionRadialParaCrystal_swigregister = _libBornAgainCore.InterferenceFunctionRadialParaCrystal_swigregister
InterferenceFunctionRadialParaCrystal_swigregister(InterferenceFunctionRadialParaCrystal)

class InterferenceFunction2DLattice(IInterferenceFunction):
    __swig_setmethods__ = {}
    for _s in [IInterferenceFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterferenceFunction2DLattice, name, value)
    __swig_getmethods__ = {}
    for _s in [IInterferenceFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InterferenceFunction2DLattice, name)
    __repr__ = _swig_repr

    def __init__(self, length_1, length_2, angle, xi=0.0):
        if self.__class__ == InterferenceFunction2DLattice:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_InterferenceFunction2DLattice(_self, length_1, length_2, angle, xi)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_InterferenceFunction2DLattice
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.InterferenceFunction2DLattice_clone(self)

    def accept(self, visitor):
        return _libBornAgainCore.InterferenceFunction2DLattice_accept(self, visitor)
    __swig_getmethods__["createSquare"] = lambda x: _libBornAgainCore.InterferenceFunction2DLattice_createSquare
    if _newclass:
        createSquare = staticmethod(_libBornAgainCore.InterferenceFunction2DLattice_createSquare)
    __swig_getmethods__["createHexagonal"] = lambda x: _libBornAgainCore.InterferenceFunction2DLattice_createHexagonal
    if _newclass:
        createHexagonal = staticmethod(_libBornAgainCore.InterferenceFunction2DLattice_createHexagonal)

    def setDecayFunction(self, pdf):
        return _libBornAgainCore.InterferenceFunction2DLattice_setDecayFunction(self, pdf)

    def getDecayFunction(self):
        return _libBornAgainCore.InterferenceFunction2DLattice_getDecayFunction(self)

    def evaluate(self, q):
        return _libBornAgainCore.InterferenceFunction2DLattice_evaluate(self, q)

    def getLatticeParameters(self):
        return _libBornAgainCore.InterferenceFunction2DLattice_getLatticeParameters(self)

    def addParametersToExternalPool(self, path, external_pool, copy_number=-1):
        return _libBornAgainCore.InterferenceFunction2DLattice_addParametersToExternalPool(self, path, external_pool, copy_number)

    def getParticleDensity(self):
        return _libBornAgainCore.InterferenceFunction2DLattice_getParticleDensity(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_InterferenceFunction2DLattice(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.InterferenceFunction2DLattice__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.InterferenceFunction2DLattice_init_parameters(self)
InterferenceFunction2DLattice_swigregister = _libBornAgainCore.InterferenceFunction2DLattice_swigregister
InterferenceFunction2DLattice_swigregister(InterferenceFunction2DLattice)

def InterferenceFunction2DLattice_createSquare(lattice_length, xi=0.0):
    return _libBornAgainCore.InterferenceFunction2DLattice_createSquare(lattice_length, xi)
InterferenceFunction2DLattice_createSquare = _libBornAgainCore.InterferenceFunction2DLattice_createSquare

def InterferenceFunction2DLattice_createHexagonal(lattice_length, xi=0.0):
    return _libBornAgainCore.InterferenceFunction2DLattice_createHexagonal(lattice_length, xi)
InterferenceFunction2DLattice_createHexagonal = _libBornAgainCore.InterferenceFunction2DLattice_createHexagonal

class InterferenceFunction2DParaCrystal(IInterferenceFunction):
    __swig_setmethods__ = {}
    for _s in [IInterferenceFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterferenceFunction2DParaCrystal, name, value)
    __swig_getmethods__ = {}
    for _s in [IInterferenceFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InterferenceFunction2DParaCrystal, name)
    __repr__ = _swig_repr

    def __init__(self, length_1, length_2, alpha_lattice, xi=0.0, damping_length=0.0):
        if self.__class__ == InterferenceFunction2DParaCrystal:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_InterferenceFunction2DParaCrystal(_self, length_1, length_2, alpha_lattice, xi, damping_length)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_InterferenceFunction2DParaCrystal
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.InterferenceFunction2DParaCrystal_clone(self)

    def accept(self, visitor):
        return _libBornAgainCore.InterferenceFunction2DParaCrystal_accept(self, visitor)
    __swig_getmethods__["createSquare"] = lambda x: _libBornAgainCore.InterferenceFunction2DParaCrystal_createSquare
    if _newclass:
        createSquare = staticmethod(_libBornAgainCore.InterferenceFunction2DParaCrystal_createSquare)
    __swig_getmethods__["createHexagonal"] = lambda x: _libBornAgainCore.InterferenceFunction2DParaCrystal_createHexagonal
    if _newclass:
        createHexagonal = staticmethod(_libBornAgainCore.InterferenceFunction2DParaCrystal_createHexagonal)

    def setDomainSizes(self, size_1, size_2):
        return _libBornAgainCore.InterferenceFunction2DParaCrystal_setDomainSizes(self, size_1, size_2)

    def setProbabilityDistributions(self, pdf_1, pdf_2):
        return _libBornAgainCore.InterferenceFunction2DParaCrystal_setProbabilityDistributions(self, pdf_1, pdf_2)

    def setIntegrationOverXi(self, integrate_xi):
        return _libBornAgainCore.InterferenceFunction2DParaCrystal_setIntegrationOverXi(self, integrate_xi)

    def evaluate(self, q):
        return _libBornAgainCore.InterferenceFunction2DParaCrystal_evaluate(self, q)

    def getDomainSizes(self):
        return _libBornAgainCore.InterferenceFunction2DParaCrystal_getDomainSizes(self)

    def getProbabilityDistributions(self):
        return _libBornAgainCore.InterferenceFunction2DParaCrystal_getProbabilityDistributions(self)

    def getIntegrationOverXi(self):
        return _libBornAgainCore.InterferenceFunction2DParaCrystal_getIntegrationOverXi(self)

    def getDampingLength(self):
        return _libBornAgainCore.InterferenceFunction2DParaCrystal_getDampingLength(self)

    def getLatticeParameters(self):
        return _libBornAgainCore.InterferenceFunction2DParaCrystal_getLatticeParameters(self)

    def addParametersToExternalPool(self, path, external_pool, copy_number=-1):
        return _libBornAgainCore.InterferenceFunction2DParaCrystal_addParametersToExternalPool(self, path, external_pool, copy_number)

    def getParticleDensity(self):
        return _libBornAgainCore.InterferenceFunction2DParaCrystal_getParticleDensity(self)

    def init_parameters(self):
        return _libBornAgainCore.InterferenceFunction2DParaCrystal_init_parameters(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_InterferenceFunction2DParaCrystal(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.InterferenceFunction2DParaCrystal__print(self, ostr)
InterferenceFunction2DParaCrystal_swigregister = _libBornAgainCore.InterferenceFunction2DParaCrystal_swigregister
InterferenceFunction2DParaCrystal_swigregister(InterferenceFunction2DParaCrystal)

def InterferenceFunction2DParaCrystal_createSquare(peak_distance, damping_length=0.0, domain_size_1=0.0, domain_size_2=0.0):
    return _libBornAgainCore.InterferenceFunction2DParaCrystal_createSquare(peak_distance, damping_length, domain_size_1, domain_size_2)
InterferenceFunction2DParaCrystal_createSquare = _libBornAgainCore.InterferenceFunction2DParaCrystal_createSquare

def InterferenceFunction2DParaCrystal_createHexagonal(peak_distance, damping_length=0.0, domain_size_1=0.0, domain_size_2=0.0):
    return _libBornAgainCore.InterferenceFunction2DParaCrystal_createHexagonal(peak_distance, damping_length, domain_size_1, domain_size_2)
InterferenceFunction2DParaCrystal_createHexagonal = _libBornAgainCore.InterferenceFunction2DParaCrystal_createHexagonal

class InterferenceFunctionNone(IInterferenceFunction):
    __swig_setmethods__ = {}
    for _s in [IInterferenceFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterferenceFunctionNone, name, value)
    __swig_getmethods__ = {}
    for _s in [IInterferenceFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InterferenceFunctionNone, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == InterferenceFunctionNone:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_InterferenceFunctionNone(_self, )
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def clone(self):
        return _libBornAgainCore.InterferenceFunctionNone_clone(self)

    def accept(self, visitor):
        return _libBornAgainCore.InterferenceFunctionNone_accept(self, visitor)

    def evaluate(self, q):
        return _libBornAgainCore.InterferenceFunctionNone_evaluate(self, q)
    __swig_destroy__ = _libBornAgainCore.delete_InterferenceFunctionNone
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_InterferenceFunctionNone(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.InterferenceFunctionNone__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.InterferenceFunctionNone_init_parameters(self)
InterferenceFunctionNone_swigregister = _libBornAgainCore.InterferenceFunctionNone_swigregister
InterferenceFunctionNone_swigregister(InterferenceFunctionNone)

class IObserver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IObserver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IObserver, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IObserver
    __del__ = lambda self: None

    def notify(self, subject):
        return _libBornAgainCore.IObserver_notify(self, subject)

    def __init__(self):
        if self.__class__ == IObserver:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_IObserver(_self, )
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_IObserver(self)
        return weakref_proxy(self)
IObserver_swigregister = _libBornAgainCore.IObserver_swigregister
IObserver_swigregister(IObserver)

class IObservable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IObservable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IObservable, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IObservable
    __del__ = lambda self: None

    def attachObserver(self, obj):
        return _libBornAgainCore.IObservable_attachObserver(self, obj)

    def notifyObservers(self):
        return _libBornAgainCore.IObservable_notifyObservers(self)

    def __init__(self):
        if self.__class__ == IObservable:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_IObservable(_self, )
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_IObservable(self)
        return weakref_proxy(self)
IObservable_swigregister = _libBornAgainCore.IObservable_swigregister
IObservable_swigregister(IObservable)

class IAbstractParticle(ICompositeSample):
    __swig_setmethods__ = {}
    for _s in [ICompositeSample]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IAbstractParticle, name, value)
    __swig_getmethods__ = {}
    for _s in [ICompositeSample]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IAbstractParticle, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == IAbstractParticle:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_IAbstractParticle(_self, )
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_IAbstractParticle
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.IAbstractParticle_clone(self)

    def cloneInvertB(self):
        return _libBornAgainCore.IAbstractParticle_cloneInvertB(self)

    def accept(self, visitor):
        return _libBornAgainCore.IAbstractParticle_accept(self, visitor)

    def setAmbientMaterial(self, material):
        return _libBornAgainCore.IAbstractParticle_setAmbientMaterial(self, material)

    def getAbundance(self):
        return _libBornAgainCore.IAbstractParticle_getAbundance(self)

    def setAbundance(self, abundance):
        return _libBornAgainCore.IAbstractParticle_setAbundance(self, abundance)

    def getAmbientMaterial(self):
        return _libBornAgainCore.IAbstractParticle_getAmbientMaterial(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_IAbstractParticle(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.IAbstractParticle__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.IAbstractParticle_init_parameters(self)
IAbstractParticle_swigregister = _libBornAgainCore.IAbstractParticle_swigregister
IAbstractParticle_swigregister(IAbstractParticle)

class IParticle(IAbstractParticle):
    __swig_setmethods__ = {}
    for _s in [IAbstractParticle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IParticle, name, value)
    __swig_getmethods__ = {}
    for _s in [IAbstractParticle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IParticle, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IParticle
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.IParticle_clone(self)

    def cloneInvertB(self):
        return _libBornAgainCore.IParticle_cloneInvertB(self)

    def accept(self, visitor):
        return _libBornAgainCore.IParticle_accept(self, visitor)

    def createFormFactor(self):
        return _libBornAgainCore.IParticle_createFormFactor(self)

    def createTransformedFormFactor(self, p_rotation, translation):
        return _libBornAgainCore.IParticle_createTransformedFormFactor(self, p_rotation, translation)

    def getPosition(self):
        return _libBornAgainCore.IParticle_getPosition(self)

    def setPosition(self, *args):
        return _libBornAgainCore.IParticle_setPosition(self, *args)

    def getRotation(self):
        return _libBornAgainCore.IParticle_getRotation(self)

    def setRotation(self, rotation):
        return _libBornAgainCore.IParticle_setRotation(self, rotation)

    def applyRotation(self, rotation):
        return _libBornAgainCore.IParticle_applyRotation(self, rotation)

    def applyTranslation(self, displacement):
        return _libBornAgainCore.IParticle_applyTranslation(self, displacement)

    def __init__(self):
        if self.__class__ == IParticle:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_IParticle(_self, )
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_IParticle(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.IParticle__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.IParticle_init_parameters(self)
IParticle_swigregister = _libBornAgainCore.IParticle_swigregister
IParticle_swigregister(IParticle)

class IResolutionFunction2D(IParameterized):
    __swig_setmethods__ = {}
    for _s in [IParameterized]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IResolutionFunction2D, name, value)
    __swig_getmethods__ = {}
    for _s in [IParameterized]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IResolutionFunction2D, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IResolutionFunction2D
    __del__ = lambda self: None

    def evaluateCDF(self, x, y):
        return _libBornAgainCore.IResolutionFunction2D_evaluateCDF(self, x, y)

    def clone(self):
        return _libBornAgainCore.IResolutionFunction2D_clone(self)

    def __init__(self):
        if self.__class__ == IResolutionFunction2D:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_IResolutionFunction2D(_self, )
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_IResolutionFunction2D(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.IResolutionFunction2D__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.IResolutionFunction2D_init_parameters(self)
IResolutionFunction2D_swigregister = _libBornAgainCore.IResolutionFunction2D_swigregister
IResolutionFunction2D_swigregister(IResolutionFunction2D)

class ISampleBuilder(IParameterizedShared):
    __swig_setmethods__ = {}
    for _s in [IParameterizedShared]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ISampleBuilder, name, value)
    __swig_getmethods__ = {}
    for _s in [IParameterizedShared]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ISampleBuilder, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == ISampleBuilder:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_ISampleBuilder(_self, )
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_ISampleBuilder
    __del__ = lambda self: None

    def buildSample(self):
        return _libBornAgainCore.ISampleBuilder_buildSample(self)

    def init_from(self, arg0):
        return _libBornAgainCore.ISampleBuilder_init_from(self, arg0)

    def registerParameter(self, *args):
        return _libBornAgainCore.ISampleBuilder_registerParameter(self, *args)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_ISampleBuilder(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.ISampleBuilder__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.ISampleBuilder_init_parameters(self)
ISampleBuilder_swigregister = _libBornAgainCore.ISampleBuilder_swigregister
ISampleBuilder_swigregister(ISampleBuilder)

class ISelectionRule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ISelectionRule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ISelectionRule, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_ISelectionRule
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.ISelectionRule_clone(self)

    def coordinateSelected(self, coordinate):
        return _libBornAgainCore.ISelectionRule_coordinateSelected(self, coordinate)

    def __init__(self):
        if self.__class__ == ISelectionRule:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_ISelectionRule(_self, )
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_ISelectionRule(self)
        return weakref_proxy(self)
ISelectionRule_swigregister = _libBornAgainCore.ISelectionRule_swigregister
ISelectionRule_swigregister(ISelectionRule)

class SimpleSelectionRule(ISelectionRule):
    __swig_setmethods__ = {}
    for _s in [ISelectionRule]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleSelectionRule, name, value)
    __swig_getmethods__ = {}
    for _s in [ISelectionRule]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleSelectionRule, name)
    __repr__ = _swig_repr

    def __init__(self, a, b, c, modulus):
        if self.__class__ == SimpleSelectionRule:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_SimpleSelectionRule(_self, a, b, c, modulus)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_SimpleSelectionRule
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.SimpleSelectionRule_clone(self)

    def coordinateSelected(self, coordinate):
        return _libBornAgainCore.SimpleSelectionRule_coordinateSelected(self, coordinate)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_SimpleSelectionRule(self)
        return weakref_proxy(self)
SimpleSelectionRule_swigregister = _libBornAgainCore.SimpleSelectionRule_swigregister
SimpleSelectionRule_swigregister(SimpleSelectionRule)

class IPixelMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPixelMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPixelMap, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_IPixelMap
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.IPixelMap_clone(self)

    def createZeroSizeMap(self, x, y):
        return _libBornAgainCore.IPixelMap_createZeroSizeMap(self, x, y)

    def getK(self, x, y, wavelength):
        return _libBornAgainCore.IPixelMap_getK(self, x, y, wavelength)

    def getIntegrationFactor(self, x, y):
        return _libBornAgainCore.IPixelMap_getIntegrationFactor(self, x, y)

    def getSolidAngle(self):
        return _libBornAgainCore.IPixelMap_getSolidAngle(self)

    def __init__(self):
        if self.__class__ == IPixelMap:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_IPixelMap(_self, )
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_IPixelMap(self)
        return weakref_proxy(self)
IPixelMap_swigregister = _libBornAgainCore.IPixelMap_swigregister
IPixelMap_swigregister(IPixelMap)

class SphericalDetector(IDetector2D):
    __swig_setmethods__ = {}
    for _s in [IDetector2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SphericalDetector, name, value)
    __swig_getmethods__ = {}
    for _s in [IDetector2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SphericalDetector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == SphericalDetector:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_SphericalDetector(_self, *args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def clone(self):
        return _libBornAgainCore.SphericalDetector_clone(self)
    __swig_destroy__ = _libBornAgainCore.delete_SphericalDetector
    __del__ = lambda self: None

    def addParametersToExternalPool(self, path, external_pool, copy_number=-1):
        return _libBornAgainCore.SphericalDetector_addParametersToExternalPool(self, path, external_pool, copy_number)

    def createDetectorMap(self, beam, units_type):
        return _libBornAgainCore.SphericalDetector_createDetectorMap(self, beam, units_type)

    def getValidAxesUnits(self):
        return _libBornAgainCore.SphericalDetector_getValidAxesUnits(self)

    def getDefaultAxesUnits(self):
        return _libBornAgainCore.SphericalDetector_getDefaultAxesUnits(self)

    def createPixelMap(self, index):
        return _libBornAgainCore.SphericalDetector_createPixelMap(self, index)

    def _print(self, ostr):
        return _libBornAgainCore.SphericalDetector__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.SphericalDetector_init_parameters(self)

    def createAxis(self, index, n_bins, min, max):
        return _libBornAgainCore.SphericalDetector_createAxis(self, index, n_bins, min, max)

    def getAxisName(self, index):
        return _libBornAgainCore.SphericalDetector_getAxisName(self, index)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_SphericalDetector(self)
        return weakref_proxy(self)
SphericalDetector_swigregister = _libBornAgainCore.SphericalDetector_swigregister
SphericalDetector_swigregister(SphericalDetector)

class AngularPixelMap(IPixelMap):
    __swig_setmethods__ = {}
    for _s in [IPixelMap]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AngularPixelMap, name, value)
    __swig_getmethods__ = {}
    for _s in [IPixelMap]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AngularPixelMap, name)
    __repr__ = _swig_repr

    def __init__(self, alpha_bin, phi_bin):
        if self.__class__ == AngularPixelMap:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_AngularPixelMap(_self, alpha_bin, phi_bin)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_AngularPixelMap
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.AngularPixelMap_clone(self)

    def createZeroSizeMap(self, x, y):
        return _libBornAgainCore.AngularPixelMap_createZeroSizeMap(self, x, y)

    def getK(self, x, y, wavelength):
        return _libBornAgainCore.AngularPixelMap_getK(self, x, y, wavelength)

    def getIntegrationFactor(self, x, y):
        return _libBornAgainCore.AngularPixelMap_getIntegrationFactor(self, x, y)

    def getSolidAngle(self):
        return _libBornAgainCore.AngularPixelMap_getSolidAngle(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_AngularPixelMap(self)
        return weakref_proxy(self)
AngularPixelMap_swigregister = _libBornAgainCore.AngularPixelMap_swigregister
AngularPixelMap_swigregister(AngularPixelMap)

class IsGISAXSDetector(SphericalDetector):
    __swig_setmethods__ = {}
    for _s in [SphericalDetector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IsGISAXSDetector, name, value)
    __swig_getmethods__ = {}
    for _s in [SphericalDetector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IsGISAXSDetector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == IsGISAXSDetector:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_IsGISAXSDetector(_self, *args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def clone(self):
        return _libBornAgainCore.IsGISAXSDetector_clone(self)
    __swig_destroy__ = _libBornAgainCore.delete_IsGISAXSDetector
    __del__ = lambda self: None

    def _print(self, ostr):
        return _libBornAgainCore.IsGISAXSDetector__print(self, ostr)

    def createAxis(self, index, n_bins, min, max):
        return _libBornAgainCore.IsGISAXSDetector_createAxis(self, index, n_bins, min, max)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_IsGISAXSDetector(self)
        return weakref_proxy(self)

    def init_parameters(self):
        return _libBornAgainCore.IsGISAXSDetector_init_parameters(self)

    def createPixelMap(self, index):
        return _libBornAgainCore.IsGISAXSDetector_createPixelMap(self, index)

    def getAxisName(self, index):
        return _libBornAgainCore.IsGISAXSDetector_getAxisName(self, index)
IsGISAXSDetector_swigregister = _libBornAgainCore.IsGISAXSDetector_swigregister
IsGISAXSDetector_swigregister(IsGISAXSDetector)

class Lattice(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Lattice, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Lattice, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libBornAgainCore.new_Lattice(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_Lattice
    __del__ = lambda self: None

    def createTransformedLattice(self, rotation):
        return _libBornAgainCore.Lattice_createTransformedLattice(self, rotation)

    def initialize(self):
        return _libBornAgainCore.Lattice_initialize(self)

    def getBasisVectorA(self):
        return _libBornAgainCore.Lattice_getBasisVectorA(self)

    def getBasisVectorB(self):
        return _libBornAgainCore.Lattice_getBasisVectorB(self)

    def getBasisVectorC(self):
        return _libBornAgainCore.Lattice_getBasisVectorC(self)

    def getVolume(self):
        return _libBornAgainCore.Lattice_getVolume(self)

    def getReciprocalLatticeBasis(self, b1, b2, b3):
        return _libBornAgainCore.Lattice_getReciprocalLatticeBasis(self, b1, b2, b3)

    def getNearestLatticeVectorCoordinates(self, vector_in):
        return _libBornAgainCore.Lattice_getNearestLatticeVectorCoordinates(self, vector_in)

    def getNearestReciprocalLatticeVectorCoordinates(self, vector_in):
        return _libBornAgainCore.Lattice_getNearestReciprocalLatticeVectorCoordinates(self, vector_in)

    def computeReciprocalLatticeVectorsWithinRadius(self, input_vector, radius):
        return _libBornAgainCore.Lattice_computeReciprocalLatticeVectorsWithinRadius(self, input_vector, radius)

    def setSelectionRule(self, p_selection_rule):
        return _libBornAgainCore.Lattice_setSelectionRule(self, p_selection_rule)
    __swig_getmethods__["createFCCLattice"] = lambda x: _libBornAgainCore.Lattice_createFCCLattice
    if _newclass:
        createFCCLattice = staticmethod(_libBornAgainCore.Lattice_createFCCLattice)
    __swig_getmethods__["createTrigonalLattice"] = lambda x: _libBornAgainCore.Lattice_createTrigonalLattice
    if _newclass:
        createTrigonalLattice = staticmethod(_libBornAgainCore.Lattice_createTrigonalLattice)

    def getKVectorContainer(self):
        return _libBornAgainCore.Lattice_getKVectorContainer(self)
Lattice_swigregister = _libBornAgainCore.Lattice_swigregister
Lattice_swigregister(Lattice)

def Lattice_createFCCLattice(a):
    return _libBornAgainCore.Lattice_createFCCLattice(a)
Lattice_createFCCLattice = _libBornAgainCore.Lattice_createFCCLattice

def Lattice_createTrigonalLattice(a, c):
    return _libBornAgainCore.Lattice_createTrigonalLattice(a, c)
Lattice_createTrigonalLattice = _libBornAgainCore.Lattice_createTrigonalLattice

class Lattice1DParameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Lattice1DParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Lattice1DParameters, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _libBornAgainCore.new_Lattice1DParameters()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["m_length"] = _libBornAgainCore.Lattice1DParameters_m_length_set
    __swig_getmethods__["m_length"] = _libBornAgainCore.Lattice1DParameters_m_length_get
    if _newclass:
        m_length = _swig_property(_libBornAgainCore.Lattice1DParameters_m_length_get, _libBornAgainCore.Lattice1DParameters_m_length_set)
    __swig_setmethods__["m_xi"] = _libBornAgainCore.Lattice1DParameters_m_xi_set
    __swig_getmethods__["m_xi"] = _libBornAgainCore.Lattice1DParameters_m_xi_get
    if _newclass:
        m_xi = _swig_property(_libBornAgainCore.Lattice1DParameters_m_xi_get, _libBornAgainCore.Lattice1DParameters_m_xi_set)
    __swig_destroy__ = _libBornAgainCore.delete_Lattice1DParameters
    __del__ = lambda self: None
Lattice1DParameters_swigregister = _libBornAgainCore.Lattice1DParameters_swigregister
Lattice1DParameters_swigregister(Lattice1DParameters)

class Lattice2DParameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Lattice2DParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Lattice2DParameters, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _libBornAgainCore.new_Lattice2DParameters()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["m_length_1"] = _libBornAgainCore.Lattice2DParameters_m_length_1_set
    __swig_getmethods__["m_length_1"] = _libBornAgainCore.Lattice2DParameters_m_length_1_get
    if _newclass:
        m_length_1 = _swig_property(_libBornAgainCore.Lattice2DParameters_m_length_1_get, _libBornAgainCore.Lattice2DParameters_m_length_1_set)
    __swig_setmethods__["m_length_2"] = _libBornAgainCore.Lattice2DParameters_m_length_2_set
    __swig_getmethods__["m_length_2"] = _libBornAgainCore.Lattice2DParameters_m_length_2_get
    if _newclass:
        m_length_2 = _swig_property(_libBornAgainCore.Lattice2DParameters_m_length_2_get, _libBornAgainCore.Lattice2DParameters_m_length_2_set)
    __swig_setmethods__["m_angle"] = _libBornAgainCore.Lattice2DParameters_m_angle_set
    __swig_getmethods__["m_angle"] = _libBornAgainCore.Lattice2DParameters_m_angle_get
    if _newclass:
        m_angle = _swig_property(_libBornAgainCore.Lattice2DParameters_m_angle_get, _libBornAgainCore.Lattice2DParameters_m_angle_set)
    __swig_setmethods__["m_xi"] = _libBornAgainCore.Lattice2DParameters_m_xi_set
    __swig_getmethods__["m_xi"] = _libBornAgainCore.Lattice2DParameters_m_xi_get
    if _newclass:
        m_xi = _swig_property(_libBornAgainCore.Lattice2DParameters_m_xi_get, _libBornAgainCore.Lattice2DParameters_m_xi_set)
    __swig_destroy__ = _libBornAgainCore.delete_Lattice2DParameters
    __del__ = lambda self: None
Lattice2DParameters_swigregister = _libBornAgainCore.Lattice2DParameters_swigregister
Lattice2DParameters_swigregister(Lattice2DParameters)


def getUnitCellArea(lattice_params):
    return _libBornAgainCore.getUnitCellArea(lattice_params)
getUnitCellArea = _libBornAgainCore.getUnitCellArea
class IRoughness(ISample):
    __swig_setmethods__ = {}
    for _s in [ISample]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IRoughness, name, value)
    __swig_getmethods__ = {}
    for _s in [ISample]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IRoughness, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == IRoughness:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_IRoughness(_self, )
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_IRoughness
    __del__ = lambda self: None

    def accept(self, visitor):
        return _libBornAgainCore.IRoughness_accept(self, visitor)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_IRoughness(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.IRoughness__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.IRoughness_init_parameters(self)
IRoughness_swigregister = _libBornAgainCore.IRoughness_swigregister
IRoughness_swigregister(IRoughness)

class Layer(ICompositeSample):
    __swig_setmethods__ = {}
    for _s in [ICompositeSample]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Layer, name, value)
    __swig_getmethods__ = {}
    for _s in [ICompositeSample]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Layer, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_Layer
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.Layer_clone(self)

    def cloneInvertB(self):
        return _libBornAgainCore.Layer_cloneInvertB(self)

    def accept(self, visitor):
        return _libBornAgainCore.Layer_accept(self, visitor)

    def setThickness(self, thickness):
        return _libBornAgainCore.Layer_setThickness(self, thickness)

    def getThickness(self):
        return _libBornAgainCore.Layer_getThickness(self)

    def setMaterial(self, material):
        return _libBornAgainCore.Layer_setMaterial(self, material)

    def setMaterialAndThickness(self, material, thickness):
        return _libBornAgainCore.Layer_setMaterialAndThickness(self, material, thickness)

    def getMaterial(self):
        return _libBornAgainCore.Layer_getMaterial(self)

    def getRefractiveIndex(self):
        return _libBornAgainCore.Layer_getRefractiveIndex(self)

    def getRefractiveIndex2(self):
        return _libBornAgainCore.Layer_getRefractiveIndex2(self)

    def addLayout(self, decoration):
        return _libBornAgainCore.Layer_addLayout(self, decoration)

    def getNumberOfLayouts(self):
        return _libBornAgainCore.Layer_getNumberOfLayouts(self)

    def getLayout(self, i):
        return _libBornAgainCore.Layer_getLayout(self, i)

    def hasDWBASimulation(self):
        return _libBornAgainCore.Layer_hasDWBASimulation(self)

    def createLayoutSimulation(self, layout_index):
        return _libBornAgainCore.Layer_createLayoutSimulation(self, layout_index)

    def getTotalParticleSurfaceDensity(self, layout_index):
        return _libBornAgainCore.Layer_getTotalParticleSurfaceDensity(self, layout_index)

    def getTotalAbundance(self):
        return _libBornAgainCore.Layer_getTotalAbundance(self)

    def setNumberOfLayers(self, n_layers):
        return _libBornAgainCore.Layer_setNumberOfLayers(self, n_layers)

    def getNumberOfLayers(self):
        return _libBornAgainCore.Layer_getNumberOfLayers(self)

    def __init__(self, *args):
        if self.__class__ == Layer:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_Layer(_self, *args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def init_parameters(self):
        return _libBornAgainCore.Layer_init_parameters(self)

    def _print(self, ostr):
        return _libBornAgainCore.Layer__print(self, ostr)

    def addLayoutPtr(self, layout):
        return _libBornAgainCore.Layer_addLayoutPtr(self, layout)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_Layer(self)
        return weakref_proxy(self)
Layer_swigregister = _libBornAgainCore.Layer_swigregister
Layer_swigregister(Layer)

class RealParameterWrapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RealParameterWrapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RealParameterWrapper, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libBornAgainCore.new_RealParameterWrapper(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_RealParameterWrapper
    __del__ = lambda self: None

    def setValue(self, value):
        return _libBornAgainCore.RealParameterWrapper_setValue(self, value)

    def getValue(self):
        return _libBornAgainCore.RealParameterWrapper_getValue(self)

    def isNull(self):
        return _libBornAgainCore.RealParameterWrapper_isNull(self)

    def checkNull(self):
        return _libBornAgainCore.RealParameterWrapper_checkNull(self)

    def getAttLimits(self):
        return _libBornAgainCore.RealParameterWrapper_getAttLimits(self)

    def __eq__(self, other):
        return _libBornAgainCore.RealParameterWrapper___eq__(self, other)

    def __ne__(self, other):
        return _libBornAgainCore.RealParameterWrapper___ne__(self, other)
RealParameterWrapper_swigregister = _libBornAgainCore.RealParameterWrapper_swigregister
RealParameterWrapper_swigregister(RealParameterWrapper)

class LayerRoughness(IRoughness):
    __swig_setmethods__ = {}
    for _s in [IRoughness]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LayerRoughness, name, value)
    __swig_getmethods__ = {}
    for _s in [IRoughness]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LayerRoughness, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == LayerRoughness:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_LayerRoughness(_self, *args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def clone(self):
        return _libBornAgainCore.LayerRoughness_clone(self)

    def accept(self, visitor):
        return _libBornAgainCore.LayerRoughness_accept(self, visitor)

    def getSpectralFun(self, kvec):
        return _libBornAgainCore.LayerRoughness_getSpectralFun(self, kvec)

    def getCorrFun(self, k):
        return _libBornAgainCore.LayerRoughness_getCorrFun(self, k)

    def setSigma(self, sigma):
        return _libBornAgainCore.LayerRoughness_setSigma(self, sigma)

    def getSigma(self):
        return _libBornAgainCore.LayerRoughness_getSigma(self)

    def setHurstParameter(self, hurstParameter):
        return _libBornAgainCore.LayerRoughness_setHurstParameter(self, hurstParameter)

    def getHurstParameter(self):
        return _libBornAgainCore.LayerRoughness_getHurstParameter(self)

    def setLatteralCorrLength(self, latteralCorrLength):
        return _libBornAgainCore.LayerRoughness_setLatteralCorrLength(self, latteralCorrLength)

    def getLatteralCorrLength(self):
        return _libBornAgainCore.LayerRoughness_getLatteralCorrLength(self)

    def init_parameters(self):
        return _libBornAgainCore.LayerRoughness_init_parameters(self)

    def _print(self, ostr):
        return _libBornAgainCore.LayerRoughness__print(self, ostr)
    __swig_destroy__ = _libBornAgainCore.delete_LayerRoughness
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_LayerRoughness(self)
        return weakref_proxy(self)
LayerRoughness_swigregister = _libBornAgainCore.LayerRoughness_swigregister
LayerRoughness_swigregister(LayerRoughness)

class Line(IShape2D):
    __swig_setmethods__ = {}
    for _s in [IShape2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Line, name, value)
    __swig_getmethods__ = {}
    for _s in [IShape2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Line, name)
    __repr__ = _swig_repr

    def __init__(self, x1, y1, x2, y2):
        if self.__class__ == Line:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_Line(_self, x1, y1, x2, y2)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def clone(self):
        return _libBornAgainCore.Line_clone(self)

    def contains(self, *args):
        return _libBornAgainCore.Line_contains(self, *args)
    __swig_destroy__ = _libBornAgainCore.delete_Line
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_Line(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.Line__print(self, ostr)
Line_swigregister = _libBornAgainCore.Line_swigregister
Line_swigregister(Line)

class VerticalLine(IShape2D):
    __swig_setmethods__ = {}
    for _s in [IShape2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VerticalLine, name, value)
    __swig_getmethods__ = {}
    for _s in [IShape2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VerticalLine, name)
    __repr__ = _swig_repr

    def __init__(self, x):
        if self.__class__ == VerticalLine:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_VerticalLine(_self, x)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def clone(self):
        return _libBornAgainCore.VerticalLine_clone(self)

    def contains(self, *args):
        return _libBornAgainCore.VerticalLine_contains(self, *args)

    def getXpos(self):
        return _libBornAgainCore.VerticalLine_getXpos(self)
    __swig_destroy__ = _libBornAgainCore.delete_VerticalLine
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_VerticalLine(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.VerticalLine__print(self, ostr)
VerticalLine_swigregister = _libBornAgainCore.VerticalLine_swigregister
VerticalLine_swigregister(VerticalLine)

class HorizontalLine(IShape2D):
    __swig_setmethods__ = {}
    for _s in [IShape2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HorizontalLine, name, value)
    __swig_getmethods__ = {}
    for _s in [IShape2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HorizontalLine, name)
    __repr__ = _swig_repr

    def __init__(self, y):
        if self.__class__ == HorizontalLine:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_HorizontalLine(_self, y)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def clone(self):
        return _libBornAgainCore.HorizontalLine_clone(self)

    def contains(self, *args):
        return _libBornAgainCore.HorizontalLine_contains(self, *args)

    def getYpos(self):
        return _libBornAgainCore.HorizontalLine_getYpos(self)
    __swig_destroy__ = _libBornAgainCore.delete_HorizontalLine
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_HorizontalLine(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.HorizontalLine__print(self, ostr)
HorizontalLine_swigregister = _libBornAgainCore.HorizontalLine_swigregister
HorizontalLine_swigregister(HorizontalLine)


def StandardNormal(x):
    return _libBornAgainCore.StandardNormal(x)
StandardNormal = _libBornAgainCore.StandardNormal

def Gaussian(x, average, std_dev):
    return _libBornAgainCore.Gaussian(x, average, std_dev)
Gaussian = _libBornAgainCore.Gaussian

def IntegratedGaussian(x, average, std_dev):
    return _libBornAgainCore.IntegratedGaussian(x, average, std_dev)
IntegratedGaussian = _libBornAgainCore.IntegratedGaussian

def Si(x):
    return _libBornAgainCore.Si(x)
Si = _libBornAgainCore.Si

def sinc(*args):
    return _libBornAgainCore.sinc(*args)
sinc = _libBornAgainCore.sinc

def tanhc(z):
    return _libBornAgainCore.tanhc(z)
tanhc = _libBornAgainCore.tanhc

def Laue(z, N):
    return _libBornAgainCore.Laue(z, N)
Laue = _libBornAgainCore.Laue

def Bessel_J0(*args):
    return _libBornAgainCore.Bessel_J0(*args)
Bessel_J0 = _libBornAgainCore.Bessel_J0

def Bessel_J1(*args):
    return _libBornAgainCore.Bessel_J1(*args)
Bessel_J1 = _libBornAgainCore.Bessel_J1

def Bessel_J1c(*args):
    return _libBornAgainCore.Bessel_J1c(*args)
Bessel_J1c = _libBornAgainCore.Bessel_J1c

_libBornAgainCore.FORWARD_FFT_swigconstant(_libBornAgainCore)
FORWARD_FFT = _libBornAgainCore.FORWARD_FFT

_libBornAgainCore.BACKWARD_FFT_swigconstant(_libBornAgainCore)
BACKWARD_FFT = _libBornAgainCore.BACKWARD_FFT

def FastFourierTransform(*args):
    return _libBornAgainCore.FastFourierTransform(*args)
FastFourierTransform = _libBornAgainCore.FastFourierTransform

def ConvolveFFT(signal, resfunc):
    return _libBornAgainCore.ConvolveFFT(signal, resfunc)
ConvolveFFT = _libBornAgainCore.ConvolveFFT

def GenerateUniformRandom():
    return _libBornAgainCore.GenerateUniformRandom()
GenerateUniformRandom = _libBornAgainCore.GenerateUniformRandom

def GenerateStandardNormalRandom():
    return _libBornAgainCore.GenerateStandardNormalRandom()
GenerateStandardNormalRandom = _libBornAgainCore.GenerateStandardNormalRandom

def GenerateNormalRandom(average, std_dev):
    return _libBornAgainCore.GenerateNormalRandom(average, std_dev)
GenerateNormalRandom = _libBornAgainCore.GenerateNormalRandom

def isnan(x):
    return _libBornAgainCore.isnan(x)
isnan = _libBornAgainCore.isnan

def isinf(x):
    return _libBornAgainCore.isinf(x)
isinf = _libBornAgainCore.isinf
class MesoCrystal(IParticle):
    __swig_setmethods__ = {}
    for _s in [IParticle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MesoCrystal, name, value)
    __swig_getmethods__ = {}
    for _s in [IParticle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MesoCrystal, name)
    __repr__ = _swig_repr

    def __init__(self, particle_structure, form_factor):
        if self.__class__ == MesoCrystal:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_MesoCrystal(_self, particle_structure, form_factor)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_MesoCrystal
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.MesoCrystal_clone(self)

    def cloneInvertB(self):
        return _libBornAgainCore.MesoCrystal_cloneInvertB(self)

    def accept(self, visitor):
        return _libBornAgainCore.MesoCrystal_accept(self, visitor)

    def setAmbientMaterial(self, material):
        return _libBornAgainCore.MesoCrystal_setAmbientMaterial(self, material)

    def getAmbientMaterial(self):
        return _libBornAgainCore.MesoCrystal_getAmbientMaterial(self)

    def createTransformedFormFactor(self, p_rotation, translation):
        return _libBornAgainCore.MesoCrystal_createTransformedFormFactor(self, p_rotation, translation)

    def getClusteredParticles(self):
        return _libBornAgainCore.MesoCrystal_getClusteredParticles(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_MesoCrystal(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.MesoCrystal__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.MesoCrystal_init_parameters(self)
MesoCrystal_swigregister = _libBornAgainCore.MesoCrystal_swigregister
MesoCrystal_swigregister(MesoCrystal)


_libBornAgainCore.VERBOSE_swigconstant(_libBornAgainCore)
VERBOSE = _libBornAgainCore.VERBOSE

_libBornAgainCore.DEBUG2_swigconstant(_libBornAgainCore)
DEBUG2 = _libBornAgainCore.DEBUG2

_libBornAgainCore.DEBUG_swigconstant(_libBornAgainCore)
DEBUG = _libBornAgainCore.DEBUG

_libBornAgainCore.INFO_swigconstant(_libBornAgainCore)
INFO = _libBornAgainCore.INFO

_libBornAgainCore.WARNING_swigconstant(_libBornAgainCore)
WARNING = _libBornAgainCore.WARNING

_libBornAgainCore.ERROR_swigconstant(_libBornAgainCore)
ERROR = _libBornAgainCore.ERROR

_libBornAgainCore.FATAL_swigconstant(_libBornAgainCore)
FATAL = _libBornAgainCore.FATAL
class Logger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Logger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Logger, name)
    __repr__ = _swig_repr

    def __init__(self, level):
        this = _libBornAgainCore.new_Logger(level)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_Logger
    __del__ = lambda self: None

    def NowTime(self):
        return _libBornAgainCore.Logger_NowTime(self)

    def ToString(self, level):
        return _libBornAgainCore.Logger_ToString(self, level)
    __swig_getmethods__["SetLevel"] = lambda x: _libBornAgainCore.Logger_SetLevel
    if _newclass:
        SetLevel = staticmethod(_libBornAgainCore.Logger_SetLevel)
    __swig_getmethods__["GetLevel"] = lambda x: _libBornAgainCore.Logger_GetLevel
    if _newclass:
        GetLevel = staticmethod(_libBornAgainCore.Logger_GetLevel)
Logger_swigregister = _libBornAgainCore.Logger_swigregister
Logger_swigregister(Logger)

def Logger_SetLevel(*args):
    return _libBornAgainCore.Logger_SetLevel(*args)
Logger_SetLevel = _libBornAgainCore.Logger_SetLevel

def Logger_GetLevel():
    return _libBornAgainCore.Logger_GetLevel()
Logger_GetLevel = _libBornAgainCore.Logger_GetLevel


def SetLevel(*args):
    return _libBornAgainCore.SetLevel(*args)
SetLevel = _libBornAgainCore.SetLevel
class MultiLayer(ICompositeSample):
    __swig_setmethods__ = {}
    for _s in [ICompositeSample]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [ICompositeSample]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MultiLayer, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == MultiLayer:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_MultiLayer(_self, )
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_MultiLayer
    __del__ = lambda self: None

    def accept(self, visitor):
        return _libBornAgainCore.MultiLayer_accept(self, visitor)

    def getNumberOfLayers(self):
        return _libBornAgainCore.MultiLayer_getNumberOfLayers(self)

    def getNumberOfInterfaces(self):
        return _libBornAgainCore.MultiLayer_getNumberOfInterfaces(self)

    def addLayer(self, p_child):
        return _libBornAgainCore.MultiLayer_addLayer(self, p_child)

    def addLayerWithTopRoughness(self, layer, roughness):
        return _libBornAgainCore.MultiLayer_addLayerWithTopRoughness(self, layer, roughness)

    def getLayer(self, i_layer):
        return _libBornAgainCore.MultiLayer_getLayer(self, i_layer)

    def getLayerInterface(self, i_interface):
        return _libBornAgainCore.MultiLayer_getLayerInterface(self, i_interface)

    def getLayerBottomZ(self, i_layer):
        return _libBornAgainCore.MultiLayer_getLayerBottomZ(self, i_layer)

    def getLayerThickness(self, i_layer):
        return _libBornAgainCore.MultiLayer_getLayerThickness(self, i_layer)

    def getLayerTopInterface(self, i_layer):
        return _libBornAgainCore.MultiLayer_getLayerTopInterface(self, i_layer)

    def getLayerBottomInterface(self, i_layer):
        return _libBornAgainCore.MultiLayer_getLayerBottomInterface(self, i_layer)

    def clear(self):
        return _libBornAgainCore.MultiLayer_clear(self)

    def clone(self):
        return _libBornAgainCore.MultiLayer_clone(self)

    def cloneInvertB(self):
        return _libBornAgainCore.MultiLayer_cloneInvertB(self)

    def setCrossCorrLength(self, crossCorrLength):
        return _libBornAgainCore.MultiLayer_setCrossCorrLength(self, crossCorrLength)

    def getCrossCorrLength(self):
        return _libBornAgainCore.MultiLayer_getCrossCorrLength(self)

    def getCrossCorrSpectralFun(self, kvec, j, k):
        return _libBornAgainCore.MultiLayer_getCrossCorrSpectralFun(self, kvec, j, k)

    def setLayerThickness(self, i_layer, thickness):
        return _libBornAgainCore.MultiLayer_setLayerThickness(self, i_layer, thickness)

    def createDWBASimulation(self):
        return _libBornAgainCore.MultiLayer_createDWBASimulation(self)

    def getIndexOfLayer(self, layer):
        return _libBornAgainCore.MultiLayer_getIndexOfLayer(self, layer)

    def requiresMatrixRTCoefficients(self):
        return _libBornAgainCore.MultiLayer_requiresMatrixRTCoefficients(self)

    def zToLayerIndex(self, z_value):
        return _libBornAgainCore.MultiLayer_zToLayerIndex(self, z_value)

    def init_parameters(self):
        return _libBornAgainCore.MultiLayer_init_parameters(self)

    def _print(self, ostr):
        return _libBornAgainCore.MultiLayer__print(self, ostr)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_MultiLayer(self)
        return weakref_proxy(self)
MultiLayer_swigregister = _libBornAgainCore.MultiLayer_swigregister
MultiLayer_swigregister(MultiLayer)

class OffSpecSimulation(Simulation):
    __swig_setmethods__ = {}
    for _s in [Simulation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OffSpecSimulation, name, value)
    __swig_getmethods__ = {}
    for _s in [Simulation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OffSpecSimulation, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_OffSpecSimulation
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.OffSpecSimulation_clone(self)

    def prepareSimulation(self):
        return _libBornAgainCore.OffSpecSimulation_prepareSimulation(self)

    def getNumberOfSimulationElements(self):
        return _libBornAgainCore.OffSpecSimulation_getNumberOfSimulationElements(self)

    def getOutputData(self):
        return _libBornAgainCore.OffSpecSimulation_getOutputData(self)

    def getDetectorIntensity(self, *args):
        return _libBornAgainCore.OffSpecSimulation_getDetectorIntensity(self, *args)

    def getIntensityData(self):
        return _libBornAgainCore.OffSpecSimulation_getIntensityData(self)

    def setInstrument(self, instrument):
        return _libBornAgainCore.OffSpecSimulation_setInstrument(self, instrument)

    def getInstrument(self):
        return _libBornAgainCore.OffSpecSimulation_getInstrument(self)

    def setBeamParameters(self, arg2, alpha_axis, phi_i):
        return _libBornAgainCore.OffSpecSimulation_setBeamParameters(self, arg2, alpha_axis, phi_i)

    def setBeamIntensity(self, intensity):
        return _libBornAgainCore.OffSpecSimulation_setBeamIntensity(self, intensity)

    def setBeamPolarization(self, bloch_vector):
        return _libBornAgainCore.OffSpecSimulation_setBeamPolarization(self, bloch_vector)

    def setDetectorParameters(self, *args):
        return _libBornAgainCore.OffSpecSimulation_setDetectorParameters(self, *args)

    def setDetectorResolutionFunction(self, resolution_function):
        return _libBornAgainCore.OffSpecSimulation_setDetectorResolutionFunction(self, resolution_function)

    def removeDetectorResolutionFunction(self):
        return _libBornAgainCore.OffSpecSimulation_removeDetectorResolutionFunction(self)

    def setAnalyzerProperties(self, direction, efficiency, total_transmission=1.0):
        return _libBornAgainCore.OffSpecSimulation_setAnalyzerProperties(self, direction, efficiency, total_transmission)

    def addParametersToExternalPool(self, path, external_pool, copy_number=-1):
        return _libBornAgainCore.OffSpecSimulation_addParametersToExternalPool(self, path, external_pool, copy_number)

    def __init__(self, *args):
        if self.__class__ == OffSpecSimulation:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_OffSpecSimulation(_self, *args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def init_parameters(self):
        return _libBornAgainCore.OffSpecSimulation_init_parameters(self)

    def initSimulationElementVector(self):
        return _libBornAgainCore.OffSpecSimulation_initSimulationElementVector(self)

    def transferResultsToIntensityMap(self):
        return _libBornAgainCore.OffSpecSimulation_transferResultsToIntensityMap(self)

    def getBeamIntensity(self):
        return _libBornAgainCore.OffSpecSimulation_getBeamIntensity(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_OffSpecSimulation(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.OffSpecSimulation__print(self, ostr)
OffSpecSimulation_swigregister = _libBornAgainCore.OffSpecSimulation_swigregister
OffSpecSimulation_swigregister(OffSpecSimulation)


def doubleBinSize(source):
    return _libBornAgainCore.doubleBinSize(source)
doubleBinSize = _libBornAgainCore.doubleBinSize

def FourierTransform(source, p_destination):
    return _libBornAgainCore.FourierTransform(source, p_destination)
FourierTransform = _libBornAgainCore.FourierTransform

def FourierTransformR(source, p_destination):
    return _libBornAgainCore.FourierTransformR(source, p_destination)
FourierTransformR = _libBornAgainCore.FourierTransformR

def getRealPart(source):
    return _libBornAgainCore.getRealPart(source)
getRealPart = _libBornAgainCore.getRealPart

def getImagPart(source):
    return _libBornAgainCore.getImagPart(source)
getImagPart = _libBornAgainCore.getImagPart

def getModulusPart(source):
    return _libBornAgainCore.getModulusPart(source)
getModulusPart = _libBornAgainCore.getModulusPart

def sliceAccrossOneAxis(data, fixed_axis_name, fixed_axis_value):
    return _libBornAgainCore.sliceAccrossOneAxis(data, fixed_axis_name, fixed_axis_value)
sliceAccrossOneAxis = _libBornAgainCore.sliceAccrossOneAxis

def selectRangeOnOneAxis(data, selected_axis_name, axis_value1, axis_value2):
    return _libBornAgainCore.selectRangeOnOneAxis(data, selected_axis_name, axis_value1, axis_value2)
selectRangeOnOneAxis = _libBornAgainCore.selectRangeOnOneAxis

def applyFunction(data, func):
    return _libBornAgainCore.applyFunction(data, func)
applyFunction = _libBornAgainCore.applyFunction
class ParameterDistribution(IParameterized):
    __swig_setmethods__ = {}
    for _s in [IParameterized]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParameterDistribution, name, value)
    __swig_getmethods__ = {}
    for _s in [IParameterized]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParameterDistribution, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == ParameterDistribution:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_ParameterDistribution(_self, *args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_ParameterDistribution
    __del__ = lambda self: None

    def linkParameter(self, par_name):
        return _libBornAgainCore.ParameterDistribution_linkParameter(self, par_name)

    def getMainParameterName(self):
        return _libBornAgainCore.ParameterDistribution_getMainParameterName(self)

    def getNbrSamples(self):
        return _libBornAgainCore.ParameterDistribution_getNbrSamples(self)

    def getSigmaFactor(self):
        return _libBornAgainCore.ParameterDistribution_getSigmaFactor(self)

    def getDistribution(self):
        return _libBornAgainCore.ParameterDistribution_getDistribution(self)

    def generateSamples(self):
        return _libBornAgainCore.ParameterDistribution_generateSamples(self)

    def getLinkedParameterNames(self):
        return _libBornAgainCore.ParameterDistribution_getLinkedParameterNames(self)

    def getLimits(self):
        return _libBornAgainCore.ParameterDistribution_getLimits(self)

    def getMinValue(self):
        return _libBornAgainCore.ParameterDistribution_getMinValue(self)

    def getMaxValue(self):
        return _libBornAgainCore.ParameterDistribution_getMaxValue(self)

    def init_parameters(self):
        return _libBornAgainCore.ParameterDistribution_init_parameters(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_ParameterDistribution(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.ParameterDistribution__print(self, ostr)
ParameterDistribution_swigregister = _libBornAgainCore.ParameterDistribution_swigregister
ParameterDistribution_swigregister(ParameterDistribution)

class ParameterPool(ICloneable):
    __swig_setmethods__ = {}
    for _s in [ICloneable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParameterPool, name, value)
    __swig_getmethods__ = {}
    for _s in [ICloneable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParameterPool, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == ParameterPool:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_ParameterPool(_self, )
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_ParameterPool
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.ParameterPool_clone(self)

    def cloneWithPrefix(self, prefix):
        return _libBornAgainCore.ParameterPool_cloneWithPrefix(self, prefix)

    def copyToExternalPool(self, prefix, external_pool):
        return _libBornAgainCore.ParameterPool_copyToExternalPool(self, prefix, external_pool)

    def clear(self):
        return _libBornAgainCore.ParameterPool_clear(self)

    def size(self):
        return _libBornAgainCore.ParameterPool_size(self)

    def registerParameter(self, *args):
        return _libBornAgainCore.ParameterPool_registerParameter(self, *args)

    def addParameter(self, name, par):
        return _libBornAgainCore.ParameterPool_addParameter(self, name, par)

    def getParameter(self, name):
        return _libBornAgainCore.ParameterPool_getParameter(self, name)

    def getMatchedParameters(self, wildcards):
        return _libBornAgainCore.ParameterPool_getMatchedParameters(self, wildcards)

    def setParameterValue(self, name, value):
        return _libBornAgainCore.ParameterPool_setParameterValue(self, name, value)

    def setMatchedParametersValue(self, wildcards, value):
        return _libBornAgainCore.ParameterPool_setMatchedParametersValue(self, wildcards, value)

    def getParameterNames(self):
        return _libBornAgainCore.ParameterPool_getParameterNames(self)

    def _print(self, ostr):
        return _libBornAgainCore.ParameterPool__print(self, ostr)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_ParameterPool(self)
        return weakref_proxy(self)
ParameterPool_swigregister = _libBornAgainCore.ParameterPool_swigregister
ParameterPool_swigregister(ParameterPool)

class Particle(IParticle):
    __swig_setmethods__ = {}
    for _s in [IParticle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Particle, name, value)
    __swig_getmethods__ = {}
    for _s in [IParticle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Particle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == Particle:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_Particle(_self, *args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def clone(self):
        return _libBornAgainCore.Particle_clone(self)

    def cloneInvertB(self):
        return _libBornAgainCore.Particle_cloneInvertB(self)

    def accept(self, visitor):
        return _libBornAgainCore.Particle_accept(self, visitor)

    def setAmbientMaterial(self, material):
        return _libBornAgainCore.Particle_setAmbientMaterial(self, material)

    def getAmbientMaterial(self):
        return _libBornAgainCore.Particle_getAmbientMaterial(self)

    def createTransformedFormFactor(self, p_rotation, translation):
        return _libBornAgainCore.Particle_createTransformedFormFactor(self, p_rotation, translation)

    def setMaterial(self, material):
        return _libBornAgainCore.Particle_setMaterial(self, material)

    def getMaterial(self):
        return _libBornAgainCore.Particle_getMaterial(self)

    def getRefractiveIndex(self):
        return _libBornAgainCore.Particle_getRefractiveIndex(self)

    def setFormFactor(self, form_factor):
        return _libBornAgainCore.Particle_setFormFactor(self, form_factor)

    def getFormFactor(self):
        return _libBornAgainCore.Particle_getFormFactor(self)
    __swig_destroy__ = _libBornAgainCore.delete_Particle
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_Particle(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.Particle__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.Particle_init_parameters(self)
Particle_swigregister = _libBornAgainCore.Particle_swigregister
Particle_swigregister(Particle)

class kvector_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, kvector_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, kvector_t, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libBornAgainCore.new_kvector_t(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_kvector_t
    __del__ = lambda self: None

    def __iadd__(self, v):
        return _libBornAgainCore.kvector_t___iadd__(self, v)

    def __isub__(self, v):
        return _libBornAgainCore.kvector_t___isub__(self, v)

    def __imul__(self, a):
        return _libBornAgainCore.kvector_t___imul__(self, a)

    def __idiv__(self, a):
        return _libBornAgainCore.kvector_t___idiv__(self, a)

    def x(self):
        return _libBornAgainCore.kvector_t_x(self)

    def y(self):
        return _libBornAgainCore.kvector_t_y(self)

    def z(self):
        return _libBornAgainCore.kvector_t_z(self)

    def setX(self, a):
        return _libBornAgainCore.kvector_t_setX(self, a)

    def setY(self, a):
        return _libBornAgainCore.kvector_t_setY(self, a)

    def setZ(self, a):
        return _libBornAgainCore.kvector_t_setZ(self, a)

    def setXYZ(self, x1, y1, z1):
        return _libBornAgainCore.kvector_t_setXYZ(self, x1, y1, z1)

    def mag2(self):
        return _libBornAgainCore.kvector_t_mag2(self)

    def mag(self):
        return _libBornAgainCore.kvector_t_mag(self)

    def magxy2(self):
        return _libBornAgainCore.kvector_t_magxy2(self)

    def magxy(self):
        return _libBornAgainCore.kvector_t_magxy(self)

    def phi(self):
        return _libBornAgainCore.kvector_t_phi(self)

    def theta(self):
        return _libBornAgainCore.kvector_t_theta(self)

    def cosTheta(self):
        return _libBornAgainCore.kvector_t_cosTheta(self)

    def sin2Theta(self):
        return _libBornAgainCore.kvector_t_sin2Theta(self)

    def dot(self, v):
        return _libBornAgainCore.kvector_t_dot(self, v)

    def cross(self, v):
        return _libBornAgainCore.kvector_t_cross(self, v)

    def perp2(self, v):
        return _libBornAgainCore.kvector_t_perp2(self, v)

    def perp(self, v):
        return _libBornAgainCore.kvector_t_perp(self, v)

    def angle(self, v):
        return _libBornAgainCore.kvector_t_angle(self, v)

    def unit(self):
        return _libBornAgainCore.kvector_t_unit(self)

    def setLambdaAlphaPhi(self, _lambda, _alpha, _phi):
        return _libBornAgainCore.kvector_t_setLambdaAlphaPhi(self, _lambda, _alpha, _phi)

    def __add__(self, rhs):
        return _libBornAgainCore.kvector_t___add__(self, rhs)

    def __mul__(self, c):
        return _libBornAgainCore.kvector_t___mul__(self, c)

    def __rmul__(self, c):
        return _libBornAgainCore.kvector_t___rmul__(self, c)
kvector_t_swigregister = _libBornAgainCore.kvector_t_swigregister
kvector_t_swigregister(kvector_t)

class vector_kvector_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_kvector_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_kvector_t, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libBornAgainCore.vector_kvector_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libBornAgainCore.vector_kvector_t___nonzero__(self)

    def __bool__(self):
        return _libBornAgainCore.vector_kvector_t___bool__(self)

    def __len__(self):
        return _libBornAgainCore.vector_kvector_t___len__(self)

    def __getslice__(self, i, j):
        return _libBornAgainCore.vector_kvector_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libBornAgainCore.vector_kvector_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libBornAgainCore.vector_kvector_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libBornAgainCore.vector_kvector_t___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libBornAgainCore.vector_kvector_t___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libBornAgainCore.vector_kvector_t___setitem__(self, *args)

    def pop(self):
        return _libBornAgainCore.vector_kvector_t_pop(self)

    def append(self, x):
        return _libBornAgainCore.vector_kvector_t_append(self, x)

    def empty(self):
        return _libBornAgainCore.vector_kvector_t_empty(self)

    def size(self):
        return _libBornAgainCore.vector_kvector_t_size(self)

    def swap(self, v):
        return _libBornAgainCore.vector_kvector_t_swap(self, v)

    def begin(self):
        return _libBornAgainCore.vector_kvector_t_begin(self)

    def end(self):
        return _libBornAgainCore.vector_kvector_t_end(self)

    def rbegin(self):
        return _libBornAgainCore.vector_kvector_t_rbegin(self)

    def rend(self):
        return _libBornAgainCore.vector_kvector_t_rend(self)

    def clear(self):
        return _libBornAgainCore.vector_kvector_t_clear(self)

    def get_allocator(self):
        return _libBornAgainCore.vector_kvector_t_get_allocator(self)

    def pop_back(self):
        return _libBornAgainCore.vector_kvector_t_pop_back(self)

    def erase(self, *args):
        return _libBornAgainCore.vector_kvector_t_erase(self, *args)

    def __init__(self, *args):
        this = _libBornAgainCore.new_vector_kvector_t(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _libBornAgainCore.vector_kvector_t_push_back(self, x)

    def front(self):
        return _libBornAgainCore.vector_kvector_t_front(self)

    def back(self):
        return _libBornAgainCore.vector_kvector_t_back(self)

    def assign(self, n, x):
        return _libBornAgainCore.vector_kvector_t_assign(self, n, x)

    def resize(self, *args):
        return _libBornAgainCore.vector_kvector_t_resize(self, *args)

    def insert(self, *args):
        return _libBornAgainCore.vector_kvector_t_insert(self, *args)

    def reserve(self, n):
        return _libBornAgainCore.vector_kvector_t_reserve(self, n)

    def capacity(self):
        return _libBornAgainCore.vector_kvector_t_capacity(self)
    __swig_destroy__ = _libBornAgainCore.delete_vector_kvector_t
    __del__ = lambda self: None
vector_kvector_t_swigregister = _libBornAgainCore.vector_kvector_t_swigregister
vector_kvector_t_swigregister(vector_kvector_t)

class cvector_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cvector_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cvector_t, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libBornAgainCore.new_cvector_t(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_cvector_t
    __del__ = lambda self: None

    def __iadd__(self, v):
        return _libBornAgainCore.cvector_t___iadd__(self, v)

    def __isub__(self, v):
        return _libBornAgainCore.cvector_t___isub__(self, v)

    def __imul__(self, a):
        return _libBornAgainCore.cvector_t___imul__(self, a)

    def __idiv__(self, a):
        return _libBornAgainCore.cvector_t___idiv__(self, a)

    def x(self):
        return _libBornAgainCore.cvector_t_x(self)

    def y(self):
        return _libBornAgainCore.cvector_t_y(self)

    def z(self):
        return _libBornAgainCore.cvector_t_z(self)

    def setX(self, a):
        return _libBornAgainCore.cvector_t_setX(self, a)

    def setY(self, a):
        return _libBornAgainCore.cvector_t_setY(self, a)

    def setZ(self, a):
        return _libBornAgainCore.cvector_t_setZ(self, a)

    def setXYZ(self, x1, y1, z1):
        return _libBornAgainCore.cvector_t_setXYZ(self, x1, y1, z1)

    def mag(self):
        return _libBornAgainCore.cvector_t_mag(self)

    def magxy2(self):
        return _libBornAgainCore.cvector_t_magxy2(self)

    def magxy(self):
        return _libBornAgainCore.cvector_t_magxy(self)

    def dot(self, v):
        return _libBornAgainCore.cvector_t_dot(self, v)

    def setLambdaAlphaPhi(self, _lambda, _alpha, _phi):
        return _libBornAgainCore.cvector_t_setLambdaAlphaPhi(self, _lambda, _alpha, _phi)
cvector_t_swigregister = _libBornAgainCore.cvector_t_swigregister
cvector_t_swigregister(cvector_t)

class vector_cvector_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_cvector_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_cvector_t, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libBornAgainCore.vector_cvector_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libBornAgainCore.vector_cvector_t___nonzero__(self)

    def __bool__(self):
        return _libBornAgainCore.vector_cvector_t___bool__(self)

    def __len__(self):
        return _libBornAgainCore.vector_cvector_t___len__(self)

    def __getslice__(self, i, j):
        return _libBornAgainCore.vector_cvector_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libBornAgainCore.vector_cvector_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libBornAgainCore.vector_cvector_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libBornAgainCore.vector_cvector_t___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libBornAgainCore.vector_cvector_t___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libBornAgainCore.vector_cvector_t___setitem__(self, *args)

    def pop(self):
        return _libBornAgainCore.vector_cvector_t_pop(self)

    def append(self, x):
        return _libBornAgainCore.vector_cvector_t_append(self, x)

    def empty(self):
        return _libBornAgainCore.vector_cvector_t_empty(self)

    def size(self):
        return _libBornAgainCore.vector_cvector_t_size(self)

    def swap(self, v):
        return _libBornAgainCore.vector_cvector_t_swap(self, v)

    def begin(self):
        return _libBornAgainCore.vector_cvector_t_begin(self)

    def end(self):
        return _libBornAgainCore.vector_cvector_t_end(self)

    def rbegin(self):
        return _libBornAgainCore.vector_cvector_t_rbegin(self)

    def rend(self):
        return _libBornAgainCore.vector_cvector_t_rend(self)

    def clear(self):
        return _libBornAgainCore.vector_cvector_t_clear(self)

    def get_allocator(self):
        return _libBornAgainCore.vector_cvector_t_get_allocator(self)

    def pop_back(self):
        return _libBornAgainCore.vector_cvector_t_pop_back(self)

    def erase(self, *args):
        return _libBornAgainCore.vector_cvector_t_erase(self, *args)

    def __init__(self, *args):
        this = _libBornAgainCore.new_vector_cvector_t(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _libBornAgainCore.vector_cvector_t_push_back(self, x)

    def front(self):
        return _libBornAgainCore.vector_cvector_t_front(self)

    def back(self):
        return _libBornAgainCore.vector_cvector_t_back(self)

    def assign(self, n, x):
        return _libBornAgainCore.vector_cvector_t_assign(self, n, x)

    def resize(self, *args):
        return _libBornAgainCore.vector_cvector_t_resize(self, *args)

    def insert(self, *args):
        return _libBornAgainCore.vector_cvector_t_insert(self, *args)

    def reserve(self, n):
        return _libBornAgainCore.vector_cvector_t_reserve(self, n)

    def capacity(self):
        return _libBornAgainCore.vector_cvector_t_capacity(self)
    __swig_destroy__ = _libBornAgainCore.delete_vector_cvector_t
    __del__ = lambda self: None
vector_cvector_t_swigregister = _libBornAgainCore.vector_cvector_t_swigregister
vector_cvector_t_swigregister(vector_cvector_t)

class vector_IFormFactorPtr_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_IFormFactorPtr_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_IFormFactorPtr_t, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libBornAgainCore.vector_IFormFactorPtr_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libBornAgainCore.vector_IFormFactorPtr_t___nonzero__(self)

    def __bool__(self):
        return _libBornAgainCore.vector_IFormFactorPtr_t___bool__(self)

    def __len__(self):
        return _libBornAgainCore.vector_IFormFactorPtr_t___len__(self)

    def __getslice__(self, i, j):
        return _libBornAgainCore.vector_IFormFactorPtr_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libBornAgainCore.vector_IFormFactorPtr_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libBornAgainCore.vector_IFormFactorPtr_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libBornAgainCore.vector_IFormFactorPtr_t___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libBornAgainCore.vector_IFormFactorPtr_t___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libBornAgainCore.vector_IFormFactorPtr_t___setitem__(self, *args)

    def pop(self):
        return _libBornAgainCore.vector_IFormFactorPtr_t_pop(self)

    def append(self, x):
        return _libBornAgainCore.vector_IFormFactorPtr_t_append(self, x)

    def empty(self):
        return _libBornAgainCore.vector_IFormFactorPtr_t_empty(self)

    def size(self):
        return _libBornAgainCore.vector_IFormFactorPtr_t_size(self)

    def swap(self, v):
        return _libBornAgainCore.vector_IFormFactorPtr_t_swap(self, v)

    def begin(self):
        return _libBornAgainCore.vector_IFormFactorPtr_t_begin(self)

    def end(self):
        return _libBornAgainCore.vector_IFormFactorPtr_t_end(self)

    def rbegin(self):
        return _libBornAgainCore.vector_IFormFactorPtr_t_rbegin(self)

    def rend(self):
        return _libBornAgainCore.vector_IFormFactorPtr_t_rend(self)

    def clear(self):
        return _libBornAgainCore.vector_IFormFactorPtr_t_clear(self)

    def get_allocator(self):
        return _libBornAgainCore.vector_IFormFactorPtr_t_get_allocator(self)

    def pop_back(self):
        return _libBornAgainCore.vector_IFormFactorPtr_t_pop_back(self)

    def erase(self, *args):
        return _libBornAgainCore.vector_IFormFactorPtr_t_erase(self, *args)

    def __init__(self, *args):
        this = _libBornAgainCore.new_vector_IFormFactorPtr_t(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _libBornAgainCore.vector_IFormFactorPtr_t_push_back(self, x)

    def front(self):
        return _libBornAgainCore.vector_IFormFactorPtr_t_front(self)

    def back(self):
        return _libBornAgainCore.vector_IFormFactorPtr_t_back(self)

    def assign(self, n, x):
        return _libBornAgainCore.vector_IFormFactorPtr_t_assign(self, n, x)

    def resize(self, *args):
        return _libBornAgainCore.vector_IFormFactorPtr_t_resize(self, *args)

    def insert(self, *args):
        return _libBornAgainCore.vector_IFormFactorPtr_t_insert(self, *args)

    def reserve(self, n):
        return _libBornAgainCore.vector_IFormFactorPtr_t_reserve(self, n)

    def capacity(self):
        return _libBornAgainCore.vector_IFormFactorPtr_t_capacity(self)
    __swig_destroy__ = _libBornAgainCore.delete_vector_IFormFactorPtr_t
    __del__ = lambda self: None
vector_IFormFactorPtr_t_swigregister = _libBornAgainCore.vector_IFormFactorPtr_t_swigregister
vector_IFormFactorPtr_t_swigregister(vector_IFormFactorPtr_t)

class IntensityData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntensityData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntensityData, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _libBornAgainCore.new_IntensityData()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_IntensityData
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.IntensityData_clone(self)

    def copyFrom(self, x):
        return _libBornAgainCore.IntensityData_copyFrom(self, x)

    def addAxis(self, *args):
        return _libBornAgainCore.IntensityData_addAxis(self, *args)

    def getAxis(self, *args):
        return _libBornAgainCore.IntensityData_getAxis(self, *args)

    def getAxisSerialNumber(self, axis_name):
        return _libBornAgainCore.IntensityData_getAxisSerialNumber(self, axis_name)

    def getRank(self):
        return _libBornAgainCore.IntensityData_getRank(self)

    def getAllocatedSize(self):
        return _libBornAgainCore.IntensityData_getAllocatedSize(self)

    def getAllSizes(self):
        return _libBornAgainCore.IntensityData_getAllSizes(self)

    def getRawDataVector(self):
        return _libBornAgainCore.IntensityData_getRawDataVector(self)

    def fillRawDataArray(self, destination):
        return _libBornAgainCore.IntensityData_fillRawDataArray(self, destination)

    def totalSum(self):
        return _libBornAgainCore.IntensityData_totalSum(self)

    def begin(self, *args):
        return _libBornAgainCore.IntensityData_begin(self, *args)

    def end(self, *args):
        return _libBornAgainCore.IntensityData_end(self, *args)

    def getMask(self):
        return _libBornAgainCore.IntensityData_getMask(self)

    def setMask(self, mask):
        return _libBornAgainCore.IntensityData_setMask(self, mask)

    def addMask(self, mask):
        return _libBornAgainCore.IntensityData_addMask(self, mask)

    def removeAllMasks(self):
        return _libBornAgainCore.IntensityData_removeAllMasks(self)

    def getAxesBinIndices(self, global_index):
        return _libBornAgainCore.IntensityData_getAxesBinIndices(self, global_index)

    def getAxisBinIndex(self, *args):
        return _libBornAgainCore.IntensityData_getAxisBinIndex(self, *args)

    def toGlobalIndex(self, axes_indices):
        return _libBornAgainCore.IntensityData_toGlobalIndex(self, axes_indices)

    def findGlobalIndex(self, coordinates):
        return _libBornAgainCore.IntensityData_findGlobalIndex(self, coordinates)

    def getAxisValue(self, *args):
        return _libBornAgainCore.IntensityData_getAxisValue(self, *args)

    def getAxesValues(self, global_index):
        return _libBornAgainCore.IntensityData_getAxesValues(self, global_index)

    def getAxisBin(self, *args):
        return _libBornAgainCore.IntensityData_getAxisBin(self, *args)

    def clear(self):
        return _libBornAgainCore.IntensityData_clear(self)

    def setAllTo(self, value):
        return _libBornAgainCore.IntensityData_setAllTo(self, value)

    def scaleAll(self, factor):
        return _libBornAgainCore.IntensityData_scaleAll(self, factor)

    def setAxisSizes(self, rank, n_dims):
        return _libBornAgainCore.IntensityData_setAxisSizes(self, rank, n_dims)

    def setRawDataVector(self, data_vector):
        return _libBornAgainCore.IntensityData_setRawDataVector(self, data_vector)

    def setRawDataArray(self, source):
        return _libBornAgainCore.IntensityData_setRawDataArray(self, source)

    def __iadd__(self, right):
        return _libBornAgainCore.IntensityData___iadd__(self, right)

    def __isub__(self, right):
        return _libBornAgainCore.IntensityData___isub__(self, right)

    def __idiv__(self, right):
        return _libBornAgainCore.IntensityData___idiv__(self, right)

    def __imul__(self, right):
        return _libBornAgainCore.IntensityData___imul__(self, right)

    def getArray(self):
        return _libBornAgainCore.IntensityData_getArray(self)

    def isInitialized(self):
        return _libBornAgainCore.IntensityData_isInitialized(self)

    def __getitem__(self, i):
        return _libBornAgainCore.IntensityData___getitem__(self, i)

    def __setitem__(self, i, value):
        return _libBornAgainCore.IntensityData___setitem__(self, i, value)
IntensityData_swigregister = _libBornAgainCore.IntensityData_swigregister
IntensityData_swigregister(IntensityData)

class WavevectorInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WavevectorInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WavevectorInfo, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libBornAgainCore.new_WavevectorInfo(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def getKi(self):
        return _libBornAgainCore.WavevectorInfo_getKi(self)

    def getKf(self):
        return _libBornAgainCore.WavevectorInfo_getKf(self)

    def getQ(self):
        return _libBornAgainCore.WavevectorInfo_getQ(self)

    def getWavelength(self):
        return _libBornAgainCore.WavevectorInfo_getWavelength(self)
    __swig_destroy__ = _libBornAgainCore.delete_WavevectorInfo
    __del__ = lambda self: None
WavevectorInfo_swigregister = _libBornAgainCore.WavevectorInfo_swigregister
WavevectorInfo_swigregister(WavevectorInfo)

class ParticleComposition(IParticle):
    __swig_setmethods__ = {}
    for _s in [IParticle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParticleComposition, name, value)
    __swig_getmethods__ = {}
    for _s in [IParticle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParticleComposition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == ParticleComposition:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_ParticleComposition(_self, *args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_ParticleComposition
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.ParticleComposition_clone(self)

    def cloneInvertB(self):
        return _libBornAgainCore.ParticleComposition_cloneInvertB(self)

    def accept(self, visitor):
        return _libBornAgainCore.ParticleComposition_accept(self, visitor)

    def addParticle(self, *args):
        return _libBornAgainCore.ParticleComposition_addParticle(self, *args)

    def addParticles(self, particle, positions):
        return _libBornAgainCore.ParticleComposition_addParticles(self, particle, positions)

    def setAmbientMaterial(self, material):
        return _libBornAgainCore.ParticleComposition_setAmbientMaterial(self, material)

    def getAmbientMaterial(self):
        return _libBornAgainCore.ParticleComposition_getAmbientMaterial(self)

    def createTransformedFormFactor(self, p_rotation, translation):
        return _libBornAgainCore.ParticleComposition_createTransformedFormFactor(self, p_rotation, translation)

    def getNbrParticles(self):
        return _libBornAgainCore.ParticleComposition_getNbrParticles(self)

    def getParticle(self, index):
        return _libBornAgainCore.ParticleComposition_getParticle(self, index)

    def getParticlePosition(self, index):
        return _libBornAgainCore.ParticleComposition_getParticlePosition(self, index)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_ParticleComposition(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.ParticleComposition__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.ParticleComposition_init_parameters(self)
ParticleComposition_swigregister = _libBornAgainCore.ParticleComposition_swigregister
ParticleComposition_swigregister(ParticleComposition)

class ParticleCoreShell(IParticle):
    __swig_setmethods__ = {}
    for _s in [IParticle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParticleCoreShell, name, value)
    __swig_getmethods__ = {}
    for _s in [IParticle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParticleCoreShell, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_ParticleCoreShell
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.ParticleCoreShell_clone(self)

    def cloneInvertB(self):
        return _libBornAgainCore.ParticleCoreShell_cloneInvertB(self)

    def accept(self, visitor):
        return _libBornAgainCore.ParticleCoreShell_accept(self, visitor)

    def setAmbientMaterial(self, material):
        return _libBornAgainCore.ParticleCoreShell_setAmbientMaterial(self, material)

    def getAmbientMaterial(self):
        return _libBornAgainCore.ParticleCoreShell_getAmbientMaterial(self)

    def createTransformedFormFactor(self, p_rotation, translation):
        return _libBornAgainCore.ParticleCoreShell_createTransformedFormFactor(self, p_rotation, translation)

    def getCoreParticle(self):
        return _libBornAgainCore.ParticleCoreShell_getCoreParticle(self)

    def getShellParticle(self):
        return _libBornAgainCore.ParticleCoreShell_getShellParticle(self)

    def __init__(self, *args):
        if self.__class__ == ParticleCoreShell:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_ParticleCoreShell(_self, *args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_ParticleCoreShell(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.ParticleCoreShell__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.ParticleCoreShell_init_parameters(self)
ParticleCoreShell_swigregister = _libBornAgainCore.ParticleCoreShell_swigregister
ParticleCoreShell_swigregister(ParticleCoreShell)

class ParticleDistribution(IAbstractParticle):
    __swig_setmethods__ = {}
    for _s in [IAbstractParticle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParticleDistribution, name, value)
    __swig_getmethods__ = {}
    for _s in [IAbstractParticle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParticleDistribution, name)
    __repr__ = _swig_repr

    def __init__(self, prototype, par_distr):
        if self.__class__ == ParticleDistribution:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_ParticleDistribution(_self, prototype, par_distr)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def clone(self):
        return _libBornAgainCore.ParticleDistribution_clone(self)

    def cloneInvertB(self):
        return _libBornAgainCore.ParticleDistribution_cloneInvertB(self)

    def accept(self, visitor):
        return _libBornAgainCore.ParticleDistribution_accept(self, visitor)

    def setAmbientMaterial(self, material):
        return _libBornAgainCore.ParticleDistribution_setAmbientMaterial(self, material)

    def getAmbientMaterial(self):
        return _libBornAgainCore.ParticleDistribution_getAmbientMaterial(self)

    def generateParticles(self, particle_vector):
        return _libBornAgainCore.ParticleDistribution_generateParticles(self, particle_vector)

    def getParameterDistribution(self):
        return _libBornAgainCore.ParticleDistribution_getParameterDistribution(self)

    def createDistributedParameterPool(self):
        return _libBornAgainCore.ParticleDistribution_createDistributedParameterPool(self)

    def getParticle(self):
        return _libBornAgainCore.ParticleDistribution_getParticle(self)
    __swig_destroy__ = _libBornAgainCore.delete_ParticleDistribution
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_ParticleDistribution(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.ParticleDistribution__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.ParticleDistribution_init_parameters(self)
ParticleDistribution_swigregister = _libBornAgainCore.ParticleDistribution_swigregister
ParticleDistribution_swigregister(ParticleDistribution)

class ParticleLayout(ILayout):
    __swig_setmethods__ = {}
    for _s in [ILayout]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParticleLayout, name, value)
    __swig_getmethods__ = {}
    for _s in [ILayout]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParticleLayout, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == ParticleLayout:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_ParticleLayout(_self, *args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_ParticleLayout
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.ParticleLayout_clone(self)

    def cloneInvertB(self):
        return _libBornAgainCore.ParticleLayout_cloneInvertB(self)

    def accept(self, visitor):
        return _libBornAgainCore.ParticleLayout_accept(self, visitor)

    def addParticle(self, *args):
        return _libBornAgainCore.ParticleLayout_addParticle(self, *args)

    def getNumberOfParticles(self):
        return _libBornAgainCore.ParticleLayout_getNumberOfParticles(self)

    def getParticle(self, index):
        return _libBornAgainCore.ParticleLayout_getParticle(self, index)

    def getParticles(self):
        return _libBornAgainCore.ParticleLayout_getParticles(self)

    def getAbundanceOfParticle(self, index):
        return _libBornAgainCore.ParticleLayout_getAbundanceOfParticle(self, index)

    def getInterferenceFunction(self):
        return _libBornAgainCore.ParticleLayout_getInterferenceFunction(self)

    def addInterferenceFunction(self, interference_function):
        return _libBornAgainCore.ParticleLayout_addInterferenceFunction(self, interference_function)

    def getTotalParticleSurfaceDensity(self):
        return _libBornAgainCore.ParticleLayout_getTotalParticleSurfaceDensity(self)

    def setTotalParticleSurfaceDensity(self, particle_density):
        return _libBornAgainCore.ParticleLayout_setTotalParticleSurfaceDensity(self, particle_density)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_ParticleLayout(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.ParticleLayout__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.ParticleLayout_init_parameters(self)
ParticleLayout_swigregister = _libBornAgainCore.ParticleLayout_swigregister
ParticleLayout_swigregister(ParticleLayout)

class Polygon(IShape2D):
    __swig_setmethods__ = {}
    for _s in [IShape2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Polygon, name, value)
    __swig_getmethods__ = {}
    for _s in [IShape2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Polygon, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == Polygon:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_Polygon(_self, *args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_Polygon
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.Polygon_clone(self)

    def contains(self, *args):
        return _libBornAgainCore.Polygon_contains(self, *args)

    def getArea(self):
        return _libBornAgainCore.Polygon_getArea(self)

    def getPoints(self, xpos, ypos):
        return _libBornAgainCore.Polygon_getPoints(self, xpos, ypos)

    def _print(self, ostr):
        return _libBornAgainCore.Polygon__print(self, ostr)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_Polygon(self)
        return weakref_proxy(self)
Polygon_swigregister = _libBornAgainCore.Polygon_swigregister
Polygon_swigregister(Polygon)

class Rectangle(IShape2D):
    __swig_setmethods__ = {}
    for _s in [IShape2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rectangle, name, value)
    __swig_getmethods__ = {}
    for _s in [IShape2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Rectangle, name)
    __repr__ = _swig_repr

    def __init__(self, xlow, ylow, xup, yup):
        if self.__class__ == Rectangle:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_Rectangle(_self, xlow, ylow, xup, yup)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def clone(self):
        return _libBornAgainCore.Rectangle_clone(self)

    def contains(self, *args):
        return _libBornAgainCore.Rectangle_contains(self, *args)

    def getArea(self):
        return _libBornAgainCore.Rectangle_getArea(self)

    def getXlow(self):
        return _libBornAgainCore.Rectangle_getXlow(self)

    def getYlow(self):
        return _libBornAgainCore.Rectangle_getYlow(self)

    def getXup(self):
        return _libBornAgainCore.Rectangle_getXup(self)

    def getYup(self):
        return _libBornAgainCore.Rectangle_getYup(self)
    __swig_destroy__ = _libBornAgainCore.delete_Rectangle
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_Rectangle(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.Rectangle__print(self, ostr)
Rectangle_swigregister = _libBornAgainCore.Rectangle_swigregister
Rectangle_swigregister(Rectangle)

class RectangularDetector(IDetector2D):
    __swig_setmethods__ = {}
    for _s in [IDetector2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RectangularDetector, name, value)
    __swig_getmethods__ = {}
    for _s in [IDetector2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RectangularDetector, name)
    __repr__ = _swig_repr
    GENERIC = _libBornAgainCore.RectangularDetector_GENERIC
    PERPENDICULAR_TO_SAMPLE = _libBornAgainCore.RectangularDetector_PERPENDICULAR_TO_SAMPLE
    PERPENDICULAR_TO_DIRECT_BEAM = _libBornAgainCore.RectangularDetector_PERPENDICULAR_TO_DIRECT_BEAM
    PERPENDICULAR_TO_REFLECTED_BEAM = _libBornAgainCore.RectangularDetector_PERPENDICULAR_TO_REFLECTED_BEAM
    PERPENDICULAR_TO_REFLECTED_BEAM_DPOS = _libBornAgainCore.RectangularDetector_PERPENDICULAR_TO_REFLECTED_BEAM_DPOS

    def __init__(self, *args):
        if self.__class__ == RectangularDetector:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_RectangularDetector(_self, *args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def clone(self):
        return _libBornAgainCore.RectangularDetector_clone(self)
    __swig_destroy__ = _libBornAgainCore.delete_RectangularDetector
    __del__ = lambda self: None

    def init(self, beam):
        return _libBornAgainCore.RectangularDetector_init(self, beam)

    def setPosition(self, *args):
        return _libBornAgainCore.RectangularDetector_setPosition(self, *args)

    def setPerpendicularToSampleX(self, distance, u0, v0):
        return _libBornAgainCore.RectangularDetector_setPerpendicularToSampleX(self, distance, u0, v0)

    def setPerpendicularToDirectBeam(self, distance, u0, v0):
        return _libBornAgainCore.RectangularDetector_setPerpendicularToDirectBeam(self, distance, u0, v0)

    def setPerpendicularToReflectedBeam(self, distance, u0=0.0, v0=0.0):
        return _libBornAgainCore.RectangularDetector_setPerpendicularToReflectedBeam(self, distance, u0, v0)

    def setDirectBeamPosition(self, u0, v0):
        return _libBornAgainCore.RectangularDetector_setDirectBeamPosition(self, u0, v0)

    def addParametersToExternalPool(self, path, external_pool, copy_number=-1):
        return _libBornAgainCore.RectangularDetector_addParametersToExternalPool(self, path, external_pool, copy_number)

    def getWidth(self):
        return _libBornAgainCore.RectangularDetector_getWidth(self)

    def getHeight(self):
        return _libBornAgainCore.RectangularDetector_getHeight(self)

    def getNbinsX(self):
        return _libBornAgainCore.RectangularDetector_getNbinsX(self)

    def getNbinsY(self):
        return _libBornAgainCore.RectangularDetector_getNbinsY(self)

    def getNormalVector(self):
        return _libBornAgainCore.RectangularDetector_getNormalVector(self)

    def getU0(self):
        return _libBornAgainCore.RectangularDetector_getU0(self)

    def getV0(self):
        return _libBornAgainCore.RectangularDetector_getV0(self)

    def getDirectionVector(self):
        return _libBornAgainCore.RectangularDetector_getDirectionVector(self)

    def getDistance(self):
        return _libBornAgainCore.RectangularDetector_getDistance(self)

    def getDirectBeamU0(self):
        return _libBornAgainCore.RectangularDetector_getDirectBeamU0(self)

    def getDirectBeamV0(self):
        return _libBornAgainCore.RectangularDetector_getDirectBeamV0(self)

    def getDetectorArrangment(self):
        return _libBornAgainCore.RectangularDetector_getDetectorArrangment(self)

    def createDetectorMap(self, beam, units_type):
        return _libBornAgainCore.RectangularDetector_createDetectorMap(self, beam, units_type)

    def getValidAxesUnits(self):
        return _libBornAgainCore.RectangularDetector_getValidAxesUnits(self)

    def getDefaultAxesUnits(self):
        return _libBornAgainCore.RectangularDetector_getDefaultAxesUnits(self)

    def createPixelMap(self, index):
        return _libBornAgainCore.RectangularDetector_createPixelMap(self, index)

    def _print(self, ostr):
        return _libBornAgainCore.RectangularDetector__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.RectangularDetector_init_parameters(self)

    def createAxis(self, index, n_bins, min, max):
        return _libBornAgainCore.RectangularDetector_createAxis(self, index, n_bins, min, max)

    def getAxisName(self, index):
        return _libBornAgainCore.RectangularDetector_getAxisName(self, index)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_RectangularDetector(self)
        return weakref_proxy(self)
RectangularDetector_swigregister = _libBornAgainCore.RectangularDetector_swigregister
RectangularDetector_swigregister(RectangularDetector)

class RectPixelMap(IPixelMap):
    __swig_setmethods__ = {}
    for _s in [IPixelMap]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RectPixelMap, name, value)
    __swig_getmethods__ = {}
    for _s in [IPixelMap]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RectPixelMap, name)
    __repr__ = _swig_repr

    def __init__(self, corner_pos, width, height):
        if self.__class__ == RectPixelMap:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_RectPixelMap(_self, corner_pos, width, height)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainCore.delete_RectPixelMap
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.RectPixelMap_clone(self)

    def createZeroSizeMap(self, x, y):
        return _libBornAgainCore.RectPixelMap_createZeroSizeMap(self, x, y)

    def getK(self, x, y, wavelength):
        return _libBornAgainCore.RectPixelMap_getK(self, x, y, wavelength)

    def getIntegrationFactor(self, x, y):
        return _libBornAgainCore.RectPixelMap_getIntegrationFactor(self, x, y)

    def getSolidAngle(self):
        return _libBornAgainCore.RectPixelMap_getSolidAngle(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_RectPixelMap(self)
        return weakref_proxy(self)
RectPixelMap_swigregister = _libBornAgainCore.RectPixelMap_swigregister
RectPixelMap_swigregister(RectPixelMap)

class ResolutionFunction2DGaussian(IResolutionFunction2D):
    __swig_setmethods__ = {}
    for _s in [IResolutionFunction2D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResolutionFunction2DGaussian, name, value)
    __swig_getmethods__ = {}
    for _s in [IResolutionFunction2D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ResolutionFunction2DGaussian, name)
    __repr__ = _swig_repr

    def __init__(self, sigma_x, sigma_y):
        if self.__class__ == ResolutionFunction2DGaussian:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_ResolutionFunction2DGaussian(_self, sigma_x, sigma_y)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def evaluateCDF(self, x, y):
        return _libBornAgainCore.ResolutionFunction2DGaussian_evaluateCDF(self, x, y)

    def clone(self):
        return _libBornAgainCore.ResolutionFunction2DGaussian_clone(self)

    def getSigmaX(self):
        return _libBornAgainCore.ResolutionFunction2DGaussian_getSigmaX(self)

    def getSigmaY(self):
        return _libBornAgainCore.ResolutionFunction2DGaussian_getSigmaY(self)

    def init_parameters(self):
        return _libBornAgainCore.ResolutionFunction2DGaussian_init_parameters(self)
    __swig_destroy__ = _libBornAgainCore.delete_ResolutionFunction2DGaussian
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_ResolutionFunction2DGaussian(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.ResolutionFunction2DGaussian__print(self, ostr)
ResolutionFunction2DGaussian_swigregister = _libBornAgainCore.ResolutionFunction2DGaussian_swigregister
ResolutionFunction2DGaussian_swigregister(ResolutionFunction2DGaussian)

class IRotation(ISample):
    __swig_setmethods__ = {}
    for _s in [ISample]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IRotation, name, value)
    __swig_getmethods__ = {}
    for _s in [ISample]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IRotation, name)
    __repr__ = _swig_repr
    __swig_getmethods__["createRotation"] = lambda x: _libBornAgainCore.IRotation_createRotation
    if _newclass:
        createRotation = staticmethod(_libBornAgainCore.IRotation_createRotation)
    __swig_destroy__ = _libBornAgainCore.delete_IRotation
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.IRotation_clone(self)

    def cloneInvertB(self):
        return _libBornAgainCore.IRotation_cloneInvertB(self)

    def createInverse(self):
        return _libBornAgainCore.IRotation_createInverse(self)

    def accept(self, visitor):
        return _libBornAgainCore.IRotation_accept(self, visitor)

    def getTransform3D(self):
        return _libBornAgainCore.IRotation_getTransform3D(self)

    def isIdentity(self):
        return _libBornAgainCore.IRotation_isIdentity(self)

    def __init__(self):
        if self.__class__ == IRotation:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_IRotation(_self, )
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_IRotation(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.IRotation__print(self, ostr)

    def init_parameters(self):
        return _libBornAgainCore.IRotation_init_parameters(self)
IRotation_swigregister = _libBornAgainCore.IRotation_swigregister
IRotation_swigregister(IRotation)

def IRotation_createRotation(transform):
    return _libBornAgainCore.IRotation_createRotation(transform)
IRotation_createRotation = _libBornAgainCore.IRotation_createRotation


def CreateProduct(left, right):
    return _libBornAgainCore.CreateProduct(left, right)
CreateProduct = _libBornAgainCore.CreateProduct
class RotationX(IRotation):
    __swig_setmethods__ = {}
    for _s in [IRotation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RotationX, name, value)
    __swig_getmethods__ = {}
    for _s in [IRotation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RotationX, name)
    __repr__ = _swig_repr

    def __init__(self, angle):
        if self.__class__ == RotationX:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_RotationX(_self, angle)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def clone(self):
        return _libBornAgainCore.RotationX_clone(self)

    def cloneInvertB(self):
        return _libBornAgainCore.RotationX_cloneInvertB(self)

    def createInverse(self):
        return _libBornAgainCore.RotationX_createInverse(self)

    def getAngle(self):
        return _libBornAgainCore.RotationX_getAngle(self)

    def accept(self, visitor):
        return _libBornAgainCore.RotationX_accept(self, visitor)

    def getTransform3D(self):
        return _libBornAgainCore.RotationX_getTransform3D(self)

    def init_parameters(self):
        return _libBornAgainCore.RotationX_init_parameters(self)
    __swig_destroy__ = _libBornAgainCore.delete_RotationX
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_RotationX(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.RotationX__print(self, ostr)
RotationX_swigregister = _libBornAgainCore.RotationX_swigregister
RotationX_swigregister(RotationX)

class RotationY(IRotation):
    __swig_setmethods__ = {}
    for _s in [IRotation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RotationY, name, value)
    __swig_getmethods__ = {}
    for _s in [IRotation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RotationY, name)
    __repr__ = _swig_repr

    def __init__(self, angle):
        if self.__class__ == RotationY:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_RotationY(_self, angle)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def clone(self):
        return _libBornAgainCore.RotationY_clone(self)

    def cloneInvertB(self):
        return _libBornAgainCore.RotationY_cloneInvertB(self)

    def createInverse(self):
        return _libBornAgainCore.RotationY_createInverse(self)

    def getAngle(self):
        return _libBornAgainCore.RotationY_getAngle(self)

    def accept(self, visitor):
        return _libBornAgainCore.RotationY_accept(self, visitor)

    def getTransform3D(self):
        return _libBornAgainCore.RotationY_getTransform3D(self)

    def init_parameters(self):
        return _libBornAgainCore.RotationY_init_parameters(self)
    __swig_destroy__ = _libBornAgainCore.delete_RotationY
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_RotationY(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.RotationY__print(self, ostr)
RotationY_swigregister = _libBornAgainCore.RotationY_swigregister
RotationY_swigregister(RotationY)

class RotationZ(IRotation):
    __swig_setmethods__ = {}
    for _s in [IRotation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RotationZ, name, value)
    __swig_getmethods__ = {}
    for _s in [IRotation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RotationZ, name)
    __repr__ = _swig_repr

    def __init__(self, angle=0.0):
        if self.__class__ == RotationZ:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_RotationZ(_self, angle)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def clone(self):
        return _libBornAgainCore.RotationZ_clone(self)

    def cloneInvertB(self):
        return _libBornAgainCore.RotationZ_cloneInvertB(self)

    def createInverse(self):
        return _libBornAgainCore.RotationZ_createInverse(self)

    def getAngle(self):
        return _libBornAgainCore.RotationZ_getAngle(self)

    def accept(self, visitor):
        return _libBornAgainCore.RotationZ_accept(self, visitor)

    def getTransform3D(self):
        return _libBornAgainCore.RotationZ_getTransform3D(self)

    def init_parameters(self):
        return _libBornAgainCore.RotationZ_init_parameters(self)
    __swig_destroy__ = _libBornAgainCore.delete_RotationZ
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_RotationZ(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.RotationZ__print(self, ostr)
RotationZ_swigregister = _libBornAgainCore.RotationZ_swigregister
RotationZ_swigregister(RotationZ)

class RotationEuler(IRotation):
    __swig_setmethods__ = {}
    for _s in [IRotation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RotationEuler, name, value)
    __swig_getmethods__ = {}
    for _s in [IRotation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RotationEuler, name)
    __repr__ = _swig_repr

    def __init__(self, alpha, beta, gamma):
        if self.__class__ == RotationEuler:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_RotationEuler(_self, alpha, beta, gamma)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def clone(self):
        return _libBornAgainCore.RotationEuler_clone(self)

    def cloneInvertB(self):
        return _libBornAgainCore.RotationEuler_cloneInvertB(self)

    def createInverse(self):
        return _libBornAgainCore.RotationEuler_createInverse(self)

    def getAlpha(self):
        return _libBornAgainCore.RotationEuler_getAlpha(self)

    def getBeta(self):
        return _libBornAgainCore.RotationEuler_getBeta(self)

    def getGamma(self):
        return _libBornAgainCore.RotationEuler_getGamma(self)

    def accept(self, visitor):
        return _libBornAgainCore.RotationEuler_accept(self, visitor)

    def getTransform3D(self):
        return _libBornAgainCore.RotationEuler_getTransform3D(self)

    def init_parameters(self):
        return _libBornAgainCore.RotationEuler_init_parameters(self)
    __swig_destroy__ = _libBornAgainCore.delete_RotationEuler
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_RotationEuler(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.RotationEuler__print(self, ostr)
RotationEuler_swigregister = _libBornAgainCore.RotationEuler_swigregister
RotationEuler_swigregister(RotationEuler)

class SpecularSimulation(ICloneable, IParameterized):
    __swig_setmethods__ = {}
    for _s in [ICloneable, IParameterized]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpecularSimulation, name, value)
    __swig_getmethods__ = {}
    for _s in [ICloneable, IParameterized]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpecularSimulation, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainCore.delete_SpecularSimulation
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainCore.SpecularSimulation_clone(self)

    def runSimulation(self):
        return _libBornAgainCore.SpecularSimulation_runSimulation(self)

    def setSample(self, sample):
        return _libBornAgainCore.SpecularSimulation_setSample(self, sample)

    def getSample(self):
        return _libBornAgainCore.SpecularSimulation_getSample(self)

    def setSampleBuilder(self, sample_builder):
        return _libBornAgainCore.SpecularSimulation_setSampleBuilder(self, sample_builder)

    def getSampleBuilder(self):
        return _libBornAgainCore.SpecularSimulation_getSampleBuilder(self)

    def setBeamParameters(self, *args):
        return _libBornAgainCore.SpecularSimulation_setBeamParameters(self, *args)

    def setEvanescentWaveAxis(self, *args):
        return _libBornAgainCore.SpecularSimulation_setEvanescentWaveAxis(self, *args)

    def getAlphaAxis(self):
        return _libBornAgainCore.SpecularSimulation_getAlphaAxis(self)

    def getScalarR(self, i_layer):
        return _libBornAgainCore.SpecularSimulation_getScalarR(self, i_layer)

    def getScalarT(self, i_layer):
        return _libBornAgainCore.SpecularSimulation_getScalarT(self, i_layer)

    def getScalarKz(self, i_layer):
        return _libBornAgainCore.SpecularSimulation_getScalarKz(self, i_layer)

    def getLayerRTCoefficients(self, i_alpha, i_layer):
        return _libBornAgainCore.SpecularSimulation_getLayerRTCoefficients(self, i_alpha, i_layer)

    def prepareSimulation(self):
        return _libBornAgainCore.SpecularSimulation_prepareSimulation(self)

    def __init__(self, *args):
        if self.__class__ == SpecularSimulation:
            _self = None
        else:
            _self = self
        this = _libBornAgainCore.new_SpecularSimulation(_self, *args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def init_parameters(self):
        return _libBornAgainCore.SpecularSimulation_init_parameters(self)
    def __disown__(self):
        self.this.disown()
        _libBornAgainCore.disown_SpecularSimulation(self)
        return weakref_proxy(self)

    def _print(self, ostr):
        return _libBornAgainCore.SpecularSimulation__print(self, ostr)
SpecularSimulation_swigregister = _libBornAgainCore.SpecularSimulation_swigregister
SpecularSimulation_swigregister(SpecularSimulation)

class SimulationParameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimulationParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimulationParameters, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _libBornAgainCore.new_SimulationParameters()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["m_mc_integration"] = _libBornAgainCore.SimulationParameters_m_mc_integration_set
    __swig_getmethods__["m_mc_integration"] = _libBornAgainCore.SimulationParameters_m_mc_integration_get
    if _newclass:
        m_mc_integration = _swig_property(_libBornAgainCore.SimulationParameters_m_mc_integration_get, _libBornAgainCore.SimulationParameters_m_mc_integration_set)
    __swig_setmethods__["m_mc_points"] = _libBornAgainCore.SimulationParameters_m_mc_points_set
    __swig_getmethods__["m_mc_points"] = _libBornAgainCore.SimulationParameters_m_mc_points_get
    if _newclass:
        m_mc_points = _swig_property(_libBornAgainCore.SimulationParameters_m_mc_points_get, _libBornAgainCore.SimulationParameters_m_mc_points_set)
    __swig_destroy__ = _libBornAgainCore.delete_SimulationParameters
    __del__ = lambda self: None
SimulationParameters_swigregister = _libBornAgainCore.SimulationParameters_swigregister
SimulationParameters_swigregister(SimulationParameters)

class ThreadInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThreadInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ThreadInfo, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _libBornAgainCore.new_ThreadInfo()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["n_threads"] = _libBornAgainCore.ThreadInfo_n_threads_set
    __swig_getmethods__["n_threads"] = _libBornAgainCore.ThreadInfo_n_threads_get
    if _newclass:
        n_threads = _swig_property(_libBornAgainCore.ThreadInfo_n_threads_get, _libBornAgainCore.ThreadInfo_n_threads_set)
    __swig_setmethods__["current_thread"] = _libBornAgainCore.ThreadInfo_current_thread_set
    __swig_getmethods__["current_thread"] = _libBornAgainCore.ThreadInfo_current_thread_get
    if _newclass:
        current_thread = _swig_property(_libBornAgainCore.ThreadInfo_current_thread_get, _libBornAgainCore.ThreadInfo_current_thread_set)
    __swig_setmethods__["n_batches"] = _libBornAgainCore.ThreadInfo_n_batches_set
    __swig_getmethods__["n_batches"] = _libBornAgainCore.ThreadInfo_n_batches_get
    if _newclass:
        n_batches = _swig_property(_libBornAgainCore.ThreadInfo_n_batches_get, _libBornAgainCore.ThreadInfo_n_batches_set)
    __swig_setmethods__["current_batch"] = _libBornAgainCore.ThreadInfo_current_batch_set
    __swig_getmethods__["current_batch"] = _libBornAgainCore.ThreadInfo_current_batch_get
    if _newclass:
        current_batch = _swig_property(_libBornAgainCore.ThreadInfo_current_batch_get, _libBornAgainCore.ThreadInfo_current_batch_set)
    __swig_destroy__ = _libBornAgainCore.delete_ThreadInfo
    __del__ = lambda self: None
ThreadInfo_swigregister = _libBornAgainCore.ThreadInfo_swigregister
ThreadInfo_swigregister(ThreadInfo)


def rad2deg(angle):
    return _libBornAgainCore.rad2deg(angle)
rad2deg = _libBornAgainCore.rad2deg

def deg2rad(angle):
    return _libBornAgainCore.deg2rad(angle)
deg2rad = _libBornAgainCore.deg2rad
class jmf_debug_isample_vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, jmf_debug_isample_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, jmf_debug_isample_vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libBornAgainCore.jmf_debug_isample_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libBornAgainCore.jmf_debug_isample_vector___nonzero__(self)

    def __bool__(self):
        return _libBornAgainCore.jmf_debug_isample_vector___bool__(self)

    def __len__(self):
        return _libBornAgainCore.jmf_debug_isample_vector___len__(self)

    def __getslice__(self, i, j):
        return _libBornAgainCore.jmf_debug_isample_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libBornAgainCore.jmf_debug_isample_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libBornAgainCore.jmf_debug_isample_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libBornAgainCore.jmf_debug_isample_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libBornAgainCore.jmf_debug_isample_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libBornAgainCore.jmf_debug_isample_vector___setitem__(self, *args)

    def pop(self):
        return _libBornAgainCore.jmf_debug_isample_vector_pop(self)

    def append(self, x):
        return _libBornAgainCore.jmf_debug_isample_vector_append(self, x)

    def empty(self):
        return _libBornAgainCore.jmf_debug_isample_vector_empty(self)

    def size(self):
        return _libBornAgainCore.jmf_debug_isample_vector_size(self)

    def swap(self, v):
        return _libBornAgainCore.jmf_debug_isample_vector_swap(self, v)

    def begin(self):
        return _libBornAgainCore.jmf_debug_isample_vector_begin(self)

    def end(self):
        return _libBornAgainCore.jmf_debug_isample_vector_end(self)

    def rbegin(self):
        return _libBornAgainCore.jmf_debug_isample_vector_rbegin(self)

    def rend(self):
        return _libBornAgainCore.jmf_debug_isample_vector_rend(self)

    def clear(self):
        return _libBornAgainCore.jmf_debug_isample_vector_clear(self)

    def get_allocator(self):
        return _libBornAgainCore.jmf_debug_isample_vector_get_allocator(self)

    def pop_back(self):
        return _libBornAgainCore.jmf_debug_isample_vector_pop_back(self)

    def erase(self, *args):
        return _libBornAgainCore.jmf_debug_isample_vector_erase(self, *args)

    def __init__(self, *args):
        this = _libBornAgainCore.new_jmf_debug_isample_vector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _libBornAgainCore.jmf_debug_isample_vector_push_back(self, x)

    def front(self):
        return _libBornAgainCore.jmf_debug_isample_vector_front(self)

    def back(self):
        return _libBornAgainCore.jmf_debug_isample_vector_back(self)

    def assign(self, n, x):
        return _libBornAgainCore.jmf_debug_isample_vector_assign(self, n, x)

    def resize(self, *args):
        return _libBornAgainCore.jmf_debug_isample_vector_resize(self, *args)

    def insert(self, *args):
        return _libBornAgainCore.jmf_debug_isample_vector_insert(self, *args)

    def reserve(self, n):
        return _libBornAgainCore.jmf_debug_isample_vector_reserve(self, n)

    def capacity(self):
        return _libBornAgainCore.jmf_debug_isample_vector_capacity(self)
    __swig_destroy__ = _libBornAgainCore.delete_jmf_debug_isample_vector
    __del__ = lambda self: None
jmf_debug_isample_vector_swigregister = _libBornAgainCore.jmf_debug_isample_vector_swigregister
jmf_debug_isample_vector_swigregister(jmf_debug_isample_vector)
PI = cvar.PI
PID2 = cvar.PID2
PID4 = cvar.PID4
PI_SQR = cvar.PI_SQR
nanometer = cvar.nanometer
angstrom = cvar.angstrom
micrometer = cvar.micrometer
millimeter = cvar.millimeter
meter = cvar.meter
nm = cvar.nm
radian = cvar.radian
milliradian = cvar.milliradian
degree = cvar.degree
steradian = cvar.steradian
rad = cvar.rad
mrad = cvar.mrad
sr = cvar.sr
deg = cvar.deg
tesla = cvar.tesla
gauss = cvar.gauss

class jmf_debug_const_isample_vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, jmf_debug_const_isample_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, jmf_debug_const_isample_vector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libBornAgainCore.jmf_debug_const_isample_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libBornAgainCore.jmf_debug_const_isample_vector___nonzero__(self)

    def __bool__(self):
        return _libBornAgainCore.jmf_debug_const_isample_vector___bool__(self)

    def __len__(self):
        return _libBornAgainCore.jmf_debug_const_isample_vector___len__(self)

    def __getslice__(self, i, j):
        return _libBornAgainCore.jmf_debug_const_isample_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libBornAgainCore.jmf_debug_const_isample_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libBornAgainCore.jmf_debug_const_isample_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libBornAgainCore.jmf_debug_const_isample_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libBornAgainCore.jmf_debug_const_isample_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libBornAgainCore.jmf_debug_const_isample_vector___setitem__(self, *args)

    def pop(self):
        return _libBornAgainCore.jmf_debug_const_isample_vector_pop(self)

    def append(self, x):
        return _libBornAgainCore.jmf_debug_const_isample_vector_append(self, x)

    def empty(self):
        return _libBornAgainCore.jmf_debug_const_isample_vector_empty(self)

    def size(self):
        return _libBornAgainCore.jmf_debug_const_isample_vector_size(self)

    def swap(self, v):
        return _libBornAgainCore.jmf_debug_const_isample_vector_swap(self, v)

    def begin(self):
        return _libBornAgainCore.jmf_debug_const_isample_vector_begin(self)

    def end(self):
        return _libBornAgainCore.jmf_debug_const_isample_vector_end(self)

    def rbegin(self):
        return _libBornAgainCore.jmf_debug_const_isample_vector_rbegin(self)

    def rend(self):
        return _libBornAgainCore.jmf_debug_const_isample_vector_rend(self)

    def clear(self):
        return _libBornAgainCore.jmf_debug_const_isample_vector_clear(self)

    def get_allocator(self):
        return _libBornAgainCore.jmf_debug_const_isample_vector_get_allocator(self)

    def pop_back(self):
        return _libBornAgainCore.jmf_debug_const_isample_vector_pop_back(self)

    def erase(self, *args):
        return _libBornAgainCore.jmf_debug_const_isample_vector_erase(self, *args)

    def __init__(self, *args):
        this = _libBornAgainCore.new_jmf_debug_const_isample_vector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _libBornAgainCore.jmf_debug_const_isample_vector_push_back(self, x)

    def front(self):
        return _libBornAgainCore.jmf_debug_const_isample_vector_front(self)

    def back(self):
        return _libBornAgainCore.jmf_debug_const_isample_vector_back(self)

    def assign(self, n, x):
        return _libBornAgainCore.jmf_debug_const_isample_vector_assign(self, n, x)

    def resize(self, *args):
        return _libBornAgainCore.jmf_debug_const_isample_vector_resize(self, *args)

    def insert(self, *args):
        return _libBornAgainCore.jmf_debug_const_isample_vector_insert(self, *args)

    def reserve(self, n):
        return _libBornAgainCore.jmf_debug_const_isample_vector_reserve(self, n)

    def capacity(self):
        return _libBornAgainCore.jmf_debug_const_isample_vector_capacity(self)
    __swig_destroy__ = _libBornAgainCore.delete_jmf_debug_const_isample_vector
    __del__ = lambda self: None
jmf_debug_const_isample_vector_swigregister = _libBornAgainCore.jmf_debug_const_isample_vector_swigregister
jmf_debug_const_isample_vector_swigregister(jmf_debug_const_isample_vector)

# This file is compatible with both classic and new-style classes.



// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //


#include "boost/python.hpp"

#include "boost/python/suite/indexing/vector_indexing_suite.hpp"

#include "PythonFitList.h"

#include "output/PyFit/AttFitting.pypp.h"

#include "output/PyFit/ChiSquaredModule.pypp.h"

#include "output/PyFit/FitObject.pypp.h"

#include "output/PyFit/FitParameter.pypp.h"

#include "output/PyFit/FitStrategyAdjustMinimizer.pypp.h"

#include "output/PyFit/FitStrategyAdjustParameters.pypp.h"

#include "output/PyFit/FitStrategyDefault.pypp.h"

#include "output/PyFit/FitStrategyFixParameters.pypp.h"

#include "output/PyFit/FitStrategyReleaseParameters.pypp.h"

#include "output/PyFit/FitSuite.pypp.h"

#include "output/PyFit/FitSuiteObjects.pypp.h"

#include "output/PyFit/FitSuiteParameters.pypp.h"

#include "output/PyFit/IChiSquaredModule.pypp.h"

#include "output/PyFit/IFitStrategy.pypp.h"

#include "output/PyFit/IIntensityFunction.pypp.h"

#include "output/PyFit/IIntensityNormalizer.pypp.h"

#include "output/PyFit/IMinimizer.pypp.h"

#include "output/PyFit/INamed.pypp.h"

#include "output/PyFit/IObservable.pypp.h"

#include "output/PyFit/IObserver.pypp.h"

#include "output/PyFit/IParameterized.pypp.h"

#include "output/PyFit/ISquaredFunction.pypp.h"

#include "output/PyFit/IntensityFunctionLog.pypp.h"

#include "output/PyFit/IntensityFunctionSqrt.pypp.h"

#include "output/PyFit/IntensityNormalizer.pypp.h"

#include "output/PyFit/IntensityScaleAndShiftNormalizer.pypp.h"

#include "output/PyFit/MinimizerFactory.pypp.h"

#include "output/PyFit/MinimizerOptions.pypp.h"

#include "output/PyFit/SquaredFunctionDefault.pypp.h"

#include "output/PyFit/SquaredFunctionGaussianError.pypp.h"

#include "output/PyFit/SquaredFunctionMeanSquaredError.pypp.h"

#include "output/PyFit/SquaredFunctionSimError.pypp.h"

#include "output/PyFit/SquaredFunctionSystematicError.pypp.h"

#include "output/PyFit/vdouble1d_t.pypp.h"

#include "output/PyFit/vector_string_t.pypp.h"

namespace bp = boost::python;

BOOST_PYTHON_MODULE(PythonInterface){
    register_vector_string_t_class();

    register_vdouble1d_t_class();

    register_AttFitting_class();

    register_IChiSquaredModule_class();

    register_ChiSquaredModule_class();

    register_INamed_class();

    register_IParameterized_class();

    register_FitObject_class();

    register_FitParameter_class();

    register_IFitStrategy_class();

    register_FitStrategyAdjustMinimizer_class();

    register_FitStrategyAdjustParameters_class();

    register_FitStrategyDefault_class();

    register_FitStrategyFixParameters_class();

    register_FitStrategyReleaseParameters_class();

    register_IObservable_class();

    register_FitSuite_class();

    register_FitSuiteObjects_class();

    register_FitSuiteParameters_class();

    register_IIntensityFunction_class();

    register_IIntensityNormalizer_class();

    register_IMinimizer_class();

    register_IObserver_class();

    register_ISquaredFunction_class();

    register_IntensityFunctionLog_class();

    register_IntensityFunctionSqrt_class();

    register_IntensityNormalizer_class();

    register_IntensityScaleAndShiftNormalizer_class();

    register_MinimizerFactory_class();

    register_MinimizerOptions_class();

    register_SquaredFunctionDefault_class();

    register_SquaredFunctionGaussianError_class();

    register_SquaredFunctionMeanSquaredError_class();

    register_SquaredFunctionSimError_class();

    register_SquaredFunctionSystematicError_class();
}


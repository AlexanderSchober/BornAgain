// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonFitList.h"
#include "IFitStrategy.pypp.h"

namespace bp = boost::python;

struct IFitStrategy_wrapper : IFitStrategy, bp::wrapper< IFitStrategy > {

    IFitStrategy_wrapper( )
    : IFitStrategy( )
      , bp::wrapper< IFitStrategy >(){
        // null constructor
    m_pyobj = 0;
    }

    IFitStrategy_wrapper(::std::string const & name )
    : IFitStrategy( name )
      , bp::wrapper< IFitStrategy >(){
        // constructor
    m_pyobj = 0;
    }

    virtual ::IFitStrategy * clone(  ) const {
        bp::override func_clone = this->get_override( "clone" );
        return func_clone(  );
    }

    virtual void execute(  ){
        bp::override func_execute = this->get_override( "execute" );
        func_execute(  );
    }

    PyObject* m_pyobj;

};

void register_IFitStrategy_class(){

    { //::IFitStrategy
        typedef bp::class_< IFitStrategy_wrapper, bp::bases< INamed >, std::auto_ptr< IFitStrategy_wrapper >, boost::noncopyable > IFitStrategy_exposer_t;
        IFitStrategy_exposer_t IFitStrategy_exposer = IFitStrategy_exposer_t( "IFitStrategy", "Interface to concrete fit strategy.", bp::init< >() );
        bp::scope IFitStrategy_scope( IFitStrategy_exposer );
        IFitStrategy_exposer.def( bp::init< std::string const & >(( bp::arg("name") )) );
        { //::IFitStrategy::clone
        
            typedef ::IFitStrategy * ( ::IFitStrategy::*clone_function_type)(  ) const;
            
            IFitStrategy_exposer.def( 
                "clone"
                , bp::pure_virtual( clone_function_type(&::IFitStrategy::clone) )
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::IFitStrategy::execute
        
            typedef void ( ::IFitStrategy::*execute_function_type)(  ) ;
            
            IFitStrategy_exposer.def( 
                "execute"
                , bp::pure_virtual( execute_function_type(&::IFitStrategy::execute) ) );
        
        }
    }

}

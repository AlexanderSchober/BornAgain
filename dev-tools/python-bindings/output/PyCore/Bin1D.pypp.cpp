// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonCoreList.h"
#include "Bin1D.pypp.h"

namespace bp = boost::python;

void register_Bin1D_class(){

    { //::Bin1D
        typedef bp::class_< Bin1D > Bin1D_exposer_t;
        Bin1D_exposer_t Bin1D_exposer = Bin1D_exposer_t( "Bin1D", bp::init< >() );
        bp::scope Bin1D_scope( Bin1D_exposer );
        Bin1D_exposer.def( bp::init< double, double >(( bp::arg("lower"), bp::arg("upper") )) );
        { //::Bin1D::getBinSize
        
            typedef double ( ::Bin1D::*getBinSize_function_type)(  ) const;
            
            Bin1D_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::Bin1D::getBinSize ) );
        
        }
        { //::Bin1D::getMidPoint
        
            typedef double ( ::Bin1D::*getMidPoint_function_type)(  ) const;
            
            Bin1D_exposer.def( 
                "getMidPoint"
                , getMidPoint_function_type( &::Bin1D::getMidPoint ) );
        
        }
        Bin1D_exposer.def_readwrite( "m_lower", &Bin1D::m_lower );
        Bin1D_exposer.def_readwrite( "m_upper", &Bin1D::m_upper );
    }

}

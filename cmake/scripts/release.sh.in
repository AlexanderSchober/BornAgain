#!/bin/bash 

# Feel free to test this script. Let me know id something goes wrong.

# the script will exit if any of commands will return non-zero 
set -e

# set the variables
# version of the BornAgain. Will be set autimatically by CMake
BA_VERSION_MAJOR=@BornAgain_VERSION_MAJOR@
BA_VERSION_MINOR=@BornAgain_VERSION_MINOR@
BA_VERSION_PATCH=@BornAgain_VERSION_PATCH@
BA_VERSION=$BA_VERSION_MAJOR.$BA_VERSION_MINOR.$BA_VERSION_PATCH

# Where is your git source tree? 
# Set the path here or CMake will set it for you.
CMAKE_SOURCE_DIR="@CMAKE_SOURCE_DIR@"
GIT_SOURCE_TREE=$CMAKE_SOURCE_DIR/.git
GIT_COMMAND="git --git-dir=$CMAKE_SOURCE_DIR/.git --work-tree=$CMAKE_SOURCE_DIR"

# Where do you want to put binaries? 
# Set the path here or CMake will set it for you.
CMAKE_BUILD_DIR="@CMAKE_BINARY_DIR@"

# path to the mirror-folder of the application server
# after the release will be produces, you should make rsync to syncronize 
# the contents with the application server 
# RELEASE_DIR will be created
RELEASE_DIR="$CMAKE_BUILD_DIR/RELEASE"

RELEASE_BRANCH_NAME="release-$BA_VERSION"

PATH_TO_CHANGELOG="$CMAKE_SOURCE_DIR/CHANGELOG"

PATH_TO_PERF_TXT="$CMAKE_SOURCE_DIR/dev-tools/log/perf_history.txt"

USER=$($GIT_COMMAND config user.name)

# menu
clear
echo "
Hi $USER! I am the BornAgain release script.
Please select what you want to do:

1. Prepare a release
2. Upload release to the apps server
3. Finalize git
H. Display a help message
Q. Quit
"

read -p "Enter selection: "

case $REPLY in
  q|Q) echo "Program terminated. "
    exit
    ;;
  h|H) echo "
  How to use the release script.

  1. cd to some empty directory
  2. git clone git://apps.jcns.fz-juelich.de/BornAgain.git
  3. git checkout develop
  4. change the release number in BornAgain/CMakeLists.txt (also in BornAgain/Doc/UserManual/CMakeLists.txt if a new version of the manual is needed)
  5. create the build directory somewhere outside the source tree
  6. cd path-to-build-directory
  7. cmake path-to-source-dir
  8. run script path-to-build-dir/bin/release.sh
  "
    exit
    ;;
  1) echo "Let's start to prepare a release.."
    # 1. Making release branch
    # create the RELEASE_DIR if it does not exist.
    if [[ -d $RELEASE_DIR ]]; then
        echo "$RELEASE_DIR already exists. The contents will be removed."
        # or clean it if the release_dir exists
        rm -rf $RELEASE_DIR/*
    else
        mkdir $RELEASE_DIR
    fi
    # create a mirror from the application server to the release_dir
    rsync -avzhe ssh apps@apps.jcns.fz-juelich.de:/www/apps/src/BornAgain/ $RELEASE_DIR

    # make a release branch
    $GIT_COMMAND checkout -b $RELEASE_BRANCH_NAME origin/develop

    # build BornAgain with App and UserManual
    cd $CMAKE_BUILD_DIR
    cmake -D BORNAGAIN_APP=ON -D BORNAGAIN_MAN=ON --build $CMAKE_BUILD_DIR $CMAKE_SOURCE_DIR && make -j 4

    # Update picture number of lines of code
    # [TODO:] change qqq.png to lines_of_code.png after testing
    python $CMAKE_SOURCE_DIR/dev-tools/git-utils/cl_lines_of_code.py -i $GIT_SOURCE_TREE -o $CMAKE_SOURCE_DIR/dev-tools/git-utils/lines_of_code.png

    # Measure the performance
    $CMAKE_BUILD_DIR/bin/App --performance --batch --threads=-1

    # Modify file dev-tools/log/perf_history.txt
    # the commented code exits in the case of no input with bash -e option
    #echo "Please, enter a comment for perf-history.txt [Press Enter if empty]"
    #read -t 10 PERF_COMMENT
    #if [ -n "$PERF_COMMENT" ]; then
    #	echo $PERF_COMMENT >> $PATH_TO_PERF_TXT
    #fi
    echo "# Release $BA_VERSION" >> $PATH_TO_PERF_TXT
    cat perf_history.txt >> $PATH_TO_PERF_TXT

    # [FUTURE TASK] Modify CHANGELOG (SQL query to get data from the redmine roadmap database)
    # copy the changelog to the release_dir
    cp $PATH_TO_CHANGELOG $RELEASE_DIR

    # Update UserManual
    # remove old manual
    rm -f $RELEASE_DIR/UserManual*.pdf
    # copy the new manual to the release_dir
    cp $CMAKE_BUILD_DIR/Doc/UserManual/UserManual.pdf $RELEASE_DIR/UserManual-$BA_VERSION.pdf

    # 2. Prepare package source tarball
    cd $CMAKE_BUILD_DIR
    make package_source
    # [Future Task:] write a validation script

    # move the old package 
    mv $RELEASE_DIR/BornAgain*.tar.gz $RELEASE_DIR/old/
    mv $RELEASE_DIR/BornAgain*-win32.exe $RELEASE_DIR/old/

    # put the package source to RELEASE_DIR for further upload
    cp $CMAKE_BUILD_DIR/BornAgain-$BA_VERSION.tar.gz $RELEASE_DIR

    # copying windows build
    #wget -P $RELEASE_DIR http://apps.jcns.fz-juelich.de/redmine/attachments/62/BornAgain-$BA_VERSION-win32.exe	

    echo "New $BA_VERSION release is successfully created in the $RELEASE_DIR. Please check it now ;-)"    

    exit
    ;;
  2) echo "Uploading the contents of the $RELEASE_DIR to the apps server."
    cp $PATH_TO_CHANGELOG $RELEASE_DIR

    read -p "Are you sure? (y/n)"
    if [[ $REPLY =~ ^[yY]$ ]]; then
        echo "Starting to upload the files."
        # 3. make rsync to the application server
        # --delete option to remove files that may have existed on the backup device 
        # but no longer exist on the source device
        # uncomment after you are sure that everything is working properly 
        rsync --delete -avzhe ssh $RELEASE_DIR/ apps@apps.jcns.fz-juelich.de:/www/apps/src/BornAgain/
    elif [[ $REPLY =~ ^[nN]$ ]]; then
        echo "Your choice is no. Nothing will be uploaded."
        exit
    else
        echo "Please answer y for yes or n for no."
    fi
    exit
    ;;
  3) echo "Finalyzing git."
    read -p "Are you sure? (y/n)"
    if [[ $REPLY =~ ^[yY]$ ]]; then
        echo "Starting to finalize git."
        # 4. Finalize git
        # finalize master
        echo "--> $GIT_COMMAND commit -a -m \"Release $BA_VERSION\""
        $GIT_COMMAND commit -a -m "Release $BA_VERSION"

        echo "--> $GIT_COMMAND checkout master"
        $GIT_COMMAND checkout master

        echo "--> $GIT_COMMAND merge --no-ff $RELEASE_BRANCH_NAME -m \"Merge $BA_VERSION\""
        $GIT_COMMAND merge --no-ff $RELEASE_BRANCH_NAME -m "Merge $BA_BERSION"

        echo "--> $GIT_COMMAND tag -a $BA_VERSION -m \"Release $BA_VERSION\""
        $GIT_COMMAND tag -a $BA_VERSION -m "Release $BA_VERSION"

        #echo "--> $GIT_COMMAND push"
        #$GIT_COMMAND push

        # finalize develop
        echo "finalize develop"
        echo "--> $GIT_COMMAND checkout develop"
        $GIT_COMMAND checkout develop

        echo "--> $GIT_COMMAND merge --no-ff $RELEASE_BRANCH_NAME -m \"Merge $BA_VERSION\""
        $GIT_COMMAND merge --no-ff $RELEASE_BRANCH_NAME -m "Merge $BA_BERSION"

        #echo "--> $GIT_COMMAND push"
        #$GIT_COMMAND push

        # deleting release branch
        echo "--> $GIT_COMMAND branch -d $RELEASE_BRANCH_NAME"
        $GIT_COMMAND branch -d $RELEASE_BRANCH_NAME

        echo "Congratulations with new $BA_VERSION release! Great job ;-)"    
    elif [[ $REPLY =~ ^[nN]$ ]]; then
        echo "Your choice is no. Nothing will be done with git."
        exit
        else
        echo "Please answer y for yes or n for no."
    fi
    exit
    ;;
  *) echo "Invalid entry"
    exit 1
    ;;
esac

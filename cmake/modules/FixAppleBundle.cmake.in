set(bundle ${CMAKE_INSTALL_PREFIX}/BornAgain.app )
set(bornagain_libs ${CMAKE_INSTALL_PREFIX}/@destination_lib@)
set(thirdparty_libs ${CMAKE_INSTALL_PREFIX}/@destination_lib@)

set(BU_CHMOD_BUNDLE_ITEMS True)
set(BU_COPY_FULL_FRAMEWORK_CONTENTS False)

include (@CMAKE_SOURCE_DIR@/cmake/modules/BundleUtilitiesWithRPath.cmake)

message("AAAAA>>> CMAKE_INSTALL_PREFIX:${CMAKE_INSTALL_PREFIX} bundle:${bundle}")

# gp_resolved_file_type_override
#   Sets the type of the dependency. The options are: system, local, embedded, other
#   For OS X, system & embedded dependencies are NOT copied in to the bundle
function(gp_resolved_file_type_override resolved_file type_var)

    if(file MATCHES "Qt")
        message("XXX  resolving file as _embedded : ${file}")
        set(${type_var} embedded PARENT_SCOPE)

    elseif(item MATCHES "PlugIns/platforms")
        message("XXX3  resolving file as _embedded : ${file}")
        set(${type_var} embedded PARENT_SCOPE)

    elseif(file MATCHES "Python.framework")
        message("XXX  resolving file as system : ${file}")
        set(${type_var} system PARENT_SCOPE)

    elseif(file MATCHES "/opt")
        message("XXX  resolving file as _embedded : ${file}")
        set(${type_var} embedded PARENT_SCOPE)

    elseif(file MATCHES "libBornAgain")
        message("XXX  resolving file as _embedded : ${file}")
        set(${type_var} embedded PARENT_SCOPE)

    else()
        message("XXX  resolving file as _system   : ${file}")
        set(${type_var} system PARENT_SCOPE)
    endif()


endfunction()

# gp_item_default_embedded_path_override item default_embedded_path_var
#
# Return the path that others should refer to the item by when the item
# is embedded inside a bundle.
#
# This is a project-specific override of BundleUtilities.cmake's
# gp_item_default_embedded_path
#
function(gp_item_default_embedded_path_override item default_embedded_path_var)

    # By default, embed items as set by gp_item_default_embedded_path:
    set(path "${${default_embedded_path_var}}")

    if(item MATCHES "[^/]+\\.framework/")
        set(path "@fixup_path@/Frameworks")

    elseif(item MATCHES "PlugIns/platforms")
        set(path "@fixup_path@/PlugIns/platforms")

    elseif(item MATCHES "libBornAgain")
        set(path "@fixup_path@/lib/BornAgain-@BornAgain_VERSION_MAJOR@.@BornAgain_VERSION_MINOR@")

    elseif(item MATCHES "\\.(dylib|so)$")
        set(path "@fixup_path@/lib/ThirdParty")

    endif()

  set(${default_embedded_path_var} "${path}" PARENT_SCOPE)

endfunction(gp_item_default_embedded_path_override)


file(GLOB_RECURSE QTPLUGINS
      "${bundle}/Contents/PlugIns/*@CMAKE_SHARED_LIBRARY_SUFFIX@")

message("QQQQ QTPLUGINS ${QTPLUGINS}  bundle:${bundle}$ path:${bundle}/Contents/PlugIns")

  set(qtconf_text "
[Paths]
Plugins = PlugIns
  ")

file(WRITE "${bundle}/Contents/Resources/qt.conf" "${qtconf_text}")


  set(dirs
    "@CMAKE_BINARY_DIR@/lib"
    "$ENV{QTDIR}"
    "$ENV{QTDIR}/plugins"
  )

set(other_libs
${QTPLUGINS}
)

message("QQQQ QTPLUGINS ${QTPLUGINS} dirs ${dirs}")


fixup_bundle ( "${bundle}" "${other_libs}" "${dirs}" ) # This will fix up the dependencies for the hard dependencies: MantidKernel etc


####################################################
# Functions to change the dependency references
####################################################
function( change_bundle_id new_id sharedlib )
  execute_process(COMMAND install_name_tool -id ${new_id} ${sharedlib})
endfunction()

function( change_bundle_dep old_dep new_dep sharedlib )
  execute_process(COMMAND install_name_tool -change ${old_dep} ${new_dep} ${sharedlib})
endfunction()


####################################################
# Function to tweak Python dependencies
####################################################
function(fix_python_framework items_to_fix)
    message(STATUS "Tweaking Python library dependencies")
    foreach(item ${items_to_fix})
        message(STATUS "   -> fixing item ${item}")
        get_prerequisites(${item} prereqs 0 0 "" "")
        foreach(pr ${prereqs})
            if(pr MATCHES "Python.framework")
#            change_bundle_dep( ${pr} "@rpath/lib/ThirdParty/libpython2.7.dylib" ${item})
            change_bundle_dep( ${pr} "@rpath/libpython2.7.dylib" ${item})
            endif()
        endforeach()
    endforeach()
endfunction()


# --- fixing dependencies from Python libraries ---------
set(items_to_fix "${bundle}/Contents/MacOs/BornAgain")
file (GLOB items ${bornagain_libs}/*.so)
list(APPEND items_to_fix ${items})
file (GLOB items ${bundle}/Contents/lib/ThirdParty/*.dylib)
list(APPEND items_to_fix ${items})

message("AAA ${items_to_fix}")

fix_python_framework("${items_to_fix}")

# copying python library
#execute_process(COMMAND ${CMAKE_COMMAND} -E copy "@PYTHON_LIBRARIES@" "${bundle}/Contents/lib/ThirdParty/libpython2.7.dylib")
FILE(MAKE_DIRECTORY "${bundle}/Contents/lib/LibPython")
execute_process(COMMAND ${CMAKE_COMMAND} -E copy "@PYTHON_LIBRARIES@" "${bundle}/Contents/lib/LibPython/libpython2.7.dylib")


# --- fixing bin directory with thisbornagain.sh links ---------
FILE(MAKE_DIRECTORY "${CMAKE_INSTALL_PREFIX}/@destination_bin@")

execute_process(COMMAND ${CMAKE_COMMAND} -E create_symlink
"../libexec/@destination_suffix@/frombin_setup_paths.sh" "thisbornagain.sh"
WORKING_DIRECTORY "${CMAKE_INSTALL_PREFIX}/@destination_bin@")

execute_process(COMMAND ${CMAKE_COMMAND} -E create_symlink
"../libexec/@destination_suffix@/frombin_setup_paths.csh" "thisbornagain.csh"
WORKING_DIRECTORY "${CMAKE_INSTALL_PREFIX}/@destination_bin@")


# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libBornAgainFit', [dirname(__file__)])
        except ImportError:
            import _libBornAgainFit
            return _libBornAgainFit
        if fp is not None:
            try:
                _mod = imp.load_module('_libBornAgainFit', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _libBornAgainFit = swig_import_helper()
    del swig_import_helper
else:
    import _libBornAgainFit
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainFit.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        """value(SwigPyIterator self) -> PyObject *"""
        return _libBornAgainFit.SwigPyIterator_value(self)


    def incr(self, n=1):
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        incr(SwigPyIterator self) -> SwigPyIterator
        """
        return _libBornAgainFit.SwigPyIterator_incr(self, n)


    def decr(self, n=1):
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        decr(SwigPyIterator self) -> SwigPyIterator
        """
        return _libBornAgainFit.SwigPyIterator_decr(self, n)


    def distance(self, x):
        """distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _libBornAgainFit.SwigPyIterator_distance(self, x)


    def equal(self, x):
        """equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _libBornAgainFit.SwigPyIterator_equal(self, x)


    def copy(self):
        """copy(SwigPyIterator self) -> SwigPyIterator"""
        return _libBornAgainFit.SwigPyIterator_copy(self)


    def next(self):
        """next(SwigPyIterator self) -> PyObject *"""
        return _libBornAgainFit.SwigPyIterator_next(self)


    def __next__(self):
        """__next__(SwigPyIterator self) -> PyObject *"""
        return _libBornAgainFit.SwigPyIterator___next__(self)


    def previous(self):
        """previous(SwigPyIterator self) -> PyObject *"""
        return _libBornAgainFit.SwigPyIterator_previous(self)


    def advance(self, n):
        """advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _libBornAgainFit.SwigPyIterator_advance(self, n)


    def __eq__(self, x):
        """__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _libBornAgainFit.SwigPyIterator___eq__(self, x)


    def __ne__(self, x):
        """__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _libBornAgainFit.SwigPyIterator___ne__(self, x)


    def __iadd__(self, n):
        """__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _libBornAgainFit.SwigPyIterator___iadd__(self, n)


    def __isub__(self, n):
        """__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _libBornAgainFit.SwigPyIterator___isub__(self, n)


    def __add__(self, n):
        """__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _libBornAgainFit.SwigPyIterator___add__(self, n)


    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _libBornAgainFit.SwigPyIterator___sub__(self, *args)

    def __iter__(self):
        return self
SwigPyIterator_swigregister = _libBornAgainFit.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


_libBornAgainFit.SHARED_PTR_DISOWN_swigconstant(_libBornAgainFit)
SHARED_PTR_DISOWN = _libBornAgainFit.SHARED_PTR_DISOWN
class vdouble1d_t(_object):
    """Proxy of C++ std::vector<(double)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vdouble1d_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vdouble1d_t, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(vdouble1d_t self) -> SwigPyIterator"""
        return _libBornAgainFit.vdouble1d_t_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(vdouble1d_t self) -> bool"""
        return _libBornAgainFit.vdouble1d_t___nonzero__(self)


    def __bool__(self):
        """__bool__(vdouble1d_t self) -> bool"""
        return _libBornAgainFit.vdouble1d_t___bool__(self)


    def __len__(self):
        """__len__(vdouble1d_t self) -> std::vector< double >::size_type"""
        return _libBornAgainFit.vdouble1d_t___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(vdouble1d_t self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> vdouble1d_t"""
        return _libBornAgainFit.vdouble1d_t___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(vdouble1d_t self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)
        __setslice__(vdouble1d_t self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, vdouble1d_t v)
        """
        return _libBornAgainFit.vdouble1d_t___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(vdouble1d_t self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)"""
        return _libBornAgainFit.vdouble1d_t___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(vdouble1d_t self, std::vector< double >::difference_type i)
        __delitem__(vdouble1d_t self, PySliceObject * slice)
        """
        return _libBornAgainFit.vdouble1d_t___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(vdouble1d_t self, PySliceObject * slice) -> vdouble1d_t
        __getitem__(vdouble1d_t self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &
        """
        return _libBornAgainFit.vdouble1d_t___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(vdouble1d_t self, PySliceObject * slice, vdouble1d_t v)
        __setitem__(vdouble1d_t self, PySliceObject * slice)
        __setitem__(vdouble1d_t self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)
        """
        return _libBornAgainFit.vdouble1d_t___setitem__(self, *args)


    def pop(self):
        """pop(vdouble1d_t self) -> std::vector< double >::value_type"""
        return _libBornAgainFit.vdouble1d_t_pop(self)


    def append(self, x):
        """append(vdouble1d_t self, std::vector< double >::value_type const & x)"""
        return _libBornAgainFit.vdouble1d_t_append(self, x)


    def empty(self):
        """empty(vdouble1d_t self) -> bool"""
        return _libBornAgainFit.vdouble1d_t_empty(self)


    def size(self):
        """size(vdouble1d_t self) -> std::vector< double >::size_type"""
        return _libBornAgainFit.vdouble1d_t_size(self)


    def swap(self, v):
        """swap(vdouble1d_t self, vdouble1d_t v)"""
        return _libBornAgainFit.vdouble1d_t_swap(self, v)


    def begin(self):
        """begin(vdouble1d_t self) -> std::vector< double >::iterator"""
        return _libBornAgainFit.vdouble1d_t_begin(self)


    def end(self):
        """end(vdouble1d_t self) -> std::vector< double >::iterator"""
        return _libBornAgainFit.vdouble1d_t_end(self)


    def rbegin(self):
        """rbegin(vdouble1d_t self) -> std::vector< double >::reverse_iterator"""
        return _libBornAgainFit.vdouble1d_t_rbegin(self)


    def rend(self):
        """rend(vdouble1d_t self) -> std::vector< double >::reverse_iterator"""
        return _libBornAgainFit.vdouble1d_t_rend(self)


    def clear(self):
        """clear(vdouble1d_t self)"""
        return _libBornAgainFit.vdouble1d_t_clear(self)


    def get_allocator(self):
        """get_allocator(vdouble1d_t self) -> std::vector< double >::allocator_type"""
        return _libBornAgainFit.vdouble1d_t_get_allocator(self)


    def pop_back(self):
        """pop_back(vdouble1d_t self)"""
        return _libBornAgainFit.vdouble1d_t_pop_back(self)


    def erase(self, *args):
        """
        erase(vdouble1d_t self, std::vector< double >::iterator pos) -> std::vector< double >::iterator
        erase(vdouble1d_t self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator
        """
        return _libBornAgainFit.vdouble1d_t_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(double)> self) -> vdouble1d_t
        __init__(std::vector<(double)> self, vdouble1d_t arg2) -> vdouble1d_t
        __init__(std::vector<(double)> self, std::vector< double >::size_type size) -> vdouble1d_t
        __init__(std::vector<(double)> self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> vdouble1d_t
        """
        this = _libBornAgainFit.new_vdouble1d_t(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        """push_back(vdouble1d_t self, std::vector< double >::value_type const & x)"""
        return _libBornAgainFit.vdouble1d_t_push_back(self, x)


    def front(self):
        """front(vdouble1d_t self) -> std::vector< double >::value_type const &"""
        return _libBornAgainFit.vdouble1d_t_front(self)


    def back(self):
        """back(vdouble1d_t self) -> std::vector< double >::value_type const &"""
        return _libBornAgainFit.vdouble1d_t_back(self)


    def assign(self, n, x):
        """assign(vdouble1d_t self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)"""
        return _libBornAgainFit.vdouble1d_t_assign(self, n, x)


    def resize(self, *args):
        """
        resize(vdouble1d_t self, std::vector< double >::size_type new_size)
        resize(vdouble1d_t self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)
        """
        return _libBornAgainFit.vdouble1d_t_resize(self, *args)


    def insert(self, *args):
        """
        insert(vdouble1d_t self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator
        insert(vdouble1d_t self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)
        """
        return _libBornAgainFit.vdouble1d_t_insert(self, *args)


    def reserve(self, n):
        """reserve(vdouble1d_t self, std::vector< double >::size_type n)"""
        return _libBornAgainFit.vdouble1d_t_reserve(self, n)


    def capacity(self):
        """capacity(vdouble1d_t self) -> std::vector< double >::size_type"""
        return _libBornAgainFit.vdouble1d_t_capacity(self)

    __swig_destroy__ = _libBornAgainFit.delete_vdouble1d_t
    __del__ = lambda self: None
vdouble1d_t_swigregister = _libBornAgainFit.vdouble1d_t_swigregister
vdouble1d_t_swigregister(vdouble1d_t)

class vdouble2d_t(_object):
    """Proxy of C++ std::vector<(std::vector<(double)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vdouble2d_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vdouble2d_t, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(vdouble2d_t self) -> SwigPyIterator"""
        return _libBornAgainFit.vdouble2d_t_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(vdouble2d_t self) -> bool"""
        return _libBornAgainFit.vdouble2d_t___nonzero__(self)


    def __bool__(self):
        """__bool__(vdouble2d_t self) -> bool"""
        return _libBornAgainFit.vdouble2d_t___bool__(self)


    def __len__(self):
        """__len__(vdouble2d_t self) -> std::vector< std::vector< double > >::size_type"""
        return _libBornAgainFit.vdouble2d_t___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(vdouble2d_t self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j) -> vdouble2d_t"""
        return _libBornAgainFit.vdouble2d_t___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(vdouble2d_t self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j)
        __setslice__(vdouble2d_t self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j, vdouble2d_t v)
        """
        return _libBornAgainFit.vdouble2d_t___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(vdouble2d_t self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j)"""
        return _libBornAgainFit.vdouble2d_t___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(vdouble2d_t self, std::vector< std::vector< double > >::difference_type i)
        __delitem__(vdouble2d_t self, PySliceObject * slice)
        """
        return _libBornAgainFit.vdouble2d_t___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(vdouble2d_t self, PySliceObject * slice) -> vdouble2d_t
        __getitem__(vdouble2d_t self, std::vector< std::vector< double > >::difference_type i) -> vdouble1d_t
        """
        return _libBornAgainFit.vdouble2d_t___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(vdouble2d_t self, PySliceObject * slice, vdouble2d_t v)
        __setitem__(vdouble2d_t self, PySliceObject * slice)
        __setitem__(vdouble2d_t self, std::vector< std::vector< double > >::difference_type i, vdouble1d_t x)
        """
        return _libBornAgainFit.vdouble2d_t___setitem__(self, *args)


    def pop(self):
        """pop(vdouble2d_t self) -> vdouble1d_t"""
        return _libBornAgainFit.vdouble2d_t_pop(self)


    def append(self, x):
        """append(vdouble2d_t self, vdouble1d_t x)"""
        return _libBornAgainFit.vdouble2d_t_append(self, x)


    def empty(self):
        """empty(vdouble2d_t self) -> bool"""
        return _libBornAgainFit.vdouble2d_t_empty(self)


    def size(self):
        """size(vdouble2d_t self) -> std::vector< std::vector< double > >::size_type"""
        return _libBornAgainFit.vdouble2d_t_size(self)


    def swap(self, v):
        """swap(vdouble2d_t self, vdouble2d_t v)"""
        return _libBornAgainFit.vdouble2d_t_swap(self, v)


    def begin(self):
        """begin(vdouble2d_t self) -> std::vector< std::vector< double > >::iterator"""
        return _libBornAgainFit.vdouble2d_t_begin(self)


    def end(self):
        """end(vdouble2d_t self) -> std::vector< std::vector< double > >::iterator"""
        return _libBornAgainFit.vdouble2d_t_end(self)


    def rbegin(self):
        """rbegin(vdouble2d_t self) -> std::vector< std::vector< double > >::reverse_iterator"""
        return _libBornAgainFit.vdouble2d_t_rbegin(self)


    def rend(self):
        """rend(vdouble2d_t self) -> std::vector< std::vector< double > >::reverse_iterator"""
        return _libBornAgainFit.vdouble2d_t_rend(self)


    def clear(self):
        """clear(vdouble2d_t self)"""
        return _libBornAgainFit.vdouble2d_t_clear(self)


    def get_allocator(self):
        """get_allocator(vdouble2d_t self) -> std::vector< std::vector< double > >::allocator_type"""
        return _libBornAgainFit.vdouble2d_t_get_allocator(self)


    def pop_back(self):
        """pop_back(vdouble2d_t self)"""
        return _libBornAgainFit.vdouble2d_t_pop_back(self)


    def erase(self, *args):
        """
        erase(vdouble2d_t self, std::vector< std::vector< double > >::iterator pos) -> std::vector< std::vector< double > >::iterator
        erase(vdouble2d_t self, std::vector< std::vector< double > >::iterator first, std::vector< std::vector< double > >::iterator last) -> std::vector< std::vector< double > >::iterator
        """
        return _libBornAgainFit.vdouble2d_t_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::vector<(double)>)> self) -> vdouble2d_t
        __init__(std::vector<(std::vector<(double)>)> self, vdouble2d_t arg2) -> vdouble2d_t
        __init__(std::vector<(std::vector<(double)>)> self, std::vector< std::vector< double > >::size_type size) -> vdouble2d_t
        __init__(std::vector<(std::vector<(double)>)> self, std::vector< std::vector< double > >::size_type size, vdouble1d_t value) -> vdouble2d_t
        """
        this = _libBornAgainFit.new_vdouble2d_t(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        """push_back(vdouble2d_t self, vdouble1d_t x)"""
        return _libBornAgainFit.vdouble2d_t_push_back(self, x)


    def front(self):
        """front(vdouble2d_t self) -> vdouble1d_t"""
        return _libBornAgainFit.vdouble2d_t_front(self)


    def back(self):
        """back(vdouble2d_t self) -> vdouble1d_t"""
        return _libBornAgainFit.vdouble2d_t_back(self)


    def assign(self, n, x):
        """assign(vdouble2d_t self, std::vector< std::vector< double > >::size_type n, vdouble1d_t x)"""
        return _libBornAgainFit.vdouble2d_t_assign(self, n, x)


    def resize(self, *args):
        """
        resize(vdouble2d_t self, std::vector< std::vector< double > >::size_type new_size)
        resize(vdouble2d_t self, std::vector< std::vector< double > >::size_type new_size, vdouble1d_t x)
        """
        return _libBornAgainFit.vdouble2d_t_resize(self, *args)


    def insert(self, *args):
        """
        insert(vdouble2d_t self, std::vector< std::vector< double > >::iterator pos, vdouble1d_t x) -> std::vector< std::vector< double > >::iterator
        insert(vdouble2d_t self, std::vector< std::vector< double > >::iterator pos, std::vector< std::vector< double > >::size_type n, vdouble1d_t x)
        """
        return _libBornAgainFit.vdouble2d_t_insert(self, *args)


    def reserve(self, n):
        """reserve(vdouble2d_t self, std::vector< std::vector< double > >::size_type n)"""
        return _libBornAgainFit.vdouble2d_t_reserve(self, n)


    def capacity(self):
        """capacity(vdouble2d_t self) -> std::vector< std::vector< double > >::size_type"""
        return _libBornAgainFit.vdouble2d_t_capacity(self)

    __swig_destroy__ = _libBornAgainFit.delete_vdouble2d_t
    __del__ = lambda self: None
vdouble2d_t_swigregister = _libBornAgainFit.vdouble2d_t_swigregister
vdouble2d_t_swigregister(vdouble2d_t)

class vector_integer_t(_object):
    """Proxy of C++ std::vector<(int)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_integer_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_integer_t, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(vector_integer_t self) -> SwigPyIterator"""
        return _libBornAgainFit.vector_integer_t_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(vector_integer_t self) -> bool"""
        return _libBornAgainFit.vector_integer_t___nonzero__(self)


    def __bool__(self):
        """__bool__(vector_integer_t self) -> bool"""
        return _libBornAgainFit.vector_integer_t___bool__(self)


    def __len__(self):
        """__len__(vector_integer_t self) -> std::vector< int >::size_type"""
        return _libBornAgainFit.vector_integer_t___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(vector_integer_t self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> vector_integer_t"""
        return _libBornAgainFit.vector_integer_t___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(vector_integer_t self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)
        __setslice__(vector_integer_t self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, vector_integer_t v)
        """
        return _libBornAgainFit.vector_integer_t___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(vector_integer_t self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)"""
        return _libBornAgainFit.vector_integer_t___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(vector_integer_t self, std::vector< int >::difference_type i)
        __delitem__(vector_integer_t self, PySliceObject * slice)
        """
        return _libBornAgainFit.vector_integer_t___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(vector_integer_t self, PySliceObject * slice) -> vector_integer_t
        __getitem__(vector_integer_t self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &
        """
        return _libBornAgainFit.vector_integer_t___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(vector_integer_t self, PySliceObject * slice, vector_integer_t v)
        __setitem__(vector_integer_t self, PySliceObject * slice)
        __setitem__(vector_integer_t self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)
        """
        return _libBornAgainFit.vector_integer_t___setitem__(self, *args)


    def pop(self):
        """pop(vector_integer_t self) -> std::vector< int >::value_type"""
        return _libBornAgainFit.vector_integer_t_pop(self)


    def append(self, x):
        """append(vector_integer_t self, std::vector< int >::value_type const & x)"""
        return _libBornAgainFit.vector_integer_t_append(self, x)


    def empty(self):
        """empty(vector_integer_t self) -> bool"""
        return _libBornAgainFit.vector_integer_t_empty(self)


    def size(self):
        """size(vector_integer_t self) -> std::vector< int >::size_type"""
        return _libBornAgainFit.vector_integer_t_size(self)


    def swap(self, v):
        """swap(vector_integer_t self, vector_integer_t v)"""
        return _libBornAgainFit.vector_integer_t_swap(self, v)


    def begin(self):
        """begin(vector_integer_t self) -> std::vector< int >::iterator"""
        return _libBornAgainFit.vector_integer_t_begin(self)


    def end(self):
        """end(vector_integer_t self) -> std::vector< int >::iterator"""
        return _libBornAgainFit.vector_integer_t_end(self)


    def rbegin(self):
        """rbegin(vector_integer_t self) -> std::vector< int >::reverse_iterator"""
        return _libBornAgainFit.vector_integer_t_rbegin(self)


    def rend(self):
        """rend(vector_integer_t self) -> std::vector< int >::reverse_iterator"""
        return _libBornAgainFit.vector_integer_t_rend(self)


    def clear(self):
        """clear(vector_integer_t self)"""
        return _libBornAgainFit.vector_integer_t_clear(self)


    def get_allocator(self):
        """get_allocator(vector_integer_t self) -> std::vector< int >::allocator_type"""
        return _libBornAgainFit.vector_integer_t_get_allocator(self)


    def pop_back(self):
        """pop_back(vector_integer_t self)"""
        return _libBornAgainFit.vector_integer_t_pop_back(self)


    def erase(self, *args):
        """
        erase(vector_integer_t self, std::vector< int >::iterator pos) -> std::vector< int >::iterator
        erase(vector_integer_t self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator
        """
        return _libBornAgainFit.vector_integer_t_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(int)> self) -> vector_integer_t
        __init__(std::vector<(int)> self, vector_integer_t arg2) -> vector_integer_t
        __init__(std::vector<(int)> self, std::vector< int >::size_type size) -> vector_integer_t
        __init__(std::vector<(int)> self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> vector_integer_t
        """
        this = _libBornAgainFit.new_vector_integer_t(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        """push_back(vector_integer_t self, std::vector< int >::value_type const & x)"""
        return _libBornAgainFit.vector_integer_t_push_back(self, x)


    def front(self):
        """front(vector_integer_t self) -> std::vector< int >::value_type const &"""
        return _libBornAgainFit.vector_integer_t_front(self)


    def back(self):
        """back(vector_integer_t self) -> std::vector< int >::value_type const &"""
        return _libBornAgainFit.vector_integer_t_back(self)


    def assign(self, n, x):
        """assign(vector_integer_t self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)"""
        return _libBornAgainFit.vector_integer_t_assign(self, n, x)


    def resize(self, *args):
        """
        resize(vector_integer_t self, std::vector< int >::size_type new_size)
        resize(vector_integer_t self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)
        """
        return _libBornAgainFit.vector_integer_t_resize(self, *args)


    def insert(self, *args):
        """
        insert(vector_integer_t self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator
        insert(vector_integer_t self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)
        """
        return _libBornAgainFit.vector_integer_t_insert(self, *args)


    def reserve(self, n):
        """reserve(vector_integer_t self, std::vector< int >::size_type n)"""
        return _libBornAgainFit.vector_integer_t_reserve(self, n)


    def capacity(self):
        """capacity(vector_integer_t self) -> std::vector< int >::size_type"""
        return _libBornAgainFit.vector_integer_t_capacity(self)

    __swig_destroy__ = _libBornAgainFit.delete_vector_integer_t
    __del__ = lambda self: None
vector_integer_t_swigregister = _libBornAgainFit.vector_integer_t_swigregister
vector_integer_t_swigregister(vector_integer_t)

class vector_longinteger_t(_object):
    """Proxy of C++ std::vector<(unsigned long)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_longinteger_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_longinteger_t, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(vector_longinteger_t self) -> SwigPyIterator"""
        return _libBornAgainFit.vector_longinteger_t_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(vector_longinteger_t self) -> bool"""
        return _libBornAgainFit.vector_longinteger_t___nonzero__(self)


    def __bool__(self):
        """__bool__(vector_longinteger_t self) -> bool"""
        return _libBornAgainFit.vector_longinteger_t___bool__(self)


    def __len__(self):
        """__len__(vector_longinteger_t self) -> std::vector< unsigned long >::size_type"""
        return _libBornAgainFit.vector_longinteger_t___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(vector_longinteger_t self, std::vector< unsigned long >::difference_type i, std::vector< unsigned long >::difference_type j) -> vector_longinteger_t"""
        return _libBornAgainFit.vector_longinteger_t___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(vector_longinteger_t self, std::vector< unsigned long >::difference_type i, std::vector< unsigned long >::difference_type j)
        __setslice__(vector_longinteger_t self, std::vector< unsigned long >::difference_type i, std::vector< unsigned long >::difference_type j, vector_longinteger_t v)
        """
        return _libBornAgainFit.vector_longinteger_t___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(vector_longinteger_t self, std::vector< unsigned long >::difference_type i, std::vector< unsigned long >::difference_type j)"""
        return _libBornAgainFit.vector_longinteger_t___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(vector_longinteger_t self, std::vector< unsigned long >::difference_type i)
        __delitem__(vector_longinteger_t self, PySliceObject * slice)
        """
        return _libBornAgainFit.vector_longinteger_t___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(vector_longinteger_t self, PySliceObject * slice) -> vector_longinteger_t
        __getitem__(vector_longinteger_t self, std::vector< unsigned long >::difference_type i) -> std::vector< unsigned long >::value_type const &
        """
        return _libBornAgainFit.vector_longinteger_t___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(vector_longinteger_t self, PySliceObject * slice, vector_longinteger_t v)
        __setitem__(vector_longinteger_t self, PySliceObject * slice)
        __setitem__(vector_longinteger_t self, std::vector< unsigned long >::difference_type i, std::vector< unsigned long >::value_type const & x)
        """
        return _libBornAgainFit.vector_longinteger_t___setitem__(self, *args)


    def pop(self):
        """pop(vector_longinteger_t self) -> std::vector< unsigned long >::value_type"""
        return _libBornAgainFit.vector_longinteger_t_pop(self)


    def append(self, x):
        """append(vector_longinteger_t self, std::vector< unsigned long >::value_type const & x)"""
        return _libBornAgainFit.vector_longinteger_t_append(self, x)


    def empty(self):
        """empty(vector_longinteger_t self) -> bool"""
        return _libBornAgainFit.vector_longinteger_t_empty(self)


    def size(self):
        """size(vector_longinteger_t self) -> std::vector< unsigned long >::size_type"""
        return _libBornAgainFit.vector_longinteger_t_size(self)


    def swap(self, v):
        """swap(vector_longinteger_t self, vector_longinteger_t v)"""
        return _libBornAgainFit.vector_longinteger_t_swap(self, v)


    def begin(self):
        """begin(vector_longinteger_t self) -> std::vector< unsigned long >::iterator"""
        return _libBornAgainFit.vector_longinteger_t_begin(self)


    def end(self):
        """end(vector_longinteger_t self) -> std::vector< unsigned long >::iterator"""
        return _libBornAgainFit.vector_longinteger_t_end(self)


    def rbegin(self):
        """rbegin(vector_longinteger_t self) -> std::vector< unsigned long >::reverse_iterator"""
        return _libBornAgainFit.vector_longinteger_t_rbegin(self)


    def rend(self):
        """rend(vector_longinteger_t self) -> std::vector< unsigned long >::reverse_iterator"""
        return _libBornAgainFit.vector_longinteger_t_rend(self)


    def clear(self):
        """clear(vector_longinteger_t self)"""
        return _libBornAgainFit.vector_longinteger_t_clear(self)


    def get_allocator(self):
        """get_allocator(vector_longinteger_t self) -> std::vector< unsigned long >::allocator_type"""
        return _libBornAgainFit.vector_longinteger_t_get_allocator(self)


    def pop_back(self):
        """pop_back(vector_longinteger_t self)"""
        return _libBornAgainFit.vector_longinteger_t_pop_back(self)


    def erase(self, *args):
        """
        erase(vector_longinteger_t self, std::vector< unsigned long >::iterator pos) -> std::vector< unsigned long >::iterator
        erase(vector_longinteger_t self, std::vector< unsigned long >::iterator first, std::vector< unsigned long >::iterator last) -> std::vector< unsigned long >::iterator
        """
        return _libBornAgainFit.vector_longinteger_t_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(unsigned long)> self) -> vector_longinteger_t
        __init__(std::vector<(unsigned long)> self, vector_longinteger_t arg2) -> vector_longinteger_t
        __init__(std::vector<(unsigned long)> self, std::vector< unsigned long >::size_type size) -> vector_longinteger_t
        __init__(std::vector<(unsigned long)> self, std::vector< unsigned long >::size_type size, std::vector< unsigned long >::value_type const & value) -> vector_longinteger_t
        """
        this = _libBornAgainFit.new_vector_longinteger_t(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        """push_back(vector_longinteger_t self, std::vector< unsigned long >::value_type const & x)"""
        return _libBornAgainFit.vector_longinteger_t_push_back(self, x)


    def front(self):
        """front(vector_longinteger_t self) -> std::vector< unsigned long >::value_type const &"""
        return _libBornAgainFit.vector_longinteger_t_front(self)


    def back(self):
        """back(vector_longinteger_t self) -> std::vector< unsigned long >::value_type const &"""
        return _libBornAgainFit.vector_longinteger_t_back(self)


    def assign(self, n, x):
        """assign(vector_longinteger_t self, std::vector< unsigned long >::size_type n, std::vector< unsigned long >::value_type const & x)"""
        return _libBornAgainFit.vector_longinteger_t_assign(self, n, x)


    def resize(self, *args):
        """
        resize(vector_longinteger_t self, std::vector< unsigned long >::size_type new_size)
        resize(vector_longinteger_t self, std::vector< unsigned long >::size_type new_size, std::vector< unsigned long >::value_type const & x)
        """
        return _libBornAgainFit.vector_longinteger_t_resize(self, *args)


    def insert(self, *args):
        """
        insert(vector_longinteger_t self, std::vector< unsigned long >::iterator pos, std::vector< unsigned long >::value_type const & x) -> std::vector< unsigned long >::iterator
        insert(vector_longinteger_t self, std::vector< unsigned long >::iterator pos, std::vector< unsigned long >::size_type n, std::vector< unsigned long >::value_type const & x)
        """
        return _libBornAgainFit.vector_longinteger_t_insert(self, *args)


    def reserve(self, n):
        """reserve(vector_longinteger_t self, std::vector< unsigned long >::size_type n)"""
        return _libBornAgainFit.vector_longinteger_t_reserve(self, n)


    def capacity(self):
        """capacity(vector_longinteger_t self) -> std::vector< unsigned long >::size_type"""
        return _libBornAgainFit.vector_longinteger_t_capacity(self)

    __swig_destroy__ = _libBornAgainFit.delete_vector_longinteger_t
    __del__ = lambda self: None
vector_longinteger_t_swigregister = _libBornAgainFit.vector_longinteger_t_swigregister
vector_longinteger_t_swigregister(vector_longinteger_t)

class vector_complex_t(_object):
    """Proxy of C++ std::vector<(std::complex<(double)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_complex_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_complex_t, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(vector_complex_t self) -> SwigPyIterator"""
        return _libBornAgainFit.vector_complex_t_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(vector_complex_t self) -> bool"""
        return _libBornAgainFit.vector_complex_t___nonzero__(self)


    def __bool__(self):
        """__bool__(vector_complex_t self) -> bool"""
        return _libBornAgainFit.vector_complex_t___bool__(self)


    def __len__(self):
        """__len__(vector_complex_t self) -> std::vector< std::complex< double > >::size_type"""
        return _libBornAgainFit.vector_complex_t___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(vector_complex_t self, std::vector< std::complex< double > >::difference_type i, std::vector< std::complex< double > >::difference_type j) -> vector_complex_t"""
        return _libBornAgainFit.vector_complex_t___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(vector_complex_t self, std::vector< std::complex< double > >::difference_type i, std::vector< std::complex< double > >::difference_type j)
        __setslice__(vector_complex_t self, std::vector< std::complex< double > >::difference_type i, std::vector< std::complex< double > >::difference_type j, vector_complex_t v)
        """
        return _libBornAgainFit.vector_complex_t___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(vector_complex_t self, std::vector< std::complex< double > >::difference_type i, std::vector< std::complex< double > >::difference_type j)"""
        return _libBornAgainFit.vector_complex_t___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(vector_complex_t self, std::vector< std::complex< double > >::difference_type i)
        __delitem__(vector_complex_t self, PySliceObject * slice)
        """
        return _libBornAgainFit.vector_complex_t___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(vector_complex_t self, PySliceObject * slice) -> vector_complex_t
        __getitem__(vector_complex_t self, std::vector< std::complex< double > >::difference_type i) -> std::vector< std::complex< double > >::value_type const &
        """
        return _libBornAgainFit.vector_complex_t___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(vector_complex_t self, PySliceObject * slice, vector_complex_t v)
        __setitem__(vector_complex_t self, PySliceObject * slice)
        __setitem__(vector_complex_t self, std::vector< std::complex< double > >::difference_type i, std::vector< std::complex< double > >::value_type const & x)
        """
        return _libBornAgainFit.vector_complex_t___setitem__(self, *args)


    def pop(self):
        """pop(vector_complex_t self) -> std::vector< std::complex< double > >::value_type"""
        return _libBornAgainFit.vector_complex_t_pop(self)


    def append(self, x):
        """append(vector_complex_t self, std::vector< std::complex< double > >::value_type const & x)"""
        return _libBornAgainFit.vector_complex_t_append(self, x)


    def empty(self):
        """empty(vector_complex_t self) -> bool"""
        return _libBornAgainFit.vector_complex_t_empty(self)


    def size(self):
        """size(vector_complex_t self) -> std::vector< std::complex< double > >::size_type"""
        return _libBornAgainFit.vector_complex_t_size(self)


    def swap(self, v):
        """swap(vector_complex_t self, vector_complex_t v)"""
        return _libBornAgainFit.vector_complex_t_swap(self, v)


    def begin(self):
        """begin(vector_complex_t self) -> std::vector< std::complex< double > >::iterator"""
        return _libBornAgainFit.vector_complex_t_begin(self)


    def end(self):
        """end(vector_complex_t self) -> std::vector< std::complex< double > >::iterator"""
        return _libBornAgainFit.vector_complex_t_end(self)


    def rbegin(self):
        """rbegin(vector_complex_t self) -> std::vector< std::complex< double > >::reverse_iterator"""
        return _libBornAgainFit.vector_complex_t_rbegin(self)


    def rend(self):
        """rend(vector_complex_t self) -> std::vector< std::complex< double > >::reverse_iterator"""
        return _libBornAgainFit.vector_complex_t_rend(self)


    def clear(self):
        """clear(vector_complex_t self)"""
        return _libBornAgainFit.vector_complex_t_clear(self)


    def get_allocator(self):
        """get_allocator(vector_complex_t self) -> std::vector< std::complex< double > >::allocator_type"""
        return _libBornAgainFit.vector_complex_t_get_allocator(self)


    def pop_back(self):
        """pop_back(vector_complex_t self)"""
        return _libBornAgainFit.vector_complex_t_pop_back(self)


    def erase(self, *args):
        """
        erase(vector_complex_t self, std::vector< std::complex< double > >::iterator pos) -> std::vector< std::complex< double > >::iterator
        erase(vector_complex_t self, std::vector< std::complex< double > >::iterator first, std::vector< std::complex< double > >::iterator last) -> std::vector< std::complex< double > >::iterator
        """
        return _libBornAgainFit.vector_complex_t_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::complex<(double)>)> self) -> vector_complex_t
        __init__(std::vector<(std::complex<(double)>)> self, vector_complex_t arg2) -> vector_complex_t
        __init__(std::vector<(std::complex<(double)>)> self, std::vector< std::complex< double > >::size_type size) -> vector_complex_t
        __init__(std::vector<(std::complex<(double)>)> self, std::vector< std::complex< double > >::size_type size, std::vector< std::complex< double > >::value_type const & value) -> vector_complex_t
        """
        this = _libBornAgainFit.new_vector_complex_t(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        """push_back(vector_complex_t self, std::vector< std::complex< double > >::value_type const & x)"""
        return _libBornAgainFit.vector_complex_t_push_back(self, x)


    def front(self):
        """front(vector_complex_t self) -> std::vector< std::complex< double > >::value_type const &"""
        return _libBornAgainFit.vector_complex_t_front(self)


    def back(self):
        """back(vector_complex_t self) -> std::vector< std::complex< double > >::value_type const &"""
        return _libBornAgainFit.vector_complex_t_back(self)


    def assign(self, n, x):
        """assign(vector_complex_t self, std::vector< std::complex< double > >::size_type n, std::vector< std::complex< double > >::value_type const & x)"""
        return _libBornAgainFit.vector_complex_t_assign(self, n, x)


    def resize(self, *args):
        """
        resize(vector_complex_t self, std::vector< std::complex< double > >::size_type new_size)
        resize(vector_complex_t self, std::vector< std::complex< double > >::size_type new_size, std::vector< std::complex< double > >::value_type const & x)
        """
        return _libBornAgainFit.vector_complex_t_resize(self, *args)


    def insert(self, *args):
        """
        insert(vector_complex_t self, std::vector< std::complex< double > >::iterator pos, std::vector< std::complex< double > >::value_type const & x) -> std::vector< std::complex< double > >::iterator
        insert(vector_complex_t self, std::vector< std::complex< double > >::iterator pos, std::vector< std::complex< double > >::size_type n, std::vector< std::complex< double > >::value_type const & x)
        """
        return _libBornAgainFit.vector_complex_t_insert(self, *args)


    def reserve(self, n):
        """reserve(vector_complex_t self, std::vector< std::complex< double > >::size_type n)"""
        return _libBornAgainFit.vector_complex_t_reserve(self, n)


    def capacity(self):
        """capacity(vector_complex_t self) -> std::vector< std::complex< double > >::size_type"""
        return _libBornAgainFit.vector_complex_t_capacity(self)

    __swig_destroy__ = _libBornAgainFit.delete_vector_complex_t
    __del__ = lambda self: None
vector_complex_t_swigregister = _libBornAgainFit.vector_complex_t_swigregister
vector_complex_t_swigregister(vector_complex_t)

class vector_string_t(_object):
    """Proxy of C++ std::vector<(std::string)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_string_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_string_t, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(vector_string_t self) -> SwigPyIterator"""
        return _libBornAgainFit.vector_string_t_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(vector_string_t self) -> bool"""
        return _libBornAgainFit.vector_string_t___nonzero__(self)


    def __bool__(self):
        """__bool__(vector_string_t self) -> bool"""
        return _libBornAgainFit.vector_string_t___bool__(self)


    def __len__(self):
        """__len__(vector_string_t self) -> std::vector< std::string >::size_type"""
        return _libBornAgainFit.vector_string_t___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(vector_string_t self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> vector_string_t"""
        return _libBornAgainFit.vector_string_t___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(vector_string_t self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)
        __setslice__(vector_string_t self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, vector_string_t v)
        """
        return _libBornAgainFit.vector_string_t___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(vector_string_t self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)"""
        return _libBornAgainFit.vector_string_t___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(vector_string_t self, std::vector< std::string >::difference_type i)
        __delitem__(vector_string_t self, PySliceObject * slice)
        """
        return _libBornAgainFit.vector_string_t___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(vector_string_t self, PySliceObject * slice) -> vector_string_t
        __getitem__(vector_string_t self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &
        """
        return _libBornAgainFit.vector_string_t___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(vector_string_t self, PySliceObject * slice, vector_string_t v)
        __setitem__(vector_string_t self, PySliceObject * slice)
        __setitem__(vector_string_t self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)
        """
        return _libBornAgainFit.vector_string_t___setitem__(self, *args)


    def pop(self):
        """pop(vector_string_t self) -> std::vector< std::string >::value_type"""
        return _libBornAgainFit.vector_string_t_pop(self)


    def append(self, x):
        """append(vector_string_t self, std::vector< std::string >::value_type const & x)"""
        return _libBornAgainFit.vector_string_t_append(self, x)


    def empty(self):
        """empty(vector_string_t self) -> bool"""
        return _libBornAgainFit.vector_string_t_empty(self)


    def size(self):
        """size(vector_string_t self) -> std::vector< std::string >::size_type"""
        return _libBornAgainFit.vector_string_t_size(self)


    def swap(self, v):
        """swap(vector_string_t self, vector_string_t v)"""
        return _libBornAgainFit.vector_string_t_swap(self, v)


    def begin(self):
        """begin(vector_string_t self) -> std::vector< std::string >::iterator"""
        return _libBornAgainFit.vector_string_t_begin(self)


    def end(self):
        """end(vector_string_t self) -> std::vector< std::string >::iterator"""
        return _libBornAgainFit.vector_string_t_end(self)


    def rbegin(self):
        """rbegin(vector_string_t self) -> std::vector< std::string >::reverse_iterator"""
        return _libBornAgainFit.vector_string_t_rbegin(self)


    def rend(self):
        """rend(vector_string_t self) -> std::vector< std::string >::reverse_iterator"""
        return _libBornAgainFit.vector_string_t_rend(self)


    def clear(self):
        """clear(vector_string_t self)"""
        return _libBornAgainFit.vector_string_t_clear(self)


    def get_allocator(self):
        """get_allocator(vector_string_t self) -> std::vector< std::string >::allocator_type"""
        return _libBornAgainFit.vector_string_t_get_allocator(self)


    def pop_back(self):
        """pop_back(vector_string_t self)"""
        return _libBornAgainFit.vector_string_t_pop_back(self)


    def erase(self, *args):
        """
        erase(vector_string_t self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator
        erase(vector_string_t self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator
        """
        return _libBornAgainFit.vector_string_t_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::string)> self) -> vector_string_t
        __init__(std::vector<(std::string)> self, vector_string_t arg2) -> vector_string_t
        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size) -> vector_string_t
        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> vector_string_t
        """
        this = _libBornAgainFit.new_vector_string_t(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        """push_back(vector_string_t self, std::vector< std::string >::value_type const & x)"""
        return _libBornAgainFit.vector_string_t_push_back(self, x)


    def front(self):
        """front(vector_string_t self) -> std::vector< std::string >::value_type const &"""
        return _libBornAgainFit.vector_string_t_front(self)


    def back(self):
        """back(vector_string_t self) -> std::vector< std::string >::value_type const &"""
        return _libBornAgainFit.vector_string_t_back(self)


    def assign(self, n, x):
        """assign(vector_string_t self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)"""
        return _libBornAgainFit.vector_string_t_assign(self, n, x)


    def resize(self, *args):
        """
        resize(vector_string_t self, std::vector< std::string >::size_type new_size)
        resize(vector_string_t self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)
        """
        return _libBornAgainFit.vector_string_t_resize(self, *args)


    def insert(self, *args):
        """
        insert(vector_string_t self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator
        insert(vector_string_t self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)
        """
        return _libBornAgainFit.vector_string_t_insert(self, *args)


    def reserve(self, n):
        """reserve(vector_string_t self, std::vector< std::string >::size_type n)"""
        return _libBornAgainFit.vector_string_t_reserve(self, n)


    def capacity(self):
        """capacity(vector_string_t self) -> std::vector< std::string >::size_type"""
        return _libBornAgainFit.vector_string_t_capacity(self)

    __swig_destroy__ = _libBornAgainFit.delete_vector_string_t
    __del__ = lambda self: None
vector_string_t_swigregister = _libBornAgainFit.vector_string_t_swigregister
vector_string_t_swigregister(vector_string_t)


_libBornAgainFit.GCCXML_SKIP_THIS_swigconstant(_libBornAgainFit)
GCCXML_SKIP_THIS = _libBornAgainFit.GCCXML_SKIP_THIS
import libBornAgainCore
class IChiSquaredModule(libBornAgainCore.ICloneable):
    """


    Interface for  ChiSquaredModule, ChiSquaredFrequency for chi2 calculations.

    C++ includes: IChiSquaredModule.h

    """

    __swig_setmethods__ = {}
    for _s in [libBornAgainCore.ICloneable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IChiSquaredModule, name, value)
    __swig_getmethods__ = {}
    for _s in [libBornAgainCore.ICloneable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IChiSquaredModule, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainFit.delete_IChiSquaredModule
    __del__ = lambda self: None

    def clone(self):
        """
        clone(IChiSquaredModule self) -> IChiSquaredModule

        virtual IChiSquaredModule* IChiSquaredModule::clone() const =0

        clone method 

        """
        return _libBornAgainFit.IChiSquaredModule_clone(self)


    def getSquaredFunction(self):
        """
        getSquaredFunction(IChiSquaredModule self) -> ISquaredFunction

        const ISquaredFunction* IChiSquaredModule::getSquaredFunction() const

        Returns squared function. 

        """
        return _libBornAgainFit.IChiSquaredModule_getSquaredFunction(self)


    def setChiSquaredFunction(self, *args):
        """
        setChiSquaredFunction(IChiSquaredModule self, ISquaredFunction squared_function)
        setChiSquaredFunction(IChiSquaredModule self, ISquaredFunction squared_function)

        void IChiSquaredModule::setChiSquaredFunction(const ISquaredFunction &squared_function)

        """
        return _libBornAgainFit.IChiSquaredModule_setChiSquaredFunction(self, *args)


    def getIntensityNormalizer(self, *args):
        """
        getIntensityNormalizer(IChiSquaredModule self) -> IIntensityNormalizer
        getIntensityNormalizer(IChiSquaredModule self) -> IIntensityNormalizer

        virtual IIntensityNormalizer* IChiSquaredModule::getIntensityNormalizer()

        Returns data normalizer, non-const version needed to set internals. 

        """
        return _libBornAgainFit.IChiSquaredModule_getIntensityNormalizer(self, *args)


    def setIntensityNormalizer(self, data_normalizer):
        """
        setIntensityNormalizer(IChiSquaredModule self, IIntensityNormalizer data_normalizer)

        void IChiSquaredModule::setIntensityNormalizer(const IIntensityNormalizer &data_normalizer)

        Sets data normalizer. 

        """
        return _libBornAgainFit.IChiSquaredModule_setIntensityNormalizer(self, data_normalizer)


    def getIntensityFunction(self):
        """
        getIntensityFunction(IChiSquaredModule self) -> IIntensityFunction

        virtual const IIntensityFunction* IChiSquaredModule::getIntensityFunction() const

        Returns data rescaler. 

        """
        return _libBornAgainFit.IChiSquaredModule_getIntensityFunction(self)


    def setIntensityFunction(self, intensity_function):
        """
        setIntensityFunction(IChiSquaredModule self, IIntensityFunction intensity_function)

        void IChiSquaredModule::setIntensityFunction(const IIntensityFunction &intensity_function)

        Sets data rescaler. 

        """
        return _libBornAgainFit.IChiSquaredModule_setIntensityFunction(self, intensity_function)


    def processFitElements(self, arg2, arg3):
        """
        processFitElements(IChiSquaredModule self, std::vector< FitElement,std::allocator< FitElement > >::iterator arg2, std::vector< FitElement,std::allocator< FitElement > >::iterator arg3)

        virtual void IChiSquaredModule::processFitElements(std::vector< FitElement >::iterator, std::vector< FitElement >::iterator)

        """
        return _libBornAgainFit.IChiSquaredModule_processFitElements(self, arg2, arg3)

IChiSquaredModule_swigregister = _libBornAgainFit.IChiSquaredModule_swigregister
IChiSquaredModule_swigregister(IChiSquaredModule)

class IFitObserver(libBornAgainCore.IObserver):
    """Proxy of C++ IFitObserver class."""

    __swig_setmethods__ = {}
    for _s in [libBornAgainCore.IObserver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IFitObserver, name, value)
    __swig_getmethods__ = {}
    for _s in [libBornAgainCore.IObserver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IFitObserver, name)
    __repr__ = _swig_repr

    def __init__(self, update_every_nth):
        """__init__(IFitObserver self, int update_every_nth) -> IFitObserver"""
        if self.__class__ == IFitObserver:
            _self = None
        else:
            _self = self
        this = _libBornAgainFit.new_IFitObserver(_self, update_every_nth)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def notify(self, subject):
        """
        notify(IFitObserver self, IObservable subject)

        void IObserver::notify(IObservable *subject)

        method which is used by observable subject to notify change in status 

        """
        return _libBornAgainFit.IFitObserver_notify(self, subject)


    def update(self, fit_suite):
        """update(IFitObserver self, FitSuite fit_suite)"""
        return _libBornAgainFit.IFitObserver_update(self, fit_suite)

    __swig_destroy__ = _libBornAgainFit.delete_IFitObserver
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _libBornAgainFit.disown_IFitObserver(self)
        return weakref_proxy(self)
IFitObserver_swigregister = _libBornAgainFit.IFitObserver_swigregister
IFitObserver_swigregister(IFitObserver)

class IFitStrategy(_object):
    """Proxy of C++ IFitStrategy class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IFitStrategy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IFitStrategy, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clone(self):
        """clone(IFitStrategy self) -> IFitStrategy"""
        return _libBornAgainFit.IFitStrategy_clone(self)

    __swig_destroy__ = _libBornAgainFit.delete_IFitStrategy
    __del__ = lambda self: None

    def init(self, fit_suite):
        """init(IFitStrategy self, FitKernel * fit_suite)"""
        return _libBornAgainFit.IFitStrategy_init(self, fit_suite)


    def execute(self):
        """execute(IFitStrategy self)"""
        return _libBornAgainFit.IFitStrategy_execute(self)

IFitStrategy_swigregister = _libBornAgainFit.IFitStrategy_swigregister
IFitStrategy_swigregister(IFitStrategy)

class FitStrategyDefault(IFitStrategy):
    """Proxy of C++ FitStrategyDefault class."""

    __swig_setmethods__ = {}
    for _s in [IFitStrategy]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FitStrategyDefault, name, value)
    __swig_getmethods__ = {}
    for _s in [IFitStrategy]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FitStrategyDefault, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(FitStrategyDefault self) -> FitStrategyDefault"""
        this = _libBornAgainFit.new_FitStrategyDefault()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def clone(self):
        """clone(FitStrategyDefault self) -> IFitStrategy"""
        return _libBornAgainFit.FitStrategyDefault_clone(self)


    def execute(self):
        """execute(FitStrategyDefault self)"""
        return _libBornAgainFit.FitStrategyDefault_execute(self)

    __swig_destroy__ = _libBornAgainFit.delete_FitStrategyDefault
    __del__ = lambda self: None
FitStrategyDefault_swigregister = _libBornAgainFit.FitStrategyDefault_swigregister
FitStrategyDefault_swigregister(FitStrategyDefault)

class IIntensityFunction(_object):
    """


    Interface for applying arbitrary function to the measured intensity.

    C++ includes: IIntensityFunction.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IIntensityFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IIntensityFunction, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainFit.delete_IIntensityFunction
    __del__ = lambda self: None

    def clone(self):
        """
        clone(IIntensityFunction self) -> IIntensityFunction

        virtual IIntensityFunction* IIntensityFunction::clone() const =0

        """
        return _libBornAgainFit.IIntensityFunction_clone(self)


    def evaluate(self, value):
        """
        evaluate(IIntensityFunction self, double value) -> double

        virtual double IIntensityFunction::evaluate(double value) const =0

        """
        return _libBornAgainFit.IIntensityFunction_evaluate(self, value)

IIntensityFunction_swigregister = _libBornAgainFit.IIntensityFunction_swigregister
IIntensityFunction_swigregister(IIntensityFunction)

class IntensityFunctionLog(IIntensityFunction):
    """


    Algorithm for applying log function to the measured intensity.

    C++ includes: IIntensityFunction.h

    """

    __swig_setmethods__ = {}
    for _s in [IIntensityFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntensityFunctionLog, name, value)
    __swig_getmethods__ = {}
    for _s in [IIntensityFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntensityFunctionLog, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainFit.delete_IntensityFunctionLog
    __del__ = lambda self: None

    def clone(self):
        """
        clone(IntensityFunctionLog self) -> IntensityFunctionLog

        virtual IntensityFunctionLog* IntensityFunctionLog::clone() const 

        """
        return _libBornAgainFit.IntensityFunctionLog_clone(self)


    def evaluate(self, value):
        """
        evaluate(IntensityFunctionLog self, double value) -> double

        virtual double IntensityFunctionLog::evaluate(double value) const 

        """
        return _libBornAgainFit.IntensityFunctionLog_evaluate(self, value)


    def __init__(self):
        """
        __init__(IntensityFunctionLog self) -> IntensityFunctionLog



        Algorithm for applying log function to the measured intensity.

        C++ includes: IIntensityFunction.h

        """
        this = _libBornAgainFit.new_IntensityFunctionLog()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
IntensityFunctionLog_swigregister = _libBornAgainFit.IntensityFunctionLog_swigregister
IntensityFunctionLog_swigregister(IntensityFunctionLog)

class IntensityFunctionSqrt(IIntensityFunction):
    """


    Algorithm for applying sqrt function to the measured intensity.

    C++ includes: IIntensityFunction.h

    """

    __swig_setmethods__ = {}
    for _s in [IIntensityFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntensityFunctionSqrt, name, value)
    __swig_getmethods__ = {}
    for _s in [IIntensityFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntensityFunctionSqrt, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainFit.delete_IntensityFunctionSqrt
    __del__ = lambda self: None

    def clone(self):
        """
        clone(IntensityFunctionSqrt self) -> IntensityFunctionSqrt

        virtual IntensityFunctionSqrt* IntensityFunctionSqrt::clone() const 

        """
        return _libBornAgainFit.IntensityFunctionSqrt_clone(self)


    def evaluate(self, value):
        """
        evaluate(IntensityFunctionSqrt self, double value) -> double

        virtual double IntensityFunctionSqrt::evaluate(double value) const 

        """
        return _libBornAgainFit.IntensityFunctionSqrt_evaluate(self, value)


    def __init__(self):
        """
        __init__(IntensityFunctionSqrt self) -> IntensityFunctionSqrt



        Algorithm for applying sqrt function to the measured intensity.

        C++ includes: IIntensityFunction.h

        """
        this = _libBornAgainFit.new_IntensityFunctionSqrt()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
IntensityFunctionSqrt_swigregister = _libBornAgainFit.IntensityFunctionSqrt_swigregister
IntensityFunctionSqrt_swigregister(IntensityFunctionSqrt)

class IIntensityNormalizer(_object):
    """


    Interface to  OutputData normalizers.

    C++ includes: IIntensityNormalizer.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IIntensityNormalizer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IIntensityNormalizer, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainFit.delete_IIntensityNormalizer
    __del__ = lambda self: None

    def clone(self):
        """
        clone(IIntensityNormalizer self) -> IIntensityNormalizer

        virtual IIntensityNormalizer* IIntensityNormalizer::clone() const =0

        """
        return _libBornAgainFit.IIntensityNormalizer_clone(self)


    def createNormalizedData(self, data):
        """
        createNormalizedData(IIntensityNormalizer self, OutputData< double > const & data) -> OutputData< double > *

        virtual OutputData<double>* IIntensityNormalizer::createNormalizedData(const OutputData< double > &data) const =0

        """
        return _libBornAgainFit.IIntensityNormalizer_createNormalizedData(self, data)


    def apply(self, data):
        """
        apply(IIntensityNormalizer self, OutputData< double > & data)

        virtual void IIntensityNormalizer::apply(OutputData< double > &data) const =0

        """
        return _libBornAgainFit.IIntensityNormalizer_apply(self, data)


    def setMaximumIntensity(self, arg2):
        """
        setMaximumIntensity(IIntensityNormalizer self, double arg2)

        virtual void IIntensityNormalizer::setMaximumIntensity(double)=0

        """
        return _libBornAgainFit.IIntensityNormalizer_setMaximumIntensity(self, arg2)

IIntensityNormalizer_swigregister = _libBornAgainFit.IIntensityNormalizer_swigregister
IIntensityNormalizer_swigregister(IIntensityNormalizer)

class IntensityNormalizer(IIntensityNormalizer):
    """


    Standard  OutputData normalizer, with configurable max_intensity.

    C++ includes: IIntensityNormalizer.h

    """

    __swig_setmethods__ = {}
    for _s in [IIntensityNormalizer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntensityNormalizer, name, value)
    __swig_getmethods__ = {}
    for _s in [IIntensityNormalizer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntensityNormalizer, name)
    __repr__ = _swig_repr

    def __init__(self, scale=1.0, shift=0.0):
        """
        __init__(IntensityNormalizer self, double scale=1.0, double shift=0.0) -> IntensityNormalizer
        __init__(IntensityNormalizer self, double scale=1.0) -> IntensityNormalizer
        __init__(IntensityNormalizer self) -> IntensityNormalizer

        IntensityNormalizer::IntensityNormalizer(double scale=1.0, double shift=0.0)

        """
        this = _libBornAgainFit.new_IntensityNormalizer(scale, shift)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainFit.delete_IntensityNormalizer
    __del__ = lambda self: None

    def clone(self):
        """
        clone(IntensityNormalizer self) -> IntensityNormalizer

        IntensityNormalizer * IntensityNormalizer::clone() const 

        """
        return _libBornAgainFit.IntensityNormalizer_clone(self)


    def createNormalizedData(self, data):
        """
        createNormalizedData(IntensityNormalizer self, OutputData< double > const & data) -> OutputData< double > *

        OutputData< double > * IntensityNormalizer::createNormalizedData(const OutputData< double > &data) const 

        """
        return _libBornAgainFit.IntensityNormalizer_createNormalizedData(self, data)


    def apply(self, data):
        """
        apply(IntensityNormalizer self, OutputData< double > & data)

        void IntensityNormalizer::apply(OutputData< double > &data) const 

        """
        return _libBornAgainFit.IntensityNormalizer_apply(self, data)


    def setMaximumIntensity(self, max_intensity):
        """
        setMaximumIntensity(IntensityNormalizer self, double max_intensity)

        virtual void IntensityNormalizer::setMaximumIntensity(double max_intensity)

        """
        return _libBornAgainFit.IntensityNormalizer_setMaximumIntensity(self, max_intensity)

IntensityNormalizer_swigregister = _libBornAgainFit.IntensityNormalizer_swigregister
IntensityNormalizer_swigregister(IntensityNormalizer)

class IntensityScaleAndShiftNormalizer(IntensityNormalizer):
    """


    Simplified  OutputData normalizer, with max_intensity=1.

    C++ includes: IIntensityNormalizer.h

    """

    __swig_setmethods__ = {}
    for _s in [IntensityNormalizer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntensityScaleAndShiftNormalizer, name, value)
    __swig_getmethods__ = {}
    for _s in [IntensityNormalizer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntensityScaleAndShiftNormalizer, name)
    __repr__ = _swig_repr

    def __init__(self, scale=1.0, shift=0.0):
        """
        __init__(IntensityScaleAndShiftNormalizer self, double scale=1.0, double shift=0.0) -> IntensityScaleAndShiftNormalizer
        __init__(IntensityScaleAndShiftNormalizer self, double scale=1.0) -> IntensityScaleAndShiftNormalizer
        __init__(IntensityScaleAndShiftNormalizer self) -> IntensityScaleAndShiftNormalizer

        IntensityScaleAndShiftNormalizer::IntensityScaleAndShiftNormalizer(double scale=1.0, double shift=0.0)

        """
        this = _libBornAgainFit.new_IntensityScaleAndShiftNormalizer(scale, shift)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainFit.delete_IntensityScaleAndShiftNormalizer
    __del__ = lambda self: None

    def setMaximumIntensity(self, max_intensity):
        """
        setMaximumIntensity(IntensityScaleAndShiftNormalizer self, double max_intensity)

        virtual void IntensityScaleAndShiftNormalizer::setMaximumIntensity(double max_intensity)

        """
        return _libBornAgainFit.IntensityScaleAndShiftNormalizer_setMaximumIntensity(self, max_intensity)


    def clone(self):
        """
        clone(IntensityScaleAndShiftNormalizer self) -> IntensityScaleAndShiftNormalizer

        virtual IntensityScaleAndShiftNormalizer* IntensityScaleAndShiftNormalizer::clone() const 

        """
        return _libBornAgainFit.IntensityScaleAndShiftNormalizer_clone(self)

IntensityScaleAndShiftNormalizer_swigregister = _libBornAgainFit.IntensityScaleAndShiftNormalizer_swigregister
IntensityScaleAndShiftNormalizer_swigregister(IntensityScaleAndShiftNormalizer)

class ISquaredFunction(_object):
    """


    Interface providing measures for deviation between two values.

    Used By  ChiSquaredModule for chi2 calculations

    C++ includes: ISquaredFunction.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ISquaredFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ISquaredFunction, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainFit.delete_ISquaredFunction
    __del__ = lambda self: None

    def clone(self):
        """
        clone(ISquaredFunction self) -> ISquaredFunction

        virtual ISquaredFunction* ISquaredFunction::clone() const =0

        """
        return _libBornAgainFit.ISquaredFunction_clone(self)


    def calculateSquaredDifference(self, real_value, simulated_value):
        """
        calculateSquaredDifference(ISquaredFunction self, double real_value, double simulated_value) -> double

        virtual double ISquaredFunction::calculateSquaredDifference(double real_value, double simulated_value) const =0

        """
        return _libBornAgainFit.ISquaredFunction_calculateSquaredDifference(self, real_value, simulated_value)


    def calculateSquaredError(self, real_value, simulated_value=0.0):
        """
        calculateSquaredError(ISquaredFunction self, double real_value, double simulated_value=0.0) -> double
        calculateSquaredError(ISquaredFunction self, double real_value) -> double

        virtual double ISquaredFunction::calculateSquaredError(double real_value, double simulated_value=0.0) const =0

        """
        return _libBornAgainFit.ISquaredFunction_calculateSquaredError(self, real_value, simulated_value)

ISquaredFunction_swigregister = _libBornAgainFit.ISquaredFunction_swigregister
ISquaredFunction_swigregister(ISquaredFunction)

class SquaredFunctionDefault(ISquaredFunction):
    """


    Squared difference between two values.

    value = (a-b)*(a-b)/norm, where norm = max(b, 1.0) a - simulated values, b - real_values

    C++ includes: ISquaredFunction.h

    """

    __swig_setmethods__ = {}
    for _s in [ISquaredFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SquaredFunctionDefault, name, value)
    __swig_getmethods__ = {}
    for _s in [ISquaredFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SquaredFunctionDefault, name)
    __repr__ = _swig_repr

    def __init__(self):
        """
        __init__(SquaredFunctionDefault self) -> SquaredFunctionDefault

        SquaredFunctionDefault::SquaredFunctionDefault()

        """
        this = _libBornAgainFit.new_SquaredFunctionDefault()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainFit.delete_SquaredFunctionDefault
    __del__ = lambda self: None

    def clone(self):
        """
        clone(SquaredFunctionDefault self) -> SquaredFunctionDefault

        virtual SquaredFunctionDefault* SquaredFunctionDefault::clone() const 

        """
        return _libBornAgainFit.SquaredFunctionDefault_clone(self)


    def calculateSquaredDifference(self, real_value, simulated_value):
        """
        calculateSquaredDifference(SquaredFunctionDefault self, double real_value, double simulated_value) -> double

        virtual double SquaredFunctionDefault::calculateSquaredDifference(double real_value, double simulated_value) const 

        """
        return _libBornAgainFit.SquaredFunctionDefault_calculateSquaredDifference(self, real_value, simulated_value)


    def calculateSquaredError(self, real_value, simulated_value=0):
        """
        calculateSquaredError(SquaredFunctionDefault self, double real_value, double simulated_value=0) -> double
        calculateSquaredError(SquaredFunctionDefault self, double real_value) -> double

        virtual double SquaredFunctionDefault::calculateSquaredError(double real_value, double simulated_value=0) const 

        """
        return _libBornAgainFit.SquaredFunctionDefault_calculateSquaredError(self, real_value, simulated_value)

SquaredFunctionDefault_swigregister = _libBornAgainFit.SquaredFunctionDefault_swigregister
SquaredFunctionDefault_swigregister(SquaredFunctionDefault)

class SquaredFunctionSimError(ISquaredFunction):
    """


    Squared difference between two values.

    value = (a-b)*(a-b)/norm, where norm = max(a, 1.0) a - simulated values, b - real_values

    C++ includes: ISquaredFunction.h

    """

    __swig_setmethods__ = {}
    for _s in [ISquaredFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SquaredFunctionSimError, name, value)
    __swig_getmethods__ = {}
    for _s in [ISquaredFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SquaredFunctionSimError, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainFit.delete_SquaredFunctionSimError
    __del__ = lambda self: None

    def clone(self):
        """
        clone(SquaredFunctionSimError self) -> SquaredFunctionSimError

        virtual SquaredFunctionSimError* SquaredFunctionSimError::clone() const 

        """
        return _libBornAgainFit.SquaredFunctionSimError_clone(self)


    def calculateSquaredDifference(self, real_value, simulated_value):
        """
        calculateSquaredDifference(SquaredFunctionSimError self, double real_value, double simulated_value) -> double

        virtual double SquaredFunctionSimError::calculateSquaredDifference(double real_value, double simulated_value) const 

        """
        return _libBornAgainFit.SquaredFunctionSimError_calculateSquaredDifference(self, real_value, simulated_value)


    def calculateSquaredError(self, real_value, simulated_value):
        """
        calculateSquaredError(SquaredFunctionSimError self, double real_value, double simulated_value) -> double

        virtual double SquaredFunctionSimError::calculateSquaredError(double real_value, double simulated_value) const 

        """
        return _libBornAgainFit.SquaredFunctionSimError_calculateSquaredError(self, real_value, simulated_value)

SquaredFunctionSimError_swigregister = _libBornAgainFit.SquaredFunctionSimError_swigregister
SquaredFunctionSimError_swigregister(SquaredFunctionSimError)

class SquaredFunctionMeanSquaredError(ISquaredFunction):
    """


    Squared difference between two values normalized by mean squared error.

    value = (a-b)*(a-b)/norm, where norm = sqrt(sigma1*sigma1 + sigma2*sigma2), sigma1=max(a, 1.0), sigma2=max(b,1.0)

    C++ includes: ISquaredFunction.h

    """

    __swig_setmethods__ = {}
    for _s in [ISquaredFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SquaredFunctionMeanSquaredError, name, value)
    __swig_getmethods__ = {}
    for _s in [ISquaredFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SquaredFunctionMeanSquaredError, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainFit.delete_SquaredFunctionMeanSquaredError
    __del__ = lambda self: None

    def clone(self):
        """
        clone(SquaredFunctionMeanSquaredError self) -> SquaredFunctionMeanSquaredError

        virtual SquaredFunctionMeanSquaredError* SquaredFunctionMeanSquaredError::clone() const 

        """
        return _libBornAgainFit.SquaredFunctionMeanSquaredError_clone(self)


    def calculateSquaredDifference(self, real_value, simulated_value):
        """
        calculateSquaredDifference(SquaredFunctionMeanSquaredError self, double real_value, double simulated_value) -> double

        virtual double SquaredFunctionMeanSquaredError::calculateSquaredDifference(double real_value, double simulated_value) const 

        """
        return _libBornAgainFit.SquaredFunctionMeanSquaredError_calculateSquaredDifference(self, real_value, simulated_value)


    def calculateSquaredError(self, real_value, simulated_value):
        """
        calculateSquaredError(SquaredFunctionMeanSquaredError self, double real_value, double simulated_value) -> double

        virtual double SquaredFunctionMeanSquaredError::calculateSquaredError(double real_value, double simulated_value) const 

        """
        return _libBornAgainFit.SquaredFunctionMeanSquaredError_calculateSquaredError(self, real_value, simulated_value)

SquaredFunctionMeanSquaredError_swigregister = _libBornAgainFit.SquaredFunctionMeanSquaredError_swigregister
SquaredFunctionMeanSquaredError_swigregister(SquaredFunctionMeanSquaredError)

class SquaredFunctionSystematicError(ISquaredFunction):
    """


    Squared difference between two values normalized by systematic error.

    value = (a-b)*(a-b)/norm, where norm = max(error, 1.0), error = b + (epsilon*b)**2

    C++ includes: ISquaredFunction.h

    """

    __swig_setmethods__ = {}
    for _s in [ISquaredFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SquaredFunctionSystematicError, name, value)
    __swig_getmethods__ = {}
    for _s in [ISquaredFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SquaredFunctionSystematicError, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainFit.delete_SquaredFunctionSystematicError
    __del__ = lambda self: None

    def clone(self):
        """
        clone(SquaredFunctionSystematicError self) -> SquaredFunctionSystematicError

        virtual SquaredFunctionSystematicError* SquaredFunctionSystematicError::clone() const 

        """
        return _libBornAgainFit.SquaredFunctionSystematicError_clone(self)


    def calculateSquaredDifference(self, real_value, simulated_value):
        """
        calculateSquaredDifference(SquaredFunctionSystematicError self, double real_value, double simulated_value) -> double

        virtual double SquaredFunctionSystematicError::calculateSquaredDifference(double real_value, double simulated_value) const 

        """
        return _libBornAgainFit.SquaredFunctionSystematicError_calculateSquaredDifference(self, real_value, simulated_value)


    def calculateSquaredError(self, real_value, simulated_value):
        """
        calculateSquaredError(SquaredFunctionSystematicError self, double real_value, double simulated_value) -> double

        virtual double SquaredFunctionSystematicError::calculateSquaredError(double real_value, double simulated_value) const 

        """
        return _libBornAgainFit.SquaredFunctionSystematicError_calculateSquaredError(self, real_value, simulated_value)

SquaredFunctionSystematicError_swigregister = _libBornAgainFit.SquaredFunctionSystematicError_swigregister
SquaredFunctionSystematicError_swigregister(SquaredFunctionSystematicError)

class SquaredFunctionGaussianError(ISquaredFunction):
    """


    Squared difference between two values with gaussian error.

    value = (a-b)*(a-b)/norm, where norm = sigma*sigma, sigma - is set by user

    C++ includes: ISquaredFunction.h

    """

    __swig_setmethods__ = {}
    for _s in [ISquaredFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SquaredFunctionGaussianError, name, value)
    __swig_getmethods__ = {}
    for _s in [ISquaredFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SquaredFunctionGaussianError, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainFit.delete_SquaredFunctionGaussianError
    __del__ = lambda self: None

    def clone(self):
        """
        clone(SquaredFunctionGaussianError self) -> SquaredFunctionGaussianError

        virtual SquaredFunctionGaussianError* SquaredFunctionGaussianError::clone() const 

        """
        return _libBornAgainFit.SquaredFunctionGaussianError_clone(self)


    def calculateSquaredDifference(self, real_value, simulated_value):
        """
        calculateSquaredDifference(SquaredFunctionGaussianError self, double real_value, double simulated_value) -> double

        virtual double SquaredFunctionGaussianError::calculateSquaredDifference(double real_value, double simulated_value) const 

        """
        return _libBornAgainFit.SquaredFunctionGaussianError_calculateSquaredDifference(self, real_value, simulated_value)


    def calculateSquaredError(self, arg2, arg3):
        """
        calculateSquaredError(SquaredFunctionGaussianError self, double arg2, double arg3) -> double

        virtual double SquaredFunctionGaussianError::calculateSquaredError(double, double) const 

        """
        return _libBornAgainFit.SquaredFunctionGaussianError_calculateSquaredError(self, arg2, arg3)

SquaredFunctionGaussianError_swigregister = _libBornAgainFit.SquaredFunctionGaussianError_swigregister
SquaredFunctionGaussianError_swigregister(SquaredFunctionGaussianError)

class IMinimizer(_object):
    """Proxy of C++ IMinimizer class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMinimizer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IMinimizer, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainFit.delete_IMinimizer
    __del__ = lambda self: None

    def minimize(self):
        """minimize(IMinimizer self)"""
        return _libBornAgainFit.IMinimizer_minimize(self)


    def setParameter(self, index, par):
        """setParameter(IMinimizer self, size_t index, FitParameter par)"""
        return _libBornAgainFit.IMinimizer_setParameter(self, index, par)


    def setParameters(self, parameters):
        """setParameters(IMinimizer self, FitSuiteParameters parameters)"""
        return _libBornAgainFit.IMinimizer_setParameters(self, parameters)


    def setChiSquaredFunction(self, fun_chi2, nparameters):
        """setChiSquaredFunction(IMinimizer self, IMinimizer::function_chi2_t fun_chi2, size_t nparameters)"""
        return _libBornAgainFit.IMinimizer_setChiSquaredFunction(self, fun_chi2, nparameters)


    def setGradientFunction(self, fun_gradient, nparameters, ndatasize):
        """setGradientFunction(IMinimizer self, IMinimizer::function_gradient_t fun_gradient, size_t nparameters, size_t ndatasize)"""
        return _libBornAgainFit.IMinimizer_setGradientFunction(self, fun_gradient, nparameters, ndatasize)


    def getNumberOfVariables(self):
        """getNumberOfVariables(IMinimizer self) -> size_t"""
        return _libBornAgainFit.IMinimizer_getNumberOfVariables(self)


    def getMinValue(self):
        """getMinValue(IMinimizer self) -> double"""
        return _libBornAgainFit.IMinimizer_getMinValue(self)


    def getValueOfVariableAtMinimum(self, index):
        """getValueOfVariableAtMinimum(IMinimizer self, size_t index) -> double"""
        return _libBornAgainFit.IMinimizer_getValueOfVariableAtMinimum(self, index)


    def getValueOfVariablesAtMinimum(self):
        """getValueOfVariablesAtMinimum(IMinimizer self) -> vdouble1d_t"""
        return _libBornAgainFit.IMinimizer_getValueOfVariablesAtMinimum(self)


    def getErrorOfVariable(self, index):
        """getErrorOfVariable(IMinimizer self, size_t index) -> double"""
        return _libBornAgainFit.IMinimizer_getErrorOfVariable(self, index)


    def getErrorOfVariables(self):
        """getErrorOfVariables(IMinimizer self) -> vdouble1d_t"""
        return _libBornAgainFit.IMinimizer_getErrorOfVariables(self)


    def clear(self):
        """clear(IMinimizer self)"""
        return _libBornAgainFit.IMinimizer_clear(self)


    def printResults(self):
        """printResults(IMinimizer self)"""
        return _libBornAgainFit.IMinimizer_printResults(self)


    def getNCalls(self):
        """getNCalls(IMinimizer self) -> size_t"""
        return _libBornAgainFit.IMinimizer_getNCalls(self)


    def getOptions(self, *args):
        """
        getOptions(IMinimizer self) -> MinimizerOptions
        getOptions(IMinimizer self) -> MinimizerOptions
        """
        return _libBornAgainFit.IMinimizer_getOptions(self, *args)


    def setOptions(self, options):
        """setOptions(IMinimizer self, MinimizerOptions options)"""
        return _libBornAgainFit.IMinimizer_setOptions(self, options)


    def setOptionString(self, options):
        """setOptionString(IMinimizer self, std::string const & options)"""
        return _libBornAgainFit.IMinimizer_setOptionString(self, options)


    def isGradientBasedAgorithm(self):
        """isGradientBasedAgorithm(IMinimizer self) -> bool"""
        return _libBornAgainFit.IMinimizer_isGradientBasedAgorithm(self)


    def getMinimizerName(self):
        """getMinimizerName(IMinimizer self) -> std::string"""
        return _libBornAgainFit.IMinimizer_getMinimizerName(self)


    def getAlgorithmName(self):
        """getAlgorithmName(IMinimizer self) -> std::string"""
        return _libBornAgainFit.IMinimizer_getAlgorithmName(self)

IMinimizer_swigregister = _libBornAgainFit.IMinimizer_swigregister
IMinimizer_swigregister(IMinimizer)

class ChiSquaredModule(IChiSquaredModule):
    """


    Calculation of chi2 between two data sets.

    C++ includes: ChiSquaredModule.h

    """

    __swig_setmethods__ = {}
    for _s in [IChiSquaredModule]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChiSquaredModule, name, value)
    __swig_getmethods__ = {}
    for _s in [IChiSquaredModule]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChiSquaredModule, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ChiSquaredModule self) -> ChiSquaredModule
        __init__(ChiSquaredModule self, ChiSquaredModule other) -> ChiSquaredModule

        ChiSquaredModule::ChiSquaredModule(const ChiSquaredModule &other)

        """
        this = _libBornAgainFit.new_ChiSquaredModule(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainFit.delete_ChiSquaredModule
    __del__ = lambda self: None

    def clone(self):
        """
        clone(ChiSquaredModule self) -> ChiSquaredModule

        virtual ChiSquaredModule* ChiSquaredModule::clone() const

        clone method 

        """
        return _libBornAgainFit.ChiSquaredModule_clone(self)


    def processFitElements(self, first, last):
        """
        processFitElements(ChiSquaredModule self, std::vector< FitElement,std::allocator< FitElement > >::iterator first, std::vector< FitElement,std::allocator< FitElement > >::iterator last)

        void ChiSquaredModule::processFitElements(std::vector< FitElement >::iterator first, std::vector< FitElement >::iterator last)

        Updates mp_simulation_data and mp_weights, returns chi^2. 

        """
        return _libBornAgainFit.ChiSquaredModule_processFitElements(self, first, last)

ChiSquaredModule_swigregister = _libBornAgainFit.ChiSquaredModule_swigregister
ChiSquaredModule_swigregister(ChiSquaredModule)

class FitObject(_object):
    """Proxy of C++ FitObject class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FitObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FitObject, name)
    __repr__ = _swig_repr

    def __init__(self, simulation, real_data, weight=1, adjust_detector_to_data=True):
        """
        __init__(FitObject self, GISASSimulation const & simulation, OutputData< double > const & real_data, double weight=1, bool adjust_detector_to_data=True) -> FitObject
        __init__(FitObject self, GISASSimulation const & simulation, OutputData< double > const & real_data, double weight=1) -> FitObject
        __init__(FitObject self, GISASSimulation const & simulation, OutputData< double > const & real_data) -> FitObject
        """
        this = _libBornAgainFit.new_FitObject(simulation, real_data, weight, adjust_detector_to_data)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainFit.delete_FitObject
    __del__ = lambda self: None

    def getRealData(self):
        """getRealData(FitObject self) -> OutputData< double > const *"""
        return _libBornAgainFit.FitObject_getRealData(self)


    def getSimulationData(self):
        """getSimulationData(FitObject self) -> OutputData< double > const *"""
        return _libBornAgainFit.FitObject_getSimulationData(self)


    def getSimulation(self):
        """getSimulation(FitObject self) -> GISASSimulation const *"""
        return _libBornAgainFit.FitObject_getSimulation(self)


    def getWeight(self):
        """getWeight(FitObject self) -> double"""
        return _libBornAgainFit.FitObject_getWeight(self)


    def getSizeOfData(self):
        """getSizeOfData(FitObject self) -> size_t"""
        return _libBornAgainFit.FitObject_getSizeOfData(self)


    def prepareFitElements(self, fit_elements, weight, normalizer=None):
        """
        prepareFitElements(FitObject self, std::vector< FitElement,std::allocator< FitElement > > & fit_elements, double weight, IIntensityNormalizer normalizer=None)
        prepareFitElements(FitObject self, std::vector< FitElement,std::allocator< FitElement > > & fit_elements, double weight)
        """
        return _libBornAgainFit.FitObject_prepareFitElements(self, fit_elements, weight, normalizer)


    def getChiSquaredMap(self, first, last):
        """getChiSquaredMap(FitObject self, std::vector< FitElement,std::allocator< FitElement > >::const_iterator first, std::vector< FitElement,std::allocator< FitElement > >::const_iterator last) -> OutputData< double > *"""
        return _libBornAgainFit.FitObject_getChiSquaredMap(self, first, last)

FitObject_swigregister = _libBornAgainFit.FitObject_swigregister
FitObject_swigregister(FitObject)

class FitOptions(_object):
    """Proxy of C++ FitOptions class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FitOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FitOptions, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(FitOptions self) -> FitOptions"""
        this = _libBornAgainFit.new_FitOptions()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainFit.delete_FitOptions
    __del__ = lambda self: None

    def getDerivEpsilon(self):
        """getDerivEpsilon(FitOptions self) -> double"""
        return _libBornAgainFit.FitOptions_getDerivEpsilon(self)


    def setDerivEpsilon(self, deriv_epsilon):
        """setDerivEpsilon(FitOptions self, double deriv_epsilon)"""
        return _libBornAgainFit.FitOptions_setDerivEpsilon(self, deriv_epsilon)


    def getStepFactor(self):
        """getStepFactor(FitOptions self) -> double"""
        return _libBornAgainFit.FitOptions_getStepFactor(self)


    def setStepFactor(self, step_factor):
        """setStepFactor(FitOptions self, double step_factor)"""
        return _libBornAgainFit.FitOptions_setStepFactor(self, step_factor)

FitOptions_swigregister = _libBornAgainFit.FitOptions_swigregister
FitOptions_swigregister(FitOptions)

class FitParameter(libBornAgainCore.AttLimits):
    """Proxy of C++ FitParameter class."""

    __swig_setmethods__ = {}
    for _s in [libBornAgainCore.AttLimits]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FitParameter, name, value)
    __swig_getmethods__ = {}
    for _s in [libBornAgainCore.AttLimits]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FitParameter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FitParameter self) -> FitParameter
        __init__(FitParameter self, std::string const & name, double value, double step=0.0, AttLimits limits, double error=0.0) -> FitParameter
        __init__(FitParameter self, std::string const & name, double value, double step=0.0, AttLimits limits) -> FitParameter
        __init__(FitParameter self, std::string const & name, double value, double step=0.0) -> FitParameter
        __init__(FitParameter self, std::string const & name, double value) -> FitParameter
        """
        this = _libBornAgainFit.new_FitParameter(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainFit.delete_FitParameter
    __del__ = lambda self: None

    def setValue(self, value):
        """setValue(FitParameter self, double value)"""
        return _libBornAgainFit.FitParameter_setValue(self, value)


    def getValue(self):
        """getValue(FitParameter self) -> double"""
        return _libBornAgainFit.FitParameter_getValue(self)


    def setStep(self, value):
        """setStep(FitParameter self, double value)"""
        return _libBornAgainFit.FitParameter_setStep(self, value)


    def getStep(self):
        """getStep(FitParameter self) -> double"""
        return _libBornAgainFit.FitParameter_getStep(self)


    def setError(self, value):
        """setError(FitParameter self, double value)"""
        return _libBornAgainFit.FitParameter_setError(self, value)


    def getError(self):
        """getError(FitParameter self) -> double"""
        return _libBornAgainFit.FitParameter_getError(self)

FitParameter_swigregister = _libBornAgainFit.FitParameter_swigregister
FitParameter_swigregister(FitParameter)

class FitSuite(libBornAgainCore.IObservable):
    """Proxy of C++ FitSuite class."""

    __swig_setmethods__ = {}
    for _s in [libBornAgainCore.IObservable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FitSuite, name, value)
    __swig_getmethods__ = {}
    for _s in [libBornAgainCore.IObservable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FitSuite, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(FitSuite self) -> FitSuite"""
        this = _libBornAgainFit.new_FitSuite()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def addSimulationAndRealData(self, *args):
        """
        addSimulationAndRealData(FitSuite self, GISASSimulation const & simulation, OutputData< double > const & real_data, double weight=1)
        addSimulationAndRealData(FitSuite self, GISASSimulation const & simulation, OutputData< double > const & real_data)
        addSimulationAndRealData(FitSuite self, GISASSimulation const & simulation, IHistogram const & real_data, double weight=1)
        addSimulationAndRealData(FitSuite self, GISASSimulation const & simulation, IHistogram const & real_data)
        """
        return _libBornAgainFit.FitSuite_addSimulationAndRealData(self, *args)


    def addFitParameter(self, *args):
        """
        addFitParameter(FitSuite self, std::string const & name, double value, AttLimits attlim, double step=0.0)
        addFitParameter(FitSuite self, std::string const & name, double value, AttLimits attlim)
        addFitParameter(FitSuite self, std::string const & name, double value)
        """
        return _libBornAgainFit.FitSuite_addFitParameter(self, *args)


    def setChiSquaredModule(self, chi2_module):
        """setChiSquaredModule(FitSuite self, IChiSquaredModule chi2_module)"""
        return _libBornAgainFit.FitSuite_setChiSquaredModule(self, chi2_module)


    def addFitStrategy(self, strategy):
        """addFitStrategy(FitSuite self, IFitStrategy strategy)"""
        return _libBornAgainFit.FitSuite_addFitStrategy(self, strategy)


    def setMinimizer(self, *args):
        """
        setMinimizer(FitSuite self, std::string const & minimizer_name, std::string const & algorithm_name, std::string const & minimizer_options)
        setMinimizer(FitSuite self, std::string const & minimizer_name, std::string const & algorithm_name)
        setMinimizer(FitSuite self, std::string const & minimizer_name)
        setMinimizer(FitSuite self, IMinimizer minimizer)
        """
        return _libBornAgainFit.FitSuite_setMinimizer(self, *args)


    def getMinimizer(self):
        """getMinimizer(FitSuite self) -> IMinimizer"""
        return _libBornAgainFit.FitSuite_getMinimizer(self)


    def initPrint(self, print_every_nth):
        """initPrint(FitSuite self, int print_every_nth)"""
        return _libBornAgainFit.FitSuite_initPrint(self, print_every_nth)


    def fixAllParameters(self):
        """fixAllParameters(FitSuite self)"""
        return _libBornAgainFit.FitSuite_fixAllParameters(self)


    def releaseAllParameters(self):
        """releaseAllParameters(FitSuite self)"""
        return _libBornAgainFit.FitSuite_releaseAllParameters(self)


    def setParametersFixed(self, pars, is_fixed):
        """setParametersFixed(FitSuite self, vector_string_t pars, bool is_fixed)"""
        return _libBornAgainFit.FitSuite_setParametersFixed(self, pars, is_fixed)


    def runFit(self):
        """runFit(FitSuite self)"""
        return _libBornAgainFit.FitSuite_runFit(self)


    def getNumberOfFitObjects(self):
        """getNumberOfFitObjects(FitSuite self) -> int"""
        return _libBornAgainFit.FitSuite_getNumberOfFitObjects(self)


    def getRealData(self, i_item=0):
        """
        getRealData(FitSuite self, size_t i_item=0) -> IHistogram
        getRealData(FitSuite self) -> IHistogram *
        """
        return _libBornAgainFit.FitSuite_getRealData(self, i_item)


    def getSimulationData(self, i_item=0):
        """
        getSimulationData(FitSuite self, size_t i_item=0) -> IHistogram
        getSimulationData(FitSuite self) -> IHistogram *
        """
        return _libBornAgainFit.FitSuite_getSimulationData(self, i_item)


    def getChiSquaredMap(self, i_item=0):
        """
        getChiSquaredMap(FitSuite self, size_t i_item=0) -> IHistogram
        getChiSquaredMap(FitSuite self) -> IHistogram *
        """
        return _libBornAgainFit.FitSuite_getChiSquaredMap(self, i_item)


    def getFitObjects(self):
        """getFitObjects(FitSuite self) -> FitSuiteObjects"""
        return _libBornAgainFit.FitSuite_getFitObjects(self)


    def getFitParameters(self):
        """getFitParameters(FitSuite self) -> FitSuiteParameters"""
        return _libBornAgainFit.FitSuite_getFitParameters(self)


    def getFitStrategies(self):
        """getFitStrategies(FitSuite self) -> FitSuiteStrategies *"""
        return _libBornAgainFit.FitSuite_getFitStrategies(self)


    def isLastIteration(self):
        """isLastIteration(FitSuite self) -> bool"""
        return _libBornAgainFit.FitSuite_isLastIteration(self)


    def getNumberOfIterations(self):
        """getNumberOfIterations(FitSuite self) -> size_t"""
        return _libBornAgainFit.FitSuite_getNumberOfIterations(self)


    def getCurrentStrategyIndex(self):
        """getCurrentStrategyIndex(FitSuite self) -> size_t"""
        return _libBornAgainFit.FitSuite_getCurrentStrategyIndex(self)


    def printResults(self):
        """printResults(FitSuite self)"""
        return _libBornAgainFit.FitSuite_printResults(self)


    def getChi2(self):
        """getChi2(FitSuite self) -> double"""
        return _libBornAgainFit.FitSuite_getChi2(self)


    def interruptFitting(self):
        """interruptFitting(FitSuite self)"""
        return _libBornAgainFit.FitSuite_interruptFitting(self)


    def resetInterrupt(self):
        """resetInterrupt(FitSuite self)"""
        return _libBornAgainFit.FitSuite_resetInterrupt(self)


    def isInterrupted(self):
        """isInterrupted(FitSuite self) -> bool"""
        return _libBornAgainFit.FitSuite_isInterrupted(self)


    def getRealOutputData(self, i_item=0):
        """
        getRealOutputData(FitSuite self, size_t i_item=0) -> OutputData< double > const
        getRealOutputData(FitSuite self) -> OutputData< double > const *
        """
        return _libBornAgainFit.FitSuite_getRealOutputData(self, i_item)


    def getSimulationOutputData(self, i_item=0):
        """
        getSimulationOutputData(FitSuite self, size_t i_item=0) -> OutputData< double > const
        getSimulationOutputData(FitSuite self) -> OutputData< double > const *
        """
        return _libBornAgainFit.FitSuite_getSimulationOutputData(self, i_item)


    def getChiSquaredOutputData(self, i_item=0):
        """
        getChiSquaredOutputData(FitSuite self, size_t i_item=0) -> OutputData< double > const
        getChiSquaredOutputData(FitSuite self) -> OutputData< double > const *
        """
        return _libBornAgainFit.FitSuite_getChiSquaredOutputData(self, i_item)

    __swig_destroy__ = _libBornAgainFit.delete_FitSuite
    __del__ = lambda self: None
FitSuite_swigregister = _libBornAgainFit.FitSuite_swigregister
FitSuite_swigregister(FitSuite)

class FitSuiteObjects(_object):
    """Proxy of C++ FitSuiteObjects class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FitSuiteObjects, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FitSuiteObjects, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(FitSuiteObjects self) -> FitSuiteObjects"""
        this = _libBornAgainFit.new_FitSuiteObjects()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainFit.delete_FitSuiteObjects
    __del__ = lambda self: None

    def add(self, simulation, real_data, weight=1.0):
        """
        add(FitSuiteObjects self, GISASSimulation const & simulation, OutputData< double > const & real_data, double weight=1.0)
        add(FitSuiteObjects self, GISASSimulation const & simulation, OutputData< double > const & real_data)
        """
        return _libBornAgainFit.FitSuiteObjects_add(self, simulation, real_data, weight)


    def getNumberOfFitObjects(self):
        """getNumberOfFitObjects(FitSuiteObjects self) -> size_t"""
        return _libBornAgainFit.FitSuiteObjects_getNumberOfFitObjects(self)


    def getSizeOfDataSet(self):
        """getSizeOfDataSet(FitSuiteObjects self) -> size_t"""
        return _libBornAgainFit.FitSuiteObjects_getSizeOfDataSet(self)


    def setChiSquaredModule(self, chi2_module):
        """setChiSquaredModule(FitSuiteObjects self, IChiSquaredModule chi2_module)"""
        return _libBornAgainFit.FitSuiteObjects_setChiSquaredModule(self, chi2_module)


    def getRealData(self, i_item=0):
        """
        getRealData(FitSuiteObjects self, size_t i_item=0) -> OutputData< double > const
        getRealData(FitSuiteObjects self) -> OutputData< double > const *
        """
        return _libBornAgainFit.FitSuiteObjects_getRealData(self, i_item)


    def getSimulationData(self, i_item=0):
        """
        getSimulationData(FitSuiteObjects self, size_t i_item=0) -> OutputData< double > const
        getSimulationData(FitSuiteObjects self) -> OutputData< double > const *
        """
        return _libBornAgainFit.FitSuiteObjects_getSimulationData(self, i_item)


    def getChiSquaredMap(self, i_item=0):
        """
        getChiSquaredMap(FitSuiteObjects self, size_t i_item=0) -> OutputData< double >
        getChiSquaredMap(FitSuiteObjects self) -> OutputData< double > *
        """
        return _libBornAgainFit.FitSuiteObjects_getChiSquaredMap(self, i_item)


    def runSimulations(self):
        """runSimulations(FitSuiteObjects self)"""
        return _libBornAgainFit.FitSuiteObjects_runSimulations(self)


    def getChiSquaredValue(self):
        """getChiSquaredValue(FitSuiteObjects self) -> double"""
        return _libBornAgainFit.FitSuiteObjects_getChiSquaredValue(self)


    def getResidualValue(self, global_index):
        """getResidualValue(FitSuiteObjects self, size_t global_index) -> double"""
        return _libBornAgainFit.FitSuiteObjects_getResidualValue(self, global_index)


    def setNfreeParameters(self, nfree_parameters):
        """setNfreeParameters(FitSuiteObjects self, int nfree_parameters)"""
        return _libBornAgainFit.FitSuiteObjects_setNfreeParameters(self, nfree_parameters)


    def clear(self):
        """clear(FitSuiteObjects self)"""
        return _libBornAgainFit.FitSuiteObjects_clear(self)

FitSuiteObjects_swigregister = _libBornAgainFit.FitSuiteObjects_swigregister
FitSuiteObjects_swigregister(FitSuiteObjects)

class FitSuiteParameters(_object):
    """Proxy of C++ FitSuiteParameters class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FitSuiteParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FitSuiteParameters, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(FitSuiteParameters self) -> FitSuiteParameters"""
        this = _libBornAgainFit.new_FitSuiteParameters()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainFit.delete_FitSuiteParameters
    __del__ = lambda self: None

    def clear(self):
        """clear(FitSuiteParameters self)"""
        return _libBornAgainFit.FitSuiteParameters_clear(self)


    def addParameter(self, name, value, step, attlim, error=0.0):
        """
        addParameter(FitSuiteParameters self, std::string const & name, double value, double step, AttLimits attlim, double error=0.0)
        addParameter(FitSuiteParameters self, std::string const & name, double value, double step, AttLimits attlim)
        """
        return _libBornAgainFit.FitSuiteParameters_addParameter(self, name, value, step, attlim, error)


    def getParameter(self, *args):
        """
        getParameter(FitSuiteParameters self, std::string const & name) -> FitParameter
        getParameter(FitSuiteParameters self, std::string const & name) -> FitParameter
        """
        return _libBornAgainFit.FitSuiteParameters_getParameter(self, *args)


    def setValues(self, *args):
        """
        setValues(FitSuiteParameters self, double const * pars_values)
        setValues(FitSuiteParameters self, vdouble1d_t pars_values)
        """
        return _libBornAgainFit.FitSuiteParameters_setValues(self, *args)


    def getValues(self):
        """getValues(FitSuiteParameters self) -> vdouble1d_t"""
        return _libBornAgainFit.FitSuiteParameters_getValues(self)


    def setErrors(self, pars_errors):
        """setErrors(FitSuiteParameters self, vdouble1d_t pars_errors)"""
        return _libBornAgainFit.FitSuiteParameters_setErrors(self, pars_errors)


    def getErrors(self):
        """getErrors(FitSuiteParameters self) -> vdouble1d_t"""
        return _libBornAgainFit.FitSuiteParameters_getErrors(self)


    def size(self):
        """size(FitSuiteParameters self) -> size_t"""
        return _libBornAgainFit.FitSuiteParameters_size(self)


    def push_back(self, par):
        """push_back(FitSuiteParameters self, FitParameter par)"""
        return _libBornAgainFit.FitSuiteParameters_push_back(self, par)


    def begin(self, *args):
        """
        begin(FitSuiteParameters self) -> FitSuiteParameters::iterator
        begin(FitSuiteParameters self) -> FitSuiteParameters::const_iterator
        """
        return _libBornAgainFit.FitSuiteParameters_begin(self, *args)


    def end(self, *args):
        """
        end(FitSuiteParameters self) -> FitSuiteParameters::iterator
        end(FitSuiteParameters self) -> FitSuiteParameters::const_iterator
        """
        return _libBornAgainFit.FitSuiteParameters_end(self, *args)


    def link_to_pool(self, pool):
        """link_to_pool(FitSuiteParameters self, ParameterPool const * pool)"""
        return _libBornAgainFit.FitSuiteParameters_link_to_pool(self, pool)


    def getNfreeParameters(self):
        """getNfreeParameters(FitSuiteParameters self) -> size_t"""
        return _libBornAgainFit.FitSuiteParameters_getNfreeParameters(self)


    def valuesAreDifferrent(self, pars_valuers, tolerance_factor=1.0):
        """
        valuesAreDifferrent(FitSuiteParameters self, double const * pars_valuers, double tolerance_factor=1.0) -> bool
        valuesAreDifferrent(FitSuiteParameters self, double const * pars_valuers) -> bool
        """
        return _libBornAgainFit.FitSuiteParameters_valuesAreDifferrent(self, pars_valuers, tolerance_factor)


    def printParameters(self):
        """printParameters(FitSuiteParameters self)"""
        return _libBornAgainFit.FitSuiteParameters_printParameters(self)


    def fixAll(self):
        """fixAll(FitSuiteParameters self)"""
        return _libBornAgainFit.FitSuiteParameters_fixAll(self)


    def releaseAll(self):
        """releaseAll(FitSuiteParameters self)"""
        return _libBornAgainFit.FitSuiteParameters_releaseAll(self)


    def setParametersFixed(self, pars, is_fixed):
        """setParametersFixed(FitSuiteParameters self, vector_string_t pars, bool is_fixed)"""
        return _libBornAgainFit.FitSuiteParameters_setParametersFixed(self, pars, is_fixed)


    def __getitem__(self, *args):
        """
        __getitem__(FitSuiteParameters self, std::string name) -> FitParameter
        __getitem__(FitSuiteParameters self, size_t index) -> FitParameter
        """
        return _libBornAgainFit.FitSuiteParameters___getitem__(self, *args)

FitSuiteParameters_swigregister = _libBornAgainFit.FitSuiteParameters_swigregister
FitSuiteParameters_swigregister(FitSuiteParameters)


def StandardNormal(x):
    """
    StandardNormal(double x) -> double

    double MathFunctions::StandardNormal(double x)

    """
    return _libBornAgainFit.StandardNormal(x)

def Gaussian(x, average, std_dev):
    """
    Gaussian(double x, double average, double std_dev) -> double

    double MathFunctions::Gaussian(double x, double average, double std_dev)

    """
    return _libBornAgainFit.Gaussian(x, average, std_dev)

def IntegratedGaussian(x, average, std_dev):
    """
    IntegratedGaussian(double x, double average, double std_dev) -> double

    double MathFunctions::IntegratedGaussian(double x, double average, double std_dev)

    """
    return _libBornAgainFit.IntegratedGaussian(x, average, std_dev)

def Si(x):
    """
    Si(double x) -> double

    double MathFunctions::Si(double x)

    Sine integral function:  $Si(x)\\equiv\\int_0^x du \\sin(u)/u$. 

    """
    return _libBornAgainFit.Si(x)

def sinc(*args):
    """
    sinc(double x) -> double
    sinc(complex_t const z) -> complex_t

    complex_t MathFunctions::sinc(const complex_t z)

    Complex sinc function:  $sinc(x)\\equiv\\sin(x)/x$. 

    """
    return _libBornAgainFit.sinc(*args)

def tanhc(z):
    """
    tanhc(complex_t const z) -> complex_t

    complex_t MathFunctions::tanhc(const complex_t z)

    Complex tanhc function:  $tanhc(x)\\equiv\\tanh(x)/x$. 

    """
    return _libBornAgainFit.tanhc(z)

def Laue(z, N):
    """
    Laue(complex_t const z, size_t N) -> complex_t

    complex_t MathFunctions::Laue(const complex_t z, size_t N)

    """
    return _libBornAgainFit.Laue(z, N)

def Bessel_J0(*args):
    """
    Bessel_J0(double x) -> double
    Bessel_J0(complex_t const z) -> complex_t

    complex_t MathFunctions::Bessel_J0(const complex_t z)

    Complex Bessel function of the first kind and order 0. 

    """
    return _libBornAgainFit.Bessel_J0(*args)

def Bessel_J1(*args):
    """
    Bessel_J1(double x) -> double
    Bessel_J1(complex_t const z) -> complex_t

    complex_t MathFunctions::Bessel_J1(const complex_t z)

    Complex Bessel function of the first kind and order 1. 

    """
    return _libBornAgainFit.Bessel_J1(*args)

def Bessel_J1c(*args):
    """
    Bessel_J1c(double x) -> double
    Bessel_J1c(complex_t const z) -> complex_t

    complex_t MathFunctions::Bessel_J1c(const complex_t z)

    Complex Bessel function Bessel_J1(x)/x. 

    """
    return _libBornAgainFit.Bessel_J1c(*args)

_libBornAgainFit.FORWARD_FFT_swigconstant(_libBornAgainFit)
FORWARD_FFT = _libBornAgainFit.FORWARD_FFT

_libBornAgainFit.BACKWARD_FFT_swigconstant(_libBornAgainFit)
BACKWARD_FFT = _libBornAgainFit.BACKWARD_FFT

def FastFourierTransform(*args):
    """
    FastFourierTransform(std::vector< complex_t,std::allocator< complex_t > > const & data, MathFunctions::EFFTDirection tcase) -> std::vector< complex_t,std::allocator< complex_t > >
    FastFourierTransform(vdouble1d_t data, MathFunctions::EFFTDirection tcase) -> std::vector< complex_t,std::allocator< complex_t > >

    std::vector< complex_t > MathFunctions::FastFourierTransform(const std::vector< double > &data, EFFTDirection tcase)

    simple (and unoptimized) wrapper function for the discrete fast Fourier transformation library (fftw3); transforms real to complex 

    """
    return _libBornAgainFit.FastFourierTransform(*args)

def ConvolveFFT(signal, resfunc):
    """
    ConvolveFFT(vdouble1d_t signal, vdouble1d_t resfunc) -> std::vector< complex_t,std::allocator< complex_t > >

    std::vector< complex_t > MathFunctions::ConvolveFFT(const std::vector< double > &signal, const std::vector< double > &resfunc)

    convolution of two real vectors of equal size 

    """
    return _libBornAgainFit.ConvolveFFT(signal, resfunc)

def GenerateUniformRandom():
    """
    GenerateUniformRandom() -> double

    double MathFunctions::GenerateUniformRandom()

    """
    return _libBornAgainFit.GenerateUniformRandom()

def GenerateStandardNormalRandom():
    """
    GenerateStandardNormalRandom() -> double

    double MathFunctions::GenerateStandardNormalRandom()

    """
    return _libBornAgainFit.GenerateStandardNormalRandom()

def GenerateNormalRandom(average, std_dev):
    """
    GenerateNormalRandom(double average, double std_dev) -> double

    double MathFunctions::GenerateNormalRandom(double average, double std_dev)

    """
    return _libBornAgainFit.GenerateNormalRandom(average, std_dev)

def isnan(x):
    """
    isnan(double x) -> bool

    BA_CORE_API_ bool MathFunctions::isnan(double x)

    """
    return _libBornAgainFit.isnan(x)

def isinf(x):
    """
    isinf(double x) -> bool

    BA_CORE_API_ bool MathFunctions::isinf(double x)

    """
    return _libBornAgainFit.isinf(x)
class MinimizerFactory(_object):
    """Proxy of C++ MinimizerFactory class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MinimizerFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MinimizerFactory, name)
    __repr__ = _swig_repr

    def printCatalogue():
        """printCatalogue()"""
        return _libBornAgainFit.MinimizerFactory_printCatalogue()

    if _newclass:
        printCatalogue = staticmethod(printCatalogue)
    __swig_getmethods__["printCatalogue"] = lambda x: printCatalogue

    def createMinimizer(*args):
        """
        createMinimizer(std::string const & minimizer, std::string const & algorithm, std::string const & options) -> IMinimizer
        createMinimizer(std::string const & minimizer, std::string const & algorithm) -> IMinimizer
        createMinimizer(std::string const & minimizer) -> IMinimizer
        createMinimizer(IMinimizer minimizer) -> IMinimizer
        """
        return _libBornAgainFit.MinimizerFactory_createMinimizer(*args)

    if _newclass:
        createMinimizer = staticmethod(createMinimizer)
    __swig_getmethods__["createMinimizer"] = lambda x: createMinimizer

    def __init__(self):
        """__init__(MinimizerFactory self) -> MinimizerFactory"""
        this = _libBornAgainFit.new_MinimizerFactory()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainFit.delete_MinimizerFactory
    __del__ = lambda self: None
MinimizerFactory_swigregister = _libBornAgainFit.MinimizerFactory_swigregister
MinimizerFactory_swigregister(MinimizerFactory)

def MinimizerFactory_printCatalogue():
    """MinimizerFactory_printCatalogue()"""
    return _libBornAgainFit.MinimizerFactory_printCatalogue()

def MinimizerFactory_createMinimizer(*args):
    """
    createMinimizer(std::string const & minimizer, std::string const & algorithm, std::string const & options) -> IMinimizer
    createMinimizer(std::string const & minimizer, std::string const & algorithm) -> IMinimizer
    createMinimizer(std::string const & minimizer) -> IMinimizer
    MinimizerFactory_createMinimizer(IMinimizer minimizer) -> IMinimizer
    """
    return _libBornAgainFit.MinimizerFactory_createMinimizer(*args)

class MinimizerOptions(_object):
    """Proxy of C++ MinimizerOptions class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MinimizerOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MinimizerOptions, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(MinimizerOptions self) -> MinimizerOptions"""
        this = _libBornAgainFit.new_MinimizerOptions()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainFit.delete_MinimizerOptions
    __del__ = lambda self: None

    def getTolerance(self):
        """getTolerance(MinimizerOptions self) -> double"""
        return _libBornAgainFit.MinimizerOptions_getTolerance(self)


    def setTolerance(self, tolerance):
        """setTolerance(MinimizerOptions self, double tolerance)"""
        return _libBornAgainFit.MinimizerOptions_setTolerance(self, tolerance)


    def getPrecision(self):
        """getPrecision(MinimizerOptions self) -> double"""
        return _libBornAgainFit.MinimizerOptions_getPrecision(self)


    def setPrecision(self, precision):
        """setPrecision(MinimizerOptions self, double precision)"""
        return _libBornAgainFit.MinimizerOptions_setPrecision(self, precision)


    def getMaxIterations(self):
        """getMaxIterations(MinimizerOptions self) -> int"""
        return _libBornAgainFit.MinimizerOptions_getMaxIterations(self)


    def setMaxIterations(self, max_iterations):
        """setMaxIterations(MinimizerOptions self, int max_iterations)"""
        return _libBornAgainFit.MinimizerOptions_setMaxIterations(self, max_iterations)


    def getMaxFunctionCalls(self):
        """getMaxFunctionCalls(MinimizerOptions self) -> int"""
        return _libBornAgainFit.MinimizerOptions_getMaxFunctionCalls(self)


    def setMaxFunctionCalls(self, max_function_calls):
        """setMaxFunctionCalls(MinimizerOptions self, int max_function_calls)"""
        return _libBornAgainFit.MinimizerOptions_setMaxFunctionCalls(self, max_function_calls)


    def getPrintLevel(self):
        """getPrintLevel(MinimizerOptions self) -> int"""
        return _libBornAgainFit.MinimizerOptions_getPrintLevel(self)


    def setPrintLevel(self, print_level):
        """setPrintLevel(MinimizerOptions self, int print_level)"""
        return _libBornAgainFit.MinimizerOptions_setPrintLevel(self, print_level)


    def setValue(self, *args):
        """
        setValue(MinimizerOptions self, std::string const & name, double val)
        setValue(MinimizerOptions self, std::string const & name, int val)
        setValue(MinimizerOptions self, std::string const & name, std::string const & val)
        """
        return _libBornAgainFit.MinimizerOptions_setValue(self, *args)


    def getValue(self, *args):
        """
        getValue(MinimizerOptions self, std::string const & name, int & val)
        getValue(MinimizerOptions self, std::string const & name, double & val)
        getValue(MinimizerOptions self, std::string const & name, std::string & val)
        """
        return _libBornAgainFit.MinimizerOptions_getValue(self, *args)


    def addValue(self, *args):
        """
        addValue(MinimizerOptions self, std::string const & name, double val)
        addValue(MinimizerOptions self, std::string const & name, int val)
        addValue(MinimizerOptions self, std::string const & name, std::string const & val)
        """
        return _libBornAgainFit.MinimizerOptions_addValue(self, *args)


    def getIntValue(self, name):
        """getIntValue(MinimizerOptions self, std::string const & name) -> int"""
        return _libBornAgainFit.MinimizerOptions_getIntValue(self, name)


    def getRealValue(self, name):
        """getRealValue(MinimizerOptions self, std::string const & name) -> double"""
        return _libBornAgainFit.MinimizerOptions_getRealValue(self, name)


    def getNamedValue(self, name):
        """getNamedValue(MinimizerOptions self, std::string const & name) -> std::string"""
        return _libBornAgainFit.MinimizerOptions_getNamedValue(self, name)


    def _print(self):
        """_print(MinimizerOptions self)"""
        return _libBornAgainFit.MinimizerOptions__print(self)

MinimizerOptions_swigregister = _libBornAgainFit.MinimizerOptions_swigregister
MinimizerOptions_swigregister(MinimizerOptions)

class FitStrategyAdjustMinimizer(IFitStrategy):
    """Proxy of C++ FitStrategyAdjustMinimizer class."""

    __swig_setmethods__ = {}
    for _s in [IFitStrategy]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FitStrategyAdjustMinimizer, name, value)
    __swig_getmethods__ = {}
    for _s in [IFitStrategy]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FitStrategyAdjustMinimizer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FitStrategyAdjustMinimizer self) -> FitStrategyAdjustMinimizer
        __init__(FitStrategyAdjustMinimizer self, std::string const & minimizer_name, std::string const & algorithm_name, std::string const & minimizer_options) -> FitStrategyAdjustMinimizer
        __init__(FitStrategyAdjustMinimizer self, std::string const & minimizer_name, std::string const & algorithm_name) -> FitStrategyAdjustMinimizer
        __init__(FitStrategyAdjustMinimizer self, std::string const & minimizer_name) -> FitStrategyAdjustMinimizer
        """
        this = _libBornAgainFit.new_FitStrategyAdjustMinimizer(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainFit.delete_FitStrategyAdjustMinimizer
    __del__ = lambda self: None

    def clone(self):
        """clone(FitStrategyAdjustMinimizer self) -> FitStrategyAdjustMinimizer"""
        return _libBornAgainFit.FitStrategyAdjustMinimizer_clone(self)


    def getMinimizer(self):
        """getMinimizer(FitStrategyAdjustMinimizer self) -> IMinimizer"""
        return _libBornAgainFit.FitStrategyAdjustMinimizer_getMinimizer(self)


    def setMinimizer(self, *args):
        """
        setMinimizer(FitStrategyAdjustMinimizer self, IMinimizer minimizer)
        setMinimizer(FitStrategyAdjustMinimizer self, std::string const & minimizer_name, std::string const & algorithm_name, std::string const & minimizer_options)
        setMinimizer(FitStrategyAdjustMinimizer self, std::string const & minimizer_name, std::string const & algorithm_name)
        setMinimizer(FitStrategyAdjustMinimizer self, std::string const & minimizer_name)
        """
        return _libBornAgainFit.FitStrategyAdjustMinimizer_setMinimizer(self, *args)


    def execute(self):
        """execute(FitStrategyAdjustMinimizer self)"""
        return _libBornAgainFit.FitStrategyAdjustMinimizer_execute(self)


    def getMinimizerOptions(self):
        """getMinimizerOptions(FitStrategyAdjustMinimizer self) -> MinimizerOptions"""
        return _libBornAgainFit.FitStrategyAdjustMinimizer_getMinimizerOptions(self)

FitStrategyAdjustMinimizer_swigregister = _libBornAgainFit.FitStrategyAdjustMinimizer_swigregister
FitStrategyAdjustMinimizer_swigregister(FitStrategyAdjustMinimizer)

# This file is compatible with both classic and new-style classes.



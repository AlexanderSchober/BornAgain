# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libBornAgainFit', [dirname(__file__)])
        except ImportError:
            import _libBornAgainFit
            return _libBornAgainFit
        if fp is not None:
            try:
                _mod = imp.load_module('_libBornAgainFit', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _libBornAgainFit = swig_import_helper()
    del swig_import_helper
else:
    import _libBornAgainFit
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainFit.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _libBornAgainFit.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _libBornAgainFit.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _libBornAgainFit.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _libBornAgainFit.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _libBornAgainFit.SwigPyIterator_equal(self, x)

    def copy(self):
        return _libBornAgainFit.SwigPyIterator_copy(self)

    def next(self):
        return _libBornAgainFit.SwigPyIterator_next(self)

    def __next__(self):
        return _libBornAgainFit.SwigPyIterator___next__(self)

    def previous(self):
        return _libBornAgainFit.SwigPyIterator_previous(self)

    def advance(self, n):
        return _libBornAgainFit.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _libBornAgainFit.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _libBornAgainFit.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _libBornAgainFit.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _libBornAgainFit.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _libBornAgainFit.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _libBornAgainFit.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _libBornAgainFit.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


_libBornAgainFit.SHARED_PTR_DISOWN_swigconstant(_libBornAgainFit)
SHARED_PTR_DISOWN = _libBornAgainFit.SHARED_PTR_DISOWN
class vdouble1d_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vdouble1d_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vdouble1d_t, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libBornAgainFit.vdouble1d_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libBornAgainFit.vdouble1d_t___nonzero__(self)

    def __bool__(self):
        return _libBornAgainFit.vdouble1d_t___bool__(self)

    def __len__(self):
        return _libBornAgainFit.vdouble1d_t___len__(self)

    def __getslice__(self, i, j):
        return _libBornAgainFit.vdouble1d_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libBornAgainFit.vdouble1d_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libBornAgainFit.vdouble1d_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libBornAgainFit.vdouble1d_t___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libBornAgainFit.vdouble1d_t___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libBornAgainFit.vdouble1d_t___setitem__(self, *args)

    def pop(self):
        return _libBornAgainFit.vdouble1d_t_pop(self)

    def append(self, x):
        return _libBornAgainFit.vdouble1d_t_append(self, x)

    def empty(self):
        return _libBornAgainFit.vdouble1d_t_empty(self)

    def size(self):
        return _libBornAgainFit.vdouble1d_t_size(self)

    def swap(self, v):
        return _libBornAgainFit.vdouble1d_t_swap(self, v)

    def begin(self):
        return _libBornAgainFit.vdouble1d_t_begin(self)

    def end(self):
        return _libBornAgainFit.vdouble1d_t_end(self)

    def rbegin(self):
        return _libBornAgainFit.vdouble1d_t_rbegin(self)

    def rend(self):
        return _libBornAgainFit.vdouble1d_t_rend(self)

    def clear(self):
        return _libBornAgainFit.vdouble1d_t_clear(self)

    def get_allocator(self):
        return _libBornAgainFit.vdouble1d_t_get_allocator(self)

    def pop_back(self):
        return _libBornAgainFit.vdouble1d_t_pop_back(self)

    def erase(self, *args):
        return _libBornAgainFit.vdouble1d_t_erase(self, *args)

    def __init__(self, *args):
        this = _libBornAgainFit.new_vdouble1d_t(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _libBornAgainFit.vdouble1d_t_push_back(self, x)

    def front(self):
        return _libBornAgainFit.vdouble1d_t_front(self)

    def back(self):
        return _libBornAgainFit.vdouble1d_t_back(self)

    def assign(self, n, x):
        return _libBornAgainFit.vdouble1d_t_assign(self, n, x)

    def resize(self, *args):
        return _libBornAgainFit.vdouble1d_t_resize(self, *args)

    def insert(self, *args):
        return _libBornAgainFit.vdouble1d_t_insert(self, *args)

    def reserve(self, n):
        return _libBornAgainFit.vdouble1d_t_reserve(self, n)

    def capacity(self):
        return _libBornAgainFit.vdouble1d_t_capacity(self)
    __swig_destroy__ = _libBornAgainFit.delete_vdouble1d_t
    __del__ = lambda self: None
vdouble1d_t_swigregister = _libBornAgainFit.vdouble1d_t_swigregister
vdouble1d_t_swigregister(vdouble1d_t)

class vdouble2d_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vdouble2d_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vdouble2d_t, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libBornAgainFit.vdouble2d_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libBornAgainFit.vdouble2d_t___nonzero__(self)

    def __bool__(self):
        return _libBornAgainFit.vdouble2d_t___bool__(self)

    def __len__(self):
        return _libBornAgainFit.vdouble2d_t___len__(self)

    def __getslice__(self, i, j):
        return _libBornAgainFit.vdouble2d_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libBornAgainFit.vdouble2d_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libBornAgainFit.vdouble2d_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libBornAgainFit.vdouble2d_t___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libBornAgainFit.vdouble2d_t___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libBornAgainFit.vdouble2d_t___setitem__(self, *args)

    def pop(self):
        return _libBornAgainFit.vdouble2d_t_pop(self)

    def append(self, x):
        return _libBornAgainFit.vdouble2d_t_append(self, x)

    def empty(self):
        return _libBornAgainFit.vdouble2d_t_empty(self)

    def size(self):
        return _libBornAgainFit.vdouble2d_t_size(self)

    def swap(self, v):
        return _libBornAgainFit.vdouble2d_t_swap(self, v)

    def begin(self):
        return _libBornAgainFit.vdouble2d_t_begin(self)

    def end(self):
        return _libBornAgainFit.vdouble2d_t_end(self)

    def rbegin(self):
        return _libBornAgainFit.vdouble2d_t_rbegin(self)

    def rend(self):
        return _libBornAgainFit.vdouble2d_t_rend(self)

    def clear(self):
        return _libBornAgainFit.vdouble2d_t_clear(self)

    def get_allocator(self):
        return _libBornAgainFit.vdouble2d_t_get_allocator(self)

    def pop_back(self):
        return _libBornAgainFit.vdouble2d_t_pop_back(self)

    def erase(self, *args):
        return _libBornAgainFit.vdouble2d_t_erase(self, *args)

    def __init__(self, *args):
        this = _libBornAgainFit.new_vdouble2d_t(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _libBornAgainFit.vdouble2d_t_push_back(self, x)

    def front(self):
        return _libBornAgainFit.vdouble2d_t_front(self)

    def back(self):
        return _libBornAgainFit.vdouble2d_t_back(self)

    def assign(self, n, x):
        return _libBornAgainFit.vdouble2d_t_assign(self, n, x)

    def resize(self, *args):
        return _libBornAgainFit.vdouble2d_t_resize(self, *args)

    def insert(self, *args):
        return _libBornAgainFit.vdouble2d_t_insert(self, *args)

    def reserve(self, n):
        return _libBornAgainFit.vdouble2d_t_reserve(self, n)

    def capacity(self):
        return _libBornAgainFit.vdouble2d_t_capacity(self)
    __swig_destroy__ = _libBornAgainFit.delete_vdouble2d_t
    __del__ = lambda self: None
vdouble2d_t_swigregister = _libBornAgainFit.vdouble2d_t_swigregister
vdouble2d_t_swigregister(vdouble2d_t)

class vector_integer_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_integer_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_integer_t, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libBornAgainFit.vector_integer_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libBornAgainFit.vector_integer_t___nonzero__(self)

    def __bool__(self):
        return _libBornAgainFit.vector_integer_t___bool__(self)

    def __len__(self):
        return _libBornAgainFit.vector_integer_t___len__(self)

    def __getslice__(self, i, j):
        return _libBornAgainFit.vector_integer_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libBornAgainFit.vector_integer_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libBornAgainFit.vector_integer_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libBornAgainFit.vector_integer_t___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libBornAgainFit.vector_integer_t___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libBornAgainFit.vector_integer_t___setitem__(self, *args)

    def pop(self):
        return _libBornAgainFit.vector_integer_t_pop(self)

    def append(self, x):
        return _libBornAgainFit.vector_integer_t_append(self, x)

    def empty(self):
        return _libBornAgainFit.vector_integer_t_empty(self)

    def size(self):
        return _libBornAgainFit.vector_integer_t_size(self)

    def swap(self, v):
        return _libBornAgainFit.vector_integer_t_swap(self, v)

    def begin(self):
        return _libBornAgainFit.vector_integer_t_begin(self)

    def end(self):
        return _libBornAgainFit.vector_integer_t_end(self)

    def rbegin(self):
        return _libBornAgainFit.vector_integer_t_rbegin(self)

    def rend(self):
        return _libBornAgainFit.vector_integer_t_rend(self)

    def clear(self):
        return _libBornAgainFit.vector_integer_t_clear(self)

    def get_allocator(self):
        return _libBornAgainFit.vector_integer_t_get_allocator(self)

    def pop_back(self):
        return _libBornAgainFit.vector_integer_t_pop_back(self)

    def erase(self, *args):
        return _libBornAgainFit.vector_integer_t_erase(self, *args)

    def __init__(self, *args):
        this = _libBornAgainFit.new_vector_integer_t(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _libBornAgainFit.vector_integer_t_push_back(self, x)

    def front(self):
        return _libBornAgainFit.vector_integer_t_front(self)

    def back(self):
        return _libBornAgainFit.vector_integer_t_back(self)

    def assign(self, n, x):
        return _libBornAgainFit.vector_integer_t_assign(self, n, x)

    def resize(self, *args):
        return _libBornAgainFit.vector_integer_t_resize(self, *args)

    def insert(self, *args):
        return _libBornAgainFit.vector_integer_t_insert(self, *args)

    def reserve(self, n):
        return _libBornAgainFit.vector_integer_t_reserve(self, n)

    def capacity(self):
        return _libBornAgainFit.vector_integer_t_capacity(self)
    __swig_destroy__ = _libBornAgainFit.delete_vector_integer_t
    __del__ = lambda self: None
vector_integer_t_swigregister = _libBornAgainFit.vector_integer_t_swigregister
vector_integer_t_swigregister(vector_integer_t)

class vector_longinteger_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_longinteger_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_longinteger_t, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libBornAgainFit.vector_longinteger_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libBornAgainFit.vector_longinteger_t___nonzero__(self)

    def __bool__(self):
        return _libBornAgainFit.vector_longinteger_t___bool__(self)

    def __len__(self):
        return _libBornAgainFit.vector_longinteger_t___len__(self)

    def __getslice__(self, i, j):
        return _libBornAgainFit.vector_longinteger_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libBornAgainFit.vector_longinteger_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libBornAgainFit.vector_longinteger_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libBornAgainFit.vector_longinteger_t___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libBornAgainFit.vector_longinteger_t___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libBornAgainFit.vector_longinteger_t___setitem__(self, *args)

    def pop(self):
        return _libBornAgainFit.vector_longinteger_t_pop(self)

    def append(self, x):
        return _libBornAgainFit.vector_longinteger_t_append(self, x)

    def empty(self):
        return _libBornAgainFit.vector_longinteger_t_empty(self)

    def size(self):
        return _libBornAgainFit.vector_longinteger_t_size(self)

    def swap(self, v):
        return _libBornAgainFit.vector_longinteger_t_swap(self, v)

    def begin(self):
        return _libBornAgainFit.vector_longinteger_t_begin(self)

    def end(self):
        return _libBornAgainFit.vector_longinteger_t_end(self)

    def rbegin(self):
        return _libBornAgainFit.vector_longinteger_t_rbegin(self)

    def rend(self):
        return _libBornAgainFit.vector_longinteger_t_rend(self)

    def clear(self):
        return _libBornAgainFit.vector_longinteger_t_clear(self)

    def get_allocator(self):
        return _libBornAgainFit.vector_longinteger_t_get_allocator(self)

    def pop_back(self):
        return _libBornAgainFit.vector_longinteger_t_pop_back(self)

    def erase(self, *args):
        return _libBornAgainFit.vector_longinteger_t_erase(self, *args)

    def __init__(self, *args):
        this = _libBornAgainFit.new_vector_longinteger_t(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _libBornAgainFit.vector_longinteger_t_push_back(self, x)

    def front(self):
        return _libBornAgainFit.vector_longinteger_t_front(self)

    def back(self):
        return _libBornAgainFit.vector_longinteger_t_back(self)

    def assign(self, n, x):
        return _libBornAgainFit.vector_longinteger_t_assign(self, n, x)

    def resize(self, *args):
        return _libBornAgainFit.vector_longinteger_t_resize(self, *args)

    def insert(self, *args):
        return _libBornAgainFit.vector_longinteger_t_insert(self, *args)

    def reserve(self, n):
        return _libBornAgainFit.vector_longinteger_t_reserve(self, n)

    def capacity(self):
        return _libBornAgainFit.vector_longinteger_t_capacity(self)
    __swig_destroy__ = _libBornAgainFit.delete_vector_longinteger_t
    __del__ = lambda self: None
vector_longinteger_t_swigregister = _libBornAgainFit.vector_longinteger_t_swigregister
vector_longinteger_t_swigregister(vector_longinteger_t)

class vector_complex_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_complex_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_complex_t, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libBornAgainFit.vector_complex_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libBornAgainFit.vector_complex_t___nonzero__(self)

    def __bool__(self):
        return _libBornAgainFit.vector_complex_t___bool__(self)

    def __len__(self):
        return _libBornAgainFit.vector_complex_t___len__(self)

    def __getslice__(self, i, j):
        return _libBornAgainFit.vector_complex_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libBornAgainFit.vector_complex_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libBornAgainFit.vector_complex_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libBornAgainFit.vector_complex_t___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libBornAgainFit.vector_complex_t___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libBornAgainFit.vector_complex_t___setitem__(self, *args)

    def pop(self):
        return _libBornAgainFit.vector_complex_t_pop(self)

    def append(self, x):
        return _libBornAgainFit.vector_complex_t_append(self, x)

    def empty(self):
        return _libBornAgainFit.vector_complex_t_empty(self)

    def size(self):
        return _libBornAgainFit.vector_complex_t_size(self)

    def swap(self, v):
        return _libBornAgainFit.vector_complex_t_swap(self, v)

    def begin(self):
        return _libBornAgainFit.vector_complex_t_begin(self)

    def end(self):
        return _libBornAgainFit.vector_complex_t_end(self)

    def rbegin(self):
        return _libBornAgainFit.vector_complex_t_rbegin(self)

    def rend(self):
        return _libBornAgainFit.vector_complex_t_rend(self)

    def clear(self):
        return _libBornAgainFit.vector_complex_t_clear(self)

    def get_allocator(self):
        return _libBornAgainFit.vector_complex_t_get_allocator(self)

    def pop_back(self):
        return _libBornAgainFit.vector_complex_t_pop_back(self)

    def erase(self, *args):
        return _libBornAgainFit.vector_complex_t_erase(self, *args)

    def __init__(self, *args):
        this = _libBornAgainFit.new_vector_complex_t(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _libBornAgainFit.vector_complex_t_push_back(self, x)

    def front(self):
        return _libBornAgainFit.vector_complex_t_front(self)

    def back(self):
        return _libBornAgainFit.vector_complex_t_back(self)

    def assign(self, n, x):
        return _libBornAgainFit.vector_complex_t_assign(self, n, x)

    def resize(self, *args):
        return _libBornAgainFit.vector_complex_t_resize(self, *args)

    def insert(self, *args):
        return _libBornAgainFit.vector_complex_t_insert(self, *args)

    def reserve(self, n):
        return _libBornAgainFit.vector_complex_t_reserve(self, n)

    def capacity(self):
        return _libBornAgainFit.vector_complex_t_capacity(self)
    __swig_destroy__ = _libBornAgainFit.delete_vector_complex_t
    __del__ = lambda self: None
vector_complex_t_swigregister = _libBornAgainFit.vector_complex_t_swigregister
vector_complex_t_swigregister(vector_complex_t)

class vector_string_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_string_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_string_t, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libBornAgainFit.vector_string_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libBornAgainFit.vector_string_t___nonzero__(self)

    def __bool__(self):
        return _libBornAgainFit.vector_string_t___bool__(self)

    def __len__(self):
        return _libBornAgainFit.vector_string_t___len__(self)

    def __getslice__(self, i, j):
        return _libBornAgainFit.vector_string_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libBornAgainFit.vector_string_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libBornAgainFit.vector_string_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libBornAgainFit.vector_string_t___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libBornAgainFit.vector_string_t___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libBornAgainFit.vector_string_t___setitem__(self, *args)

    def pop(self):
        return _libBornAgainFit.vector_string_t_pop(self)

    def append(self, x):
        return _libBornAgainFit.vector_string_t_append(self, x)

    def empty(self):
        return _libBornAgainFit.vector_string_t_empty(self)

    def size(self):
        return _libBornAgainFit.vector_string_t_size(self)

    def swap(self, v):
        return _libBornAgainFit.vector_string_t_swap(self, v)

    def begin(self):
        return _libBornAgainFit.vector_string_t_begin(self)

    def end(self):
        return _libBornAgainFit.vector_string_t_end(self)

    def rbegin(self):
        return _libBornAgainFit.vector_string_t_rbegin(self)

    def rend(self):
        return _libBornAgainFit.vector_string_t_rend(self)

    def clear(self):
        return _libBornAgainFit.vector_string_t_clear(self)

    def get_allocator(self):
        return _libBornAgainFit.vector_string_t_get_allocator(self)

    def pop_back(self):
        return _libBornAgainFit.vector_string_t_pop_back(self)

    def erase(self, *args):
        return _libBornAgainFit.vector_string_t_erase(self, *args)

    def __init__(self, *args):
        this = _libBornAgainFit.new_vector_string_t(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _libBornAgainFit.vector_string_t_push_back(self, x)

    def front(self):
        return _libBornAgainFit.vector_string_t_front(self)

    def back(self):
        return _libBornAgainFit.vector_string_t_back(self)

    def assign(self, n, x):
        return _libBornAgainFit.vector_string_t_assign(self, n, x)

    def resize(self, *args):
        return _libBornAgainFit.vector_string_t_resize(self, *args)

    def insert(self, *args):
        return _libBornAgainFit.vector_string_t_insert(self, *args)

    def reserve(self, n):
        return _libBornAgainFit.vector_string_t_reserve(self, n)

    def capacity(self):
        return _libBornAgainFit.vector_string_t_capacity(self)
    __swig_destroy__ = _libBornAgainFit.delete_vector_string_t
    __del__ = lambda self: None
vector_string_t_swigregister = _libBornAgainFit.vector_string_t_swigregister
vector_string_t_swigregister(vector_string_t)


_libBornAgainFit.GCCXML_SKIP_THIS_swigconstant(_libBornAgainFit)
GCCXML_SKIP_THIS = _libBornAgainFit.GCCXML_SKIP_THIS
class INamed(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, INamed, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, INamed, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libBornAgainFit.new_INamed(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainFit.delete_INamed
    __del__ = lambda self: None

    def getName(self):
        return _libBornAgainFit.INamed_getName(self)
INamed_swigregister = _libBornAgainFit.INamed_swigregister
INamed_swigregister(INamed)

class IObserver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IObserver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IObserver, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainFit.delete_IObserver
    __del__ = lambda self: None

    def notify(self, subject):
        return _libBornAgainFit.IObserver_notify(self, subject)

    def __init__(self):
        this = _libBornAgainFit.new_IObserver()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
IObserver_swigregister = _libBornAgainFit.IObserver_swigregister
IObserver_swigregister(IObserver)

class IObservable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IObservable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IObservable, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainFit.delete_IObservable
    __del__ = lambda self: None

    def attachObserver(self, obj):
        return _libBornAgainFit.IObservable_attachObserver(self, obj)

    def notifyObservers(self):
        return _libBornAgainFit.IObservable_notifyObservers(self)

    def __init__(self):
        this = _libBornAgainFit.new_IObservable()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
IObservable_swigregister = _libBornAgainFit.IObservable_swigregister
IObservable_swigregister(IObservable)

class IChiSquaredModule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IChiSquaredModule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IChiSquaredModule, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainFit.delete_IChiSquaredModule
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainFit.IChiSquaredModule_clone(self)

    def getSquaredFunction(self):
        return _libBornAgainFit.IChiSquaredModule_getSquaredFunction(self)

    def setChiSquaredFunction(self, *args):
        return _libBornAgainFit.IChiSquaredModule_setChiSquaredFunction(self, *args)

    def getIntensityNormalizer(self, *args):
        return _libBornAgainFit.IChiSquaredModule_getIntensityNormalizer(self, *args)

    def setIntensityNormalizer(self, data_normalizer):
        return _libBornAgainFit.IChiSquaredModule_setIntensityNormalizer(self, data_normalizer)

    def getIntensityFunction(self):
        return _libBornAgainFit.IChiSquaredModule_getIntensityFunction(self)

    def setIntensityFunction(self, intensity_function):
        return _libBornAgainFit.IChiSquaredModule_setIntensityFunction(self, intensity_function)

    def processFitElements(self, arg2, arg3):
        return _libBornAgainFit.IChiSquaredModule_processFitElements(self, arg2, arg3)
IChiSquaredModule_swigregister = _libBornAgainFit.IChiSquaredModule_swigregister
IChiSquaredModule_swigregister(IChiSquaredModule)

class IMinimizer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMinimizer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IMinimizer, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainFit.delete_IMinimizer
    __del__ = lambda self: None

    def minimize(self):
        return _libBornAgainFit.IMinimizer_minimize(self)

    def setParameter(self, index, par):
        return _libBornAgainFit.IMinimizer_setParameter(self, index, par)

    def setParameters(self, parameters):
        return _libBornAgainFit.IMinimizer_setParameters(self, parameters)

    def setChiSquaredFunction(self, fun_chi2, nparameters):
        return _libBornAgainFit.IMinimizer_setChiSquaredFunction(self, fun_chi2, nparameters)

    def setGradientFunction(self, fun_gradient, nparameters, ndatasize):
        return _libBornAgainFit.IMinimizer_setGradientFunction(self, fun_gradient, nparameters, ndatasize)

    def getNumberOfVariables(self):
        return _libBornAgainFit.IMinimizer_getNumberOfVariables(self)

    def getMinValue(self):
        return _libBornAgainFit.IMinimizer_getMinValue(self)

    def getValueOfVariableAtMinimum(self, index):
        return _libBornAgainFit.IMinimizer_getValueOfVariableAtMinimum(self, index)

    def getValueOfVariablesAtMinimum(self):
        return _libBornAgainFit.IMinimizer_getValueOfVariablesAtMinimum(self)

    def getErrorOfVariable(self, index):
        return _libBornAgainFit.IMinimizer_getErrorOfVariable(self, index)

    def getErrorOfVariables(self):
        return _libBornAgainFit.IMinimizer_getErrorOfVariables(self)

    def clear(self):
        return _libBornAgainFit.IMinimizer_clear(self)

    def printResults(self):
        return _libBornAgainFit.IMinimizer_printResults(self)

    def getNCalls(self):
        return _libBornAgainFit.IMinimizer_getNCalls(self)

    def getOptions(self, *args):
        return _libBornAgainFit.IMinimizer_getOptions(self, *args)

    def setOptions(self, options):
        return _libBornAgainFit.IMinimizer_setOptions(self, options)

    def setOptionString(self, options):
        return _libBornAgainFit.IMinimizer_setOptionString(self, options)

    def isGradientBasedAgorithm(self):
        return _libBornAgainFit.IMinimizer_isGradientBasedAgorithm(self)

    def getMinimizerName(self):
        return _libBornAgainFit.IMinimizer_getMinimizerName(self)

    def getAlgorithmName(self):
        return _libBornAgainFit.IMinimizer_getAlgorithmName(self)
IMinimizer_swigregister = _libBornAgainFit.IMinimizer_swigregister
IMinimizer_swigregister(IMinimizer)

class ChiSquaredModule(IChiSquaredModule):
    __swig_setmethods__ = {}
    for _s in [IChiSquaredModule]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChiSquaredModule, name, value)
    __swig_getmethods__ = {}
    for _s in [IChiSquaredModule]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChiSquaredModule, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libBornAgainFit.new_ChiSquaredModule(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainFit.delete_ChiSquaredModule
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainFit.ChiSquaredModule_clone(self)

    def processFitElements(self, first, last):
        return _libBornAgainFit.ChiSquaredModule_processFitElements(self, first, last)
ChiSquaredModule_swigregister = _libBornAgainFit.ChiSquaredModule_swigregister
ChiSquaredModule_swigregister(ChiSquaredModule)

class FitSuite(IObservable):
    __swig_setmethods__ = {}
    for _s in [IObservable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FitSuite, name, value)
    __swig_getmethods__ = {}
    for _s in [IObservable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FitSuite, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _libBornAgainFit.new_FitSuite()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def addSimulationAndRealData(self, *args):
        return _libBornAgainFit.FitSuite_addSimulationAndRealData(self, *args)

    def addFitParameter(self, *args):
        return _libBornAgainFit.FitSuite_addFitParameter(self, *args)

    def setChiSquaredModule(self, chi2_module):
        return _libBornAgainFit.FitSuite_setChiSquaredModule(self, chi2_module)

    def addFitStrategy(self, strategy):
        return _libBornAgainFit.FitSuite_addFitStrategy(self, strategy)

    def setMinimizer(self, *args):
        return _libBornAgainFit.FitSuite_setMinimizer(self, *args)

    def getMinimizer(self):
        return _libBornAgainFit.FitSuite_getMinimizer(self)

    def initPrint(self, print_every_nth):
        return _libBornAgainFit.FitSuite_initPrint(self, print_every_nth)

    def fixAllParameters(self):
        return _libBornAgainFit.FitSuite_fixAllParameters(self)

    def releaseAllParameters(self):
        return _libBornAgainFit.FitSuite_releaseAllParameters(self)

    def setParametersFixed(self, pars, is_fixed):
        return _libBornAgainFit.FitSuite_setParametersFixed(self, pars, is_fixed)

    def runFit(self):
        return _libBornAgainFit.FitSuite_runFit(self)

    def getNumberOfFitObjects(self):
        return _libBornAgainFit.FitSuite_getNumberOfFitObjects(self)

    def getRealData(self, i_item=0):
        return _libBornAgainFit.FitSuite_getRealData(self, i_item)

    def getSimulationData(self, i_item=0):
        return _libBornAgainFit.FitSuite_getSimulationData(self, i_item)

    def getChiSquaredMap(self, i_item=0):
        return _libBornAgainFit.FitSuite_getChiSquaredMap(self, i_item)

    def getFitObjects(self):
        return _libBornAgainFit.FitSuite_getFitObjects(self)

    def getFitParameters(self):
        return _libBornAgainFit.FitSuite_getFitParameters(self)

    def getFitStrategies(self):
        return _libBornAgainFit.FitSuite_getFitStrategies(self)

    def isLastIteration(self):
        return _libBornAgainFit.FitSuite_isLastIteration(self)

    def getNumberOfIterations(self):
        return _libBornAgainFit.FitSuite_getNumberOfIterations(self)

    def getCurrentStrategyIndex(self):
        return _libBornAgainFit.FitSuite_getCurrentStrategyIndex(self)

    def printResults(self):
        return _libBornAgainFit.FitSuite_printResults(self)

    def getChi2(self):
        return _libBornAgainFit.FitSuite_getChi2(self)

    def getOptions(self):
        return _libBornAgainFit.FitSuite_getOptions(self)

    def setOptions(self, fit_options):
        return _libBornAgainFit.FitSuite_setOptions(self, fit_options)
    __swig_destroy__ = _libBornAgainFit.delete_FitSuite
    __del__ = lambda self: None
FitSuite_swigregister = _libBornAgainFit.FitSuite_swigregister
FitSuite_swigregister(FitSuite)

class FitParameter(INamed, ):
    __swig_setmethods__ = {}
    for _s in [INamed, ]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FitParameter, name, value)
    __swig_getmethods__ = {}
    for _s in [INamed, ]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FitParameter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libBornAgainFit.new_FitParameter(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainFit.delete_FitParameter
    __del__ = lambda self: None

    def setValue(self, value):
        return _libBornAgainFit.FitParameter_setValue(self, value)

    def getValue(self):
        return _libBornAgainFit.FitParameter_getValue(self)

    def setStep(self, value):
        return _libBornAgainFit.FitParameter_setStep(self, value)

    def getStep(self):
        return _libBornAgainFit.FitParameter_getStep(self)

    def setError(self, value):
        return _libBornAgainFit.FitParameter_setError(self, value)

    def getError(self):
        return _libBornAgainFit.FitParameter_getError(self)
FitParameter_swigregister = _libBornAgainFit.FitParameter_swigregister
FitParameter_swigregister(FitParameter)

class FitSuiteParameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FitSuiteParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FitSuiteParameters, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _libBornAgainFit.new_FitSuiteParameters()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainFit.delete_FitSuiteParameters
    __del__ = lambda self: None

    def clear(self):
        return _libBornAgainFit.FitSuiteParameters_clear(self)

    def addParameter(self, name, value, step, attlim, error=0.0):
        return _libBornAgainFit.FitSuiteParameters_addParameter(self, name, value, step, attlim, error)

    def getParameter(self, *args):
        return _libBornAgainFit.FitSuiteParameters_getParameter(self, *args)

    def setValues(self, *args):
        return _libBornAgainFit.FitSuiteParameters_setValues(self, *args)

    def getValues(self):
        return _libBornAgainFit.FitSuiteParameters_getValues(self)

    def setErrors(self, pars_errors):
        return _libBornAgainFit.FitSuiteParameters_setErrors(self, pars_errors)

    def getErrors(self):
        return _libBornAgainFit.FitSuiteParameters_getErrors(self)

    def size(self):
        return _libBornAgainFit.FitSuiteParameters_size(self)

    def push_back(self, par):
        return _libBornAgainFit.FitSuiteParameters_push_back(self, par)

    def begin(self, *args):
        return _libBornAgainFit.FitSuiteParameters_begin(self, *args)

    def end(self, *args):
        return _libBornAgainFit.FitSuiteParameters_end(self, *args)

    def link_to_pool(self, pool):
        return _libBornAgainFit.FitSuiteParameters_link_to_pool(self, pool)

    def getNfreeParameters(self):
        return _libBornAgainFit.FitSuiteParameters_getNfreeParameters(self)

    def valuesAreDifferrent(self, pars_valuers, tolerance_factor=1.0):
        return _libBornAgainFit.FitSuiteParameters_valuesAreDifferrent(self, pars_valuers, tolerance_factor)

    def printParameters(self):
        return _libBornAgainFit.FitSuiteParameters_printParameters(self)

    def fixAll(self):
        return _libBornAgainFit.FitSuiteParameters_fixAll(self)

    def releaseAll(self):
        return _libBornAgainFit.FitSuiteParameters_releaseAll(self)

    def setParametersFixed(self, pars, is_fixed):
        return _libBornAgainFit.FitSuiteParameters_setParametersFixed(self, pars, is_fixed)
FitSuiteParameters_swigregister = _libBornAgainFit.FitSuiteParameters_swigregister
FitSuiteParameters_swigregister(FitSuiteParameters)

class FitSuiteObjects(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FitSuiteObjects, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FitSuiteObjects, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _libBornAgainFit.new_FitSuiteObjects()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainFit.delete_FitSuiteObjects
    __del__ = lambda self: None

    def add(self, simulation, real_data, weight=1.0):
        return _libBornAgainFit.FitSuiteObjects_add(self, simulation, real_data, weight)

    def getNumberOfFitObjects(self):
        return _libBornAgainFit.FitSuiteObjects_getNumberOfFitObjects(self)

    def getSizeOfDataSet(self):
        return _libBornAgainFit.FitSuiteObjects_getSizeOfDataSet(self)

    def setChiSquaredModule(self, chi2_module):
        return _libBornAgainFit.FitSuiteObjects_setChiSquaredModule(self, chi2_module)

    def getRealData(self, i_item=0):
        return _libBornAgainFit.FitSuiteObjects_getRealData(self, i_item)

    def getSimulationData(self, i_item=0):
        return _libBornAgainFit.FitSuiteObjects_getSimulationData(self, i_item)

    def getChiSquaredMap(self, i_item=0):
        return _libBornAgainFit.FitSuiteObjects_getChiSquaredMap(self, i_item)

    def runSimulations(self):
        return _libBornAgainFit.FitSuiteObjects_runSimulations(self)

    def getChiSquaredValue(self):
        return _libBornAgainFit.FitSuiteObjects_getChiSquaredValue(self)

    def getResidualValue(self, global_index):
        return _libBornAgainFit.FitSuiteObjects_getResidualValue(self, global_index)

    def addParametersToExternalPool(self, path, external_pool, copy_number=-1):
        return _libBornAgainFit.FitSuiteObjects_addParametersToExternalPool(self, path, external_pool, copy_number)

    def setNfreeParameters(self, nfree_parameters):
        return _libBornAgainFit.FitSuiteObjects_setNfreeParameters(self, nfree_parameters)

    def clear(self):
        return _libBornAgainFit.FitSuiteObjects_clear(self)
FitSuiteObjects_swigregister = _libBornAgainFit.FitSuiteObjects_swigregister
FitSuiteObjects_swigregister(FitSuiteObjects)

class MinimizerFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MinimizerFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MinimizerFactory, name)
    __repr__ = _swig_repr
    __swig_getmethods__["printCatalogue"] = lambda x: _libBornAgainFit.MinimizerFactory_printCatalogue
    if _newclass:
        printCatalogue = staticmethod(_libBornAgainFit.MinimizerFactory_printCatalogue)
    __swig_getmethods__["createMinimizer"] = lambda x: _libBornAgainFit.MinimizerFactory_createMinimizer
    if _newclass:
        createMinimizer = staticmethod(_libBornAgainFit.MinimizerFactory_createMinimizer)

    def __init__(self):
        this = _libBornAgainFit.new_MinimizerFactory()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainFit.delete_MinimizerFactory
    __del__ = lambda self: None
MinimizerFactory_swigregister = _libBornAgainFit.MinimizerFactory_swigregister
MinimizerFactory_swigregister(MinimizerFactory)

def MinimizerFactory_printCatalogue():
    return _libBornAgainFit.MinimizerFactory_printCatalogue()
MinimizerFactory_printCatalogue = _libBornAgainFit.MinimizerFactory_printCatalogue

def MinimizerFactory_createMinimizer(*args):
    return _libBornAgainFit.MinimizerFactory_createMinimizer(*args)
MinimizerFactory_createMinimizer = _libBornAgainFit.MinimizerFactory_createMinimizer


def StandardNormal(x):
    return _libBornAgainFit.StandardNormal(x)
StandardNormal = _libBornAgainFit.StandardNormal

def Gaussian(x, average, std_dev):
    return _libBornAgainFit.Gaussian(x, average, std_dev)
Gaussian = _libBornAgainFit.Gaussian

def IntegratedGaussian(x, average, std_dev):
    return _libBornAgainFit.IntegratedGaussian(x, average, std_dev)
IntegratedGaussian = _libBornAgainFit.IntegratedGaussian

def Si(x):
    return _libBornAgainFit.Si(x)
Si = _libBornAgainFit.Si

def sinc(*args):
    return _libBornAgainFit.sinc(*args)
sinc = _libBornAgainFit.sinc

def tanhc(z):
    return _libBornAgainFit.tanhc(z)
tanhc = _libBornAgainFit.tanhc

def Laue(z, N):
    return _libBornAgainFit.Laue(z, N)
Laue = _libBornAgainFit.Laue

def Bessel_J0(*args):
    return _libBornAgainFit.Bessel_J0(*args)
Bessel_J0 = _libBornAgainFit.Bessel_J0

def Bessel_J1(*args):
    return _libBornAgainFit.Bessel_J1(*args)
Bessel_J1 = _libBornAgainFit.Bessel_J1

def Bessel_J1c(*args):
    return _libBornAgainFit.Bessel_J1c(*args)
Bessel_J1c = _libBornAgainFit.Bessel_J1c

_libBornAgainFit.FORWARD_FFT_swigconstant(_libBornAgainFit)
FORWARD_FFT = _libBornAgainFit.FORWARD_FFT

_libBornAgainFit.BACKWARD_FFT_swigconstant(_libBornAgainFit)
BACKWARD_FFT = _libBornAgainFit.BACKWARD_FFT

def FastFourierTransform(*args):
    return _libBornAgainFit.FastFourierTransform(*args)
FastFourierTransform = _libBornAgainFit.FastFourierTransform

def ConvolveFFT(signal, resfunc):
    return _libBornAgainFit.ConvolveFFT(signal, resfunc)
ConvolveFFT = _libBornAgainFit.ConvolveFFT

def GenerateUniformRandom():
    return _libBornAgainFit.GenerateUniformRandom()
GenerateUniformRandom = _libBornAgainFit.GenerateUniformRandom

def GenerateStandardNormalRandom():
    return _libBornAgainFit.GenerateStandardNormalRandom()
GenerateStandardNormalRandom = _libBornAgainFit.GenerateStandardNormalRandom

def GenerateNormalRandom(average, std_dev):
    return _libBornAgainFit.GenerateNormalRandom(average, std_dev)
GenerateNormalRandom = _libBornAgainFit.GenerateNormalRandom

def isnan(x):
    return _libBornAgainFit.isnan(x)
isnan = _libBornAgainFit.isnan

def isinf(x):
    return _libBornAgainFit.isinf(x)
isinf = _libBornAgainFit.isinf
class MinimizerOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MinimizerOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MinimizerOptions, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _libBornAgainFit.new_MinimizerOptions()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainFit.delete_MinimizerOptions
    __del__ = lambda self: None

    def getTolerance(self):
        return _libBornAgainFit.MinimizerOptions_getTolerance(self)

    def setTolerance(self, tolerance):
        return _libBornAgainFit.MinimizerOptions_setTolerance(self, tolerance)

    def getPrecision(self):
        return _libBornAgainFit.MinimizerOptions_getPrecision(self)

    def setPrecision(self, precision):
        return _libBornAgainFit.MinimizerOptions_setPrecision(self, precision)

    def getMaxIterations(self):
        return _libBornAgainFit.MinimizerOptions_getMaxIterations(self)

    def setMaxIterations(self, max_iterations):
        return _libBornAgainFit.MinimizerOptions_setMaxIterations(self, max_iterations)

    def getMaxFunctionCalls(self):
        return _libBornAgainFit.MinimizerOptions_getMaxFunctionCalls(self)

    def setMaxFunctionCalls(self, max_function_calls):
        return _libBornAgainFit.MinimizerOptions_setMaxFunctionCalls(self, max_function_calls)

    def getPrintLevel(self):
        return _libBornAgainFit.MinimizerOptions_getPrintLevel(self)

    def setPrintLevel(self, print_level):
        return _libBornAgainFit.MinimizerOptions_setPrintLevel(self, print_level)

    def setValue(self, *args):
        return _libBornAgainFit.MinimizerOptions_setValue(self, *args)

    def getValue(self, *args):
        return _libBornAgainFit.MinimizerOptions_getValue(self, *args)

    def addValue(self, *args):
        return _libBornAgainFit.MinimizerOptions_addValue(self, *args)

    def getIntValue(self, name):
        return _libBornAgainFit.MinimizerOptions_getIntValue(self, name)

    def getRealValue(self, name):
        return _libBornAgainFit.MinimizerOptions_getRealValue(self, name)

    def getNamedValue(self, name):
        return _libBornAgainFit.MinimizerOptions_getNamedValue(self, name)

    def _print(self):
        return _libBornAgainFit.MinimizerOptions__print(self)
MinimizerOptions_swigregister = _libBornAgainFit.MinimizerOptions_swigregister
MinimizerOptions_swigregister(MinimizerOptions)

class ISquaredFunction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ISquaredFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ISquaredFunction, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainFit.delete_ISquaredFunction
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainFit.ISquaredFunction_clone(self)

    def calculateSquaredDifference(self, real_value, simulated_value):
        return _libBornAgainFit.ISquaredFunction_calculateSquaredDifference(self, real_value, simulated_value)

    def calculateSquaredError(self, real_value, simulated_value=0.0):
        return _libBornAgainFit.ISquaredFunction_calculateSquaredError(self, real_value, simulated_value)
ISquaredFunction_swigregister = _libBornAgainFit.ISquaredFunction_swigregister
ISquaredFunction_swigregister(ISquaredFunction)

class SquaredFunctionDefault(ISquaredFunction):
    __swig_setmethods__ = {}
    for _s in [ISquaredFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SquaredFunctionDefault, name, value)
    __swig_getmethods__ = {}
    for _s in [ISquaredFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SquaredFunctionDefault, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _libBornAgainFit.new_SquaredFunctionDefault()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainFit.delete_SquaredFunctionDefault
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainFit.SquaredFunctionDefault_clone(self)

    def calculateSquaredDifference(self, real_value, simulated_value):
        return _libBornAgainFit.SquaredFunctionDefault_calculateSquaredDifference(self, real_value, simulated_value)

    def calculateSquaredError(self, real_value, simulated_value=0):
        return _libBornAgainFit.SquaredFunctionDefault_calculateSquaredError(self, real_value, simulated_value)
SquaredFunctionDefault_swigregister = _libBornAgainFit.SquaredFunctionDefault_swigregister
SquaredFunctionDefault_swigregister(SquaredFunctionDefault)

class SquaredFunctionSimError(ISquaredFunction):
    __swig_setmethods__ = {}
    for _s in [ISquaredFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SquaredFunctionSimError, name, value)
    __swig_getmethods__ = {}
    for _s in [ISquaredFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SquaredFunctionSimError, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainFit.delete_SquaredFunctionSimError
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainFit.SquaredFunctionSimError_clone(self)

    def calculateSquaredDifference(self, real_value, simulated_value):
        return _libBornAgainFit.SquaredFunctionSimError_calculateSquaredDifference(self, real_value, simulated_value)

    def calculateSquaredError(self, real_value, simulated_value):
        return _libBornAgainFit.SquaredFunctionSimError_calculateSquaredError(self, real_value, simulated_value)
SquaredFunctionSimError_swigregister = _libBornAgainFit.SquaredFunctionSimError_swigregister
SquaredFunctionSimError_swigregister(SquaredFunctionSimError)

class SquaredFunctionMeanSquaredError(ISquaredFunction):
    __swig_setmethods__ = {}
    for _s in [ISquaredFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SquaredFunctionMeanSquaredError, name, value)
    __swig_getmethods__ = {}
    for _s in [ISquaredFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SquaredFunctionMeanSquaredError, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainFit.delete_SquaredFunctionMeanSquaredError
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainFit.SquaredFunctionMeanSquaredError_clone(self)

    def calculateSquaredDifference(self, real_value, simulated_value):
        return _libBornAgainFit.SquaredFunctionMeanSquaredError_calculateSquaredDifference(self, real_value, simulated_value)

    def calculateSquaredError(self, real_value, simulated_value):
        return _libBornAgainFit.SquaredFunctionMeanSquaredError_calculateSquaredError(self, real_value, simulated_value)
SquaredFunctionMeanSquaredError_swigregister = _libBornAgainFit.SquaredFunctionMeanSquaredError_swigregister
SquaredFunctionMeanSquaredError_swigregister(SquaredFunctionMeanSquaredError)

class SquaredFunctionSystematicError(ISquaredFunction):
    __swig_setmethods__ = {}
    for _s in [ISquaredFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SquaredFunctionSystematicError, name, value)
    __swig_getmethods__ = {}
    for _s in [ISquaredFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SquaredFunctionSystematicError, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainFit.delete_SquaredFunctionSystematicError
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainFit.SquaredFunctionSystematicError_clone(self)

    def calculateSquaredDifference(self, real_value, simulated_value):
        return _libBornAgainFit.SquaredFunctionSystematicError_calculateSquaredDifference(self, real_value, simulated_value)

    def calculateSquaredError(self, real_value, simulated_value):
        return _libBornAgainFit.SquaredFunctionSystematicError_calculateSquaredError(self, real_value, simulated_value)
SquaredFunctionSystematicError_swigregister = _libBornAgainFit.SquaredFunctionSystematicError_swigregister
SquaredFunctionSystematicError_swigregister(SquaredFunctionSystematicError)

class SquaredFunctionGaussianError(ISquaredFunction):
    __swig_setmethods__ = {}
    for _s in [ISquaredFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SquaredFunctionGaussianError, name, value)
    __swig_getmethods__ = {}
    for _s in [ISquaredFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SquaredFunctionGaussianError, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainFit.delete_SquaredFunctionGaussianError
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainFit.SquaredFunctionGaussianError_clone(self)

    def calculateSquaredDifference(self, real_value, simulated_value):
        return _libBornAgainFit.SquaredFunctionGaussianError_calculateSquaredDifference(self, real_value, simulated_value)

    def calculateSquaredError(self, arg2, arg3):
        return _libBornAgainFit.SquaredFunctionGaussianError_calculateSquaredError(self, arg2, arg3)
SquaredFunctionGaussianError_swigregister = _libBornAgainFit.SquaredFunctionGaussianError_swigregister
SquaredFunctionGaussianError_swigregister(SquaredFunctionGaussianError)

class IIntensityNormalizer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IIntensityNormalizer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IIntensityNormalizer, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainFit.delete_IIntensityNormalizer
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainFit.IIntensityNormalizer_clone(self)

    def createNormalizedData(self, data):
        return _libBornAgainFit.IIntensityNormalizer_createNormalizedData(self, data)

    def apply(self, data):
        return _libBornAgainFit.IIntensityNormalizer_apply(self, data)

    def setMaximumIntensity(self, arg2):
        return _libBornAgainFit.IIntensityNormalizer_setMaximumIntensity(self, arg2)
IIntensityNormalizer_swigregister = _libBornAgainFit.IIntensityNormalizer_swigregister
IIntensityNormalizer_swigregister(IIntensityNormalizer)

class IntensityNormalizer(IIntensityNormalizer):
    __swig_setmethods__ = {}
    for _s in [IIntensityNormalizer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntensityNormalizer, name, value)
    __swig_getmethods__ = {}
    for _s in [IIntensityNormalizer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntensityNormalizer, name)
    __repr__ = _swig_repr

    def __init__(self, scale=1.0, shift=0.0):
        this = _libBornAgainFit.new_IntensityNormalizer(scale, shift)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainFit.delete_IntensityNormalizer
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainFit.IntensityNormalizer_clone(self)

    def createNormalizedData(self, data):
        return _libBornAgainFit.IntensityNormalizer_createNormalizedData(self, data)

    def apply(self, data):
        return _libBornAgainFit.IntensityNormalizer_apply(self, data)

    def setMaximumIntensity(self, max_intensity):
        return _libBornAgainFit.IntensityNormalizer_setMaximumIntensity(self, max_intensity)
IntensityNormalizer_swigregister = _libBornAgainFit.IntensityNormalizer_swigregister
IntensityNormalizer_swigregister(IntensityNormalizer)

class IntensityScaleAndShiftNormalizer(IntensityNormalizer):
    __swig_setmethods__ = {}
    for _s in [IntensityNormalizer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntensityScaleAndShiftNormalizer, name, value)
    __swig_getmethods__ = {}
    for _s in [IntensityNormalizer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntensityScaleAndShiftNormalizer, name)
    __repr__ = _swig_repr

    def __init__(self, scale=1.0, shift=0.0):
        this = _libBornAgainFit.new_IntensityScaleAndShiftNormalizer(scale, shift)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainFit.delete_IntensityScaleAndShiftNormalizer
    __del__ = lambda self: None

    def setMaximumIntensity(self, max_intensity):
        return _libBornAgainFit.IntensityScaleAndShiftNormalizer_setMaximumIntensity(self, max_intensity)

    def clone(self):
        return _libBornAgainFit.IntensityScaleAndShiftNormalizer_clone(self)
IntensityScaleAndShiftNormalizer_swigregister = _libBornAgainFit.IntensityScaleAndShiftNormalizer_swigregister
IntensityScaleAndShiftNormalizer_swigregister(IntensityScaleAndShiftNormalizer)

class IFitStrategy(INamed):
    __swig_setmethods__ = {}
    for _s in [INamed]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IFitStrategy, name, value)
    __swig_getmethods__ = {}
    for _s in [INamed]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IFitStrategy, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clone(self):
        return _libBornAgainFit.IFitStrategy_clone(self)
    __swig_destroy__ = _libBornAgainFit.delete_IFitStrategy
    __del__ = lambda self: None

    def init(self, fit_suite):
        return _libBornAgainFit.IFitStrategy_init(self, fit_suite)

    def execute(self):
        return _libBornAgainFit.IFitStrategy_execute(self)
IFitStrategy_swigregister = _libBornAgainFit.IFitStrategy_swigregister
IFitStrategy_swigregister(IFitStrategy)

class FitStrategyDefault(IFitStrategy):
    __swig_setmethods__ = {}
    for _s in [IFitStrategy]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FitStrategyDefault, name, value)
    __swig_getmethods__ = {}
    for _s in [IFitStrategy]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FitStrategyDefault, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _libBornAgainFit.new_FitStrategyDefault()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def clone(self):
        return _libBornAgainFit.FitStrategyDefault_clone(self)

    def execute(self):
        return _libBornAgainFit.FitStrategyDefault_execute(self)
    __swig_destroy__ = _libBornAgainFit.delete_FitStrategyDefault
    __del__ = lambda self: None
FitStrategyDefault_swigregister = _libBornAgainFit.FitStrategyDefault_swigregister
FitStrategyDefault_swigregister(FitStrategyDefault)

class IIntensityFunction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IIntensityFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IIntensityFunction, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainFit.delete_IIntensityFunction
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainFit.IIntensityFunction_clone(self)

    def evaluate(self, value):
        return _libBornAgainFit.IIntensityFunction_evaluate(self, value)
IIntensityFunction_swigregister = _libBornAgainFit.IIntensityFunction_swigregister
IIntensityFunction_swigregister(IIntensityFunction)

class IntensityFunctionLog(IIntensityFunction):
    __swig_setmethods__ = {}
    for _s in [IIntensityFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntensityFunctionLog, name, value)
    __swig_getmethods__ = {}
    for _s in [IIntensityFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntensityFunctionLog, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainFit.delete_IntensityFunctionLog
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainFit.IntensityFunctionLog_clone(self)

    def evaluate(self, value):
        return _libBornAgainFit.IntensityFunctionLog_evaluate(self, value)

    def __init__(self):
        this = _libBornAgainFit.new_IntensityFunctionLog()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
IntensityFunctionLog_swigregister = _libBornAgainFit.IntensityFunctionLog_swigregister
IntensityFunctionLog_swigregister(IntensityFunctionLog)

class IntensityFunctionSqrt(IIntensityFunction):
    __swig_setmethods__ = {}
    for _s in [IIntensityFunction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntensityFunctionSqrt, name, value)
    __swig_getmethods__ = {}
    for _s in [IIntensityFunction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntensityFunctionSqrt, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainFit.delete_IntensityFunctionSqrt
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainFit.IntensityFunctionSqrt_clone(self)

    def evaluate(self, value):
        return _libBornAgainFit.IntensityFunctionSqrt_evaluate(self, value)

    def __init__(self):
        this = _libBornAgainFit.new_IntensityFunctionSqrt()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
IntensityFunctionSqrt_swigregister = _libBornAgainFit.IntensityFunctionSqrt_swigregister
IntensityFunctionSqrt_swigregister(IntensityFunctionSqrt)

class FitStrategyAdjustParameters(IFitStrategy):
    __swig_setmethods__ = {}
    for _s in [IFitStrategy]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FitStrategyAdjustParameters, name, value)
    __swig_getmethods__ = {}
    for _s in [IFitStrategy]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FitStrategyAdjustParameters, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libBornAgainFit.new_FitStrategyAdjustParameters(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainFit.delete_FitStrategyAdjustParameters
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainFit.FitStrategyAdjustParameters_clone(self)

    def execute(self):
        return _libBornAgainFit.FitStrategyAdjustParameters_execute(self)

    def fix_all(self):
        return _libBornAgainFit.FitStrategyAdjustParameters_fix_all(self)

    def release_all(self):
        return _libBornAgainFit.FitStrategyAdjustParameters_release_all(self)

    def fix(self, parname):
        return _libBornAgainFit.FitStrategyAdjustParameters_fix(self, parname)

    def release(self, parname):
        return _libBornAgainFit.FitStrategyAdjustParameters_release(self, parname)

    def setPreserveOriginalValues(self, preserve_values):
        return _libBornAgainFit.FitStrategyAdjustParameters_setPreserveOriginalValues(self, preserve_values)

    def clear(self):
        return _libBornAgainFit.FitStrategyAdjustParameters_clear(self)
FitStrategyAdjustParameters_swigregister = _libBornAgainFit.FitStrategyAdjustParameters_swigregister
FitStrategyAdjustParameters_swigregister(FitStrategyAdjustParameters)

class FitStrategyFixParameters(FitStrategyAdjustParameters):
    __swig_setmethods__ = {}
    for _s in [FitStrategyAdjustParameters]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FitStrategyFixParameters, name, value)
    __swig_getmethods__ = {}
    for _s in [FitStrategyAdjustParameters]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FitStrategyFixParameters, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libBornAgainFit.new_FitStrategyFixParameters(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainFit.delete_FitStrategyFixParameters
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainFit.FitStrategyFixParameters_clone(self)

    def clear(self):
        return _libBornAgainFit.FitStrategyFixParameters_clear(self)

    def setFixed(self, pars):
        return _libBornAgainFit.FitStrategyFixParameters_setFixed(self, pars)
FitStrategyFixParameters_swigregister = _libBornAgainFit.FitStrategyFixParameters_swigregister
FitStrategyFixParameters_swigregister(FitStrategyFixParameters)

class FitStrategyReleaseParameters(FitStrategyAdjustParameters):
    __swig_setmethods__ = {}
    for _s in [FitStrategyAdjustParameters]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FitStrategyReleaseParameters, name, value)
    __swig_getmethods__ = {}
    for _s in [FitStrategyAdjustParameters]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FitStrategyReleaseParameters, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libBornAgainFit.new_FitStrategyReleaseParameters(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainFit.delete_FitStrategyReleaseParameters
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainFit.FitStrategyReleaseParameters_clone(self)

    def clear(self):
        return _libBornAgainFit.FitStrategyReleaseParameters_clear(self)

    def setReleased(self, pars):
        return _libBornAgainFit.FitStrategyReleaseParameters_setReleased(self, pars)
FitStrategyReleaseParameters_swigregister = _libBornAgainFit.FitStrategyReleaseParameters_swigregister
FitStrategyReleaseParameters_swigregister(FitStrategyReleaseParameters)

class FitStrategyAdjustMinimizer(IFitStrategy):
    __swig_setmethods__ = {}
    for _s in [IFitStrategy]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FitStrategyAdjustMinimizer, name, value)
    __swig_getmethods__ = {}
    for _s in [IFitStrategy]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FitStrategyAdjustMinimizer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libBornAgainFit.new_FitStrategyAdjustMinimizer(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainFit.delete_FitStrategyAdjustMinimizer
    __del__ = lambda self: None

    def clone(self):
        return _libBornAgainFit.FitStrategyAdjustMinimizer_clone(self)

    def getMinimizer(self):
        return _libBornAgainFit.FitStrategyAdjustMinimizer_getMinimizer(self)

    def setMinimizer(self, *args):
        return _libBornAgainFit.FitStrategyAdjustMinimizer_setMinimizer(self, *args)

    def execute(self):
        return _libBornAgainFit.FitStrategyAdjustMinimizer_execute(self)

    def getMinimizerOptions(self):
        return _libBornAgainFit.FitStrategyAdjustMinimizer_getMinimizerOptions(self)
FitStrategyAdjustMinimizer_swigregister = _libBornAgainFit.FitStrategyAdjustMinimizer_swigregister
FitStrategyAdjustMinimizer_swigregister(FitStrategyAdjustMinimizer)

class IFitObserver(IObserver):
    __swig_setmethods__ = {}
    for _s in [IObserver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IFitObserver, name, value)
    __swig_getmethods__ = {}
    for _s in [IObserver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IFitObserver, name)
    __repr__ = _swig_repr

    def __init__(self, update_every_nth):
        this = _libBornAgainFit.new_IFitObserver(update_every_nth)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def notify(self, subject):
        return _libBornAgainFit.IFitObserver_notify(self, subject)

    def update(self, fit_suite):
        return _libBornAgainFit.IFitObserver_update(self, fit_suite)
    __swig_destroy__ = _libBornAgainFit.delete_IFitObserver
    __del__ = lambda self: None
IFitObserver_swigregister = _libBornAgainFit.IFitObserver_swigregister
IFitObserver_swigregister(IFitObserver)

# This file is compatible with both classic and new-style classes.



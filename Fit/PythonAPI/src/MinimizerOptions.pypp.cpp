// This file has been generated by Py++.

// BornAgain: simulate and fit scattering at grazing incidence 
//! @brief automatically generated boost::python code for PythonCoreAPI  

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter);
GCC_DIAG_OFF(missing-field-initializers);
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter);
GCC_DIAG_ON(missing-field-initializers);
#include "PythonFitList.h"
#include "MinimizerOptions.pypp.h"

namespace bp = boost::python;

void register_MinimizerOptions_class(){

    { //::MinimizerOptions
        typedef bp::class_< MinimizerOptions > MinimizerOptions_exposer_t;
        MinimizerOptions_exposer_t MinimizerOptions_exposer = MinimizerOptions_exposer_t( "MinimizerOptions", bp::init< >() );
        bp::scope MinimizerOptions_scope( MinimizerOptions_exposer );
        { //::MinimizerOptions::getMaxFunctionCalls
        
            typedef int ( ::MinimizerOptions::*getMaxFunctionCalls_function_type )(  ) const;
            
            MinimizerOptions_exposer.def( 
                "getMaxFunctionCalls"
                , getMaxFunctionCalls_function_type( &::MinimizerOptions::getMaxFunctionCalls ) );
        
        }
        { //::MinimizerOptions::getMaxIterations
        
            typedef int ( ::MinimizerOptions::*getMaxIterations_function_type )(  ) const;
            
            MinimizerOptions_exposer.def( 
                "getMaxIterations"
                , getMaxIterations_function_type( &::MinimizerOptions::getMaxIterations ) );
        
        }
        { //::MinimizerOptions::getPrecision
        
            typedef double ( ::MinimizerOptions::*getPrecision_function_type )(  ) const;
            
            MinimizerOptions_exposer.def( 
                "getPrecision"
                , getPrecision_function_type( &::MinimizerOptions::getPrecision ) );
        
        }
        { //::MinimizerOptions::getTolerance
        
            typedef double ( ::MinimizerOptions::*getTolerance_function_type )(  ) const;
            
            MinimizerOptions_exposer.def( 
                "getTolerance"
                , getTolerance_function_type( &::MinimizerOptions::getTolerance ) );
        
        }
        { //::MinimizerOptions::setMaxFunctionCalls
        
            typedef void ( ::MinimizerOptions::*setMaxFunctionCalls_function_type )( int ) ;
            
            MinimizerOptions_exposer.def( 
                "setMaxFunctionCalls"
                , setMaxFunctionCalls_function_type( &::MinimizerOptions::setMaxFunctionCalls )
                , ( bp::arg("max_function_calls") ) );
        
        }
        { //::MinimizerOptions::setMaxIterations
        
            typedef void ( ::MinimizerOptions::*setMaxIterations_function_type )( int ) ;
            
            MinimizerOptions_exposer.def( 
                "setMaxIterations"
                , setMaxIterations_function_type( &::MinimizerOptions::setMaxIterations )
                , ( bp::arg("max_iterations") ) );
        
        }
        { //::MinimizerOptions::setPrecision
        
            typedef void ( ::MinimizerOptions::*setPrecision_function_type )( double ) ;
            
            MinimizerOptions_exposer.def( 
                "setPrecision"
                , setPrecision_function_type( &::MinimizerOptions::setPrecision )
                , ( bp::arg("precision") ) );
        
        }
        { //::MinimizerOptions::setTolerance
        
            typedef void ( ::MinimizerOptions::*setTolerance_function_type )( double ) ;
            
            MinimizerOptions_exposer.def( 
                "setTolerance"
                , setTolerance_function_type( &::MinimizerOptions::setTolerance )
                , ( bp::arg("tolerance") ) );
        
        }
    }

}

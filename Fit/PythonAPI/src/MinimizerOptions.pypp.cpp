// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonFitList.h"
#include "MinimizerOptions.pypp.h"

namespace bp = boost::python;

void register_MinimizerOptions_class(){

    { //::MinimizerOptions
        typedef bp::class_< MinimizerOptions > MinimizerOptions_exposer_t;
        MinimizerOptions_exposer_t MinimizerOptions_exposer = MinimizerOptions_exposer_t( "MinimizerOptions", bp::init< >() );
        bp::scope MinimizerOptions_scope( MinimizerOptions_exposer );
        { //::MinimizerOptions::addValue
        
            typedef void ( ::MinimizerOptions::*addValue_function_type)( ::std::string const &,double ) ;
            
            MinimizerOptions_exposer.def( 
                "addValue"
                , addValue_function_type( &::MinimizerOptions::addValue )
                , ( bp::arg("name"), bp::arg("val") ) );
        
        }
        { //::MinimizerOptions::addValue
        
            typedef void ( ::MinimizerOptions::*addValue_function_type)( ::std::string const &,int ) ;
            
            MinimizerOptions_exposer.def( 
                "addValue"
                , addValue_function_type( &::MinimizerOptions::addValue )
                , ( bp::arg("name"), bp::arg("val") ) );
        
        }
        { //::MinimizerOptions::addValue
        
            typedef void ( ::MinimizerOptions::*addValue_function_type)( ::std::string const &,::std::string const & ) ;
            
            MinimizerOptions_exposer.def( 
                "addValue"
                , addValue_function_type( &::MinimizerOptions::addValue )
                , ( bp::arg("name"), bp::arg("val") ) );
        
        }
        { //::MinimizerOptions::getIntValue
        
            typedef int ( ::MinimizerOptions::*getIntValue_function_type)( ::std::string const & ) ;
            
            MinimizerOptions_exposer.def( 
                "getIntValue"
                , getIntValue_function_type( &::MinimizerOptions::getIntValue )
                , ( bp::arg("name") ) );
        
        }
        { //::MinimizerOptions::getMaxFunctionCalls
        
            typedef int ( ::MinimizerOptions::*getMaxFunctionCalls_function_type)(  ) const;
            
            MinimizerOptions_exposer.def( 
                "getMaxFunctionCalls"
                , getMaxFunctionCalls_function_type( &::MinimizerOptions::getMaxFunctionCalls ) );
        
        }
        { //::MinimizerOptions::getMaxIterations
        
            typedef int ( ::MinimizerOptions::*getMaxIterations_function_type)(  ) const;
            
            MinimizerOptions_exposer.def( 
                "getMaxIterations"
                , getMaxIterations_function_type( &::MinimizerOptions::getMaxIterations ) );
        
        }
        { //::MinimizerOptions::getNamedValue
        
            typedef ::std::string ( ::MinimizerOptions::*getNamedValue_function_type)( ::std::string const & ) ;
            
            MinimizerOptions_exposer.def( 
                "getNamedValue"
                , getNamedValue_function_type( &::MinimizerOptions::getNamedValue )
                , ( bp::arg("name") ) );
        
        }
        { //::MinimizerOptions::getPrecision
        
            typedef double ( ::MinimizerOptions::*getPrecision_function_type)(  ) const;
            
            MinimizerOptions_exposer.def( 
                "getPrecision"
                , getPrecision_function_type( &::MinimizerOptions::getPrecision ) );
        
        }
        { //::MinimizerOptions::getPrintLevel
        
            typedef int ( ::MinimizerOptions::*getPrintLevel_function_type)(  ) const;
            
            MinimizerOptions_exposer.def( 
                "getPrintLevel"
                , getPrintLevel_function_type( &::MinimizerOptions::getPrintLevel ) );
        
        }
        { //::MinimizerOptions::getRealValue
        
            typedef double ( ::MinimizerOptions::*getRealValue_function_type)( ::std::string const & ) ;
            
            MinimizerOptions_exposer.def( 
                "getRealValue"
                , getRealValue_function_type( &::MinimizerOptions::getRealValue )
                , ( bp::arg("name") ) );
        
        }
        { //::MinimizerOptions::getTolerance
        
            typedef double ( ::MinimizerOptions::*getTolerance_function_type)(  ) const;
            
            MinimizerOptions_exposer.def( 
                "getTolerance"
                , getTolerance_function_type( &::MinimizerOptions::getTolerance ) );
        
        }
        { //::MinimizerOptions::print
        
            typedef void ( ::MinimizerOptions::*print_function_type)(  ) const;
            
            MinimizerOptions_exposer.def( 
                "print"
                , print_function_type( &::MinimizerOptions::print ) );
        
        }
        { //::MinimizerOptions::setMaxFunctionCalls
        
            typedef void ( ::MinimizerOptions::*setMaxFunctionCalls_function_type)( int ) ;
            
            MinimizerOptions_exposer.def( 
                "setMaxFunctionCalls"
                , setMaxFunctionCalls_function_type( &::MinimizerOptions::setMaxFunctionCalls )
                , ( bp::arg("max_function_calls") ) );
        
        }
        { //::MinimizerOptions::setMaxIterations
        
            typedef void ( ::MinimizerOptions::*setMaxIterations_function_type)( int ) ;
            
            MinimizerOptions_exposer.def( 
                "setMaxIterations"
                , setMaxIterations_function_type( &::MinimizerOptions::setMaxIterations )
                , ( bp::arg("max_iterations") ) );
        
        }
        { //::MinimizerOptions::setPrecision
        
            typedef void ( ::MinimizerOptions::*setPrecision_function_type)( double ) ;
            
            MinimizerOptions_exposer.def( 
                "setPrecision"
                , setPrecision_function_type( &::MinimizerOptions::setPrecision )
                , ( bp::arg("precision") ) );
        
        }
        { //::MinimizerOptions::setPrintLevel
        
            typedef void ( ::MinimizerOptions::*setPrintLevel_function_type)( int ) ;
            
            MinimizerOptions_exposer.def( 
                "setPrintLevel"
                , setPrintLevel_function_type( &::MinimizerOptions::setPrintLevel )
                , ( bp::arg("print_level") ) );
        
        }
        { //::MinimizerOptions::setTolerance
        
            typedef void ( ::MinimizerOptions::*setTolerance_function_type)( double ) ;
            
            MinimizerOptions_exposer.def( 
                "setTolerance"
                , setTolerance_function_type( &::MinimizerOptions::setTolerance )
                , ( bp::arg("tolerance") ) );
        
        }
        { //::MinimizerOptions::setValue
        
            typedef void ( ::MinimizerOptions::*setValue_function_type)( ::std::string const &,double ) ;
            
            MinimizerOptions_exposer.def( 
                "setValue"
                , setValue_function_type( &::MinimizerOptions::setValue )
                , ( bp::arg("name"), bp::arg("val") ) );
        
        }
        { //::MinimizerOptions::setValue
        
            typedef void ( ::MinimizerOptions::*setValue_function_type)( ::std::string const &,int ) ;
            
            MinimizerOptions_exposer.def( 
                "setValue"
                , setValue_function_type( &::MinimizerOptions::setValue )
                , ( bp::arg("name"), bp::arg("val") ) );
        
        }
        { //::MinimizerOptions::setValue
        
            typedef void ( ::MinimizerOptions::*setValue_function_type)( ::std::string const &,::std::string const & ) ;
            
            MinimizerOptions_exposer.def( 
                "setValue"
                , setValue_function_type( &::MinimizerOptions::setValue )
                , ( bp::arg("name"), bp::arg("val") ) );
        
        }
    }

}

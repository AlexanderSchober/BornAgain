// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonFitList.h"
#include "IntensityFunctionSqrt.pypp.h"

namespace bp = boost::python;

struct IntensityFunctionSqrt_wrapper : IntensityFunctionSqrt, bp::wrapper< IntensityFunctionSqrt > {

    IntensityFunctionSqrt_wrapper(IntensityFunctionSqrt const & arg )
    : IntensityFunctionSqrt( arg )
      , bp::wrapper< IntensityFunctionSqrt >(){
        // copy constructor
        m_pyobj = 0;
    }

    IntensityFunctionSqrt_wrapper()
    : IntensityFunctionSqrt()
      , bp::wrapper< IntensityFunctionSqrt >(){
        // null constructor
        m_pyobj = 0;
    }

    virtual ::IntensityFunctionSqrt * clone(  ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone(  );
        else{
            return this->IntensityFunctionSqrt::clone(  );
        }
    }
    
    ::IntensityFunctionSqrt * default_clone(  ) const  {
        return IntensityFunctionSqrt::clone( );
    }

    virtual double evaluate( double value ) const  {
        if( bp::override func_evaluate = this->get_override( "evaluate" ) )
            return func_evaluate( value );
        else{
            return this->IntensityFunctionSqrt::evaluate( value );
        }
    }
    
    double default_evaluate( double value ) const  {
        return IntensityFunctionSqrt::evaluate( value );
    }

    PyObject* m_pyobj;

};

void register_IntensityFunctionSqrt_class(){

    { //::IntensityFunctionSqrt
        typedef bp::class_< IntensityFunctionSqrt_wrapper, bp::bases< IIntensityFunction >, std::auto_ptr< IntensityFunctionSqrt_wrapper > > IntensityFunctionSqrt_exposer_t;
        IntensityFunctionSqrt_exposer_t IntensityFunctionSqrt_exposer = IntensityFunctionSqrt_exposer_t( "IntensityFunctionSqrt", "" );
        bp::scope IntensityFunctionSqrt_scope( IntensityFunctionSqrt_exposer );
        { //::IntensityFunctionSqrt::clone
        
            typedef ::IntensityFunctionSqrt * ( ::IntensityFunctionSqrt::*clone_function_type)(  ) const;
            typedef ::IntensityFunctionSqrt * ( IntensityFunctionSqrt_wrapper::*default_clone_function_type)(  ) const;
            
            IntensityFunctionSqrt_exposer.def( 
                "clone"
                , clone_function_type(&::IntensityFunctionSqrt::clone)
                , default_clone_function_type(&IntensityFunctionSqrt_wrapper::default_clone)
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::IntensityFunctionSqrt::evaluate
        
            typedef double ( ::IntensityFunctionSqrt::*evaluate_function_type)( double ) const;
            typedef double ( IntensityFunctionSqrt_wrapper::*default_evaluate_function_type)( double ) const;
            
            IntensityFunctionSqrt_exposer.def( 
                "evaluate"
                , evaluate_function_type(&::IntensityFunctionSqrt::evaluate)
                , default_evaluate_function_type(&IntensityFunctionSqrt_wrapper::default_evaluate)
                , ( bp::arg("value") ) );
        
        }
    }

}

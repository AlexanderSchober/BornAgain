// This file has been generated by Py++.

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter);
GCC_DIAG_OFF(missing-field-initializers);
#include "boost/python.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
GCC_DIAG_ON(unused-parameter);
GCC_DIAG_ON(missing-field-initializers);
#include "AttLimits.h"
#include "IChiSquaredModule.h"
#include "IMinimizer.h"
#include "ChiSquaredModule.h"
#include "FitSuite.h"
#include "MinimizerFactory.h"
#include "PythonPlusplusFitHelper.h"
#include "MathFunctions.h"
#include "ISquaredFunction.h"
#include "IOutputDataNormalizer.h"
#include "ISquaredFunction.pypp.h"

namespace bp = boost::python;

struct ISquaredFunction_wrapper : ISquaredFunction, bp::wrapper< ISquaredFunction > {

    ISquaredFunction_wrapper()
    : ISquaredFunction()
      , bp::wrapper< ISquaredFunction >(){
        // null constructor
        
    }

    virtual double calculateSquaredDifference( double real_value, double simulated_value ) const {
        bp::override func_calculateSquaredDifference = this->get_override( "calculateSquaredDifference" );
        return func_calculateSquaredDifference( real_value, simulated_value );
    }

    virtual double calculateSquaredError( double real_value, double simulated_value=0.0 ) const  {
        if( bp::override func_calculateSquaredError = this->get_override( "calculateSquaredError" ) )
            return func_calculateSquaredError( real_value, simulated_value );
        else{
            return this->ISquaredFunction::calculateSquaredError( real_value, simulated_value );
        }
    }
    
    double default_calculateSquaredError( double real_value, double simulated_value=0.0 ) const  {
        return ISquaredFunction::calculateSquaredError( real_value, simulated_value );
    }

    virtual ::ISquaredFunction * clone(  ) const {
        bp::override func_clone = this->get_override( "clone" );
        return func_clone(  );
    }

};

void register_ISquaredFunction_class(){

    bp::class_< ISquaredFunction_wrapper, boost::noncopyable >( "ISquaredFunction" )    
        .def( 
            "calculateSquaredDifference"
            , bp::pure_virtual( (double ( ::ISquaredFunction::* )( double,double ) const)(&::ISquaredFunction::calculateSquaredDifference) )
            , ( bp::arg("real_value"), bp::arg("simulated_value") ) )    
        .def( 
            "calculateSquaredError"
            , (double ( ::ISquaredFunction::* )( double,double ) const)(&::ISquaredFunction::calculateSquaredError)
            , (double ( ISquaredFunction_wrapper::* )( double,double ) const)(&ISquaredFunction_wrapper::default_calculateSquaredError)
            , ( bp::arg("real_value"), bp::arg("simulated_value")=0.0 ) )    
        .def( 
            "clone"
            , bp::pure_virtual( (::ISquaredFunction * ( ::ISquaredFunction::* )(  ) const)(&::ISquaredFunction::clone) )
            , bp::return_value_policy< bp::manage_new_object >() );

}

// This file has been generated by Py++.

// BornAgain: simulate and fit scattering at grazing incidence
//! @brief Automatically generated boost::python code for PythonFitAPI

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonFitList.h"
#include "ISquaredFunction.pypp.h"

namespace bp = boost::python;

struct ISquaredFunction_wrapper : ISquaredFunction, bp::wrapper< ISquaredFunction > {

    ISquaredFunction_wrapper( )
    : ISquaredFunction( )
      , bp::wrapper< ISquaredFunction >(){
        // null constructor
    
    }

    virtual double calculateSquaredDifference( double real_value, double simulated_value ) const {
        bp::override func_calculateSquaredDifference = this->get_override( "calculateSquaredDifference" );
        return func_calculateSquaredDifference( real_value, simulated_value );
    }

    virtual double calculateSquaredError( double real_value, double simulated_value=0.0 ) const {
        bp::override func_calculateSquaredError = this->get_override( "calculateSquaredError" );
        return func_calculateSquaredError( real_value, simulated_value );
    }

    virtual ::ISquaredFunction * clone(  ) const {
        bp::override func_clone = this->get_override( "clone" );
        return func_clone(  );
    }

};

void register_ISquaredFunction_class(){

    { //::ISquaredFunction
        typedef bp::class_< ISquaredFunction_wrapper, boost::noncopyable > ISquaredFunction_exposer_t;
        ISquaredFunction_exposer_t ISquaredFunction_exposer = ISquaredFunction_exposer_t( "ISquaredFunction", bp::init< >() );
        bp::scope ISquaredFunction_scope( ISquaredFunction_exposer );
        { //::ISquaredFunction::calculateSquaredDifference
        
            typedef double ( ::ISquaredFunction::*calculateSquaredDifference_function_type )( double,double ) const;
            
            ISquaredFunction_exposer.def( 
                "calculateSquaredDifference"
                , bp::pure_virtual( calculateSquaredDifference_function_type(&::ISquaredFunction::calculateSquaredDifference) )
                , ( bp::arg("real_value"), bp::arg("simulated_value") ) );
        
        }
        { //::ISquaredFunction::calculateSquaredError
        
            typedef double ( ::ISquaredFunction::*calculateSquaredError_function_type )( double,double ) const;
            
            ISquaredFunction_exposer.def( 
                "calculateSquaredError"
                , bp::pure_virtual( calculateSquaredError_function_type(&::ISquaredFunction::calculateSquaredError) )
                , ( bp::arg("real_value"), bp::arg("simulated_value")=0.0 ) );
        
        }
        { //::ISquaredFunction::clone
        
            typedef ::ISquaredFunction * ( ::ISquaredFunction::*clone_function_type )(  ) const;
            
            ISquaredFunction_exposer.def( 
                "clone"
                , bp::pure_virtual( clone_function_type(&::ISquaredFunction::clone) )
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
    }

}

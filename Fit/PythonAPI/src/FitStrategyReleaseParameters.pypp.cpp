// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonFitList.h"
#include "FitStrategyReleaseParameters.pypp.h"

namespace bp = boost::python;

struct FitStrategyReleaseParameters_wrapper : FitStrategyReleaseParameters, bp::wrapper< FitStrategyReleaseParameters > {

    FitStrategyReleaseParameters_wrapper(FitStrategyReleaseParameters const & arg )
    : FitStrategyReleaseParameters( arg )
      , bp::wrapper< FitStrategyReleaseParameters >(){
        // copy constructor
        m_pyobj = 0;
    }

    FitStrategyReleaseParameters_wrapper( )
    : FitStrategyReleaseParameters( )
      , bp::wrapper< FitStrategyReleaseParameters >(){
        // null constructor
    m_pyobj = 0;
    }

    FitStrategyReleaseParameters_wrapper(::std::vector< std::string > const & pars )
    : FitStrategyReleaseParameters( boost::ref(pars) )
      , bp::wrapper< FitStrategyReleaseParameters >(){
        // constructor
    m_pyobj = 0;
    }

    virtual void clear(  ) {
        if( bp::override func_clear = this->get_override( "clear" ) )
            func_clear(  );
        else{
            this->FitStrategyReleaseParameters::clear(  );
        }
    }
    
    void default_clear(  ) {
        FitStrategyReleaseParameters::clear( );
    }

    virtual ::FitStrategyReleaseParameters * clone(  ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone(  );
        else{
            return this->FitStrategyReleaseParameters::clone(  );
        }
    }
    
    ::FitStrategyReleaseParameters * default_clone(  ) const  {
        return FitStrategyReleaseParameters::clone( );
    }

    virtual void setReleased( ::std::vector< std::string > const & pars ) {
        if( bp::override func_setReleased = this->get_override( "setReleased" ) )
            func_setReleased( boost::ref(pars) );
        else{
            this->FitStrategyReleaseParameters::setReleased( boost::ref(pars) );
        }
    }
    
    void default_setReleased( ::std::vector< std::string > const & pars ) {
        FitStrategyReleaseParameters::setReleased( boost::ref(pars) );
    }

    virtual void execute(  ) {
        if( bp::override func_execute = this->get_override( "execute" ) )
            func_execute(  );
        else{
            this->FitStrategyAdjustParameters::execute(  );
        }
    }
    
    void default_execute(  ) {
        FitStrategyAdjustParameters::execute( );
    }

    virtual void setPreserveOriginalValues( bool preserve_values ) {
        if( bp::override func_setPreserveOriginalValues = this->get_override( "setPreserveOriginalValues" ) )
            func_setPreserveOriginalValues( preserve_values );
        else{
            this->FitStrategyAdjustParameters::setPreserveOriginalValues( preserve_values );
        }
    }
    
    void default_setPreserveOriginalValues( bool preserve_values ) {
        FitStrategyAdjustParameters::setPreserveOriginalValues( preserve_values );
    }

    PyObject* m_pyobj;

};

void register_FitStrategyReleaseParameters_class(){

    { //::FitStrategyReleaseParameters
        typedef bp::class_< FitStrategyReleaseParameters_wrapper, bp::bases< FitStrategyAdjustParameters >, std::auto_ptr< FitStrategyReleaseParameters_wrapper > > FitStrategyReleaseParameters_exposer_t;
        FitStrategyReleaseParameters_exposer_t FitStrategyReleaseParameters_exposer = FitStrategyReleaseParameters_exposer_t( "FitStrategyReleaseParameters", "Strategy which releases certain fit parameters leaving other fixe.", bp::init< >() );
        bp::scope FitStrategyReleaseParameters_scope( FitStrategyReleaseParameters_exposer );
        FitStrategyReleaseParameters_exposer.def( bp::init< std::vector< std::string > const & >(( bp::arg("pars") )) );
        { //::FitStrategyReleaseParameters::clear
        
            typedef void ( ::FitStrategyReleaseParameters::*clear_function_type)(  ) ;
            typedef void ( FitStrategyReleaseParameters_wrapper::*default_clear_function_type)(  ) ;
            
            FitStrategyReleaseParameters_exposer.def( 
                "clear"
                , clear_function_type(&::FitStrategyReleaseParameters::clear)
                , default_clear_function_type(&FitStrategyReleaseParameters_wrapper::default_clear) );
        
        }
        { //::FitStrategyReleaseParameters::clone
        
            typedef ::FitStrategyReleaseParameters * ( ::FitStrategyReleaseParameters::*clone_function_type)(  ) const;
            typedef ::FitStrategyReleaseParameters * ( FitStrategyReleaseParameters_wrapper::*default_clone_function_type)(  ) const;
            
            FitStrategyReleaseParameters_exposer.def( 
                "clone"
                , clone_function_type(&::FitStrategyReleaseParameters::clone)
                , default_clone_function_type(&FitStrategyReleaseParameters_wrapper::default_clone)
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::FitStrategyReleaseParameters::setReleased
        
            typedef void ( ::FitStrategyReleaseParameters::*setReleased_function_type)( ::std::vector< std::string > const & ) ;
            typedef void ( FitStrategyReleaseParameters_wrapper::*default_setReleased_function_type)( ::std::vector< std::string > const & ) ;
            
            FitStrategyReleaseParameters_exposer.def( 
                "setReleased"
                , setReleased_function_type(&::FitStrategyReleaseParameters::setReleased)
                , default_setReleased_function_type(&FitStrategyReleaseParameters_wrapper::default_setReleased)
                , ( bp::arg("pars") ) );
        
        }
        { //::FitStrategyAdjustParameters::execute
        
            typedef void ( ::FitStrategyAdjustParameters::*execute_function_type)(  ) ;
            typedef void ( FitStrategyReleaseParameters_wrapper::*default_execute_function_type)(  ) ;
            
            FitStrategyReleaseParameters_exposer.def( 
                "execute"
                , execute_function_type(&::FitStrategyAdjustParameters::execute)
                , default_execute_function_type(&FitStrategyReleaseParameters_wrapper::default_execute) );
        
        }
        { //::FitStrategyAdjustParameters::fix
        
            typedef ::FitStrategyAdjustParameters & ( ::FitStrategyAdjustParameters::*fix_function_type)( ::std::string ) ;
            
            FitStrategyReleaseParameters_exposer.def( 
                "fix"
                , fix_function_type(&::FitStrategyAdjustParameters::fix)
                , ( bp::arg("parname") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::FitStrategyAdjustParameters::fix_all
        
            typedef ::FitStrategyAdjustParameters & ( ::FitStrategyAdjustParameters::*fix_all_function_type)(  ) ;
            
            FitStrategyReleaseParameters_exposer.def( 
                "fix_all"
                , fix_all_function_type(&::FitStrategyAdjustParameters::fix_all)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::FitStrategyAdjustParameters::release
        
            typedef ::FitStrategyAdjustParameters & ( ::FitStrategyAdjustParameters::*release_function_type)( ::std::string ) ;
            
            FitStrategyReleaseParameters_exposer.def( 
                "release"
                , release_function_type(&::FitStrategyAdjustParameters::release)
                , ( bp::arg("parname") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::FitStrategyAdjustParameters::release_all
        
            typedef ::FitStrategyAdjustParameters & ( ::FitStrategyAdjustParameters::*release_all_function_type)(  ) ;
            
            FitStrategyReleaseParameters_exposer.def( 
                "release_all"
                , release_all_function_type(&::FitStrategyAdjustParameters::release_all)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::FitStrategyAdjustParameters::setPreserveOriginalValues
        
            typedef void ( ::FitStrategyAdjustParameters::*setPreserveOriginalValues_function_type)( bool ) ;
            typedef void ( FitStrategyReleaseParameters_wrapper::*default_setPreserveOriginalValues_function_type)( bool ) ;
            
            FitStrategyReleaseParameters_exposer.def( 
                "setPreserveOriginalValues"
                , setPreserveOriginalValues_function_type(&::FitStrategyAdjustParameters::setPreserveOriginalValues)
                , default_setPreserveOriginalValues_function_type(&FitStrategyReleaseParameters_wrapper::default_setPreserveOriginalValues)
                , ( bp::arg("preserve_values") ) );
        
        }
    }

}

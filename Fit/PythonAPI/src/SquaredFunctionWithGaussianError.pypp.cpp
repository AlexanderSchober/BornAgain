// This file has been generated by Py++.

// BornAgain: simulate and fit scattering at grazing incidence 
//! @brief automatically generated boost::python code for PythonCoreAPI  

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter);
GCC_DIAG_OFF(missing-field-initializers);
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter);
GCC_DIAG_ON(missing-field-initializers);
#include "PythonFitList.h"
#include "SquaredFunctionWithGaussianError.pypp.h"

namespace bp = boost::python;

struct SquaredFunctionWithGaussianError_wrapper : SquaredFunctionWithGaussianError, bp::wrapper< SquaredFunctionWithGaussianError > {

    SquaredFunctionWithGaussianError_wrapper(SquaredFunctionWithGaussianError const & arg )
    : SquaredFunctionWithGaussianError( arg )
      , bp::wrapper< SquaredFunctionWithGaussianError >(){
        // copy constructor
        
    }

    SquaredFunctionWithGaussianError_wrapper(double sigma=1.00000000000000002081668171172168513294309377670288085938e-2 )
    : SquaredFunctionWithGaussianError( sigma )
      , bp::wrapper< SquaredFunctionWithGaussianError >(){
        // constructor
    
    }

    virtual double calculateSquaredDifference( double real_value, double simulated_value ) const  {
        if( bp::override func_calculateSquaredDifference = this->get_override( "calculateSquaredDifference" ) )
            return func_calculateSquaredDifference( real_value, simulated_value );
        else
            return this->SquaredFunctionWithGaussianError::calculateSquaredDifference( real_value, simulated_value );
    }
    
    
    double default_calculateSquaredDifference( double real_value, double simulated_value ) const  {
        return SquaredFunctionWithGaussianError::calculateSquaredDifference( real_value, simulated_value );
    }

    virtual double calculateSquaredError( double arg0, double arg1 ) const  {
        if( bp::override func_calculateSquaredError = this->get_override( "calculateSquaredError" ) )
            return func_calculateSquaredError( arg0, arg1 );
        else
            return this->SquaredFunctionWithGaussianError::calculateSquaredError( arg0, arg1 );
    }
    
    
    double default_calculateSquaredError( double arg0, double arg1 ) const  {
        return SquaredFunctionWithGaussianError::calculateSquaredError( arg0, arg1 );
    }

    virtual ::SquaredFunctionWithGaussianError * clone(  ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone(  );
        else
            return this->SquaredFunctionWithGaussianError::clone(  );
    }
    
    
    ::SquaredFunctionWithGaussianError * default_clone(  ) const  {
        return SquaredFunctionWithGaussianError::clone( );
    }

};

void register_SquaredFunctionWithGaussianError_class(){

    { //::SquaredFunctionWithGaussianError
        typedef bp::class_< SquaredFunctionWithGaussianError_wrapper, bp::bases< ISquaredFunction > > SquaredFunctionWithGaussianError_exposer_t;
        SquaredFunctionWithGaussianError_exposer_t SquaredFunctionWithGaussianError_exposer = SquaredFunctionWithGaussianError_exposer_t( "SquaredFunctionWithGaussianError", bp::init< bp::optional< double > >(( bp::arg("sigma")=1.00000000000000002081668171172168513294309377670288085938e-2 )) );
        bp::scope SquaredFunctionWithGaussianError_scope( SquaredFunctionWithGaussianError_exposer );
        { //::SquaredFunctionWithGaussianError::calculateSquaredDifference
        
            typedef double ( ::SquaredFunctionWithGaussianError::*calculateSquaredDifference_function_type )( double,double ) const;
            typedef double ( SquaredFunctionWithGaussianError_wrapper::*default_calculateSquaredDifference_function_type )( double,double ) const;
            
            SquaredFunctionWithGaussianError_exposer.def( 
                "calculateSquaredDifference"
                , calculateSquaredDifference_function_type(&::SquaredFunctionWithGaussianError::calculateSquaredDifference)
                , default_calculateSquaredDifference_function_type(&SquaredFunctionWithGaussianError_wrapper::default_calculateSquaredDifference)
                , ( bp::arg("real_value"), bp::arg("simulated_value") ) );
        
        }
        { //::SquaredFunctionWithGaussianError::calculateSquaredError
        
            typedef double ( ::SquaredFunctionWithGaussianError::*calculateSquaredError_function_type )( double,double ) const;
            typedef double ( SquaredFunctionWithGaussianError_wrapper::*default_calculateSquaredError_function_type )( double,double ) const;
            
            SquaredFunctionWithGaussianError_exposer.def( 
                "calculateSquaredError"
                , calculateSquaredError_function_type(&::SquaredFunctionWithGaussianError::calculateSquaredError)
                , default_calculateSquaredError_function_type(&SquaredFunctionWithGaussianError_wrapper::default_calculateSquaredError)
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::SquaredFunctionWithGaussianError::clone
        
            typedef ::SquaredFunctionWithGaussianError * ( ::SquaredFunctionWithGaussianError::*clone_function_type )(  ) const;
            typedef ::SquaredFunctionWithGaussianError * ( SquaredFunctionWithGaussianError_wrapper::*default_clone_function_type )(  ) const;
            
            SquaredFunctionWithGaussianError_exposer.def( 
                "clone"
                , clone_function_type(&::SquaredFunctionWithGaussianError::clone)
                , default_clone_function_type(&SquaredFunctionWithGaussianError_wrapper::default_clone)
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
    }

}

// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonFitList.h"
#include "FitOptions.pypp.h"

namespace bp = boost::python;

void register_FitOptions_class(){

    { //::FitOptions
        typedef bp::class_< FitOptions > FitOptions_exposer_t;
        FitOptions_exposer_t FitOptions_exposer = FitOptions_exposer_t( "FitOptions", "General fitting options.", bp::init< >() );
        bp::scope FitOptions_scope( FitOptions_exposer );
        { //::FitOptions::getDerivEpsilon
        
            typedef double ( ::FitOptions::*getDerivEpsilon_function_type)(  ) const;
            
            FitOptions_exposer.def( 
                "getDerivEpsilon"
                , getDerivEpsilon_function_type( &::FitOptions::getDerivEpsilon ) );
        
        }
        { //::FitOptions::getStepFactor
        
            typedef double ( ::FitOptions::*getStepFactor_function_type)(  ) const;
            
            FitOptions_exposer.def( 
                "getStepFactor"
                , getStepFactor_function_type( &::FitOptions::getStepFactor ) );
        
        }
        { //::FitOptions::setDerivEpsilon
        
            typedef void ( ::FitOptions::*setDerivEpsilon_function_type)( double ) ;
            
            FitOptions_exposer.def( 
                "setDerivEpsilon"
                , setDerivEpsilon_function_type( &::FitOptions::setDerivEpsilon )
                , ( bp::arg("deriv_epsilon") ) );
        
        }
        { //::FitOptions::setStepFactor
        
            typedef void ( ::FitOptions::*setStepFactor_function_type)( double ) ;
            
            FitOptions_exposer.def( 
                "setStepFactor"
                , setStepFactor_function_type( &::FitOptions::setStepFactor )
                , ( bp::arg("step_factor") ) );
        
        }
    }

}

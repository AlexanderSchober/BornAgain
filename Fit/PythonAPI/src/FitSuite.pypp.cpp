// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonFitList.h"
#include "FitSuite.pypp.h"

namespace bp = boost::python;

struct FitSuite_wrapper : FitSuite, bp::wrapper< FitSuite > {

    FitSuite_wrapper( )
    : FitSuite( )
      , bp::wrapper< FitSuite >(){
        // null constructor
    
    }

    virtual void link_fit_parameters(  ) {
        if( bp::override func_link_fit_parameters = this->get_override( "link_fit_parameters" ) )
            func_link_fit_parameters(  );
        else{
            this->FitSuite::link_fit_parameters(  );
        }
    }
    
    void default_link_fit_parameters(  ) {
        FitSuite::link_fit_parameters( );
    }

    virtual void minimize(  ) {
        if( bp::override func_minimize = this->get_override( "minimize" ) )
            func_minimize(  );
        else{
            this->FitSuite::minimize(  );
        }
    }
    
    void default_minimize(  ) {
        FitSuite::minimize( );
    }

    virtual void runFit(  ) {
        if( bp::override func_runFit = this->get_override( "runFit" ) )
            func_runFit(  );
        else{
            this->FitSuite::runFit(  );
        }
    }
    
    void default_runFit(  ) {
        FitSuite::runFit( );
    }

    virtual void attachObserver( ::boost::shared_ptr< IObserver > obj ) {
        if( bp::override func_attachObserver = this->get_override( "attachObserver" ) )
            func_attachObserver( obj );
        else{
            this->IObservable::attachObserver( obj );
        }
    }
    
    void default_attachObserver( ::boost::shared_ptr< IObserver > obj ) {
        IObservable::attachObserver( obj );
    }

    virtual void notifyObservers(  ) {
        if( bp::override func_notifyObservers = this->get_override( "notifyObservers" ) )
            func_notifyObservers(  );
        else{
            this->IObservable::notifyObservers(  );
        }
    }
    
    void default_notifyObservers(  ) {
        IObservable::notifyObservers( );
    }

};

void register_FitSuite_class(){

    { //::FitSuite
        typedef bp::class_< FitSuite_wrapper, bp::bases< IObservable >, boost::noncopyable > FitSuite_exposer_t;
        FitSuite_exposer_t FitSuite_exposer = FitSuite_exposer_t( "FitSuite", "Main class to perform fittin.", bp::no_init );
        bp::scope FitSuite_scope( FitSuite_exposer );
        FitSuite_exposer.def( bp::init< >() );
        { //::FitSuite::addFitParameter
        
            typedef void ( ::FitSuite::*addFitParameter_function_type)( ::std::string const &,double,double,::AttLimits const &,double ) ;
            
            FitSuite_exposer.def( 
                "addFitParameter"
                , addFitParameter_function_type( &::FitSuite::addFitParameter )
                , ( bp::arg("name"), bp::arg("value"), bp::arg("step"), bp::arg("attlim")=AttLimits::limitless( ), bp::arg("error")=0.0 )
                , "Adds fit parameter." );
        
        }
        { //::FitSuite::addFitParameter
        
            typedef void ( ::FitSuite::*addFitParameter_function_type)( ::std::string const &,double,::AttLimits const &,double ) ;
            
            FitSuite_exposer.def( 
                "addFitParameter"
                , addFitParameter_function_type( &::FitSuite::addFitParameter )
                , ( bp::arg("name"), bp::arg("value"), bp::arg("attlim")=AttLimits::limitless( ), bp::arg("error")=0.0 )
                , "Adds fit parameter." );
        
        }
        { //::FitSuite::addFitStrategy
        
            typedef void ( ::FitSuite::*addFitStrategy_function_type)( ::IFitStrategy const & ) ;
            
            FitSuite_exposer.def( 
                "addFitStrategy"
                , addFitStrategy_function_type( &::FitSuite::addFitStrategy )
                , ( bp::arg("strategy") )
                , "Adds fit strategy." );
        
        }
        { //::FitSuite::addSimulationAndRealData
        
            typedef void ( ::FitSuite::*addSimulationAndRealData_function_type)( ::Simulation const &,::OutputData< double > const &,::IChiSquaredModule const & ) ;
            
            FitSuite_exposer.def( 
                "addSimulationAndRealData"
                , addSimulationAndRealData_function_type( &::FitSuite::addSimulationAndRealData )
                , ( bp::arg("simulation"), bp::arg("real_data"), bp::arg("chi2_module")=ChiSquaredModule() ) );
        
        }
        { //::FitSuite::clear
        
            typedef void ( ::FitSuite::*clear_function_type)(  ) ;
            
            FitSuite_exposer.def( 
                "clear"
                , clear_function_type( &::FitSuite::clear )
                , "clear all and prepare for the next fit." );
        
        }
        { //::FitSuite::fixAllParameters
        
            typedef void ( ::FitSuite::*fixAllParameters_function_type)(  ) ;
            
            FitSuite_exposer.def( 
                "fixAllParameters"
                , fixAllParameters_function_type( &::FitSuite::fixAllParameters )
                , "Set all parameters to fixed." );
        
        }
        { //::FitSuite::getAttributes
        
            typedef ::AttFitting & ( ::FitSuite::*getAttributes_function_type)(  ) ;
            
            FitSuite_exposer.def( 
                "getAttributes"
                , getAttributes_function_type( &::FitSuite::getAttributes )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "set print level." );
        
        }
        { //::FitSuite::getFitObjects
        
            typedef ::FitSuiteObjects * ( ::FitSuite::*getFitObjects_function_type)(  ) ;
            
            FitSuite_exposer.def( 
                "getFitObjects"
                , getFitObjects_function_type( &::FitSuite::getFitObjects )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "Returns reference to the kit with data." );
        
        }
        { //::FitSuite::getFitParameter
        
            typedef ::FitParameter * ( ::FitSuite::*getFitParameter_function_type)( ::std::string const & ) ;
            
            FitSuite_exposer.def( 
                "getFitParameter"
                , getFitParameter_function_type( &::FitSuite::getFitParameter )
                , ( bp::arg("name") )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "Returns fit parameter with given name." );
        
        }
        { //::FitSuite::getFitParameters
        
            typedef ::FitSuiteParameters * ( ::FitSuite::*getFitParameters_function_type)(  ) ;
            
            FitSuite_exposer.def( 
                "getFitParameters"
                , getFitParameters_function_type( &::FitSuite::getFitParameters )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "Returns reference to fit parameters." );
        
        }
        { //::FitSuite::getFitStrategies
        
            typedef ::FitSuiteStrategies * ( ::FitSuite::*getFitStrategies_function_type)(  ) ;
            
            FitSuite_exposer.def( 
                "getFitStrategies"
                , getFitStrategies_function_type( &::FitSuite::getFitStrategies )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "Returns reference to fit parameters." );
        
        }
        { //::FitSuite::getMinimizer
        
            typedef ::IMinimizer * ( ::FitSuite::*getMinimizer_function_type)(  ) ;
            
            FitSuite_exposer.def( 
                "getMinimizer"
                , getMinimizer_function_type( &::FitSuite::getMinimizer )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "Sets minimizer." );
        
        }
        { //::FitSuite::getNCalls
        
            typedef ::std::size_t ( ::FitSuite::*getNCalls_function_type)(  ) const;
            
            FitSuite_exposer.def( 
                "getNCalls"
                , getNCalls_function_type( &::FitSuite::getNCalls )
                , "Returns current number of minimization function calls." );
        
        }
        { //::FitSuite::getNStrategy
        
            typedef ::std::size_t ( ::FitSuite::*getNStrategy_function_type)(  ) const;
            
            FitSuite_exposer.def( 
                "getNStrategy"
                , getNStrategy_function_type( &::FitSuite::getNStrategy )
                , "Returns the number of current strategy." );
        
        }
        { //::FitSuite::getRunTime
        
            typedef double ( ::FitSuite::*getRunTime_function_type)(  ) const;
            
            FitSuite_exposer.def( 
                "getRunTime"
                , getRunTime_function_type( &::FitSuite::getRunTime )
                , "Returns total wall time in seconds which was spend for run fit." );
        
        }
        { //::FitSuite::initPrint
        
            typedef void ( ::FitSuite::*initPrint_function_type)( int ) ;
            
            FitSuite_exposer.def( 
                "initPrint"
                , initPrint_function_type( &::FitSuite::initPrint )
                , ( bp::arg("print_every_nth") )
                , "set print level." );
        
        }
        { //::FitSuite::isLastIteration
        
            typedef bool ( ::FitSuite::*isLastIteration_function_type)(  ) const;
            
            FitSuite_exposer.def( 
                "isLastIteration"
                , isLastIteration_function_type( &::FitSuite::isLastIteration )
                , "if the last iteration is done (used by observers to print summary)." );
        
        }
        { //::FitSuite::link_fit_parameters
        
            typedef void ( ::FitSuite::*link_fit_parameters_function_type)(  ) ;
            typedef void ( FitSuite_wrapper::*default_link_fit_parameters_function_type)(  ) ;
            
            FitSuite_exposer.def( 
                "link_fit_parameters"
                , link_fit_parameters_function_type(&::FitSuite::link_fit_parameters)
                , default_link_fit_parameters_function_type(&FitSuite_wrapper::default_link_fit_parameters) );
        
        }
        { //::FitSuite::minimize
        
            typedef void ( ::FitSuite::*minimize_function_type)(  ) ;
            typedef void ( FitSuite_wrapper::*default_minimize_function_type)(  ) ;
            
            FitSuite_exposer.def( 
                "minimize"
                , minimize_function_type(&::FitSuite::minimize)
                , default_minimize_function_type(&FitSuite_wrapper::default_minimize) );
        
        }
        { //::FitSuite::printResults
        
            typedef void ( ::FitSuite::*printResults_function_type)(  ) const;
            
            FitSuite_exposer.def( 
                "printResults"
                , printResults_function_type( &::FitSuite::printResults )
                , "Prints results of the screen." );
        
        }
        { //::FitSuite::releaseAllParameters
        
            typedef void ( ::FitSuite::*releaseAllParameters_function_type)(  ) ;
            
            FitSuite_exposer.def( 
                "releaseAllParameters"
                , releaseAllParameters_function_type( &::FitSuite::releaseAllParameters )
                , "Set all parameters to released." );
        
        }
        { //::FitSuite::runFit
        
            typedef void ( ::FitSuite::*runFit_function_type)(  ) ;
            typedef void ( FitSuite_wrapper::*default_runFit_function_type)(  ) ;
            
            FitSuite_exposer.def( 
                "runFit"
                , runFit_function_type(&::FitSuite::runFit)
                , default_runFit_function_type(&FitSuite_wrapper::default_runFit) );
        
        }
        { //::FitSuite::setAttributes
        
            typedef void ( ::FitSuite::*setAttributes_function_type)( ::AttFitting const & ) ;
            
            FitSuite_exposer.def( 
                "setAttributes"
                , setAttributes_function_type( &::FitSuite::setAttributes )
                , ( bp::arg("fit_attributes") ) );
        
        }
        { //::FitSuite::setMinimizer
        
            typedef void ( ::FitSuite::*setMinimizer_function_type)( ::IMinimizer * ) ;
            
            FitSuite_exposer.def( 
                "setMinimizer"
                , setMinimizer_function_type( &::FitSuite::setMinimizer )
                , ( bp::arg("minimizer") )
                , "Sets minimizer." );
        
        }
        { //::FitSuite::setParametersFixed
        
            typedef void ( ::FitSuite::*setParametersFixed_function_type)( ::std::vector< std::string > const &,bool ) ;
            
            FitSuite_exposer.def( 
                "setParametersFixed"
                , setParametersFixed_function_type( &::FitSuite::setParametersFixed )
                , ( bp::arg("pars"), bp::arg("is_fixed") )
                , "Set fixed flag for parameters from the list." );
        
        }
        { //::IObservable::attachObserver
        
            typedef void ( ::IObservable::*attachObserver_function_type)( ::boost::shared_ptr< IObserver > ) ;
            typedef void ( FitSuite_wrapper::*default_attachObserver_function_type)( ::boost::shared_ptr< IObserver > ) ;
            
            FitSuite_exposer.def( 
                "attachObserver"
                , attachObserver_function_type(&::IObservable::attachObserver)
                , default_attachObserver_function_type(&FitSuite_wrapper::default_attachObserver)
                , ( bp::arg("obj") ) );
        
        }
        { //::IObservable::notifyObservers
        
            typedef void ( ::IObservable::*notifyObservers_function_type)(  ) ;
            typedef void ( FitSuite_wrapper::*default_notifyObservers_function_type)(  ) ;
            
            FitSuite_exposer.def( 
                "notifyObservers"
                , notifyObservers_function_type(&::IObservable::notifyObservers)
                , default_notifyObservers_function_type(&FitSuite_wrapper::default_notifyObservers) );
        
        }
    }

}

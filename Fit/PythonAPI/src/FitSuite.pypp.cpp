// This file has been generated by Py++.

// BornAgain: simulate and fit scattering at grazing incidence 
//! @brief automatically generated boost::python code for PythonCoreAPI  

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter);
GCC_DIAG_OFF(missing-field-initializers);
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter);
GCC_DIAG_ON(missing-field-initializers);
#include "PythonFitList.h"
#include "FitSuite.pypp.h"

namespace bp = boost::python;

struct FitSuite_wrapper : FitSuite, bp::wrapper< FitSuite > {

    FitSuite_wrapper( )
    : FitSuite( )
      , bp::wrapper< FitSuite >(){
        // null constructor
    
    }

    virtual void runFit(  ) {
        if( bp::override func_runFit = this->get_override( "runFit" ) )
            func_runFit(  );
        else
            this->FitSuite::runFit(  );
    }
    
    
    void default_runFit(  ) {
        FitSuite::runFit( );
    }

};

void register_FitSuite_class(){

    { //::FitSuite
        typedef bp::class_< FitSuite_wrapper, boost::noncopyable > FitSuite_exposer_t;
        FitSuite_exposer_t FitSuite_exposer = FitSuite_exposer_t( "FitSuite", bp::no_init );
        bp::scope FitSuite_scope( FitSuite_exposer );
        FitSuite_exposer.def( bp::init< >() );
        { //::FitSuite::addFitParameter
        
            typedef void ( ::FitSuite::*addFitParameter_function_type )( ::std::string const &,double,double,::AttLimits const &,double ) ;
            
            FitSuite_exposer.def( 
                "addFitParameter"
                , addFitParameter_function_type( &::FitSuite::addFitParameter )
                , ( bp::arg("name"), bp::arg("value"), bp::arg("step"), bp::arg("attlim")=AttLimits::limitless( ), bp::arg("error")=0.0 ) );
        
        }
        { //::FitSuite::addFitParameter
        
            typedef void ( ::FitSuite::*addFitParameter_function_type )( ::std::string const &,double,::AttLimits const &,double ) ;
            
            FitSuite_exposer.def( 
                "addFitParameter"
                , addFitParameter_function_type( &::FitSuite::addFitParameter )
                , ( bp::arg("name"), bp::arg("value"), bp::arg("attlim")=AttLimits::limitless( ), bp::arg("error")=0.0 ) );
        
        }
        { //::FitSuite::addSimulationAndRealData
        
            typedef void ( ::FitSuite::*addSimulationAndRealData_function_type )( ::Simulation const &,::OutputData< double > const &,::IChiSquaredModule const & ) ;
            
            FitSuite_exposer.def( 
                "addSimulationAndRealData"
                , addSimulationAndRealData_function_type( &::FitSuite::addSimulationAndRealData )
                , ( bp::arg("simulation"), bp::arg("real_data"), bp::arg("chi2_module")=ChiSquaredModule() ) );
        
        }
        { //::FitSuite::getFitParameters
        
            typedef ::FitSuiteParameters * ( ::FitSuite::*getFitParameters_function_type )(  ) ;
            
            FitSuite_exposer.def( 
                "getFitParameters"
                , getFitParameters_function_type( &::FitSuite::getFitParameters )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::FitSuite::getMinimizer
        
            typedef ::IMinimizer * ( ::FitSuite::*getMinimizer_function_type )(  ) ;
            
            FitSuite_exposer.def( 
                "getMinimizer"
                , getMinimizer_function_type( &::FitSuite::getMinimizer )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::FitSuite::getNCalls
        
            typedef ::std::size_t ( ::FitSuite::*getNCalls_function_type )(  ) const;
            
            FitSuite_exposer.def( 
                "getNCalls"
                , getNCalls_function_type( &::FitSuite::getNCalls ) );
        
        }
        { //::FitSuite::initPrint
        
            typedef void ( ::FitSuite::*initPrint_function_type )( int ) ;
            
            FitSuite_exposer.def( 
                "initPrint"
                , initPrint_function_type( &::FitSuite::initPrint )
                , ( bp::arg("print_every_nth") ) );
        
        }
        { //::FitSuite::printResults
        
            typedef void ( ::FitSuite::*printResults_function_type )(  ) const;
            
            FitSuite_exposer.def( 
                "printResults"
                , printResults_function_type( &::FitSuite::printResults ) );
        
        }
        { //::FitSuite::runFit
        
            typedef void ( ::FitSuite::*runFit_function_type )(  ) ;
            typedef void ( FitSuite_wrapper::*default_runFit_function_type )(  ) ;
            
            FitSuite_exposer.def( 
                "runFit"
                , runFit_function_type(&::FitSuite::runFit)
                , default_runFit_function_type(&FitSuite_wrapper::default_runFit) );
        
        }
        { //::FitSuite::setMinimizer
        
            typedef void ( ::FitSuite::*setMinimizer_function_type )( ::IMinimizer * ) ;
            
            FitSuite_exposer.def( 
                "setMinimizer"
                , setMinimizer_function_type( &::FitSuite::setMinimizer )
                , ( bp::arg("minimizer") ) );
        
        }
    }

}

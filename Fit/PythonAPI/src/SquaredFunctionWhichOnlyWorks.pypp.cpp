// This file has been generated by Py++.

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter);
GCC_DIAG_OFF(missing-field-initializers);
#include "boost/python.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
GCC_DIAG_ON(unused-parameter);
GCC_DIAG_ON(missing-field-initializers);
#include "AttLimits.h"
#include "IChiSquaredModule.h"
#include "IMinimizer.h"
#include "ChiSquaredModule.h"
#include "FitSuite.h"
#include "MinimizerFactory.h"
#include "PythonPlusplusFitHelper.h"
#include "MathFunctions.h"
#include "ISquaredFunction.h"
#include "IOutputDataNormalizer.h"
#include "SquaredFunctionWhichOnlyWorks.pypp.h"

namespace bp = boost::python;

struct SquaredFunctionWhichOnlyWorks_wrapper : SquaredFunctionWhichOnlyWorks, bp::wrapper< SquaredFunctionWhichOnlyWorks > {

    SquaredFunctionWhichOnlyWorks_wrapper(SquaredFunctionWhichOnlyWorks const & arg )
    : SquaredFunctionWhichOnlyWorks( arg )
      , bp::wrapper< SquaredFunctionWhichOnlyWorks >(){
        // copy constructor
        
    }

    SquaredFunctionWhichOnlyWorks_wrapper( )
    : SquaredFunctionWhichOnlyWorks( )
      , bp::wrapper< SquaredFunctionWhichOnlyWorks >(){
        // null constructor
    
    }

    virtual double calculateSquaredDifference( double real_value, double simulated_value ) const  {
        if( bp::override func_calculateSquaredDifference = this->get_override( "calculateSquaredDifference" ) )
            return func_calculateSquaredDifference( real_value, simulated_value );
        else{
            return this->SquaredFunctionWhichOnlyWorks::calculateSquaredDifference( real_value, simulated_value );
        }
    }
    
    double default_calculateSquaredDifference( double real_value, double simulated_value ) const  {
        return SquaredFunctionWhichOnlyWorks::calculateSquaredDifference( real_value, simulated_value );
    }

    virtual ::SquaredFunctionWhichOnlyWorks * clone(  ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone(  );
        else{
            return this->SquaredFunctionWhichOnlyWorks::clone(  );
        }
    }
    
    ::SquaredFunctionWhichOnlyWorks * default_clone(  ) const  {
        return SquaredFunctionWhichOnlyWorks::clone( );
    }

    virtual double calculateSquaredError( double real_value, double simulated_value=0.0 ) const  {
        if( bp::override func_calculateSquaredError = this->get_override( "calculateSquaredError" ) )
            return func_calculateSquaredError( real_value, simulated_value );
        else{
            return this->ISquaredFunction::calculateSquaredError( real_value, simulated_value );
        }
    }
    
    double default_calculateSquaredError( double real_value, double simulated_value=0.0 ) const  {
        return ISquaredFunction::calculateSquaredError( real_value, simulated_value );
    }

};

void register_SquaredFunctionWhichOnlyWorks_class(){

    bp::class_< SquaredFunctionWhichOnlyWorks_wrapper, bp::bases< ISquaredFunction > >( "SquaredFunctionWhichOnlyWorks", bp::init< >() )    
        .def( 
            "calculateSquaredDifference"
            , (double ( ::SquaredFunctionWhichOnlyWorks::* )( double,double ) const)(&::SquaredFunctionWhichOnlyWorks::calculateSquaredDifference)
            , (double ( SquaredFunctionWhichOnlyWorks_wrapper::* )( double,double ) const)(&SquaredFunctionWhichOnlyWorks_wrapper::default_calculateSquaredDifference)
            , ( bp::arg("real_value"), bp::arg("simulated_value") ) )    
        .def( 
            "clone"
            , (::SquaredFunctionWhichOnlyWorks * ( ::SquaredFunctionWhichOnlyWorks::* )(  ) const)(&::SquaredFunctionWhichOnlyWorks::clone)
            , (::SquaredFunctionWhichOnlyWorks * ( SquaredFunctionWhichOnlyWorks_wrapper::* )(  ) const)(&SquaredFunctionWhichOnlyWorks_wrapper::default_clone)
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "calculateSquaredError"
            , (double ( ::ISquaredFunction::* )( double,double ) const)(&::ISquaredFunction::calculateSquaredError)
            , (double ( SquaredFunctionWhichOnlyWorks_wrapper::* )( double,double ) const)(&SquaredFunctionWhichOnlyWorks_wrapper::default_calculateSquaredError)
            , ( bp::arg("real_value"), bp::arg("simulated_value")=0.0 ) );

}

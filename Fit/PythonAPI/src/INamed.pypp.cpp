// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonFitList.h"
#include "INamed.pypp.h"

namespace bp = boost::python;

void register_INamed_class(){

    { //::INamed
        typedef bp::class_< INamed > INamed_exposer_t;
        INamed_exposer_t INamed_exposer = INamed_exposer_t( "INamed", bp::init< >() );
        bp::scope INamed_scope( INamed_exposer );
        INamed_exposer.def( bp::init< std::string const & >(( bp::arg("name") )) );
        { //::INamed::getName
        
            typedef ::std::string ( ::INamed::*getName_function_type)(  ) const;
            
            INamed_exposer.def( 
                "getName"
                , getName_function_type( &::INamed::getName ) );
        
        }
        { //::INamed::setName
        
            typedef void ( ::INamed::*setName_function_type)( ::std::string ) ;
            
            INamed_exposer.def( 
                "setName"
                , setName_function_type( &::INamed::setName )
                , ( bp::arg("name") ) );
        
        }
    }

}

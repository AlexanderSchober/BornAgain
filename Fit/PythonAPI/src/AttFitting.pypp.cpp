// This file has been generated by Py++.

// BornAgain: simulate and fit scattering at grazing incidence
//! @brief Automatically generated boost::python code for PythonFitAPI

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonFitList.h"
#include "AttFitting.pypp.h"

namespace bp = boost::python;

void register_AttFitting_class(){

    { //::AttFitting
        typedef bp::class_< AttFitting > AttFitting_exposer_t;
        AttFitting_exposer_t AttFitting_exposer = AttFitting_exposer_t( "AttFitting", bp::init< >() );
        bp::scope AttFitting_scope( AttFitting_exposer );
        { //::AttFitting::getDerivEpsilon
        
            typedef double ( ::AttFitting::*getDerivEpsilon_function_type)(  ) const;
            
            AttFitting_exposer.def( 
                "getDerivEpsilon"
                , getDerivEpsilon_function_type( &::AttFitting::getDerivEpsilon ) );
        
        }
        { //::AttFitting::getStepFactor
        
            typedef double ( ::AttFitting::*getStepFactor_function_type)(  ) const;
            
            AttFitting_exposer.def( 
                "getStepFactor"
                , getStepFactor_function_type( &::AttFitting::getStepFactor ) );
        
        }
        { //::AttFitting::setDerivEpsilon
        
            typedef void ( ::AttFitting::*setDerivEpsilon_function_type)( double ) ;
            
            AttFitting_exposer.def( 
                "setDerivEpsilon"
                , setDerivEpsilon_function_type( &::AttFitting::setDerivEpsilon )
                , ( bp::arg("deriv_epsilon") ) );
        
        }
        { //::AttFitting::setStepFactor
        
            typedef void ( ::AttFitting::*setStepFactor_function_type)( double ) ;
            
            AttFitting_exposer.def( 
                "setStepFactor"
                , setStepFactor_function_type( &::AttFitting::setStepFactor )
                , ( bp::arg("step_factor") ) );
        
        }
    }

}

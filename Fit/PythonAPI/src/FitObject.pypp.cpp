// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonFitList.h"
#include "FitObject.pypp.h"

namespace bp = boost::python;

struct FitObject_wrapper : FitObject, bp::wrapper< FitObject > {

    FitObject_wrapper(::GISASSimulation const & simulation, ::OutputData< double > const & real_data, ::IChiSquaredModule const & chi2_module=ChiSquaredModule(), double weight=1 )
    : FitObject( boost::ref(simulation), boost::ref(real_data), boost::ref(chi2_module), weight )
      , bp::wrapper< FitObject >(){
        // constructor
    
    }

    virtual bool areParametersChanged(  ) {
        if( bp::override func_areParametersChanged = this->get_override( "areParametersChanged" ) )
            return func_areParametersChanged(  );
        else{
            return this->IParameterized::areParametersChanged(  );
        }
    }
    
    bool default_areParametersChanged(  ) {
        return IParameterized::areParametersChanged( );
    }

    virtual void clearParameterPool(  ) {
        if( bp::override func_clearParameterPool = this->get_override( "clearParameterPool" ) )
            func_clearParameterPool(  );
        else{
            this->IParameterized::clearParameterPool(  );
        }
    }
    
    void default_clearParameterPool(  ) {
        IParameterized::clearParameterPool( );
    }

    virtual ::ParameterPool * createParameterTree(  ) const  {
        if( bp::override func_createParameterTree = this->get_override( "createParameterTree" ) )
            return func_createParameterTree(  );
        else{
            return this->IParameterized::createParameterTree(  );
        }
    }
    
    ::ParameterPool * default_createParameterTree(  ) const  {
        return IParameterized::createParameterTree( );
    }

    virtual void printParameters(  ) const  {
        if( bp::override func_printParameters = this->get_override( "printParameters" ) )
            func_printParameters(  );
        else{
            this->IParameterized::printParameters(  );
        }
    }
    
    void default_printParameters(  ) const  {
        IParameterized::printParameters( );
    }

    virtual bool setParameterValue( ::std::string const & name, double value ) {
        if( bp::override func_setParameterValue = this->get_override( "setParameterValue" ) )
            return func_setParameterValue( name, value );
        else{
            return this->IParameterized::setParameterValue( name, value );
        }
    }
    
    bool default_setParameterValue( ::std::string const & name, double value ) {
        return IParameterized::setParameterValue( name, value );
    }

    virtual void setParametersAreChanged(  ) {
        if( bp::override func_setParametersAreChanged = this->get_override( "setParametersAreChanged" ) )
            func_setParametersAreChanged(  );
        else{
            this->IParameterized::setParametersAreChanged(  );
        }
    }
    
    void default_setParametersAreChanged(  ) {
        IParameterized::setParametersAreChanged( );
    }

};

void register_FitObject_class(){

    { //::FitObject
        typedef bp::class_< FitObject_wrapper, bp::bases< IParameterized >, boost::noncopyable > FitObject_exposer_t;
        FitObject_exposer_t FitObject_exposer = FitObject_exposer_t( "FitObject", "Single simulation description, real data and chi2 module (used by FitSuite.", bp::init< GISASSimulation const &, OutputData< double > const &, bp::optional< IChiSquaredModule const &, double > >(( bp::arg("simulation"), bp::arg("real_data"), bp::arg("chi2_module")=ChiSquaredModule(), bp::arg("weight")=1 )) );
        bp::scope FitObject_scope( FitObject_exposer );
        { //::FitObject::calculateChiSquared
        
            typedef double ( ::FitObject::*calculateChiSquared_function_type)(  ) ;
            
            FitObject_exposer.def( 
                "calculateChiSquared"
                , calculateChiSquared_function_type( &::FitObject::calculateChiSquared )
                , "Returns chi squared value." );
        
        }
        { //::FitObject::getChiSquaredModule
        
            typedef ::IChiSquaredModule const * ( ::FitObject::*getChiSquaredModule_function_type)(  ) const;
            
            FitObject_exposer.def( 
                "getChiSquaredModule"
                , getChiSquaredModule_function_type( &::FitObject::getChiSquaredModule )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "Returns chi2 module." );
        
        }
        { //::FitObject::getChiSquaredModule
        
            typedef ::IChiSquaredModule * ( ::FitObject::*getChiSquaredModule_function_type)(  ) ;
            
            FitObject_exposer.def( 
                "getChiSquaredModule"
                , getChiSquaredModule_function_type( &::FitObject::getChiSquaredModule )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::FitObject::getRealData
        
            typedef ::OutputData< double > const * ( ::FitObject::*getRealData_function_type)(  ) const;
            
            FitObject_exposer.def( 
                "getRealData"
                , getRealData_function_type( &::FitObject::getRealData )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "Returns real data." );
        
        }
        { //::FitObject::getSimulation
        
            typedef ::GISASSimulation const * ( ::FitObject::*getSimulation_function_type)(  ) const;
            
            FitObject_exposer.def( 
                "getSimulation"
                , getSimulation_function_type( &::FitObject::getSimulation )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "Returns simulation." );
        
        }
        { //::FitObject::getSimulation
        
            typedef ::GISASSimulation * ( ::FitObject::*getSimulation_function_type)(  ) ;
            
            FitObject_exposer.def( 
                "getSimulation"
                , getSimulation_function_type( &::FitObject::getSimulation )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "Returns simulation." );
        
        }
        { //::FitObject::getSimulationData
        
            typedef ::OutputData< double > const * ( ::FitObject::*getSimulationData_function_type)(  ) const;
            
            FitObject_exposer.def( 
                "getSimulationData"
                , getSimulationData_function_type( &::FitObject::getSimulationData )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "Returns simulated data." );
        
        }
        { //::FitObject::getSizeOfData
        
            typedef ::std::size_t ( ::FitObject::*getSizeOfData_function_type)(  ) const;
            
            FitObject_exposer.def( 
                "getSizeOfData"
                , getSizeOfData_function_type( &::FitObject::getSizeOfData )
                , "Returns size of data." );
        
        }
        { //::FitObject::getWeight
        
            typedef double ( ::FitObject::*getWeight_function_type)(  ) const;
            
            FitObject_exposer.def( 
                "getWeight"
                , getWeight_function_type( &::FitObject::getWeight )
                , "Returns weight of data set in chi2 calculations." );
        
        }
        { //::FitObject::setChiSquaredModule
        
            typedef void ( ::FitObject::*setChiSquaredModule_function_type)( ::IChiSquaredModule const & ) ;
            
            FitObject_exposer.def( 
                "setChiSquaredModule"
                , setChiSquaredModule_function_type( &::FitObject::setChiSquaredModule )
                , ( bp::arg("chi2_module") )
                , "Sets chi2 module." );
        
        }
        { //::FitObject::setSimulation
        
            typedef void ( ::FitObject::*setSimulation_function_type)( ::GISASSimulation const & ) ;
            
            FitObject_exposer.def( 
                "setSimulation"
                , setSimulation_function_type( &::FitObject::setSimulation )
                , ( bp::arg("simulation") )
                , "Sets simulation." );
        
        }
        { //::IParameterized::areParametersChanged
        
            typedef bool ( ::IParameterized::*areParametersChanged_function_type)(  ) ;
            typedef bool ( FitObject_wrapper::*default_areParametersChanged_function_type)(  ) ;
            
            FitObject_exposer.def( 
                "areParametersChanged"
                , areParametersChanged_function_type(&::IParameterized::areParametersChanged)
                , default_areParametersChanged_function_type(&FitObject_wrapper::default_areParametersChanged) );
        
        }
        { //::IParameterized::clearParameterPool
        
            typedef void ( ::IParameterized::*clearParameterPool_function_type)(  ) ;
            typedef void ( FitObject_wrapper::*default_clearParameterPool_function_type)(  ) ;
            
            FitObject_exposer.def( 
                "clearParameterPool"
                , clearParameterPool_function_type(&::IParameterized::clearParameterPool)
                , default_clearParameterPool_function_type(&FitObject_wrapper::default_clearParameterPool) );
        
        }
        { //::IParameterized::createParameterTree
        
            typedef ::ParameterPool * ( ::IParameterized::*createParameterTree_function_type)(  ) const;
            typedef ::ParameterPool * ( FitObject_wrapper::*default_createParameterTree_function_type)(  ) const;
            
            FitObject_exposer.def( 
                "createParameterTree"
                , createParameterTree_function_type(&::IParameterized::createParameterTree)
                , default_createParameterTree_function_type(&FitObject_wrapper::default_createParameterTree)
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::IParameterized::printParameters
        
            typedef void ( ::IParameterized::*printParameters_function_type)(  ) const;
            typedef void ( FitObject_wrapper::*default_printParameters_function_type)(  ) const;
            
            FitObject_exposer.def( 
                "printParameters"
                , printParameters_function_type(&::IParameterized::printParameters)
                , default_printParameters_function_type(&FitObject_wrapper::default_printParameters) );
        
        }
        { //::IParameterized::setParameterValue
        
            typedef bool ( ::IParameterized::*setParameterValue_function_type)( ::std::string const &,double ) ;
            typedef bool ( FitObject_wrapper::*default_setParameterValue_function_type)( ::std::string const &,double ) ;
            
            FitObject_exposer.def( 
                "setParameterValue"
                , setParameterValue_function_type(&::IParameterized::setParameterValue)
                , default_setParameterValue_function_type(&FitObject_wrapper::default_setParameterValue)
                , ( bp::arg("name"), bp::arg("value") ) );
        
        }
        { //::IParameterized::setParametersAreChanged
        
            typedef void ( ::IParameterized::*setParametersAreChanged_function_type)(  ) ;
            typedef void ( FitObject_wrapper::*default_setParametersAreChanged_function_type)(  ) ;
            
            FitObject_exposer.def( 
                "setParametersAreChanged"
                , setParametersAreChanged_function_type(&::IParameterized::setParametersAreChanged)
                , default_setParametersAreChanged_function_type(&FitObject_wrapper::default_setParametersAreChanged) );
        
        }
    }

}

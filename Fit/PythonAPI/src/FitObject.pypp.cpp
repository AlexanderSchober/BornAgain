// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonFitList.h"
#include "FitObject.pypp.h"

namespace bp = boost::python;

void register_FitObject_class(){

    { //::FitObject
        typedef bp::class_< FitObject, bp::bases< IParameterized >, boost::noncopyable > FitObject_exposer_t;
        FitObject_exposer_t FitObject_exposer = FitObject_exposer_t( "FitObject", "Holds simulation description and real data to run the fit.", bp::init< GISASSimulation const &, OutputData< double > const &, bp::optional< double, bool > >(( bp::arg("simulation"), bp::arg("real_data"), bp::arg("weight")=1, bp::arg("adjust_detector_to_data")=(bool)(true) ), "FitObject constructor @param simulaiton The simulation to eun @param real_data The real data @param weight Weight of dataset in chi2 calculations @param adjust_detector_to_data Detector axes will be adjusted to real data axes, if true \n\n:Parameters:\n  - 'simulaiton' - The simulation to eun\n  - 'real_data' - The real data\n  - 'weight' - Weight of dataset in chi2 calculations\n  - 'adjust_detector_to_data' - Detector axes will be adjusted to real data axes, if true\n") );
        bp::scope FitObject_scope( FitObject_exposer );
        { //::FitObject::getRealData
        
            typedef ::OutputData< double > const * ( ::FitObject::*getRealData_function_type)(  ) const;
            
            FitObject_exposer.def( 
                "getRealData"
                , getRealData_function_type( &::FitObject::getRealData )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "Returns real (experimental) data." );
        
        }
        { //::FitObject::getSimulation
        
            typedef ::GISASSimulation const * ( ::FitObject::*getSimulation_function_type)(  ) const;
            
            FitObject_exposer.def( 
                "getSimulation"
                , getSimulation_function_type( &::FitObject::getSimulation )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "Returns simulation." );
        
        }
        { //::FitObject::getSimulationData
        
            typedef ::OutputData< double > const * ( ::FitObject::*getSimulationData_function_type)(  ) const;
            
            FitObject_exposer.def( 
                "getSimulationData"
                , getSimulationData_function_type( &::FitObject::getSimulationData )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "Returns simulated data." );
        
        }
        { //::FitObject::getSizeOfData
        
            typedef ::std::size_t ( ::FitObject::*getSizeOfData_function_type)(  ) const;
            
            FitObject_exposer.def( 
                "getSizeOfData"
                , getSizeOfData_function_type( &::FitObject::getSizeOfData )
                , "Returns the size of the data. It is equal to the number of non-masked detector channels which will participate in chi2 calculations. " );
        
        }
        { //::FitObject::getWeight
        
            typedef double ( ::FitObject::*getWeight_function_type)(  ) const;
            
            FitObject_exposer.def( 
                "getWeight"
                , getWeight_function_type( &::FitObject::getWeight )
                , "Returns weight of data set in chi2 calculations." );
        
        }
    }

}

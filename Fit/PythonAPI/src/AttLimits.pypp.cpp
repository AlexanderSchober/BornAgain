// This file has been generated by Py++.

// BornAgain: simulate and fit scattering at grazing incidence 
//! @brief automatically generated boost::python code for PythonCoreAPI  

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter);
GCC_DIAG_OFF(missing-field-initializers);
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter);
GCC_DIAG_ON(missing-field-initializers);
#include "PythonFitList.h"
#include "AttLimits.pypp.h"

namespace bp = boost::python;

struct AttLimits_wrapper : AttLimits, bp::wrapper< AttLimits > {

    AttLimits_wrapper(AttLimits const & arg )
    : AttLimits( arg )
      , bp::wrapper< AttLimits >(){
        // copy constructor
        
    }

    AttLimits_wrapper( )
    : AttLimits( )
      , bp::wrapper< AttLimits >(){
        // null constructor
    
    }

    virtual double getLowerLimit(  ) const  {
        if( bp::override func_getLowerLimit = this->get_override( "getLowerLimit" ) )
            return func_getLowerLimit(  );
        else{
            return this->AttLimits::getLowerLimit(  );
        }
    }
    
    double default_getLowerLimit(  ) const  {
        return AttLimits::getLowerLimit( );
    }

    virtual double getUpperLimit(  ) const  {
        if( bp::override func_getUpperLimit = this->get_override( "getUpperLimit" ) )
            return func_getUpperLimit(  );
        else{
            return this->AttLimits::getUpperLimit(  );
        }
    }
    
    double default_getUpperLimit(  ) const  {
        return AttLimits::getUpperLimit( );
    }

    virtual bool hasLowerAndUpperLimits(  ) const  {
        if( bp::override func_hasLowerAndUpperLimits = this->get_override( "hasLowerAndUpperLimits" ) )
            return func_hasLowerAndUpperLimits(  );
        else{
            return this->AttLimits::hasLowerAndUpperLimits(  );
        }
    }
    
    bool default_hasLowerAndUpperLimits(  ) const  {
        return AttLimits::hasLowerAndUpperLimits( );
    }

    virtual bool hasLowerLimit(  ) const  {
        if( bp::override func_hasLowerLimit = this->get_override( "hasLowerLimit" ) )
            return func_hasLowerLimit(  );
        else{
            return this->AttLimits::hasLowerLimit(  );
        }
    }
    
    bool default_hasLowerLimit(  ) const  {
        return AttLimits::hasLowerLimit( );
    }

    virtual bool hasUpperLimit(  ) const  {
        if( bp::override func_hasUpperLimit = this->get_override( "hasUpperLimit" ) )
            return func_hasUpperLimit(  );
        else{
            return this->AttLimits::hasUpperLimit(  );
        }
    }
    
    bool default_hasUpperLimit(  ) const  {
        return AttLimits::hasUpperLimit( );
    }

    virtual bool isFixed(  ) const  {
        if( bp::override func_isFixed = this->get_override( "isFixed" ) )
            return func_isFixed(  );
        else{
            return this->AttLimits::isFixed(  );
        }
    }
    
    bool default_isFixed(  ) const  {
        return AttLimits::isFixed( );
    }

    virtual void removeLimits(  ) {
        if( bp::override func_removeLimits = this->get_override( "removeLimits" ) )
            func_removeLimits(  );
        else{
            this->AttLimits::removeLimits(  );
        }
    }
    
    void default_removeLimits(  ) {
        AttLimits::removeLimits( );
    }

    virtual void removeLowerLimit(  ) {
        if( bp::override func_removeLowerLimit = this->get_override( "removeLowerLimit" ) )
            func_removeLowerLimit(  );
        else{
            this->AttLimits::removeLowerLimit(  );
        }
    }
    
    void default_removeLowerLimit(  ) {
        AttLimits::removeLowerLimit( );
    }

    virtual void removeUpperLimit(  ) {
        if( bp::override func_removeUpperLimit = this->get_override( "removeUpperLimit" ) )
            func_removeUpperLimit(  );
        else{
            this->AttLimits::removeUpperLimit(  );
        }
    }
    
    void default_removeUpperLimit(  ) {
        AttLimits::removeUpperLimit( );
    }

    virtual void setFixed( bool is_fixed ) {
        if( bp::override func_setFixed = this->get_override( "setFixed" ) )
            func_setFixed( is_fixed );
        else{
            this->AttLimits::setFixed( is_fixed );
        }
    }
    
    void default_setFixed( bool is_fixed ) {
        AttLimits::setFixed( is_fixed );
    }

    virtual void setLimits( double xmin, double xmax ) {
        if( bp::override func_setLimits = this->get_override( "setLimits" ) )
            func_setLimits( xmin, xmax );
        else{
            this->AttLimits::setLimits( xmin, xmax );
        }
    }
    
    void default_setLimits( double xmin, double xmax ) {
        AttLimits::setLimits( xmin, xmax );
    }

    virtual void setLowerLimit( double value ) {
        if( bp::override func_setLowerLimit = this->get_override( "setLowerLimit" ) )
            func_setLowerLimit( value );
        else{
            this->AttLimits::setLowerLimit( value );
        }
    }
    
    void default_setLowerLimit( double value ) {
        AttLimits::setLowerLimit( value );
    }

    virtual void setUpperLimit( double value ) {
        if( bp::override func_setUpperLimit = this->get_override( "setUpperLimit" ) )
            func_setUpperLimit( value );
        else{
            this->AttLimits::setUpperLimit( value );
        }
    }
    
    void default_setUpperLimit( double value ) {
        AttLimits::setUpperLimit( value );
    }

};

void register_AttLimits_class(){

    { //::AttLimits
        typedef bp::class_< AttLimits_wrapper > AttLimits_exposer_t;
        AttLimits_exposer_t AttLimits_exposer = AttLimits_exposer_t( "AttLimits", bp::init< >() );
        bp::scope AttLimits_scope( AttLimits_exposer );
        { //::AttLimits::fixed
        
            typedef ::AttLimits ( *fixed_function_type )(  );
            
            AttLimits_exposer.def( 
                "fixed"
                , fixed_function_type( &::AttLimits::fixed ) );
        
        }
        { //::AttLimits::getLowerLimit
        
            typedef double ( ::AttLimits::*getLowerLimit_function_type )(  ) const;
            typedef double ( AttLimits_wrapper::*default_getLowerLimit_function_type )(  ) const;
            
            AttLimits_exposer.def( 
                "getLowerLimit"
                , getLowerLimit_function_type(&::AttLimits::getLowerLimit)
                , default_getLowerLimit_function_type(&AttLimits_wrapper::default_getLowerLimit) );
        
        }
        { //::AttLimits::getUpperLimit
        
            typedef double ( ::AttLimits::*getUpperLimit_function_type )(  ) const;
            typedef double ( AttLimits_wrapper::*default_getUpperLimit_function_type )(  ) const;
            
            AttLimits_exposer.def( 
                "getUpperLimit"
                , getUpperLimit_function_type(&::AttLimits::getUpperLimit)
                , default_getUpperLimit_function_type(&AttLimits_wrapper::default_getUpperLimit) );
        
        }
        { //::AttLimits::hasLowerAndUpperLimits
        
            typedef bool ( ::AttLimits::*hasLowerAndUpperLimits_function_type )(  ) const;
            typedef bool ( AttLimits_wrapper::*default_hasLowerAndUpperLimits_function_type )(  ) const;
            
            AttLimits_exposer.def( 
                "hasLowerAndUpperLimits"
                , hasLowerAndUpperLimits_function_type(&::AttLimits::hasLowerAndUpperLimits)
                , default_hasLowerAndUpperLimits_function_type(&AttLimits_wrapper::default_hasLowerAndUpperLimits) );
        
        }
        { //::AttLimits::hasLowerLimit
        
            typedef bool ( ::AttLimits::*hasLowerLimit_function_type )(  ) const;
            typedef bool ( AttLimits_wrapper::*default_hasLowerLimit_function_type )(  ) const;
            
            AttLimits_exposer.def( 
                "hasLowerLimit"
                , hasLowerLimit_function_type(&::AttLimits::hasLowerLimit)
                , default_hasLowerLimit_function_type(&AttLimits_wrapper::default_hasLowerLimit) );
        
        }
        { //::AttLimits::hasUpperLimit
        
            typedef bool ( ::AttLimits::*hasUpperLimit_function_type )(  ) const;
            typedef bool ( AttLimits_wrapper::*default_hasUpperLimit_function_type )(  ) const;
            
            AttLimits_exposer.def( 
                "hasUpperLimit"
                , hasUpperLimit_function_type(&::AttLimits::hasUpperLimit)
                , default_hasUpperLimit_function_type(&AttLimits_wrapper::default_hasUpperLimit) );
        
        }
        { //::AttLimits::isFixed
        
            typedef bool ( ::AttLimits::*isFixed_function_type )(  ) const;
            typedef bool ( AttLimits_wrapper::*default_isFixed_function_type )(  ) const;
            
            AttLimits_exposer.def( 
                "isFixed"
                , isFixed_function_type(&::AttLimits::isFixed)
                , default_isFixed_function_type(&AttLimits_wrapper::default_isFixed) );
        
        }
        { //::AttLimits::limited
        
            typedef ::AttLimits ( *limited_function_type )( double,double );
            
            AttLimits_exposer.def( 
                "limited"
                , limited_function_type( &::AttLimits::limited )
                , ( bp::arg("left_bound_value"), bp::arg("right_bound_value") ) );
        
        }
        { //::AttLimits::limitless
        
            typedef ::AttLimits ( *limitless_function_type )(  );
            
            AttLimits_exposer.def( 
                "limitless"
                , limitless_function_type( &::AttLimits::limitless ) );
        
        }
        { //::AttLimits::lowerLimited
        
            typedef ::AttLimits ( *lowerLimited_function_type )( double );
            
            AttLimits_exposer.def( 
                "lowerLimited"
                , lowerLimited_function_type( &::AttLimits::lowerLimited )
                , ( bp::arg("bound_value") ) );
        
        }
        { //::AttLimits::removeLimits
        
            typedef void ( ::AttLimits::*removeLimits_function_type )(  ) ;
            typedef void ( AttLimits_wrapper::*default_removeLimits_function_type )(  ) ;
            
            AttLimits_exposer.def( 
                "removeLimits"
                , removeLimits_function_type(&::AttLimits::removeLimits)
                , default_removeLimits_function_type(&AttLimits_wrapper::default_removeLimits) );
        
        }
        { //::AttLimits::removeLowerLimit
        
            typedef void ( ::AttLimits::*removeLowerLimit_function_type )(  ) ;
            typedef void ( AttLimits_wrapper::*default_removeLowerLimit_function_type )(  ) ;
            
            AttLimits_exposer.def( 
                "removeLowerLimit"
                , removeLowerLimit_function_type(&::AttLimits::removeLowerLimit)
                , default_removeLowerLimit_function_type(&AttLimits_wrapper::default_removeLowerLimit) );
        
        }
        { //::AttLimits::removeUpperLimit
        
            typedef void ( ::AttLimits::*removeUpperLimit_function_type )(  ) ;
            typedef void ( AttLimits_wrapper::*default_removeUpperLimit_function_type )(  ) ;
            
            AttLimits_exposer.def( 
                "removeUpperLimit"
                , removeUpperLimit_function_type(&::AttLimits::removeUpperLimit)
                , default_removeUpperLimit_function_type(&AttLimits_wrapper::default_removeUpperLimit) );
        
        }
        { //::AttLimits::setFixed
        
            typedef void ( ::AttLimits::*setFixed_function_type )( bool ) ;
            typedef void ( AttLimits_wrapper::*default_setFixed_function_type )( bool ) ;
            
            AttLimits_exposer.def( 
                "setFixed"
                , setFixed_function_type(&::AttLimits::setFixed)
                , default_setFixed_function_type(&AttLimits_wrapper::default_setFixed)
                , ( bp::arg("is_fixed") ) );
        
        }
        { //::AttLimits::setLimits
        
            typedef void ( ::AttLimits::*setLimits_function_type )( double,double ) ;
            typedef void ( AttLimits_wrapper::*default_setLimits_function_type )( double,double ) ;
            
            AttLimits_exposer.def( 
                "setLimits"
                , setLimits_function_type(&::AttLimits::setLimits)
                , default_setLimits_function_type(&AttLimits_wrapper::default_setLimits)
                , ( bp::arg("xmin"), bp::arg("xmax") ) );
        
        }
        { //::AttLimits::setLowerLimit
        
            typedef void ( ::AttLimits::*setLowerLimit_function_type )( double ) ;
            typedef void ( AttLimits_wrapper::*default_setLowerLimit_function_type )( double ) ;
            
            AttLimits_exposer.def( 
                "setLowerLimit"
                , setLowerLimit_function_type(&::AttLimits::setLowerLimit)
                , default_setLowerLimit_function_type(&AttLimits_wrapper::default_setLowerLimit)
                , ( bp::arg("value") ) );
        
        }
        { //::AttLimits::setUpperLimit
        
            typedef void ( ::AttLimits::*setUpperLimit_function_type )( double ) ;
            typedef void ( AttLimits_wrapper::*default_setUpperLimit_function_type )( double ) ;
            
            AttLimits_exposer.def( 
                "setUpperLimit"
                , setUpperLimit_function_type(&::AttLimits::setUpperLimit)
                , default_setUpperLimit_function_type(&AttLimits_wrapper::default_setUpperLimit)
                , ( bp::arg("value") ) );
        
        }
        { //::AttLimits::upperLimited
        
            typedef ::AttLimits ( *upperLimited_function_type )( double );
            
            AttLimits_exposer.def( 
                "upperLimited"
                , upperLimited_function_type( &::AttLimits::upperLimited )
                , ( bp::arg("bound_value") ) );
        
        }
        AttLimits_exposer.staticmethod( "fixed" );
        AttLimits_exposer.staticmethod( "limited" );
        AttLimits_exposer.staticmethod( "limitless" );
        AttLimits_exposer.staticmethod( "lowerLimited" );
        AttLimits_exposer.staticmethod( "upperLimited" );
    }

}

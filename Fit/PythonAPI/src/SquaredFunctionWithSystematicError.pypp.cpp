// This file has been generated by Py++.

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter);
GCC_DIAG_OFF(missing-field-initializers);
#include "boost/python.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
GCC_DIAG_ON(unused-parameter);
GCC_DIAG_ON(missing-field-initializers);
#include "AttLimits.h"
#include "IChiSquaredModule.h"
#include "IMinimizer.h"
#include "ChiSquaredModule.h"
#include "FitSuite.h"
#include "MinimizerFactory.h"
#include "PythonPlusplusFitHelper.h"
#include "MathFunctions.h"
#include "ISquaredFunction.h"
#include "IOutputDataNormalizer.h"
#include "SquaredFunctionWithSystematicError.pypp.h"

namespace bp = boost::python;

struct SquaredFunctionWithSystematicError_wrapper : SquaredFunctionWithSystematicError, bp::wrapper< SquaredFunctionWithSystematicError > {

    SquaredFunctionWithSystematicError_wrapper(SquaredFunctionWithSystematicError const & arg )
    : SquaredFunctionWithSystematicError( arg )
      , bp::wrapper< SquaredFunctionWithSystematicError >(){
        // copy constructor
        
    }

    SquaredFunctionWithSystematicError_wrapper(double epsilon=8.000000000000000166533453693773481063544750213623046875e-2 )
    : SquaredFunctionWithSystematicError( epsilon )
      , bp::wrapper< SquaredFunctionWithSystematicError >(){
        // constructor
    
    }

    virtual double calculateSquaredDifference( double real_value, double simulated_value ) const  {
        if( bp::override func_calculateSquaredDifference = this->get_override( "calculateSquaredDifference" ) )
            return func_calculateSquaredDifference( real_value, simulated_value );
        else{
            return this->SquaredFunctionWithSystematicError::calculateSquaredDifference( real_value, simulated_value );
        }
    }
    
    double default_calculateSquaredDifference( double real_value, double simulated_value ) const  {
        return SquaredFunctionWithSystematicError::calculateSquaredDifference( real_value, simulated_value );
    }

    virtual double calculateSquaredError( double real_value, double simulated_value=0.0 ) const  {
        if( bp::override func_calculateSquaredError = this->get_override( "calculateSquaredError" ) )
            return func_calculateSquaredError( real_value, simulated_value );
        else{
            return this->SquaredFunctionWithSystematicError::calculateSquaredError( real_value, simulated_value );
        }
    }
    
    double default_calculateSquaredError( double real_value, double simulated_value=0.0 ) const  {
        return SquaredFunctionWithSystematicError::calculateSquaredError( real_value, simulated_value );
    }

    virtual ::SquaredFunctionWithSystematicError * clone(  ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone(  );
        else{
            return this->SquaredFunctionWithSystematicError::clone(  );
        }
    }
    
    ::SquaredFunctionWithSystematicError * default_clone(  ) const  {
        return SquaredFunctionWithSystematicError::clone( );
    }

};

void register_SquaredFunctionWithSystematicError_class(){

    bp::class_< SquaredFunctionWithSystematicError_wrapper, bp::bases< ISquaredFunction > >( "SquaredFunctionWithSystematicError", bp::init< bp::optional< double > >(( bp::arg("epsilon")=8.000000000000000166533453693773481063544750213623046875e-2 )) )    
        .def( 
            "calculateSquaredDifference"
            , (double ( ::SquaredFunctionWithSystematicError::* )( double,double ) const)(&::SquaredFunctionWithSystematicError::calculateSquaredDifference)
            , (double ( SquaredFunctionWithSystematicError_wrapper::* )( double,double ) const)(&SquaredFunctionWithSystematicError_wrapper::default_calculateSquaredDifference)
            , ( bp::arg("real_value"), bp::arg("simulated_value") ) )    
        .def( 
            "calculateSquaredError"
            , (double ( ::SquaredFunctionWithSystematicError::* )( double,double ) const)(&::SquaredFunctionWithSystematicError::calculateSquaredError)
            , (double ( SquaredFunctionWithSystematicError_wrapper::* )( double,double ) const)(&SquaredFunctionWithSystematicError_wrapper::default_calculateSquaredError)
            , ( bp::arg("real_value"), bp::arg("simulated_value")=0.0 ) )    
        .def( 
            "clone"
            , (::SquaredFunctionWithSystematicError * ( ::SquaredFunctionWithSystematicError::* )(  ) const)(&::SquaredFunctionWithSystematicError::clone)
            , (::SquaredFunctionWithSystematicError * ( SquaredFunctionWithSystematicError_wrapper::* )(  ) const)(&SquaredFunctionWithSystematicError_wrapper::default_clone)
            , bp::return_value_policy< bp::manage_new_object >() );

}

// This file has been generated by Py++.

// BornAgain: simulate and fit scattering at grazing incidence 
//! @brief automatically generated boost::python code for PythonCoreAPI  

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter);
GCC_DIAG_OFF(missing-field-initializers);
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter);
GCC_DIAG_ON(missing-field-initializers);
#include "PythonFitList.h"
#include "IOutputDataNormalizer.pypp.h"

namespace bp = boost::python;

struct IOutputDataNormalizer_wrapper : IOutputDataNormalizer, bp::wrapper< IOutputDataNormalizer > {

    IOutputDataNormalizer_wrapper()
    : IOutputDataNormalizer()
      , bp::wrapper< IOutputDataNormalizer >(){
        // null constructor
        
    }

    virtual ::IOutputDataNormalizer * clone(  ) const {
        bp::override func_clone = this->get_override( "clone" );
        return func_clone(  );
    }

    virtual ::OutputData< double > * createNormalizedData( ::OutputData< double > const & data ) const {
        bp::override func_createNormalizedData = this->get_override( "createNormalizedData" );
        return func_createNormalizedData( boost::ref(data) );
    }

    virtual void setMaximumIntensity( double arg0 ){
        bp::override func_setMaximumIntensity = this->get_override( "setMaximumIntensity" );
        func_setMaximumIntensity( arg0 );
    }

};

void register_IOutputDataNormalizer_class(){

    { //::IOutputDataNormalizer
        typedef bp::class_< IOutputDataNormalizer_wrapper, boost::noncopyable > IOutputDataNormalizer_exposer_t;
        IOutputDataNormalizer_exposer_t IOutputDataNormalizer_exposer = IOutputDataNormalizer_exposer_t( "IOutputDataNormalizer" );
        bp::scope IOutputDataNormalizer_scope( IOutputDataNormalizer_exposer );
        { //::IOutputDataNormalizer::clone
        
            typedef ::IOutputDataNormalizer * ( ::IOutputDataNormalizer::*clone_function_type )(  ) const;
            
            IOutputDataNormalizer_exposer.def( 
                "clone"
                , bp::pure_virtual( clone_function_type(&::IOutputDataNormalizer::clone) )
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::IOutputDataNormalizer::createNormalizedData
        
            typedef ::OutputData<double> * ( ::IOutputDataNormalizer::*createNormalizedData_function_type )( ::OutputData<double> const & ) const;
            
            IOutputDataNormalizer_exposer.def( 
                "createNormalizedData"
                , bp::pure_virtual( createNormalizedData_function_type(&::IOutputDataNormalizer::createNormalizedData) )
                , ( bp::arg("data") )
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::IOutputDataNormalizer::setMaximumIntensity
        
            typedef void ( ::IOutputDataNormalizer::*setMaximumIntensity_function_type )( double ) ;
            
            IOutputDataNormalizer_exposer.def( 
                "setMaximumIntensity"
                , bp::pure_virtual( setMaximumIntensity_function_type(&::IOutputDataNormalizer::setMaximumIntensity) )
                , ( bp::arg("arg0") ) );
        
        }
    }

}

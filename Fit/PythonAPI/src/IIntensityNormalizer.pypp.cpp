// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonFitList.h"
#include "IIntensityNormalizer.pypp.h"

namespace bp = boost::python;

struct IIntensityNormalizer_wrapper : IIntensityNormalizer, bp::wrapper< IIntensityNormalizer > {

    IIntensityNormalizer_wrapper()
    : IIntensityNormalizer()
      , bp::wrapper< IIntensityNormalizer >(){
        // null constructor
        m_pyobj = 0;
    }

    virtual void apply( ::OutputData< double > & data ) const {
        bp::override func_apply = this->get_override( "apply" );
        func_apply( boost::ref(data) );
    }

    virtual ::IIntensityNormalizer * clone(  ) const {
        bp::override func_clone = this->get_override( "clone" );
        return func_clone(  );
    }

    virtual ::OutputData< double > * createNormalizedData( ::OutputData< double > const & data ) const {
        bp::override func_createNormalizedData = this->get_override( "createNormalizedData" );
        return func_createNormalizedData( boost::ref(data) );
    }

    virtual void setMaximumIntensity( double arg0 ){
        bp::override func_setMaximumIntensity = this->get_override( "setMaximumIntensity" );
        func_setMaximumIntensity( arg0 );
    }

    PyObject* m_pyobj;

};

void register_IIntensityNormalizer_class(){

    { //::IIntensityNormalizer
        typedef bp::class_< IIntensityNormalizer_wrapper, bp::bases< IParameterized >, std::auto_ptr< IIntensityNormalizer_wrapper >, boost::noncopyable > IIntensityNormalizer_exposer_t;
        IIntensityNormalizer_exposer_t IIntensityNormalizer_exposer = IIntensityNormalizer_exposer_t( "IIntensityNormalizer", "Interface to OutputData normalizers." );
        bp::scope IIntensityNormalizer_scope( IIntensityNormalizer_exposer );
        { //::IIntensityNormalizer::apply
        
            typedef void ( ::IIntensityNormalizer::*apply_function_type)( ::OutputData<double> & ) const;
            
            IIntensityNormalizer_exposer.def( 
                "apply"
                , bp::pure_virtual( apply_function_type(&::IIntensityNormalizer::apply) )
                , ( bp::arg("data") ) );
        
        }
        { //::IIntensityNormalizer::clone
        
            typedef ::IIntensityNormalizer * ( ::IIntensityNormalizer::*clone_function_type)(  ) const;
            
            IIntensityNormalizer_exposer.def( 
                "clone"
                , bp::pure_virtual( clone_function_type(&::IIntensityNormalizer::clone) )
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::IIntensityNormalizer::createNormalizedData
        
            typedef ::OutputData<double> * ( ::IIntensityNormalizer::*createNormalizedData_function_type)( ::OutputData<double> const & ) const;
            
            IIntensityNormalizer_exposer.def( 
                "createNormalizedData"
                , bp::pure_virtual( createNormalizedData_function_type(&::IIntensityNormalizer::createNormalizedData) )
                , ( bp::arg("data") )
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::IIntensityNormalizer::setMaximumIntensity
        
            typedef void ( ::IIntensityNormalizer::*setMaximumIntensity_function_type)( double ) ;
            
            IIntensityNormalizer_exposer.def( 
                "setMaximumIntensity"
                , bp::pure_virtual( setMaximumIntensity_function_type(&::IIntensityNormalizer::setMaximumIntensity) )
                , ( bp::arg("arg0") ) );
        
        }
    }

}

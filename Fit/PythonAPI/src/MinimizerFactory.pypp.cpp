// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonFitList.h"
#include "MinimizerFactory.pypp.h"

namespace bp = boost::python;

void register_MinimizerFactory_class(){

    { //::MinimizerFactory
        typedef bp::class_< MinimizerFactory > MinimizerFactory_exposer_t;
        MinimizerFactory_exposer_t MinimizerFactory_exposer = MinimizerFactory_exposer_t( "MinimizerFactory" );
        bp::scope MinimizerFactory_scope( MinimizerFactory_exposer );
        { //::MinimizerFactory::createMinimizer
        
            typedef ::IMinimizer * ( *createMinimizer_function_type )( ::std::string const &,::std::string const &,::std::string const & );
            
            MinimizerFactory_exposer.def( 
                "createMinimizer"
                , createMinimizer_function_type( &::MinimizerFactory::createMinimizer )
                , ( bp::arg("minimizer"), bp::arg("algorithm")=std::basic_string<char, std::char_traits<char>, std::allocator<char> >(), bp::arg("options")=std::basic_string<char, std::char_traits<char>, std::allocator<char> >() )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::MinimizerFactory::printCatalogue
        
            typedef void ( *printCatalogue_function_type )(  );
            
            MinimizerFactory_exposer.def( 
                "printCatalogue"
                , printCatalogue_function_type( &::MinimizerFactory::printCatalogue ) );
        
        }
        MinimizerFactory_exposer.staticmethod( "createMinimizer" );
        MinimizerFactory_exposer.staticmethod( "printCatalogue" );
    }

}

// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonFitList.h"
#include "SquaredFunctionGaussianError.pypp.h"

namespace bp = boost::python;

struct SquaredFunctionGaussianError_wrapper : SquaredFunctionGaussianError, bp::wrapper< SquaredFunctionGaussianError > {

    SquaredFunctionGaussianError_wrapper(double sigma=1.00000000000000002081668171172168513294309377670288085938e-2 )
    : SquaredFunctionGaussianError( sigma )
      , bp::wrapper< SquaredFunctionGaussianError >(){
        // constructor
    m_pyobj = 0;
    }

    virtual double calculateSquaredDifference( double real_value, double simulated_value ) const  {
        if( bp::override func_calculateSquaredDifference = this->get_override( "calculateSquaredDifference" ) )
            return func_calculateSquaredDifference( real_value, simulated_value );
        else{
            return this->SquaredFunctionGaussianError::calculateSquaredDifference( real_value, simulated_value );
        }
    }
    
    double default_calculateSquaredDifference( double real_value, double simulated_value ) const  {
        return SquaredFunctionGaussianError::calculateSquaredDifference( real_value, simulated_value );
    }

    virtual double calculateSquaredError( double arg0, double arg1 ) const  {
        if( bp::override func_calculateSquaredError = this->get_override( "calculateSquaredError" ) )
            return func_calculateSquaredError( arg0, arg1 );
        else{
            return this->SquaredFunctionGaussianError::calculateSquaredError( arg0, arg1 );
        }
    }
    
    double default_calculateSquaredError( double arg0, double arg1 ) const  {
        return SquaredFunctionGaussianError::calculateSquaredError( arg0, arg1 );
    }

    virtual ::SquaredFunctionGaussianError * clone(  ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone(  );
        else{
            return this->SquaredFunctionGaussianError::clone(  );
        }
    }
    
    ::SquaredFunctionGaussianError * default_clone(  ) const  {
        return SquaredFunctionGaussianError::clone( );
    }

    PyObject* m_pyobj;

};

void register_SquaredFunctionGaussianError_class(){

    { //::SquaredFunctionGaussianError
        typedef bp::class_< SquaredFunctionGaussianError_wrapper, bp::bases< ISquaredFunction >, std::auto_ptr< SquaredFunctionGaussianError_wrapper >, boost::noncopyable > SquaredFunctionGaussianError_exposer_t;
        SquaredFunctionGaussianError_exposer_t SquaredFunctionGaussianError_exposer = SquaredFunctionGaussianError_exposer_t( "SquaredFunctionGaussianError", "Squared difference between two values with gaussian error value = (a-b)*(a-b)/norm, where norm = sigma*sigma, sigma - is set by use.", bp::init< bp::optional< double > >(( bp::arg("sigma")=1.00000000000000002081668171172168513294309377670288085938e-2 )) );
        bp::scope SquaredFunctionGaussianError_scope( SquaredFunctionGaussianError_exposer );
        { //::SquaredFunctionGaussianError::calculateSquaredDifference
        
            typedef double ( ::SquaredFunctionGaussianError::*calculateSquaredDifference_function_type)( double,double ) const;
            typedef double ( SquaredFunctionGaussianError_wrapper::*default_calculateSquaredDifference_function_type)( double,double ) const;
            
            SquaredFunctionGaussianError_exposer.def( 
                "calculateSquaredDifference"
                , calculateSquaredDifference_function_type(&::SquaredFunctionGaussianError::calculateSquaredDifference)
                , default_calculateSquaredDifference_function_type(&SquaredFunctionGaussianError_wrapper::default_calculateSquaredDifference)
                , ( bp::arg("real_value"), bp::arg("simulated_value") ) );
        
        }
        { //::SquaredFunctionGaussianError::calculateSquaredError
        
            typedef double ( ::SquaredFunctionGaussianError::*calculateSquaredError_function_type)( double,double ) const;
            typedef double ( SquaredFunctionGaussianError_wrapper::*default_calculateSquaredError_function_type)( double,double ) const;
            
            SquaredFunctionGaussianError_exposer.def( 
                "calculateSquaredError"
                , calculateSquaredError_function_type(&::SquaredFunctionGaussianError::calculateSquaredError)
                , default_calculateSquaredError_function_type(&SquaredFunctionGaussianError_wrapper::default_calculateSquaredError)
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::SquaredFunctionGaussianError::clone
        
            typedef ::SquaredFunctionGaussianError * ( ::SquaredFunctionGaussianError::*clone_function_type)(  ) const;
            typedef ::SquaredFunctionGaussianError * ( SquaredFunctionGaussianError_wrapper::*default_clone_function_type)(  ) const;
            
            SquaredFunctionGaussianError_exposer.def( 
                "clone"
                , clone_function_type(&::SquaredFunctionGaussianError::clone)
                , default_clone_function_type(&SquaredFunctionGaussianError_wrapper::default_clone)
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
    }

}

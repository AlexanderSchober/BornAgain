// This file has been generated by Py++.

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter);
GCC_DIAG_OFF(missing-field-initializers);
#include "boost/python.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
GCC_DIAG_ON(unused-parameter);
GCC_DIAG_ON(missing-field-initializers);
#include "AttLimits.h"
#include "IChiSquaredModule.h"
#include "IMinimizer.h"
#include "ChiSquaredModule.h"
#include "FitSuite.h"
#include "MinimizerFactory.h"
#include "PythonPlusplusFitHelper.h"
#include "MathFunctions.h"
#include "ISquaredFunction.h"
#include "IOutputDataNormalizer.h"
#include "PythonInterface_free_functions.pypp.h"

namespace bp = boost::python;

void register_free_functions(){

    { //::MathFunctions::Bessel_C1
    
        typedef double ( *Bessel_C1_function_type )( double );
        
        bp::def( 
            "Bessel_C1"
            , Bessel_C1_function_type( &::MathFunctions::Bessel_C1 )
            , ( bp::arg("value") ) );
    
    }

    { //::MathFunctions::Bessel_J1
    
        typedef double ( *Bessel_J1_function_type )( double );
        
        bp::def( 
            "Bessel_J1"
            , Bessel_J1_function_type( &::MathFunctions::Bessel_J1 )
            , ( bp::arg("value") ) );
    
    }

    { //::MathFunctions::ConvolveFFT
    
        typedef ::std::vector< std::complex<double> > ( *ConvolveFFT_function_type )( ::std::vector< double > const &,::std::vector< double > const & );
        
        bp::def( 
            "ConvolveFFT"
            , ConvolveFFT_function_type( &::MathFunctions::ConvolveFFT )
            , ( bp::arg("signal"), bp::arg("resfunc") ) );
    
    }

    { //::MathFunctions::FastCos
    
        typedef ::complex_t ( *FastCos_function_type )( ::complex_t const & );
        
        bp::def( 
            "FastCos"
            , FastCos_function_type( &::MathFunctions::FastCos )
            , ( bp::arg("x") ) );
    
    }

    { //::MathFunctions::FastCos
    
        typedef double ( *FastCos_function_type )( double const & );
        
        bp::def( 
            "FastCos"
            , FastCos_function_type( &::MathFunctions::FastCos )
            , ( bp::arg("x") ) );
    
    }

    { //::MathFunctions::FastFourierTransform
    
        typedef ::std::vector< std::complex<double> > ( *FastFourierTransform_function_type )( ::std::vector< double > const &,::MathFunctions::TransformCase );
        
        bp::def( 
            "FastFourierTransform"
            , FastFourierTransform_function_type( &::MathFunctions::FastFourierTransform )
            , ( bp::arg("data"), bp::arg("tcase") ) );
    
    }

    { //::MathFunctions::FastFourierTransform
    
        typedef ::std::vector< std::complex<double> > ( *FastFourierTransform_function_type )( ::std::vector< std::complex<double> > const &,::MathFunctions::TransformCase );
        
        bp::def( 
            "FastFourierTransform"
            , FastFourierTransform_function_type( &::MathFunctions::FastFourierTransform )
            , ( bp::arg("data"), bp::arg("tcase") ) );
    
    }

    { //::MathFunctions::FastSin
    
        typedef ::complex_t ( *FastSin_function_type )( ::complex_t const & );
        
        bp::def( 
            "FastSin"
            , FastSin_function_type( &::MathFunctions::FastSin )
            , ( bp::arg("x") ) );
    
    }

    { //::MathFunctions::FastSin
    
        typedef double ( *FastSin_function_type )( double const & );
        
        bp::def( 
            "FastSin"
            , FastSin_function_type( &::MathFunctions::FastSin )
            , ( bp::arg("x") ) );
    
    }

    { //::MathFunctions::FastSinCos
    
        typedef void ( *FastSinCos_function_type )( ::complex_t const &,::complex_t &,::complex_t & );
        
        bp::def( 
            "FastSinCos"
            , FastSinCos_function_type( &::MathFunctions::FastSinCos )
            , ( bp::arg("x"), bp::arg("xsin"), bp::arg("xcos") ) );
    
    }

    { //::MathFunctions::Gaussian
    
        typedef double ( *Gaussian_function_type )( double,double,double );
        
        bp::def( 
            "Gaussian"
            , Gaussian_function_type( &::MathFunctions::Gaussian )
            , ( bp::arg("value"), bp::arg("average"), bp::arg("std_dev") ) );
    
    }

    { //::MathFunctions::GenerateNormalRandom
    
        typedef double ( *GenerateNormalRandom_function_type )( double,double );
        
        bp::def( 
            "GenerateNormalRandom"
            , GenerateNormalRandom_function_type( &::MathFunctions::GenerateNormalRandom )
            , ( bp::arg("average"), bp::arg("std_dev") ) );
    
    }

    { //::MathFunctions::GenerateStandardNormalRandom
    
        typedef double ( *GenerateStandardNormalRandom_function_type )(  );
        
        bp::def( 
            "GenerateStandardNormalRandom"
            , GenerateStandardNormalRandom_function_type( &::MathFunctions::GenerateStandardNormalRandom ) );
    
    }

    { //::MathFunctions::GenerateUniformRandom
    
        typedef double ( *GenerateUniformRandom_function_type )(  );
        
        bp::def( 
            "GenerateUniformRandom"
            , GenerateUniformRandom_function_type( &::MathFunctions::GenerateUniformRandom ) );
    
    }

    { //::MathFunctions::IntegratedGaussian
    
        typedef double ( *IntegratedGaussian_function_type )( double,double,double );
        
        bp::def( 
            "IntegratedGaussian"
            , IntegratedGaussian_function_type( &::MathFunctions::IntegratedGaussian )
            , ( bp::arg("value"), bp::arg("average"), bp::arg("std_dev") ) );
    
    }

    { //::MathFunctions::Laue
    
        typedef ::complex_t ( *Laue_function_type )( ::complex_t const &,::size_t );
        
        bp::def( 
            "Laue"
            , Laue_function_type( &::MathFunctions::Laue )
            , ( bp::arg("value"), bp::arg("N") ) );
    
    }

    { //::MathFunctions::Si
    
        typedef double ( *Si_function_type )( double );
        
        bp::def( 
            "Si"
            , Si_function_type( &::MathFunctions::Si )
            , ( bp::arg("value") ) );
    
    }

    { //::MathFunctions::Sinc
    
        typedef ::complex_t ( *Sinc_function_type )( ::complex_t const & );
        
        bp::def( 
            "Sinc"
            , Sinc_function_type( &::MathFunctions::Sinc )
            , ( bp::arg("value") ) );
    
    }

    { //::MathFunctions::Sinc
    
        typedef double ( *Sinc_function_type )( double );
        
        bp::def( 
            "Sinc"
            , Sinc_function_type( &::MathFunctions::Sinc )
            , ( bp::arg("value") ) );
    
    }

    { //::MathFunctions::StandardNormal
    
        typedef double ( *StandardNormal_function_type )( double );
        
        bp::def( 
            "StandardNormal"
            , StandardNormal_function_type( &::MathFunctions::StandardNormal )
            , ( bp::arg("value") ) );
    
    }

}

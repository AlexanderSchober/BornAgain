// This file has been generated by Py++.

// BornAgain: simulate and fit scattering at grazing incidence 
//! @brief automatically generated boost::python code for PythonCoreAPI  

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter);
GCC_DIAG_OFF(missing-field-initializers);
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter);
GCC_DIAG_ON(missing-field-initializers);
#include "PythonFitList.h"
#include "IntensityFunctionLog.pypp.h"

namespace bp = boost::python;

struct IntensityFunctionLog_wrapper : IntensityFunctionLog, bp::wrapper< IntensityFunctionLog > {

    IntensityFunctionLog_wrapper(IntensityFunctionLog const & arg )
    : IntensityFunctionLog( arg )
      , bp::wrapper< IntensityFunctionLog >(){
        // copy constructor
        
    }

    IntensityFunctionLog_wrapper()
    : IntensityFunctionLog()
      , bp::wrapper< IntensityFunctionLog >(){
        // null constructor
        
    }

    virtual ::IntensityFunctionLog * clone(  ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone(  );
        else
            return this->IntensityFunctionLog::clone(  );
    }
    
    
    ::IntensityFunctionLog * default_clone(  ) const  {
        return IntensityFunctionLog::clone( );
    }

    virtual double evaluate( double value ) const  {
        if( bp::override func_evaluate = this->get_override( "evaluate" ) )
            return func_evaluate( value );
        else
            return this->IntensityFunctionLog::evaluate( value );
    }
    
    
    double default_evaluate( double value ) const  {
        return IntensityFunctionLog::evaluate( value );
    }

};

void register_IntensityFunctionLog_class(){

    { //::IntensityFunctionLog
        typedef bp::class_< IntensityFunctionLog_wrapper, bp::bases< IIntensityFunction > > IntensityFunctionLog_exposer_t;
        IntensityFunctionLog_exposer_t IntensityFunctionLog_exposer = IntensityFunctionLog_exposer_t( "IntensityFunctionLog" );
        bp::scope IntensityFunctionLog_scope( IntensityFunctionLog_exposer );
        { //::IntensityFunctionLog::clone
        
            typedef ::IntensityFunctionLog * ( ::IntensityFunctionLog::*clone_function_type )(  ) const;
            typedef ::IntensityFunctionLog * ( IntensityFunctionLog_wrapper::*default_clone_function_type )(  ) const;
            
            IntensityFunctionLog_exposer.def( 
                "clone"
                , clone_function_type(&::IntensityFunctionLog::clone)
                , default_clone_function_type(&IntensityFunctionLog_wrapper::default_clone)
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::IntensityFunctionLog::evaluate
        
            typedef double ( ::IntensityFunctionLog::*evaluate_function_type )( double ) const;
            typedef double ( IntensityFunctionLog_wrapper::*default_evaluate_function_type )( double ) const;
            
            IntensityFunctionLog_exposer.def( 
                "evaluate"
                , evaluate_function_type(&::IntensityFunctionLog::evaluate)
                , default_evaluate_function_type(&IntensityFunctionLog_wrapper::default_evaluate)
                , ( bp::arg("value") ) );
        
        }
    }

}

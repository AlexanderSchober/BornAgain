// This file has been generated by Py++.

// ************************************************************************** //
//
//  BornAgain: simulate and fit scattering at grazing incidence
//
//! @file      Automatically generated boost::python code for BornAgain Python bindings
//! @brief     Automatically generated boost::python code for BornAgain Python bindings
//!
//! @homepage  http://bornagainproject.org
//! @license   GNU General Public License v3 or higher (see COPYING)
//! @copyright Forschungszentrum Juelich GmbH 2015
//! @authors   Scientific Computing Group at MLZ Garching
//! @authors   C. Durniak, M. Ganeva, G. Pospelov, W. Van Herck, J. Wuttke
//
// ************************************************************************** //

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter)
GCC_DIAG_OFF(missing-field-initializers)
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter)
GCC_DIAG_ON(missing-field-initializers)
#include "PythonFitList.h"
#include "IChiSquaredModule.pypp.h"

namespace bp = boost::python;

struct IChiSquaredModule_wrapper : IChiSquaredModule, bp::wrapper< IChiSquaredModule > {

    IChiSquaredModule_wrapper( )
    : IChiSquaredModule( )
      , bp::wrapper< IChiSquaredModule >(){
        // null constructor
    m_pyobj = 0;
    }

    virtual ::IChiSquaredModule * clone(  ) const {
        bp::override func_clone = this->get_override( "clone" );
        return func_clone(  );
    }

    virtual ::IIntensityFunction const * getIntensityFunction(  ) const  {
        if( bp::override func_getIntensityFunction = this->get_override( "getIntensityFunction" ) )
            return func_getIntensityFunction(  );
        else{
            return this->IChiSquaredModule::getIntensityFunction(  );
        }
    }
    
    ::IIntensityFunction const * default_getIntensityFunction(  ) const  {
        return IChiSquaredModule::getIntensityFunction( );
    }

    virtual ::IIntensityNormalizer const * getIntensityNormalizer(  ) const  {
        if( bp::override func_getIntensityNormalizer = this->get_override( "getIntensityNormalizer" ) )
            return func_getIntensityNormalizer(  );
        else{
            return this->IChiSquaredModule::getIntensityNormalizer(  );
        }
    }
    
    ::IIntensityNormalizer const * default_getIntensityNormalizer(  ) const  {
        return IChiSquaredModule::getIntensityNormalizer( );
    }

    virtual ::IIntensityNormalizer * getIntensityNormalizer(  ) {
        if( bp::override func_getIntensityNormalizer = this->get_override( "getIntensityNormalizer" ) )
            return func_getIntensityNormalizer(  );
        else{
            return this->IChiSquaredModule::getIntensityNormalizer(  );
        }
    }
    
    ::IIntensityNormalizer * default_getIntensityNormalizer(  ) {
        return IChiSquaredModule::getIntensityNormalizer( );
    }

    virtual void setIntensityFunction( ::IIntensityFunction const & intensity_function ) {
        if( bp::override func_setIntensityFunction = this->get_override( "setIntensityFunction" ) )
            func_setIntensityFunction( boost::ref(intensity_function) );
        else{
            this->IChiSquaredModule::setIntensityFunction( boost::ref(intensity_function) );
        }
    }
    
    void default_setIntensityFunction( ::IIntensityFunction const & intensity_function ) {
        IChiSquaredModule::setIntensityFunction( boost::ref(intensity_function) );
    }

    virtual void setIntensityNormalizer( ::IIntensityNormalizer const & data_normalizer ) {
        if( bp::override func_setIntensityNormalizer = this->get_override( "setIntensityNormalizer" ) )
            func_setIntensityNormalizer( boost::ref(data_normalizer) );
        else{
            this->IChiSquaredModule::setIntensityNormalizer( boost::ref(data_normalizer) );
        }
    }
    
    void default_setIntensityNormalizer( ::IIntensityNormalizer const & data_normalizer ) {
        IChiSquaredModule::setIntensityNormalizer( boost::ref(data_normalizer) );
    }

    PyObject* m_pyobj;

};

void register_IChiSquaredModule_class(){

    { //::IChiSquaredModule
        typedef bp::class_< IChiSquaredModule_wrapper, std::auto_ptr< IChiSquaredModule_wrapper >, boost::noncopyable > IChiSquaredModule_exposer_t;
        IChiSquaredModule_exposer_t IChiSquaredModule_exposer = IChiSquaredModule_exposer_t( "IChiSquaredModule", "Interface for ChiSquaredModule, ChiSquaredFrequency for chi2 calculations.", bp::init< >() );
        bp::scope IChiSquaredModule_scope( IChiSquaredModule_exposer );
        { //::IChiSquaredModule::clone
        
            typedef ::IChiSquaredModule * ( ::IChiSquaredModule::*clone_function_type)(  ) const;
            
            IChiSquaredModule_exposer.def( 
                "clone"
                , bp::pure_virtual( clone_function_type(&::IChiSquaredModule::clone) )
                , bp::return_value_policy< bp::manage_new_object >()
                , "clone method." );
        
        }
        { //::IChiSquaredModule::getIntensityFunction
        
            typedef ::IIntensityFunction const * ( ::IChiSquaredModule::*getIntensityFunction_function_type)(  ) const;
            typedef ::IIntensityFunction const * ( IChiSquaredModule_wrapper::*default_getIntensityFunction_function_type)(  ) const;
            
            IChiSquaredModule_exposer.def( 
                "getIntensityFunction"
                , getIntensityFunction_function_type(&::IChiSquaredModule::getIntensityFunction)
                , default_getIntensityFunction_function_type(&IChiSquaredModule_wrapper::default_getIntensityFunction)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::IChiSquaredModule::getIntensityNormalizer
        
            typedef ::IIntensityNormalizer const * ( ::IChiSquaredModule::*getIntensityNormalizer_function_type)(  ) const;
            typedef ::IIntensityNormalizer const * ( IChiSquaredModule_wrapper::*default_getIntensityNormalizer_function_type)(  ) const;
            
            IChiSquaredModule_exposer.def( 
                "getIntensityNormalizer"
                , getIntensityNormalizer_function_type(&::IChiSquaredModule::getIntensityNormalizer)
                , default_getIntensityNormalizer_function_type(&IChiSquaredModule_wrapper::default_getIntensityNormalizer)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::IChiSquaredModule::getIntensityNormalizer
        
            typedef ::IIntensityNormalizer * ( ::IChiSquaredModule::*getIntensityNormalizer_function_type)(  ) ;
            typedef ::IIntensityNormalizer * ( IChiSquaredModule_wrapper::*default_getIntensityNormalizer_function_type)(  ) ;
            
            IChiSquaredModule_exposer.def( 
                "getIntensityNormalizer"
                , getIntensityNormalizer_function_type(&::IChiSquaredModule::getIntensityNormalizer)
                , default_getIntensityNormalizer_function_type(&IChiSquaredModule_wrapper::default_getIntensityNormalizer)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::IChiSquaredModule::getSquaredFunction
        
            typedef ::ISquaredFunction const * ( ::IChiSquaredModule::*getSquaredFunction_function_type)(  ) const;
            
            IChiSquaredModule_exposer.def( 
                "getSquaredFunction"
                , getSquaredFunction_function_type( &::IChiSquaredModule::getSquaredFunction )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "Returns squared function." );
        
        }
        { //::IChiSquaredModule::setChiSquaredFunction
        
            typedef void ( ::IChiSquaredModule::*setChiSquaredFunction_function_type)( ::ISquaredFunction const & ) ;
            
            IChiSquaredModule_exposer.def( 
                "setChiSquaredFunction"
                , setChiSquaredFunction_function_type( &::IChiSquaredModule::setChiSquaredFunction )
                , ( bp::arg("squared_function") )
                , "Sets squared function." );
        
        }
        { //::IChiSquaredModule::setIntensityFunction
        
            typedef void ( ::IChiSquaredModule::*setIntensityFunction_function_type)( ::IIntensityFunction const & ) ;
            typedef void ( IChiSquaredModule_wrapper::*default_setIntensityFunction_function_type)( ::IIntensityFunction const & ) ;
            
            IChiSquaredModule_exposer.def( 
                "setIntensityFunction"
                , setIntensityFunction_function_type(&::IChiSquaredModule::setIntensityFunction)
                , default_setIntensityFunction_function_type(&IChiSquaredModule_wrapper::default_setIntensityFunction)
                , ( bp::arg("intensity_function") ) );
        
        }
        { //::IChiSquaredModule::setIntensityNormalizer
        
            typedef void ( ::IChiSquaredModule::*setIntensityNormalizer_function_type)( ::IIntensityNormalizer const & ) ;
            typedef void ( IChiSquaredModule_wrapper::*default_setIntensityNormalizer_function_type)( ::IIntensityNormalizer const & ) ;
            
            IChiSquaredModule_exposer.def( 
                "setIntensityNormalizer"
                , setIntensityNormalizer_function_type(&::IChiSquaredModule::setIntensityNormalizer)
                , default_setIntensityNormalizer_function_type(&IChiSquaredModule_wrapper::default_setIntensityNormalizer)
                , ( bp::arg("data_normalizer") ) );
        
        }
    }

}

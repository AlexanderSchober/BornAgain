// This file has been generated by Py++.

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter);
GCC_DIAG_OFF(missing-field-initializers);
#include "boost/python.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
GCC_DIAG_ON(unused-parameter);
GCC_DIAG_ON(missing-field-initializers);
#include "AttLimits.h"
#include "IChiSquaredModule.h"
#include "IMinimizer.h"
#include "ChiSquaredModule.h"
#include "FitSuite.h"
#include "FitSuiteParameters.h"
#include "MinimizerFactory.h"
#include "PythonPlusplusFitHelper.h"
#include "MathFunctions.h"
#include "ISquaredFunction.h"
#include "IOutputDataNormalizer.h"
#include "IChiSquaredModule.pypp.h"

namespace bp = boost::python;

struct IChiSquaredModule_wrapper : IChiSquaredModule, bp::wrapper< IChiSquaredModule > {

    IChiSquaredModule_wrapper( )
    : IChiSquaredModule( )
      , bp::wrapper< IChiSquaredModule >(){
        // null constructor
    
    }

    virtual double calculateChiSquared(  ){
        bp::override func_calculateChiSquared = this->get_override( "calculateChiSquared" );
        return func_calculateChiSquared(  );
    }

    virtual ::IChiSquaredModule * clone(  ) const {
        bp::override func_clone = this->get_override( "clone" );
        return func_clone(  );
    }

    virtual ::OutputData< double > * createChi2DifferenceMap(  ) const {
        bp::override func_createChi2DifferenceMap = this->get_override( "createChi2DifferenceMap" );
        return func_createChi2DifferenceMap(  );
    }

    virtual ::IFittingDataSelector const * getFittingDataSelector(  ) const  {
        if( bp::override func_getFittingDataSelector = this->get_override( "getFittingDataSelector" ) )
            return func_getFittingDataSelector(  );
        else{
            return this->IChiSquaredModule::getFittingDataSelector(  );
        }
    }
    
    ::IFittingDataSelector const * default_getFittingDataSelector(  ) const  {
        return IChiSquaredModule::getFittingDataSelector( );
    }

    virtual bool getIntensityLog(  ) const  {
        if( bp::override func_getIntensityLog = this->get_override( "getIntensityLog" ) )
            return func_getIntensityLog(  );
        else{
            return this->IChiSquaredModule::getIntensityLog(  );
        }
    }
    
    bool default_getIntensityLog(  ) const  {
        return IChiSquaredModule::getIntensityLog( );
    }

    virtual bool getIntensitySqrt(  ) const  {
        if( bp::override func_getIntensitySqrt = this->get_override( "getIntensitySqrt" ) )
            return func_getIntensitySqrt(  );
        else{
            return this->IChiSquaredModule::getIntensitySqrt(  );
        }
    }
    
    bool default_getIntensitySqrt(  ) const  {
        return IChiSquaredModule::getIntensitySqrt( );
    }

    virtual ::IOutputDataNormalizer const * getOutputDataNormalizer(  ) const  {
        if( bp::override func_getOutputDataNormalizer = this->get_override( "getOutputDataNormalizer" ) )
            return func_getOutputDataNormalizer(  );
        else{
            return this->IChiSquaredModule::getOutputDataNormalizer(  );
        }
    }
    
    ::IOutputDataNormalizer const * default_getOutputDataNormalizer(  ) const  {
        return IChiSquaredModule::getOutputDataNormalizer( );
    }

    virtual ::IOutputDataNormalizer * getOutputDataNormalizer(  ) {
        if( bp::override func_getOutputDataNormalizer = this->get_override( "getOutputDataNormalizer" ) )
            return func_getOutputDataNormalizer(  );
        else{
            return this->IChiSquaredModule::getOutputDataNormalizer(  );
        }
    }
    
    ::IOutputDataNormalizer * default_getOutputDataNormalizer(  ) {
        return IChiSquaredModule::getOutputDataNormalizer( );
    }

    virtual double getResidualValue( ::size_t arg0 ) const  {
        if( bp::override func_getResidualValue = this->get_override( "getResidualValue" ) )
            return func_getResidualValue( arg0 );
        else{
            return this->IChiSquaredModule::getResidualValue( arg0 );
        }
    }
    
    double default_getResidualValue( ::size_t arg0 ) const  {
        return IChiSquaredModule::getResidualValue( arg0 );
    }

    virtual double getValue(  ) const  {
        if( bp::override func_getValue = this->get_override( "getValue" ) )
            return func_getValue(  );
        else{
            return this->IChiSquaredModule::getValue(  );
        }
    }
    
    double default_getValue(  ) const  {
        return IChiSquaredModule::getValue( );
    }

    virtual void setFittingDataSelector( ::IFittingDataSelector const & selector ) {
        if( bp::override func_setFittingDataSelector = this->get_override( "setFittingDataSelector" ) )
            func_setFittingDataSelector( boost::ref(selector) );
        else{
            this->IChiSquaredModule::setFittingDataSelector( boost::ref(selector) );
        }
    }
    
    void default_setFittingDataSelector( ::IFittingDataSelector const & selector ) {
        IChiSquaredModule::setFittingDataSelector( boost::ref(selector) );
    }

    virtual void setIntensityLog( bool val ) {
        if( bp::override func_setIntensityLog = this->get_override( "setIntensityLog" ) )
            func_setIntensityLog( val );
        else{
            this->IChiSquaredModule::setIntensityLog( val );
        }
    }
    
    void default_setIntensityLog( bool val ) {
        IChiSquaredModule::setIntensityLog( val );
    }

    virtual void setIntensitySqrt( bool val ) {
        if( bp::override func_setIntensitySqrt = this->get_override( "setIntensitySqrt" ) )
            func_setIntensitySqrt( val );
        else{
            this->IChiSquaredModule::setIntensitySqrt( val );
        }
    }
    
    void default_setIntensitySqrt( bool val ) {
        IChiSquaredModule::setIntensitySqrt( val );
    }

    virtual void setOutputDataNormalizer( ::IOutputDataNormalizer const & data_normalizer ) {
        if( bp::override func_setOutputDataNormalizer = this->get_override( "setOutputDataNormalizer" ) )
            func_setOutputDataNormalizer( boost::ref(data_normalizer) );
        else{
            this->IChiSquaredModule::setOutputDataNormalizer( boost::ref(data_normalizer) );
        }
    }
    
    void default_setOutputDataNormalizer( ::IOutputDataNormalizer const & data_normalizer ) {
        IChiSquaredModule::setOutputDataNormalizer( boost::ref(data_normalizer) );
    }

};

void register_IChiSquaredModule_class(){

    bp::class_< IChiSquaredModule_wrapper, boost::noncopyable >( "IChiSquaredModule", bp::init< >() )    
        .def( 
            "calculateChiSquared"
            , bp::pure_virtual( (double ( ::IChiSquaredModule::* )(  ) )(&::IChiSquaredModule::calculateChiSquared) ) )    
        .def( 
            "clone"
            , bp::pure_virtual( (::IChiSquaredModule * ( ::IChiSquaredModule::* )(  ) const)(&::IChiSquaredModule::clone) )
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "createChi2DifferenceMap"
            , bp::pure_virtual( (::OutputData< double > * ( ::IChiSquaredModule::* )(  ) const)(&::IChiSquaredModule::createChi2DifferenceMap) )
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "getFittingDataSelector"
            , (::IFittingDataSelector const * ( ::IChiSquaredModule::* )(  ) const)(&::IChiSquaredModule::getFittingDataSelector)
            , (::IFittingDataSelector const * ( IChiSquaredModule_wrapper::* )(  ) const)(&IChiSquaredModule_wrapper::default_getFittingDataSelector)
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "getIntensityLog"
            , (bool ( ::IChiSquaredModule::* )(  ) const)(&::IChiSquaredModule::getIntensityLog)
            , (bool ( IChiSquaredModule_wrapper::* )(  ) const)(&IChiSquaredModule_wrapper::default_getIntensityLog) )    
        .def( 
            "getIntensitySqrt"
            , (bool ( ::IChiSquaredModule::* )(  ) const)(&::IChiSquaredModule::getIntensitySqrt)
            , (bool ( IChiSquaredModule_wrapper::* )(  ) const)(&IChiSquaredModule_wrapper::default_getIntensitySqrt) )    
        .def( 
            "getOutputDataNormalizer"
            , (::IOutputDataNormalizer const * ( ::IChiSquaredModule::* )(  ) const)(&::IChiSquaredModule::getOutputDataNormalizer)
            , (::IOutputDataNormalizer const * ( IChiSquaredModule_wrapper::* )(  ) const)(&IChiSquaredModule_wrapper::default_getOutputDataNormalizer)
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "getOutputDataNormalizer"
            , (::IOutputDataNormalizer * ( ::IChiSquaredModule::* )(  ) )(&::IChiSquaredModule::getOutputDataNormalizer)
            , (::IOutputDataNormalizer * ( IChiSquaredModule_wrapper::* )(  ) )(&IChiSquaredModule_wrapper::default_getOutputDataNormalizer)
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "getRealData"
            , (::OutputData< double > const * ( ::IChiSquaredModule::* )(  ) const)( &::IChiSquaredModule::getRealData )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "getResidualValue"
            , (double ( ::IChiSquaredModule::* )( ::size_t ) const)(&::IChiSquaredModule::getResidualValue)
            , (double ( IChiSquaredModule_wrapper::* )( ::size_t ) const)(&IChiSquaredModule_wrapper::default_getResidualValue)
            , ( bp::arg("arg0") ) )    
        .def( 
            "getSimulationData"
            , (::OutputData< double > const * ( ::IChiSquaredModule::* )(  ) const)( &::IChiSquaredModule::getSimulationData )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "getSquaredFunction"
            , (::ISquaredFunction const * ( ::IChiSquaredModule::* )(  ) const)( &::IChiSquaredModule::getSquaredFunction )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "getValue"
            , (double ( ::IChiSquaredModule::* )(  ) const)(&::IChiSquaredModule::getValue)
            , (double ( IChiSquaredModule_wrapper::* )(  ) const)(&IChiSquaredModule_wrapper::default_getValue) )    
        .def( 
            "setChiSquaredFunction"
            , (void ( ::IChiSquaredModule::* )( ::ISquaredFunction const & ) )( &::IChiSquaredModule::setChiSquaredFunction )
            , ( bp::arg("squared_function") ) )    
        .def( 
            "setFittingDataSelector"
            , (void ( ::IChiSquaredModule::* )( ::IFittingDataSelector const & ) )(&::IChiSquaredModule::setFittingDataSelector)
            , (void ( IChiSquaredModule_wrapper::* )( ::IFittingDataSelector const & ) )(&IChiSquaredModule_wrapper::default_setFittingDataSelector)
            , ( bp::arg("selector") ) )    
        .def( 
            "setIntensityLog"
            , (void ( ::IChiSquaredModule::* )( bool ) )(&::IChiSquaredModule::setIntensityLog)
            , (void ( IChiSquaredModule_wrapper::* )( bool ) )(&IChiSquaredModule_wrapper::default_setIntensityLog)
            , ( bp::arg("val") ) )    
        .def( 
            "setIntensitySqrt"
            , (void ( ::IChiSquaredModule::* )( bool ) )(&::IChiSquaredModule::setIntensitySqrt)
            , (void ( IChiSquaredModule_wrapper::* )( bool ) )(&IChiSquaredModule_wrapper::default_setIntensitySqrt)
            , ( bp::arg("val") ) )    
        .def( 
            "setNdegreeOfFreedom"
            , (void ( ::IChiSquaredModule::* )( int ) )( &::IChiSquaredModule::setNdegreeOfFreedom )
            , ( bp::arg("ndegree_of_freedom") ) )    
        .def( 
            "setOutputDataNormalizer"
            , (void ( ::IChiSquaredModule::* )( ::IOutputDataNormalizer const & ) )(&::IChiSquaredModule::setOutputDataNormalizer)
            , (void ( IChiSquaredModule_wrapper::* )( ::IOutputDataNormalizer const & ) )(&IChiSquaredModule_wrapper::default_setOutputDataNormalizer)
            , ( bp::arg("data_normalizer") ) )    
        .def( 
            "setRealAndSimulatedData"
            , (void ( ::IChiSquaredModule::* )( ::OutputData< double > const &,::OutputData< double > const & ) )( &::IChiSquaredModule::setRealAndSimulatedData )
            , ( bp::arg("real_data"), bp::arg("simulation_data") ) );

}

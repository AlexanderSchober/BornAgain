// This file has been generated by Py++.

// BornAgain: simulate and fit scattering at grazing incidence 
//! @brief automatically generated boost::python code for PythonCoreAPI  

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter);
GCC_DIAG_OFF(missing-field-initializers);
#include "boost/python.hpp"
GCC_DIAG_ON(unused-parameter);
GCC_DIAG_ON(missing-field-initializers);
#include "PythonFitList.h"
#include "IChiSquaredModule.pypp.h"

namespace bp = boost::python;

struct IChiSquaredModule_wrapper : IChiSquaredModule, bp::wrapper< IChiSquaredModule > {

    IChiSquaredModule_wrapper( )
    : IChiSquaredModule( )
      , bp::wrapper< IChiSquaredModule >(){
        // null constructor
    
    }

    virtual double calculateChiSquared(  ){
        bp::override func_calculateChiSquared = this->get_override( "calculateChiSquared" );
        return func_calculateChiSquared(  );
    }

    virtual ::IChiSquaredModule * clone(  ) const {
        bp::override func_clone = this->get_override( "clone" );
        return func_clone(  );
    }

    virtual ::OutputData< double > * createChi2DifferenceMap(  ) const {
        bp::override func_createChi2DifferenceMap = this->get_override( "createChi2DifferenceMap" );
        return func_createChi2DifferenceMap(  );
    }

    virtual ::IFittingDataSelector const * getFittingDataSelector(  ) const  {
        if( bp::override func_getFittingDataSelector = this->get_override( "getFittingDataSelector" ) )
            return func_getFittingDataSelector(  );
        else{
            return this->IChiSquaredModule::getFittingDataSelector(  );
        }
    }
    
    ::IFittingDataSelector const * default_getFittingDataSelector(  ) const  {
        return IChiSquaredModule::getFittingDataSelector( );
    }

    virtual bool getIntensityLog(  ) const  {
        if( bp::override func_getIntensityLog = this->get_override( "getIntensityLog" ) )
            return func_getIntensityLog(  );
        else{
            return this->IChiSquaredModule::getIntensityLog(  );
        }
    }
    
    bool default_getIntensityLog(  ) const  {
        return IChiSquaredModule::getIntensityLog( );
    }

    virtual bool getIntensitySqrt(  ) const  {
        if( bp::override func_getIntensitySqrt = this->get_override( "getIntensitySqrt" ) )
            return func_getIntensitySqrt(  );
        else{
            return this->IChiSquaredModule::getIntensitySqrt(  );
        }
    }
    
    bool default_getIntensitySqrt(  ) const  {
        return IChiSquaredModule::getIntensitySqrt( );
    }

    virtual ::IOutputDataNormalizer const * getOutputDataNormalizer(  ) const  {
        if( bp::override func_getOutputDataNormalizer = this->get_override( "getOutputDataNormalizer" ) )
            return func_getOutputDataNormalizer(  );
        else{
            return this->IChiSquaredModule::getOutputDataNormalizer(  );
        }
    }
    
    ::IOutputDataNormalizer const * default_getOutputDataNormalizer(  ) const  {
        return IChiSquaredModule::getOutputDataNormalizer( );
    }

    virtual ::IOutputDataNormalizer * getOutputDataNormalizer(  ) {
        if( bp::override func_getOutputDataNormalizer = this->get_override( "getOutputDataNormalizer" ) )
            return func_getOutputDataNormalizer(  );
        else{
            return this->IChiSquaredModule::getOutputDataNormalizer(  );
        }
    }
    
    ::IOutputDataNormalizer * default_getOutputDataNormalizer(  ) {
        return IChiSquaredModule::getOutputDataNormalizer( );
    }

    virtual double getResidualValue( ::size_t arg0 ) const  {
        if( bp::override func_getResidualValue = this->get_override( "getResidualValue" ) )
            return func_getResidualValue( arg0 );
        else{
            return this->IChiSquaredModule::getResidualValue( arg0 );
        }
    }
    
    double default_getResidualValue( ::size_t arg0 ) const  {
        return IChiSquaredModule::getResidualValue( arg0 );
    }

    virtual double getValue(  ) const  {
        if( bp::override func_getValue = this->get_override( "getValue" ) )
            return func_getValue(  );
        else{
            return this->IChiSquaredModule::getValue(  );
        }
    }
    
    double default_getValue(  ) const  {
        return IChiSquaredModule::getValue( );
    }

    virtual void setFittingDataSelector( ::IFittingDataSelector const & selector ) {
        if( bp::override func_setFittingDataSelector = this->get_override( "setFittingDataSelector" ) )
            func_setFittingDataSelector( boost::ref(selector) );
        else{
            this->IChiSquaredModule::setFittingDataSelector( boost::ref(selector) );
        }
    }
    
    void default_setFittingDataSelector( ::IFittingDataSelector const & selector ) {
        IChiSquaredModule::setFittingDataSelector( boost::ref(selector) );
    }

    virtual void setIntensityLog( bool val ) {
        if( bp::override func_setIntensityLog = this->get_override( "setIntensityLog" ) )
            func_setIntensityLog( val );
        else{
            this->IChiSquaredModule::setIntensityLog( val );
        }
    }
    
    void default_setIntensityLog( bool val ) {
        IChiSquaredModule::setIntensityLog( val );
    }

    virtual void setIntensitySqrt( bool val ) {
        if( bp::override func_setIntensitySqrt = this->get_override( "setIntensitySqrt" ) )
            func_setIntensitySqrt( val );
        else{
            this->IChiSquaredModule::setIntensitySqrt( val );
        }
    }
    
    void default_setIntensitySqrt( bool val ) {
        IChiSquaredModule::setIntensitySqrt( val );
    }

    virtual void setOutputDataNormalizer( ::IOutputDataNormalizer const & data_normalizer ) {
        if( bp::override func_setOutputDataNormalizer = this->get_override( "setOutputDataNormalizer" ) )
            func_setOutputDataNormalizer( boost::ref(data_normalizer) );
        else{
            this->IChiSquaredModule::setOutputDataNormalizer( boost::ref(data_normalizer) );
        }
    }
    
    void default_setOutputDataNormalizer( ::IOutputDataNormalizer const & data_normalizer ) {
        IChiSquaredModule::setOutputDataNormalizer( boost::ref(data_normalizer) );
    }

};

void register_IChiSquaredModule_class(){

    { //::IChiSquaredModule
        typedef bp::class_< IChiSquaredModule_wrapper, boost::noncopyable > IChiSquaredModule_exposer_t;
        IChiSquaredModule_exposer_t IChiSquaredModule_exposer = IChiSquaredModule_exposer_t( "IChiSquaredModule", bp::init< >() );
        bp::scope IChiSquaredModule_scope( IChiSquaredModule_exposer );
        { //::IChiSquaredModule::calculateChiSquared
        
            typedef double ( ::IChiSquaredModule::*calculateChiSquared_function_type )(  ) ;
            
            IChiSquaredModule_exposer.def( 
                "calculateChiSquared"
                , bp::pure_virtual( calculateChiSquared_function_type(&::IChiSquaredModule::calculateChiSquared) ) );
        
        }
        { //::IChiSquaredModule::clone
        
            typedef ::IChiSquaredModule * ( ::IChiSquaredModule::*clone_function_type )(  ) const;
            
            IChiSquaredModule_exposer.def( 
                "clone"
                , bp::pure_virtual( clone_function_type(&::IChiSquaredModule::clone) )
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::IChiSquaredModule::createChi2DifferenceMap
        
            typedef ::OutputData<double> * ( ::IChiSquaredModule::*createChi2DifferenceMap_function_type )(  ) const;
            
            IChiSquaredModule_exposer.def( 
                "createChi2DifferenceMap"
                , bp::pure_virtual( createChi2DifferenceMap_function_type(&::IChiSquaredModule::createChi2DifferenceMap) )
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::IChiSquaredModule::getFittingDataSelector
        
            typedef ::IFittingDataSelector const * ( ::IChiSquaredModule::*getFittingDataSelector_function_type )(  ) const;
            typedef ::IFittingDataSelector const * ( IChiSquaredModule_wrapper::*default_getFittingDataSelector_function_type )(  ) const;
            
            IChiSquaredModule_exposer.def( 
                "getFittingDataSelector"
                , getFittingDataSelector_function_type(&::IChiSquaredModule::getFittingDataSelector)
                , default_getFittingDataSelector_function_type(&IChiSquaredModule_wrapper::default_getFittingDataSelector)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::IChiSquaredModule::getIntensityLog
        
            typedef bool ( ::IChiSquaredModule::*getIntensityLog_function_type )(  ) const;
            typedef bool ( IChiSquaredModule_wrapper::*default_getIntensityLog_function_type )(  ) const;
            
            IChiSquaredModule_exposer.def( 
                "getIntensityLog"
                , getIntensityLog_function_type(&::IChiSquaredModule::getIntensityLog)
                , default_getIntensityLog_function_type(&IChiSquaredModule_wrapper::default_getIntensityLog) );
        
        }
        { //::IChiSquaredModule::getIntensitySqrt
        
            typedef bool ( ::IChiSquaredModule::*getIntensitySqrt_function_type )(  ) const;
            typedef bool ( IChiSquaredModule_wrapper::*default_getIntensitySqrt_function_type )(  ) const;
            
            IChiSquaredModule_exposer.def( 
                "getIntensitySqrt"
                , getIntensitySqrt_function_type(&::IChiSquaredModule::getIntensitySqrt)
                , default_getIntensitySqrt_function_type(&IChiSquaredModule_wrapper::default_getIntensitySqrt) );
        
        }
        { //::IChiSquaredModule::getOutputDataNormalizer
        
            typedef ::IOutputDataNormalizer const * ( ::IChiSquaredModule::*getOutputDataNormalizer_function_type )(  ) const;
            typedef ::IOutputDataNormalizer const * ( IChiSquaredModule_wrapper::*default_getOutputDataNormalizer_function_type )(  ) const;
            
            IChiSquaredModule_exposer.def( 
                "getOutputDataNormalizer"
                , getOutputDataNormalizer_function_type(&::IChiSquaredModule::getOutputDataNormalizer)
                , default_getOutputDataNormalizer_function_type(&IChiSquaredModule_wrapper::default_getOutputDataNormalizer)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::IChiSquaredModule::getOutputDataNormalizer
        
            typedef ::IOutputDataNormalizer * ( ::IChiSquaredModule::*getOutputDataNormalizer_function_type )(  ) ;
            typedef ::IOutputDataNormalizer * ( IChiSquaredModule_wrapper::*default_getOutputDataNormalizer_function_type )(  ) ;
            
            IChiSquaredModule_exposer.def( 
                "getOutputDataNormalizer"
                , getOutputDataNormalizer_function_type(&::IChiSquaredModule::getOutputDataNormalizer)
                , default_getOutputDataNormalizer_function_type(&IChiSquaredModule_wrapper::default_getOutputDataNormalizer)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::IChiSquaredModule::getRealData
        
            typedef ::OutputData< double > const * ( ::IChiSquaredModule::*getRealData_function_type )(  ) const;
            
            IChiSquaredModule_exposer.def( 
                "getRealData"
                , getRealData_function_type( &::IChiSquaredModule::getRealData )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::IChiSquaredModule::getResidualValue
        
            typedef double ( ::IChiSquaredModule::*getResidualValue_function_type )( ::size_t ) const;
            typedef double ( IChiSquaredModule_wrapper::*default_getResidualValue_function_type )( ::size_t ) const;
            
            IChiSquaredModule_exposer.def( 
                "getResidualValue"
                , getResidualValue_function_type(&::IChiSquaredModule::getResidualValue)
                , default_getResidualValue_function_type(&IChiSquaredModule_wrapper::default_getResidualValue)
                , ( bp::arg("arg0") ) );
        
        }
        { //::IChiSquaredModule::getSimulationData
        
            typedef ::OutputData< double > const * ( ::IChiSquaredModule::*getSimulationData_function_type )(  ) const;
            
            IChiSquaredModule_exposer.def( 
                "getSimulationData"
                , getSimulationData_function_type( &::IChiSquaredModule::getSimulationData )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::IChiSquaredModule::getSquaredFunction
        
            typedef ::ISquaredFunction const * ( ::IChiSquaredModule::*getSquaredFunction_function_type )(  ) const;
            
            IChiSquaredModule_exposer.def( 
                "getSquaredFunction"
                , getSquaredFunction_function_type( &::IChiSquaredModule::getSquaredFunction )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::IChiSquaredModule::getValue
        
            typedef double ( ::IChiSquaredModule::*getValue_function_type )(  ) const;
            typedef double ( IChiSquaredModule_wrapper::*default_getValue_function_type )(  ) const;
            
            IChiSquaredModule_exposer.def( 
                "getValue"
                , getValue_function_type(&::IChiSquaredModule::getValue)
                , default_getValue_function_type(&IChiSquaredModule_wrapper::default_getValue) );
        
        }
        { //::IChiSquaredModule::setChiSquaredFunction
        
            typedef void ( ::IChiSquaredModule::*setChiSquaredFunction_function_type )( ::ISquaredFunction const & ) ;
            
            IChiSquaredModule_exposer.def( 
                "setChiSquaredFunction"
                , setChiSquaredFunction_function_type( &::IChiSquaredModule::setChiSquaredFunction )
                , ( bp::arg("squared_function") ) );
        
        }
        { //::IChiSquaredModule::setFittingDataSelector
        
            typedef void ( ::IChiSquaredModule::*setFittingDataSelector_function_type )( ::IFittingDataSelector const & ) ;
            typedef void ( IChiSquaredModule_wrapper::*default_setFittingDataSelector_function_type )( ::IFittingDataSelector const & ) ;
            
            IChiSquaredModule_exposer.def( 
                "setFittingDataSelector"
                , setFittingDataSelector_function_type(&::IChiSquaredModule::setFittingDataSelector)
                , default_setFittingDataSelector_function_type(&IChiSquaredModule_wrapper::default_setFittingDataSelector)
                , ( bp::arg("selector") ) );
        
        }
        { //::IChiSquaredModule::setIntensityLog
        
            typedef void ( ::IChiSquaredModule::*setIntensityLog_function_type )( bool ) ;
            typedef void ( IChiSquaredModule_wrapper::*default_setIntensityLog_function_type )( bool ) ;
            
            IChiSquaredModule_exposer.def( 
                "setIntensityLog"
                , setIntensityLog_function_type(&::IChiSquaredModule::setIntensityLog)
                , default_setIntensityLog_function_type(&IChiSquaredModule_wrapper::default_setIntensityLog)
                , ( bp::arg("val") ) );
        
        }
        { //::IChiSquaredModule::setIntensitySqrt
        
            typedef void ( ::IChiSquaredModule::*setIntensitySqrt_function_type )( bool ) ;
            typedef void ( IChiSquaredModule_wrapper::*default_setIntensitySqrt_function_type )( bool ) ;
            
            IChiSquaredModule_exposer.def( 
                "setIntensitySqrt"
                , setIntensitySqrt_function_type(&::IChiSquaredModule::setIntensitySqrt)
                , default_setIntensitySqrt_function_type(&IChiSquaredModule_wrapper::default_setIntensitySqrt)
                , ( bp::arg("val") ) );
        
        }
        { //::IChiSquaredModule::setNdegreeOfFreedom
        
            typedef void ( ::IChiSquaredModule::*setNdegreeOfFreedom_function_type )( int ) ;
            
            IChiSquaredModule_exposer.def( 
                "setNdegreeOfFreedom"
                , setNdegreeOfFreedom_function_type( &::IChiSquaredModule::setNdegreeOfFreedom )
                , ( bp::arg("ndegree_of_freedom") ) );
        
        }
        { //::IChiSquaredModule::setOutputDataNormalizer
        
            typedef void ( ::IChiSquaredModule::*setOutputDataNormalizer_function_type )( ::IOutputDataNormalizer const & ) ;
            typedef void ( IChiSquaredModule_wrapper::*default_setOutputDataNormalizer_function_type )( ::IOutputDataNormalizer const & ) ;
            
            IChiSquaredModule_exposer.def( 
                "setOutputDataNormalizer"
                , setOutputDataNormalizer_function_type(&::IChiSquaredModule::setOutputDataNormalizer)
                , default_setOutputDataNormalizer_function_type(&IChiSquaredModule_wrapper::default_setOutputDataNormalizer)
                , ( bp::arg("data_normalizer") ) );
        
        }
        { //::IChiSquaredModule::setRealAndSimulatedData
        
            typedef void ( ::IChiSquaredModule::*setRealAndSimulatedData_function_type )( ::OutputData< double > const &,::OutputData< double > const & ) ;
            
            IChiSquaredModule_exposer.def( 
                "setRealAndSimulatedData"
                , setRealAndSimulatedData_function_type( &::IChiSquaredModule::setRealAndSimulatedData )
                , ( bp::arg("real_data"), bp::arg("simulation_data") ) );
        
        }
    }

}

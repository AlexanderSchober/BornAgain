// This file has been generated by Py++.

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter);
GCC_DIAG_OFF(missing-field-initializers);
#include "boost/python.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
GCC_DIAG_ON(unused-parameter);
GCC_DIAG_ON(missing-field-initializers);
#include "AttLimits.h"
#include "IChiSquaredModule.h"
#include "IMinimizer.h"
#include "ChiSquaredModule.h"
#include "FitSuite.h"
#include "MinimizerFactory.h"
#include "PythonPlusplusFitHelper.h"
#include "MathFunctions.h"
#include "ISquaredFunction.h"
#include "IOutputDataNormalizer.h"
#include "IMinimizer.pypp.h"

namespace bp = boost::python;

struct IMinimizer_wrapper : IMinimizer, bp::wrapper< IMinimizer > {

    IMinimizer_wrapper( )
    : IMinimizer( )
      , bp::wrapper< IMinimizer >(){
        // null constructor
    
    }

    virtual void clear(  ) {
        if( bp::override func_clear = this->get_override( "clear" ) )
            func_clear(  );
        else{
            this->IMinimizer::clear(  );
        }
    }
    
    void default_clear(  ) {
        IMinimizer::clear( );
    }

    virtual double getErrorOfVariable( ::size_t index ) const  {
        if( bp::override func_getErrorOfVariable = this->get_override( "getErrorOfVariable" ) )
            return func_getErrorOfVariable( index );
        else{
            return this->IMinimizer::getErrorOfVariable( index );
        }
    }
    
    double default_getErrorOfVariable( ::size_t index ) const  {
        return IMinimizer::getErrorOfVariable( index );
    }

    virtual double getMinValue(  ) const  {
        if( bp::override func_getMinValue = this->get_override( "getMinValue" ) )
            return func_getMinValue(  );
        else{
            return this->IMinimizer::getMinValue(  );
        }
    }
    
    double default_getMinValue(  ) const  {
        return IMinimizer::getMinValue( );
    }

    virtual ::size_t getNCalls(  ) const  {
        if( bp::override func_getNCalls = this->get_override( "getNCalls" ) )
            return func_getNCalls(  );
        else{
            return this->IMinimizer::getNCalls(  );
        }
    }
    
    ::size_t default_getNCalls(  ) const  {
        return IMinimizer::getNCalls( );
    }

    virtual ::size_t getNumberOfVariables(  ) const  {
        if( bp::override func_getNumberOfVariables = this->get_override( "getNumberOfVariables" ) )
            return func_getNumberOfVariables(  );
        else{
            return this->IMinimizer::getNumberOfVariables(  );
        }
    }
    
    ::size_t default_getNumberOfVariables(  ) const  {
        return IMinimizer::getNumberOfVariables( );
    }

    virtual double getValueOfVariableAtMinimum( ::size_t index ) const  {
        if( bp::override func_getValueOfVariableAtMinimum = this->get_override( "getValueOfVariableAtMinimum" ) )
            return func_getValueOfVariableAtMinimum( index );
        else{
            return this->IMinimizer::getValueOfVariableAtMinimum( index );
        }
    }
    
    double default_getValueOfVariableAtMinimum( ::size_t index ) const  {
        return IMinimizer::getValueOfVariableAtMinimum( index );
    }

    virtual ::std::vector< double > getValueOfVariablesAtMinimum(  ) const  {
        if( bp::override func_getValueOfVariablesAtMinimum = this->get_override( "getValueOfVariablesAtMinimum" ) )
            return func_getValueOfVariablesAtMinimum(  );
        else{
            return this->IMinimizer::getValueOfVariablesAtMinimum(  );
        }
    }
    
    ::std::vector< double > default_getValueOfVariablesAtMinimum(  ) const  {
        return IMinimizer::getValueOfVariablesAtMinimum( );
    }

    virtual void minimize(  ){
        bp::override func_minimize = this->get_override( "minimize" );
        func_minimize(  );
    }

    virtual void printResults(  ) const  {
        if( bp::override func_printResults = this->get_override( "printResults" ) )
            func_printResults(  );
        else{
            this->IMinimizer::printResults(  );
        }
    }
    
    void default_printResults(  ) const  {
        IMinimizer::printResults( );
    }

    virtual void setOptions( ::std::string const & options ) {
        if( bp::override func_setOptions = this->get_override( "setOptions" ) )
            func_setOptions( options );
        else{
            this->IMinimizer::setOptions( options );
        }
    }
    
    void default_setOptions( ::std::string const & options ) {
        IMinimizer::setOptions( options );
    }

    virtual void setParameters( ::FitSuiteParameters const & parameters ) {
        if( bp::override func_setParameters = this->get_override( "setParameters" ) )
            func_setParameters( boost::ref(parameters) );
        else{
            this->IMinimizer::setParameters( boost::ref(parameters) );
        }
    }
    
    void default_setParameters( ::FitSuiteParameters const & parameters ) {
        IMinimizer::setParameters( boost::ref(parameters) );
    }

};

void register_IMinimizer_class(){

    bp::class_< IMinimizer_wrapper, boost::noncopyable >( "IMinimizer", bp::init< >() )    
        .def( 
            "clear"
            , (void ( ::IMinimizer::* )(  ) )(&::IMinimizer::clear)
            , (void ( IMinimizer_wrapper::* )(  ) )(&IMinimizer_wrapper::default_clear) )    
        .def( 
            "getErrorOfVariable"
            , (double ( ::IMinimizer::* )( ::size_t ) const)(&::IMinimizer::getErrorOfVariable)
            , (double ( IMinimizer_wrapper::* )( ::size_t ) const)(&IMinimizer_wrapper::default_getErrorOfVariable)
            , ( bp::arg("index") ) )    
        .def( 
            "getMinValue"
            , (double ( ::IMinimizer::* )(  ) const)(&::IMinimizer::getMinValue)
            , (double ( IMinimizer_wrapper::* )(  ) const)(&IMinimizer_wrapper::default_getMinValue) )    
        .def( 
            "getNCalls"
            , (::size_t ( ::IMinimizer::* )(  ) const)(&::IMinimizer::getNCalls)
            , (::size_t ( IMinimizer_wrapper::* )(  ) const)(&IMinimizer_wrapper::default_getNCalls) )    
        .def( 
            "getNumberOfVariables"
            , (::size_t ( ::IMinimizer::* )(  ) const)(&::IMinimizer::getNumberOfVariables)
            , (::size_t ( IMinimizer_wrapper::* )(  ) const)(&IMinimizer_wrapper::default_getNumberOfVariables) )    
        .def( 
            "getValueOfVariableAtMinimum"
            , (double ( ::IMinimizer::* )( ::size_t ) const)(&::IMinimizer::getValueOfVariableAtMinimum)
            , (double ( IMinimizer_wrapper::* )( ::size_t ) const)(&IMinimizer_wrapper::default_getValueOfVariableAtMinimum)
            , ( bp::arg("index") ) )    
        .def( 
            "getValueOfVariablesAtMinimum"
            , (::std::vector< double > ( ::IMinimizer::* )(  ) const)(&::IMinimizer::getValueOfVariablesAtMinimum)
            , (::std::vector< double > ( IMinimizer_wrapper::* )(  ) const)(&IMinimizer_wrapper::default_getValueOfVariablesAtMinimum) )    
        .def( 
            "minimize"
            , bp::pure_virtual( (void ( ::IMinimizer::* )(  ) )(&::IMinimizer::minimize) ) )    
        .def( 
            "printResults"
            , (void ( ::IMinimizer::* )(  ) const)(&::IMinimizer::printResults)
            , (void ( IMinimizer_wrapper::* )(  ) const)(&IMinimizer_wrapper::default_printResults) )    
        .def( 
            "setOptions"
            , (void ( ::IMinimizer::* )( ::std::string const & ) )(&::IMinimizer::setOptions)
            , (void ( IMinimizer_wrapper::* )( ::std::string const & ) )(&IMinimizer_wrapper::default_setOptions)
            , ( bp::arg("options") ) )    
        .def( 
            "setParameters"
            , (void ( ::IMinimizer::* )( ::FitSuiteParameters const & ) )(&::IMinimizer::setParameters)
            , (void ( IMinimizer_wrapper::* )( ::FitSuiteParameters const & ) )(&IMinimizer_wrapper::default_setParameters)
            , ( bp::arg("parameters") ) );

}

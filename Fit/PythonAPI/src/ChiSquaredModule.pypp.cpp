// This file has been generated by Py++.

#include "Macros.h"
GCC_DIAG_OFF(unused-parameter);
GCC_DIAG_OFF(missing-field-initializers);
#include "boost/python.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
GCC_DIAG_ON(unused-parameter);
GCC_DIAG_ON(missing-field-initializers);
#include "AttLimits.h"
#include "IChiSquaredModule.h"
#include "IMinimizer.h"
#include "ChiSquaredModule.h"
#include "FitSuite.h"
#include "FitSuiteParameters.h"
#include "MinimizerFactory.h"
#include "PythonPlusplusFitHelper.h"
#include "MathFunctions.h"
#include "ISquaredFunction.h"
#include "IOutputDataNormalizer.h"
#include "ChiSquaredModule.pypp.h"

namespace bp = boost::python;

struct ChiSquaredModule_wrapper : ChiSquaredModule, bp::wrapper< ChiSquaredModule > {

    ChiSquaredModule_wrapper( )
    : ChiSquaredModule( )
      , bp::wrapper< ChiSquaredModule >(){
        // null constructor
    
    }

    ChiSquaredModule_wrapper(::ChiSquaredModule const & other )
    : ChiSquaredModule( boost::ref(other) )
      , bp::wrapper< ChiSquaredModule >(){
        // copy constructor
    
    }

    virtual double calculateChiSquared(  ) {
        if( bp::override func_calculateChiSquared = this->get_override( "calculateChiSquared" ) )
            return func_calculateChiSquared(  );
        else{
            return this->ChiSquaredModule::calculateChiSquared(  );
        }
    }
    
    double default_calculateChiSquared(  ) {
        return ChiSquaredModule::calculateChiSquared( );
    }

    virtual ::ChiSquaredModule * clone(  ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone(  );
        else{
            return this->ChiSquaredModule::clone(  );
        }
    }
    
    ::ChiSquaredModule * default_clone(  ) const  {
        return ChiSquaredModule::clone( );
    }

    virtual ::OutputData< double > * createChi2DifferenceMap(  ) const  {
        if( bp::override func_createChi2DifferenceMap = this->get_override( "createChi2DifferenceMap" ) )
            return func_createChi2DifferenceMap(  );
        else{
            return this->ChiSquaredModule::createChi2DifferenceMap(  );
        }
    }
    
    ::OutputData< double > * default_createChi2DifferenceMap(  ) const  {
        return ChiSquaredModule::createChi2DifferenceMap( );
    }

    virtual double getResidualValue( ::size_t index ) const  {
        if( bp::override func_getResidualValue = this->get_override( "getResidualValue" ) )
            return func_getResidualValue( index );
        else{
            return this->ChiSquaredModule::getResidualValue( index );
        }
    }
    
    double default_getResidualValue( ::size_t index ) const  {
        return ChiSquaredModule::getResidualValue( index );
    }

    virtual ::IFittingDataSelector const * getFittingDataSelector(  ) const  {
        if( bp::override func_getFittingDataSelector = this->get_override( "getFittingDataSelector" ) )
            return func_getFittingDataSelector(  );
        else{
            return this->IChiSquaredModule::getFittingDataSelector(  );
        }
    }
    
    ::IFittingDataSelector const * default_getFittingDataSelector(  ) const  {
        return IChiSquaredModule::getFittingDataSelector( );
    }

    virtual bool getIntensityLog(  ) const  {
        if( bp::override func_getIntensityLog = this->get_override( "getIntensityLog" ) )
            return func_getIntensityLog(  );
        else{
            return this->IChiSquaredModule::getIntensityLog(  );
        }
    }
    
    bool default_getIntensityLog(  ) const  {
        return IChiSquaredModule::getIntensityLog( );
    }

    virtual bool getIntensitySqrt(  ) const  {
        if( bp::override func_getIntensitySqrt = this->get_override( "getIntensitySqrt" ) )
            return func_getIntensitySqrt(  );
        else{
            return this->IChiSquaredModule::getIntensitySqrt(  );
        }
    }
    
    bool default_getIntensitySqrt(  ) const  {
        return IChiSquaredModule::getIntensitySqrt( );
    }

    virtual ::IOutputDataNormalizer const * getOutputDataNormalizer(  ) const  {
        if( bp::override func_getOutputDataNormalizer = this->get_override( "getOutputDataNormalizer" ) )
            return func_getOutputDataNormalizer(  );
        else{
            return this->IChiSquaredModule::getOutputDataNormalizer(  );
        }
    }
    
    ::IOutputDataNormalizer const * default_getOutputDataNormalizer(  ) const  {
        return IChiSquaredModule::getOutputDataNormalizer( );
    }

    virtual ::IOutputDataNormalizer * getOutputDataNormalizer(  ) {
        if( bp::override func_getOutputDataNormalizer = this->get_override( "getOutputDataNormalizer" ) )
            return func_getOutputDataNormalizer(  );
        else{
            return this->IChiSquaredModule::getOutputDataNormalizer(  );
        }
    }
    
    ::IOutputDataNormalizer * default_getOutputDataNormalizer(  ) {
        return IChiSquaredModule::getOutputDataNormalizer( );
    }

    virtual double getValue(  ) const  {
        if( bp::override func_getValue = this->get_override( "getValue" ) )
            return func_getValue(  );
        else{
            return this->IChiSquaredModule::getValue(  );
        }
    }
    
    double default_getValue(  ) const  {
        return IChiSquaredModule::getValue( );
    }

    virtual void setFittingDataSelector( ::IFittingDataSelector const & selector ) {
        if( bp::override func_setFittingDataSelector = this->get_override( "setFittingDataSelector" ) )
            func_setFittingDataSelector( boost::ref(selector) );
        else{
            this->IChiSquaredModule::setFittingDataSelector( boost::ref(selector) );
        }
    }
    
    void default_setFittingDataSelector( ::IFittingDataSelector const & selector ) {
        IChiSquaredModule::setFittingDataSelector( boost::ref(selector) );
    }

    virtual void setIntensityLog( bool val ) {
        if( bp::override func_setIntensityLog = this->get_override( "setIntensityLog" ) )
            func_setIntensityLog( val );
        else{
            this->IChiSquaredModule::setIntensityLog( val );
        }
    }
    
    void default_setIntensityLog( bool val ) {
        IChiSquaredModule::setIntensityLog( val );
    }

    virtual void setIntensitySqrt( bool val ) {
        if( bp::override func_setIntensitySqrt = this->get_override( "setIntensitySqrt" ) )
            func_setIntensitySqrt( val );
        else{
            this->IChiSquaredModule::setIntensitySqrt( val );
        }
    }
    
    void default_setIntensitySqrt( bool val ) {
        IChiSquaredModule::setIntensitySqrt( val );
    }

    virtual void setOutputDataNormalizer( ::IOutputDataNormalizer const & data_normalizer ) {
        if( bp::override func_setOutputDataNormalizer = this->get_override( "setOutputDataNormalizer" ) )
            func_setOutputDataNormalizer( boost::ref(data_normalizer) );
        else{
            this->IChiSquaredModule::setOutputDataNormalizer( boost::ref(data_normalizer) );
        }
    }
    
    void default_setOutputDataNormalizer( ::IOutputDataNormalizer const & data_normalizer ) {
        IChiSquaredModule::setOutputDataNormalizer( boost::ref(data_normalizer) );
    }

};

void register_ChiSquaredModule_class(){

    bp::class_< ChiSquaredModule_wrapper, bp::bases< IChiSquaredModule > >( "ChiSquaredModule", bp::init< >() )    
        .def( bp::init< ChiSquaredModule const & >(( bp::arg("other") )) )    
        .def( 
            "calculateChiSquared"
            , (double ( ::ChiSquaredModule::* )(  ) )(&::ChiSquaredModule::calculateChiSquared)
            , (double ( ChiSquaredModule_wrapper::* )(  ) )(&ChiSquaredModule_wrapper::default_calculateChiSquared) )    
        .def( 
            "clone"
            , (::ChiSquaredModule * ( ::ChiSquaredModule::* )(  ) const)(&::ChiSquaredModule::clone)
            , (::ChiSquaredModule * ( ChiSquaredModule_wrapper::* )(  ) const)(&ChiSquaredModule_wrapper::default_clone)
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "createChi2DifferenceMap"
            , (::OutputData< double > * ( ::ChiSquaredModule::* )(  ) const)(&::ChiSquaredModule::createChi2DifferenceMap)
            , (::OutputData< double > * ( ChiSquaredModule_wrapper::* )(  ) const)(&ChiSquaredModule_wrapper::default_createChi2DifferenceMap)
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "getResidualValue"
            , (double ( ::ChiSquaredModule::* )( ::size_t ) const)(&::ChiSquaredModule::getResidualValue)
            , (double ( ChiSquaredModule_wrapper::* )( ::size_t ) const)(&ChiSquaredModule_wrapper::default_getResidualValue)
            , ( bp::arg("index") ) )    
        .def( 
            "getFittingDataSelector"
            , (::IFittingDataSelector const * ( ::IChiSquaredModule::* )(  ) const)(&::IChiSquaredModule::getFittingDataSelector)
            , (::IFittingDataSelector const * ( ChiSquaredModule_wrapper::* )(  ) const)(&ChiSquaredModule_wrapper::default_getFittingDataSelector)
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "getIntensityLog"
            , (bool ( ::IChiSquaredModule::* )(  ) const)(&::IChiSquaredModule::getIntensityLog)
            , (bool ( ChiSquaredModule_wrapper::* )(  ) const)(&ChiSquaredModule_wrapper::default_getIntensityLog) )    
        .def( 
            "getIntensitySqrt"
            , (bool ( ::IChiSquaredModule::* )(  ) const)(&::IChiSquaredModule::getIntensitySqrt)
            , (bool ( ChiSquaredModule_wrapper::* )(  ) const)(&ChiSquaredModule_wrapper::default_getIntensitySqrt) )    
        .def( 
            "getOutputDataNormalizer"
            , (::IOutputDataNormalizer const * ( ::IChiSquaredModule::* )(  ) const)(&::IChiSquaredModule::getOutputDataNormalizer)
            , (::IOutputDataNormalizer const * ( ChiSquaredModule_wrapper::* )(  ) const)(&ChiSquaredModule_wrapper::default_getOutputDataNormalizer)
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "getOutputDataNormalizer"
            , (::IOutputDataNormalizer * ( ::IChiSquaredModule::* )(  ) )(&::IChiSquaredModule::getOutputDataNormalizer)
            , (::IOutputDataNormalizer * ( ChiSquaredModule_wrapper::* )(  ) )(&ChiSquaredModule_wrapper::default_getOutputDataNormalizer)
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "getValue"
            , (double ( ::IChiSquaredModule::* )(  ) const)(&::IChiSquaredModule::getValue)
            , (double ( ChiSquaredModule_wrapper::* )(  ) const)(&ChiSquaredModule_wrapper::default_getValue) )    
        .def( 
            "setFittingDataSelector"
            , (void ( ::IChiSquaredModule::* )( ::IFittingDataSelector const & ) )(&::IChiSquaredModule::setFittingDataSelector)
            , (void ( ChiSquaredModule_wrapper::* )( ::IFittingDataSelector const & ) )(&ChiSquaredModule_wrapper::default_setFittingDataSelector)
            , ( bp::arg("selector") ) )    
        .def( 
            "setIntensityLog"
            , (void ( ::IChiSquaredModule::* )( bool ) )(&::IChiSquaredModule::setIntensityLog)
            , (void ( ChiSquaredModule_wrapper::* )( bool ) )(&ChiSquaredModule_wrapper::default_setIntensityLog)
            , ( bp::arg("val") ) )    
        .def( 
            "setIntensitySqrt"
            , (void ( ::IChiSquaredModule::* )( bool ) )(&::IChiSquaredModule::setIntensitySqrt)
            , (void ( ChiSquaredModule_wrapper::* )( bool ) )(&ChiSquaredModule_wrapper::default_setIntensitySqrt)
            , ( bp::arg("val") ) )    
        .def( 
            "setOutputDataNormalizer"
            , (void ( ::IChiSquaredModule::* )( ::IOutputDataNormalizer const & ) )(&::IChiSquaredModule::setOutputDataNormalizer)
            , (void ( ChiSquaredModule_wrapper::* )( ::IOutputDataNormalizer const & ) )(&ChiSquaredModule_wrapper::default_setOutputDataNormalizer)
            , ( bp::arg("data_normalizer") ) );

}

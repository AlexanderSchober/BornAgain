# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libBornAgainFit', [dirname(__file__)])
        except ImportError:
            import _libBornAgainFit
            return _libBornAgainFit
        if fp is not None:
            try:
                _mod = imp.load_module('_libBornAgainFit', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _libBornAgainFit = swig_import_helper()
    del swig_import_helper
else:
    import _libBornAgainFit
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libBornAgainFit.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        """value(SwigPyIterator self) -> PyObject *"""
        return _libBornAgainFit.SwigPyIterator_value(self)


    def incr(self, n=1):
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        incr(SwigPyIterator self) -> SwigPyIterator
        """
        return _libBornAgainFit.SwigPyIterator_incr(self, n)


    def decr(self, n=1):
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        decr(SwigPyIterator self) -> SwigPyIterator
        """
        return _libBornAgainFit.SwigPyIterator_decr(self, n)


    def distance(self, x):
        """distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _libBornAgainFit.SwigPyIterator_distance(self, x)


    def equal(self, x):
        """equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _libBornAgainFit.SwigPyIterator_equal(self, x)


    def copy(self):
        """copy(SwigPyIterator self) -> SwigPyIterator"""
        return _libBornAgainFit.SwigPyIterator_copy(self)


    def next(self):
        """next(SwigPyIterator self) -> PyObject *"""
        return _libBornAgainFit.SwigPyIterator_next(self)


    def __next__(self):
        """__next__(SwigPyIterator self) -> PyObject *"""
        return _libBornAgainFit.SwigPyIterator___next__(self)


    def previous(self):
        """previous(SwigPyIterator self) -> PyObject *"""
        return _libBornAgainFit.SwigPyIterator_previous(self)


    def advance(self, n):
        """advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _libBornAgainFit.SwigPyIterator_advance(self, n)


    def __eq__(self, x):
        """__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _libBornAgainFit.SwigPyIterator___eq__(self, x)


    def __ne__(self, x):
        """__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _libBornAgainFit.SwigPyIterator___ne__(self, x)


    def __iadd__(self, n):
        """__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _libBornAgainFit.SwigPyIterator___iadd__(self, n)


    def __isub__(self, n):
        """__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _libBornAgainFit.SwigPyIterator___isub__(self, n)


    def __add__(self, n):
        """__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _libBornAgainFit.SwigPyIterator___add__(self, n)


    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _libBornAgainFit.SwigPyIterator___sub__(self, *args)

    def __iter__(self):
        return self
SwigPyIterator_swigregister = _libBornAgainFit.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


_libBornAgainFit.SHARED_PTR_DISOWN_swigconstant(_libBornAgainFit)
SHARED_PTR_DISOWN = _libBornAgainFit.SHARED_PTR_DISOWN
class vdouble1d_t(_object):
    """Proxy of C++ std::vector<(double)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vdouble1d_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vdouble1d_t, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(vdouble1d_t self) -> SwigPyIterator"""
        return _libBornAgainFit.vdouble1d_t_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(vdouble1d_t self) -> bool"""
        return _libBornAgainFit.vdouble1d_t___nonzero__(self)


    def __bool__(self):
        """__bool__(vdouble1d_t self) -> bool"""
        return _libBornAgainFit.vdouble1d_t___bool__(self)


    def __len__(self):
        """__len__(vdouble1d_t self) -> std::vector< double >::size_type"""
        return _libBornAgainFit.vdouble1d_t___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(vdouble1d_t self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> vdouble1d_t"""
        return _libBornAgainFit.vdouble1d_t___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(vdouble1d_t self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)
        __setslice__(vdouble1d_t self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, vdouble1d_t v)
        """
        return _libBornAgainFit.vdouble1d_t___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(vdouble1d_t self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)"""
        return _libBornAgainFit.vdouble1d_t___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(vdouble1d_t self, std::vector< double >::difference_type i)
        __delitem__(vdouble1d_t self, PySliceObject * slice)
        """
        return _libBornAgainFit.vdouble1d_t___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(vdouble1d_t self, PySliceObject * slice) -> vdouble1d_t
        __getitem__(vdouble1d_t self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &
        """
        return _libBornAgainFit.vdouble1d_t___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(vdouble1d_t self, PySliceObject * slice, vdouble1d_t v)
        __setitem__(vdouble1d_t self, PySliceObject * slice)
        __setitem__(vdouble1d_t self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)
        """
        return _libBornAgainFit.vdouble1d_t___setitem__(self, *args)


    def pop(self):
        """pop(vdouble1d_t self) -> std::vector< double >::value_type"""
        return _libBornAgainFit.vdouble1d_t_pop(self)


    def append(self, x):
        """append(vdouble1d_t self, std::vector< double >::value_type const & x)"""
        return _libBornAgainFit.vdouble1d_t_append(self, x)


    def empty(self):
        """empty(vdouble1d_t self) -> bool"""
        return _libBornAgainFit.vdouble1d_t_empty(self)


    def size(self):
        """size(vdouble1d_t self) -> std::vector< double >::size_type"""
        return _libBornAgainFit.vdouble1d_t_size(self)


    def swap(self, v):
        """swap(vdouble1d_t self, vdouble1d_t v)"""
        return _libBornAgainFit.vdouble1d_t_swap(self, v)


    def begin(self):
        """begin(vdouble1d_t self) -> std::vector< double >::iterator"""
        return _libBornAgainFit.vdouble1d_t_begin(self)


    def end(self):
        """end(vdouble1d_t self) -> std::vector< double >::iterator"""
        return _libBornAgainFit.vdouble1d_t_end(self)


    def rbegin(self):
        """rbegin(vdouble1d_t self) -> std::vector< double >::reverse_iterator"""
        return _libBornAgainFit.vdouble1d_t_rbegin(self)


    def rend(self):
        """rend(vdouble1d_t self) -> std::vector< double >::reverse_iterator"""
        return _libBornAgainFit.vdouble1d_t_rend(self)


    def clear(self):
        """clear(vdouble1d_t self)"""
        return _libBornAgainFit.vdouble1d_t_clear(self)


    def get_allocator(self):
        """get_allocator(vdouble1d_t self) -> std::vector< double >::allocator_type"""
        return _libBornAgainFit.vdouble1d_t_get_allocator(self)


    def pop_back(self):
        """pop_back(vdouble1d_t self)"""
        return _libBornAgainFit.vdouble1d_t_pop_back(self)


    def erase(self, *args):
        """
        erase(vdouble1d_t self, std::vector< double >::iterator pos) -> std::vector< double >::iterator
        erase(vdouble1d_t self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator
        """
        return _libBornAgainFit.vdouble1d_t_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(double)> self) -> vdouble1d_t
        __init__(std::vector<(double)> self, vdouble1d_t arg2) -> vdouble1d_t
        __init__(std::vector<(double)> self, std::vector< double >::size_type size) -> vdouble1d_t
        __init__(std::vector<(double)> self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> vdouble1d_t
        """
        this = _libBornAgainFit.new_vdouble1d_t(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        """push_back(vdouble1d_t self, std::vector< double >::value_type const & x)"""
        return _libBornAgainFit.vdouble1d_t_push_back(self, x)


    def front(self):
        """front(vdouble1d_t self) -> std::vector< double >::value_type const &"""
        return _libBornAgainFit.vdouble1d_t_front(self)


    def back(self):
        """back(vdouble1d_t self) -> std::vector< double >::value_type const &"""
        return _libBornAgainFit.vdouble1d_t_back(self)


    def assign(self, n, x):
        """assign(vdouble1d_t self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)"""
        return _libBornAgainFit.vdouble1d_t_assign(self, n, x)


    def resize(self, *args):
        """
        resize(vdouble1d_t self, std::vector< double >::size_type new_size)
        resize(vdouble1d_t self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)
        """
        return _libBornAgainFit.vdouble1d_t_resize(self, *args)


    def insert(self, *args):
        """
        insert(vdouble1d_t self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator
        insert(vdouble1d_t self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)
        """
        return _libBornAgainFit.vdouble1d_t_insert(self, *args)


    def reserve(self, n):
        """reserve(vdouble1d_t self, std::vector< double >::size_type n)"""
        return _libBornAgainFit.vdouble1d_t_reserve(self, n)


    def capacity(self):
        """capacity(vdouble1d_t self) -> std::vector< double >::size_type"""
        return _libBornAgainFit.vdouble1d_t_capacity(self)

    __swig_destroy__ = _libBornAgainFit.delete_vdouble1d_t
    __del__ = lambda self: None
vdouble1d_t_swigregister = _libBornAgainFit.vdouble1d_t_swigregister
vdouble1d_t_swigregister(vdouble1d_t)

class vdouble2d_t(_object):
    """Proxy of C++ std::vector<(std::vector<(double)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vdouble2d_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vdouble2d_t, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(vdouble2d_t self) -> SwigPyIterator"""
        return _libBornAgainFit.vdouble2d_t_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(vdouble2d_t self) -> bool"""
        return _libBornAgainFit.vdouble2d_t___nonzero__(self)


    def __bool__(self):
        """__bool__(vdouble2d_t self) -> bool"""
        return _libBornAgainFit.vdouble2d_t___bool__(self)


    def __len__(self):
        """__len__(vdouble2d_t self) -> std::vector< std::vector< double > >::size_type"""
        return _libBornAgainFit.vdouble2d_t___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(vdouble2d_t self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j) -> vdouble2d_t"""
        return _libBornAgainFit.vdouble2d_t___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(vdouble2d_t self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j)
        __setslice__(vdouble2d_t self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j, vdouble2d_t v)
        """
        return _libBornAgainFit.vdouble2d_t___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(vdouble2d_t self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j)"""
        return _libBornAgainFit.vdouble2d_t___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(vdouble2d_t self, std::vector< std::vector< double > >::difference_type i)
        __delitem__(vdouble2d_t self, PySliceObject * slice)
        """
        return _libBornAgainFit.vdouble2d_t___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(vdouble2d_t self, PySliceObject * slice) -> vdouble2d_t
        __getitem__(vdouble2d_t self, std::vector< std::vector< double > >::difference_type i) -> vdouble1d_t
        """
        return _libBornAgainFit.vdouble2d_t___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(vdouble2d_t self, PySliceObject * slice, vdouble2d_t v)
        __setitem__(vdouble2d_t self, PySliceObject * slice)
        __setitem__(vdouble2d_t self, std::vector< std::vector< double > >::difference_type i, vdouble1d_t x)
        """
        return _libBornAgainFit.vdouble2d_t___setitem__(self, *args)


    def pop(self):
        """pop(vdouble2d_t self) -> vdouble1d_t"""
        return _libBornAgainFit.vdouble2d_t_pop(self)


    def append(self, x):
        """append(vdouble2d_t self, vdouble1d_t x)"""
        return _libBornAgainFit.vdouble2d_t_append(self, x)


    def empty(self):
        """empty(vdouble2d_t self) -> bool"""
        return _libBornAgainFit.vdouble2d_t_empty(self)


    def size(self):
        """size(vdouble2d_t self) -> std::vector< std::vector< double > >::size_type"""
        return _libBornAgainFit.vdouble2d_t_size(self)


    def swap(self, v):
        """swap(vdouble2d_t self, vdouble2d_t v)"""
        return _libBornAgainFit.vdouble2d_t_swap(self, v)


    def begin(self):
        """begin(vdouble2d_t self) -> std::vector< std::vector< double > >::iterator"""
        return _libBornAgainFit.vdouble2d_t_begin(self)


    def end(self):
        """end(vdouble2d_t self) -> std::vector< std::vector< double > >::iterator"""
        return _libBornAgainFit.vdouble2d_t_end(self)


    def rbegin(self):
        """rbegin(vdouble2d_t self) -> std::vector< std::vector< double > >::reverse_iterator"""
        return _libBornAgainFit.vdouble2d_t_rbegin(self)


    def rend(self):
        """rend(vdouble2d_t self) -> std::vector< std::vector< double > >::reverse_iterator"""
        return _libBornAgainFit.vdouble2d_t_rend(self)


    def clear(self):
        """clear(vdouble2d_t self)"""
        return _libBornAgainFit.vdouble2d_t_clear(self)


    def get_allocator(self):
        """get_allocator(vdouble2d_t self) -> std::vector< std::vector< double > >::allocator_type"""
        return _libBornAgainFit.vdouble2d_t_get_allocator(self)


    def pop_back(self):
        """pop_back(vdouble2d_t self)"""
        return _libBornAgainFit.vdouble2d_t_pop_back(self)


    def erase(self, *args):
        """
        erase(vdouble2d_t self, std::vector< std::vector< double > >::iterator pos) -> std::vector< std::vector< double > >::iterator
        erase(vdouble2d_t self, std::vector< std::vector< double > >::iterator first, std::vector< std::vector< double > >::iterator last) -> std::vector< std::vector< double > >::iterator
        """
        return _libBornAgainFit.vdouble2d_t_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::vector<(double)>)> self) -> vdouble2d_t
        __init__(std::vector<(std::vector<(double)>)> self, vdouble2d_t arg2) -> vdouble2d_t
        __init__(std::vector<(std::vector<(double)>)> self, std::vector< std::vector< double > >::size_type size) -> vdouble2d_t
        __init__(std::vector<(std::vector<(double)>)> self, std::vector< std::vector< double > >::size_type size, vdouble1d_t value) -> vdouble2d_t
        """
        this = _libBornAgainFit.new_vdouble2d_t(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        """push_back(vdouble2d_t self, vdouble1d_t x)"""
        return _libBornAgainFit.vdouble2d_t_push_back(self, x)


    def front(self):
        """front(vdouble2d_t self) -> vdouble1d_t"""
        return _libBornAgainFit.vdouble2d_t_front(self)


    def back(self):
        """back(vdouble2d_t self) -> vdouble1d_t"""
        return _libBornAgainFit.vdouble2d_t_back(self)


    def assign(self, n, x):
        """assign(vdouble2d_t self, std::vector< std::vector< double > >::size_type n, vdouble1d_t x)"""
        return _libBornAgainFit.vdouble2d_t_assign(self, n, x)


    def resize(self, *args):
        """
        resize(vdouble2d_t self, std::vector< std::vector< double > >::size_type new_size)
        resize(vdouble2d_t self, std::vector< std::vector< double > >::size_type new_size, vdouble1d_t x)
        """
        return _libBornAgainFit.vdouble2d_t_resize(self, *args)


    def insert(self, *args):
        """
        insert(vdouble2d_t self, std::vector< std::vector< double > >::iterator pos, vdouble1d_t x) -> std::vector< std::vector< double > >::iterator
        insert(vdouble2d_t self, std::vector< std::vector< double > >::iterator pos, std::vector< std::vector< double > >::size_type n, vdouble1d_t x)
        """
        return _libBornAgainFit.vdouble2d_t_insert(self, *args)


    def reserve(self, n):
        """reserve(vdouble2d_t self, std::vector< std::vector< double > >::size_type n)"""
        return _libBornAgainFit.vdouble2d_t_reserve(self, n)


    def capacity(self):
        """capacity(vdouble2d_t self) -> std::vector< std::vector< double > >::size_type"""
        return _libBornAgainFit.vdouble2d_t_capacity(self)

    __swig_destroy__ = _libBornAgainFit.delete_vdouble2d_t
    __del__ = lambda self: None
vdouble2d_t_swigregister = _libBornAgainFit.vdouble2d_t_swigregister
vdouble2d_t_swigregister(vdouble2d_t)

class vector_integer_t(_object):
    """Proxy of C++ std::vector<(int)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_integer_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_integer_t, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(vector_integer_t self) -> SwigPyIterator"""
        return _libBornAgainFit.vector_integer_t_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(vector_integer_t self) -> bool"""
        return _libBornAgainFit.vector_integer_t___nonzero__(self)


    def __bool__(self):
        """__bool__(vector_integer_t self) -> bool"""
        return _libBornAgainFit.vector_integer_t___bool__(self)


    def __len__(self):
        """__len__(vector_integer_t self) -> std::vector< int >::size_type"""
        return _libBornAgainFit.vector_integer_t___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(vector_integer_t self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> vector_integer_t"""
        return _libBornAgainFit.vector_integer_t___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(vector_integer_t self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)
        __setslice__(vector_integer_t self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, vector_integer_t v)
        """
        return _libBornAgainFit.vector_integer_t___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(vector_integer_t self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)"""
        return _libBornAgainFit.vector_integer_t___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(vector_integer_t self, std::vector< int >::difference_type i)
        __delitem__(vector_integer_t self, PySliceObject * slice)
        """
        return _libBornAgainFit.vector_integer_t___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(vector_integer_t self, PySliceObject * slice) -> vector_integer_t
        __getitem__(vector_integer_t self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &
        """
        return _libBornAgainFit.vector_integer_t___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(vector_integer_t self, PySliceObject * slice, vector_integer_t v)
        __setitem__(vector_integer_t self, PySliceObject * slice)
        __setitem__(vector_integer_t self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)
        """
        return _libBornAgainFit.vector_integer_t___setitem__(self, *args)


    def pop(self):
        """pop(vector_integer_t self) -> std::vector< int >::value_type"""
        return _libBornAgainFit.vector_integer_t_pop(self)


    def append(self, x):
        """append(vector_integer_t self, std::vector< int >::value_type const & x)"""
        return _libBornAgainFit.vector_integer_t_append(self, x)


    def empty(self):
        """empty(vector_integer_t self) -> bool"""
        return _libBornAgainFit.vector_integer_t_empty(self)


    def size(self):
        """size(vector_integer_t self) -> std::vector< int >::size_type"""
        return _libBornAgainFit.vector_integer_t_size(self)


    def swap(self, v):
        """swap(vector_integer_t self, vector_integer_t v)"""
        return _libBornAgainFit.vector_integer_t_swap(self, v)


    def begin(self):
        """begin(vector_integer_t self) -> std::vector< int >::iterator"""
        return _libBornAgainFit.vector_integer_t_begin(self)


    def end(self):
        """end(vector_integer_t self) -> std::vector< int >::iterator"""
        return _libBornAgainFit.vector_integer_t_end(self)


    def rbegin(self):
        """rbegin(vector_integer_t self) -> std::vector< int >::reverse_iterator"""
        return _libBornAgainFit.vector_integer_t_rbegin(self)


    def rend(self):
        """rend(vector_integer_t self) -> std::vector< int >::reverse_iterator"""
        return _libBornAgainFit.vector_integer_t_rend(self)


    def clear(self):
        """clear(vector_integer_t self)"""
        return _libBornAgainFit.vector_integer_t_clear(self)


    def get_allocator(self):
        """get_allocator(vector_integer_t self) -> std::vector< int >::allocator_type"""
        return _libBornAgainFit.vector_integer_t_get_allocator(self)


    def pop_back(self):
        """pop_back(vector_integer_t self)"""
        return _libBornAgainFit.vector_integer_t_pop_back(self)


    def erase(self, *args):
        """
        erase(vector_integer_t self, std::vector< int >::iterator pos) -> std::vector< int >::iterator
        erase(vector_integer_t self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator
        """
        return _libBornAgainFit.vector_integer_t_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(int)> self) -> vector_integer_t
        __init__(std::vector<(int)> self, vector_integer_t arg2) -> vector_integer_t
        __init__(std::vector<(int)> self, std::vector< int >::size_type size) -> vector_integer_t
        __init__(std::vector<(int)> self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> vector_integer_t
        """
        this = _libBornAgainFit.new_vector_integer_t(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        """push_back(vector_integer_t self, std::vector< int >::value_type const & x)"""
        return _libBornAgainFit.vector_integer_t_push_back(self, x)


    def front(self):
        """front(vector_integer_t self) -> std::vector< int >::value_type const &"""
        return _libBornAgainFit.vector_integer_t_front(self)


    def back(self):
        """back(vector_integer_t self) -> std::vector< int >::value_type const &"""
        return _libBornAgainFit.vector_integer_t_back(self)


    def assign(self, n, x):
        """assign(vector_integer_t self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)"""
        return _libBornAgainFit.vector_integer_t_assign(self, n, x)


    def resize(self, *args):
        """
        resize(vector_integer_t self, std::vector< int >::size_type new_size)
        resize(vector_integer_t self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)
        """
        return _libBornAgainFit.vector_integer_t_resize(self, *args)


    def insert(self, *args):
        """
        insert(vector_integer_t self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator
        insert(vector_integer_t self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)
        """
        return _libBornAgainFit.vector_integer_t_insert(self, *args)


    def reserve(self, n):
        """reserve(vector_integer_t self, std::vector< int >::size_type n)"""
        return _libBornAgainFit.vector_integer_t_reserve(self, n)


    def capacity(self):
        """capacity(vector_integer_t self) -> std::vector< int >::size_type"""
        return _libBornAgainFit.vector_integer_t_capacity(self)

    __swig_destroy__ = _libBornAgainFit.delete_vector_integer_t
    __del__ = lambda self: None
vector_integer_t_swigregister = _libBornAgainFit.vector_integer_t_swigregister
vector_integer_t_swigregister(vector_integer_t)

class vector_longinteger_t(_object):
    """Proxy of C++ std::vector<(unsigned long)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_longinteger_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_longinteger_t, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(vector_longinteger_t self) -> SwigPyIterator"""
        return _libBornAgainFit.vector_longinteger_t_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(vector_longinteger_t self) -> bool"""
        return _libBornAgainFit.vector_longinteger_t___nonzero__(self)


    def __bool__(self):
        """__bool__(vector_longinteger_t self) -> bool"""
        return _libBornAgainFit.vector_longinteger_t___bool__(self)


    def __len__(self):
        """__len__(vector_longinteger_t self) -> std::vector< unsigned long >::size_type"""
        return _libBornAgainFit.vector_longinteger_t___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(vector_longinteger_t self, std::vector< unsigned long >::difference_type i, std::vector< unsigned long >::difference_type j) -> vector_longinteger_t"""
        return _libBornAgainFit.vector_longinteger_t___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(vector_longinteger_t self, std::vector< unsigned long >::difference_type i, std::vector< unsigned long >::difference_type j)
        __setslice__(vector_longinteger_t self, std::vector< unsigned long >::difference_type i, std::vector< unsigned long >::difference_type j, vector_longinteger_t v)
        """
        return _libBornAgainFit.vector_longinteger_t___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(vector_longinteger_t self, std::vector< unsigned long >::difference_type i, std::vector< unsigned long >::difference_type j)"""
        return _libBornAgainFit.vector_longinteger_t___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(vector_longinteger_t self, std::vector< unsigned long >::difference_type i)
        __delitem__(vector_longinteger_t self, PySliceObject * slice)
        """
        return _libBornAgainFit.vector_longinteger_t___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(vector_longinteger_t self, PySliceObject * slice) -> vector_longinteger_t
        __getitem__(vector_longinteger_t self, std::vector< unsigned long >::difference_type i) -> std::vector< unsigned long >::value_type const &
        """
        return _libBornAgainFit.vector_longinteger_t___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(vector_longinteger_t self, PySliceObject * slice, vector_longinteger_t v)
        __setitem__(vector_longinteger_t self, PySliceObject * slice)
        __setitem__(vector_longinteger_t self, std::vector< unsigned long >::difference_type i, std::vector< unsigned long >::value_type const & x)
        """
        return _libBornAgainFit.vector_longinteger_t___setitem__(self, *args)


    def pop(self):
        """pop(vector_longinteger_t self) -> std::vector< unsigned long >::value_type"""
        return _libBornAgainFit.vector_longinteger_t_pop(self)


    def append(self, x):
        """append(vector_longinteger_t self, std::vector< unsigned long >::value_type const & x)"""
        return _libBornAgainFit.vector_longinteger_t_append(self, x)


    def empty(self):
        """empty(vector_longinteger_t self) -> bool"""
        return _libBornAgainFit.vector_longinteger_t_empty(self)


    def size(self):
        """size(vector_longinteger_t self) -> std::vector< unsigned long >::size_type"""
        return _libBornAgainFit.vector_longinteger_t_size(self)


    def swap(self, v):
        """swap(vector_longinteger_t self, vector_longinteger_t v)"""
        return _libBornAgainFit.vector_longinteger_t_swap(self, v)


    def begin(self):
        """begin(vector_longinteger_t self) -> std::vector< unsigned long >::iterator"""
        return _libBornAgainFit.vector_longinteger_t_begin(self)


    def end(self):
        """end(vector_longinteger_t self) -> std::vector< unsigned long >::iterator"""
        return _libBornAgainFit.vector_longinteger_t_end(self)


    def rbegin(self):
        """rbegin(vector_longinteger_t self) -> std::vector< unsigned long >::reverse_iterator"""
        return _libBornAgainFit.vector_longinteger_t_rbegin(self)


    def rend(self):
        """rend(vector_longinteger_t self) -> std::vector< unsigned long >::reverse_iterator"""
        return _libBornAgainFit.vector_longinteger_t_rend(self)


    def clear(self):
        """clear(vector_longinteger_t self)"""
        return _libBornAgainFit.vector_longinteger_t_clear(self)


    def get_allocator(self):
        """get_allocator(vector_longinteger_t self) -> std::vector< unsigned long >::allocator_type"""
        return _libBornAgainFit.vector_longinteger_t_get_allocator(self)


    def pop_back(self):
        """pop_back(vector_longinteger_t self)"""
        return _libBornAgainFit.vector_longinteger_t_pop_back(self)


    def erase(self, *args):
        """
        erase(vector_longinteger_t self, std::vector< unsigned long >::iterator pos) -> std::vector< unsigned long >::iterator
        erase(vector_longinteger_t self, std::vector< unsigned long >::iterator first, std::vector< unsigned long >::iterator last) -> std::vector< unsigned long >::iterator
        """
        return _libBornAgainFit.vector_longinteger_t_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(unsigned long)> self) -> vector_longinteger_t
        __init__(std::vector<(unsigned long)> self, vector_longinteger_t arg2) -> vector_longinteger_t
        __init__(std::vector<(unsigned long)> self, std::vector< unsigned long >::size_type size) -> vector_longinteger_t
        __init__(std::vector<(unsigned long)> self, std::vector< unsigned long >::size_type size, std::vector< unsigned long >::value_type const & value) -> vector_longinteger_t
        """
        this = _libBornAgainFit.new_vector_longinteger_t(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        """push_back(vector_longinteger_t self, std::vector< unsigned long >::value_type const & x)"""
        return _libBornAgainFit.vector_longinteger_t_push_back(self, x)


    def front(self):
        """front(vector_longinteger_t self) -> std::vector< unsigned long >::value_type const &"""
        return _libBornAgainFit.vector_longinteger_t_front(self)


    def back(self):
        """back(vector_longinteger_t self) -> std::vector< unsigned long >::value_type const &"""
        return _libBornAgainFit.vector_longinteger_t_back(self)


    def assign(self, n, x):
        """assign(vector_longinteger_t self, std::vector< unsigned long >::size_type n, std::vector< unsigned long >::value_type const & x)"""
        return _libBornAgainFit.vector_longinteger_t_assign(self, n, x)


    def resize(self, *args):
        """
        resize(vector_longinteger_t self, std::vector< unsigned long >::size_type new_size)
        resize(vector_longinteger_t self, std::vector< unsigned long >::size_type new_size, std::vector< unsigned long >::value_type const & x)
        """
        return _libBornAgainFit.vector_longinteger_t_resize(self, *args)


    def insert(self, *args):
        """
        insert(vector_longinteger_t self, std::vector< unsigned long >::iterator pos, std::vector< unsigned long >::value_type const & x) -> std::vector< unsigned long >::iterator
        insert(vector_longinteger_t self, std::vector< unsigned long >::iterator pos, std::vector< unsigned long >::size_type n, std::vector< unsigned long >::value_type const & x)
        """
        return _libBornAgainFit.vector_longinteger_t_insert(self, *args)


    def reserve(self, n):
        """reserve(vector_longinteger_t self, std::vector< unsigned long >::size_type n)"""
        return _libBornAgainFit.vector_longinteger_t_reserve(self, n)


    def capacity(self):
        """capacity(vector_longinteger_t self) -> std::vector< unsigned long >::size_type"""
        return _libBornAgainFit.vector_longinteger_t_capacity(self)

    __swig_destroy__ = _libBornAgainFit.delete_vector_longinteger_t
    __del__ = lambda self: None
vector_longinteger_t_swigregister = _libBornAgainFit.vector_longinteger_t_swigregister
vector_longinteger_t_swigregister(vector_longinteger_t)

class vector_complex_t(_object):
    """Proxy of C++ std::vector<(std::complex<(double)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_complex_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_complex_t, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(vector_complex_t self) -> SwigPyIterator"""
        return _libBornAgainFit.vector_complex_t_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(vector_complex_t self) -> bool"""
        return _libBornAgainFit.vector_complex_t___nonzero__(self)


    def __bool__(self):
        """__bool__(vector_complex_t self) -> bool"""
        return _libBornAgainFit.vector_complex_t___bool__(self)


    def __len__(self):
        """__len__(vector_complex_t self) -> std::vector< std::complex< double > >::size_type"""
        return _libBornAgainFit.vector_complex_t___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(vector_complex_t self, std::vector< std::complex< double > >::difference_type i, std::vector< std::complex< double > >::difference_type j) -> vector_complex_t"""
        return _libBornAgainFit.vector_complex_t___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(vector_complex_t self, std::vector< std::complex< double > >::difference_type i, std::vector< std::complex< double > >::difference_type j)
        __setslice__(vector_complex_t self, std::vector< std::complex< double > >::difference_type i, std::vector< std::complex< double > >::difference_type j, vector_complex_t v)
        """
        return _libBornAgainFit.vector_complex_t___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(vector_complex_t self, std::vector< std::complex< double > >::difference_type i, std::vector< std::complex< double > >::difference_type j)"""
        return _libBornAgainFit.vector_complex_t___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(vector_complex_t self, std::vector< std::complex< double > >::difference_type i)
        __delitem__(vector_complex_t self, PySliceObject * slice)
        """
        return _libBornAgainFit.vector_complex_t___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(vector_complex_t self, PySliceObject * slice) -> vector_complex_t
        __getitem__(vector_complex_t self, std::vector< std::complex< double > >::difference_type i) -> std::vector< std::complex< double > >::value_type const &
        """
        return _libBornAgainFit.vector_complex_t___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(vector_complex_t self, PySliceObject * slice, vector_complex_t v)
        __setitem__(vector_complex_t self, PySliceObject * slice)
        __setitem__(vector_complex_t self, std::vector< std::complex< double > >::difference_type i, std::vector< std::complex< double > >::value_type const & x)
        """
        return _libBornAgainFit.vector_complex_t___setitem__(self, *args)


    def pop(self):
        """pop(vector_complex_t self) -> std::vector< std::complex< double > >::value_type"""
        return _libBornAgainFit.vector_complex_t_pop(self)


    def append(self, x):
        """append(vector_complex_t self, std::vector< std::complex< double > >::value_type const & x)"""
        return _libBornAgainFit.vector_complex_t_append(self, x)


    def empty(self):
        """empty(vector_complex_t self) -> bool"""
        return _libBornAgainFit.vector_complex_t_empty(self)


    def size(self):
        """size(vector_complex_t self) -> std::vector< std::complex< double > >::size_type"""
        return _libBornAgainFit.vector_complex_t_size(self)


    def swap(self, v):
        """swap(vector_complex_t self, vector_complex_t v)"""
        return _libBornAgainFit.vector_complex_t_swap(self, v)


    def begin(self):
        """begin(vector_complex_t self) -> std::vector< std::complex< double > >::iterator"""
        return _libBornAgainFit.vector_complex_t_begin(self)


    def end(self):
        """end(vector_complex_t self) -> std::vector< std::complex< double > >::iterator"""
        return _libBornAgainFit.vector_complex_t_end(self)


    def rbegin(self):
        """rbegin(vector_complex_t self) -> std::vector< std::complex< double > >::reverse_iterator"""
        return _libBornAgainFit.vector_complex_t_rbegin(self)


    def rend(self):
        """rend(vector_complex_t self) -> std::vector< std::complex< double > >::reverse_iterator"""
        return _libBornAgainFit.vector_complex_t_rend(self)


    def clear(self):
        """clear(vector_complex_t self)"""
        return _libBornAgainFit.vector_complex_t_clear(self)


    def get_allocator(self):
        """get_allocator(vector_complex_t self) -> std::vector< std::complex< double > >::allocator_type"""
        return _libBornAgainFit.vector_complex_t_get_allocator(self)


    def pop_back(self):
        """pop_back(vector_complex_t self)"""
        return _libBornAgainFit.vector_complex_t_pop_back(self)


    def erase(self, *args):
        """
        erase(vector_complex_t self, std::vector< std::complex< double > >::iterator pos) -> std::vector< std::complex< double > >::iterator
        erase(vector_complex_t self, std::vector< std::complex< double > >::iterator first, std::vector< std::complex< double > >::iterator last) -> std::vector< std::complex< double > >::iterator
        """
        return _libBornAgainFit.vector_complex_t_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::complex<(double)>)> self) -> vector_complex_t
        __init__(std::vector<(std::complex<(double)>)> self, vector_complex_t arg2) -> vector_complex_t
        __init__(std::vector<(std::complex<(double)>)> self, std::vector< std::complex< double > >::size_type size) -> vector_complex_t
        __init__(std::vector<(std::complex<(double)>)> self, std::vector< std::complex< double > >::size_type size, std::vector< std::complex< double > >::value_type const & value) -> vector_complex_t
        """
        this = _libBornAgainFit.new_vector_complex_t(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        """push_back(vector_complex_t self, std::vector< std::complex< double > >::value_type const & x)"""
        return _libBornAgainFit.vector_complex_t_push_back(self, x)


    def front(self):
        """front(vector_complex_t self) -> std::vector< std::complex< double > >::value_type const &"""
        return _libBornAgainFit.vector_complex_t_front(self)


    def back(self):
        """back(vector_complex_t self) -> std::vector< std::complex< double > >::value_type const &"""
        return _libBornAgainFit.vector_complex_t_back(self)


    def assign(self, n, x):
        """assign(vector_complex_t self, std::vector< std::complex< double > >::size_type n, std::vector< std::complex< double > >::value_type const & x)"""
        return _libBornAgainFit.vector_complex_t_assign(self, n, x)


    def resize(self, *args):
        """
        resize(vector_complex_t self, std::vector< std::complex< double > >::size_type new_size)
        resize(vector_complex_t self, std::vector< std::complex< double > >::size_type new_size, std::vector< std::complex< double > >::value_type const & x)
        """
        return _libBornAgainFit.vector_complex_t_resize(self, *args)


    def insert(self, *args):
        """
        insert(vector_complex_t self, std::vector< std::complex< double > >::iterator pos, std::vector< std::complex< double > >::value_type const & x) -> std::vector< std::complex< double > >::iterator
        insert(vector_complex_t self, std::vector< std::complex< double > >::iterator pos, std::vector< std::complex< double > >::size_type n, std::vector< std::complex< double > >::value_type const & x)
        """
        return _libBornAgainFit.vector_complex_t_insert(self, *args)


    def reserve(self, n):
        """reserve(vector_complex_t self, std::vector< std::complex< double > >::size_type n)"""
        return _libBornAgainFit.vector_complex_t_reserve(self, n)


    def capacity(self):
        """capacity(vector_complex_t self) -> std::vector< std::complex< double > >::size_type"""
        return _libBornAgainFit.vector_complex_t_capacity(self)

    __swig_destroy__ = _libBornAgainFit.delete_vector_complex_t
    __del__ = lambda self: None
vector_complex_t_swigregister = _libBornAgainFit.vector_complex_t_swigregister
vector_complex_t_swigregister(vector_complex_t)

class vector_string_t(_object):
    """Proxy of C++ std::vector<(std::string)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_string_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_string_t, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(vector_string_t self) -> SwigPyIterator"""
        return _libBornAgainFit.vector_string_t_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(vector_string_t self) -> bool"""
        return _libBornAgainFit.vector_string_t___nonzero__(self)


    def __bool__(self):
        """__bool__(vector_string_t self) -> bool"""
        return _libBornAgainFit.vector_string_t___bool__(self)


    def __len__(self):
        """__len__(vector_string_t self) -> std::vector< std::string >::size_type"""
        return _libBornAgainFit.vector_string_t___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(vector_string_t self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> vector_string_t"""
        return _libBornAgainFit.vector_string_t___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(vector_string_t self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)
        __setslice__(vector_string_t self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, vector_string_t v)
        """
        return _libBornAgainFit.vector_string_t___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(vector_string_t self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)"""
        return _libBornAgainFit.vector_string_t___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(vector_string_t self, std::vector< std::string >::difference_type i)
        __delitem__(vector_string_t self, PySliceObject * slice)
        """
        return _libBornAgainFit.vector_string_t___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(vector_string_t self, PySliceObject * slice) -> vector_string_t
        __getitem__(vector_string_t self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &
        """
        return _libBornAgainFit.vector_string_t___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(vector_string_t self, PySliceObject * slice, vector_string_t v)
        __setitem__(vector_string_t self, PySliceObject * slice)
        __setitem__(vector_string_t self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)
        """
        return _libBornAgainFit.vector_string_t___setitem__(self, *args)


    def pop(self):
        """pop(vector_string_t self) -> std::vector< std::string >::value_type"""
        return _libBornAgainFit.vector_string_t_pop(self)


    def append(self, x):
        """append(vector_string_t self, std::vector< std::string >::value_type const & x)"""
        return _libBornAgainFit.vector_string_t_append(self, x)


    def empty(self):
        """empty(vector_string_t self) -> bool"""
        return _libBornAgainFit.vector_string_t_empty(self)


    def size(self):
        """size(vector_string_t self) -> std::vector< std::string >::size_type"""
        return _libBornAgainFit.vector_string_t_size(self)


    def swap(self, v):
        """swap(vector_string_t self, vector_string_t v)"""
        return _libBornAgainFit.vector_string_t_swap(self, v)


    def begin(self):
        """begin(vector_string_t self) -> std::vector< std::string >::iterator"""
        return _libBornAgainFit.vector_string_t_begin(self)


    def end(self):
        """end(vector_string_t self) -> std::vector< std::string >::iterator"""
        return _libBornAgainFit.vector_string_t_end(self)


    def rbegin(self):
        """rbegin(vector_string_t self) -> std::vector< std::string >::reverse_iterator"""
        return _libBornAgainFit.vector_string_t_rbegin(self)


    def rend(self):
        """rend(vector_string_t self) -> std::vector< std::string >::reverse_iterator"""
        return _libBornAgainFit.vector_string_t_rend(self)


    def clear(self):
        """clear(vector_string_t self)"""
        return _libBornAgainFit.vector_string_t_clear(self)


    def get_allocator(self):
        """get_allocator(vector_string_t self) -> std::vector< std::string >::allocator_type"""
        return _libBornAgainFit.vector_string_t_get_allocator(self)


    def pop_back(self):
        """pop_back(vector_string_t self)"""
        return _libBornAgainFit.vector_string_t_pop_back(self)


    def erase(self, *args):
        """
        erase(vector_string_t self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator
        erase(vector_string_t self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator
        """
        return _libBornAgainFit.vector_string_t_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::string)> self) -> vector_string_t
        __init__(std::vector<(std::string)> self, vector_string_t arg2) -> vector_string_t
        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size) -> vector_string_t
        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> vector_string_t
        """
        this = _libBornAgainFit.new_vector_string_t(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        """push_back(vector_string_t self, std::vector< std::string >::value_type const & x)"""
        return _libBornAgainFit.vector_string_t_push_back(self, x)


    def front(self):
        """front(vector_string_t self) -> std::vector< std::string >::value_type const &"""
        return _libBornAgainFit.vector_string_t_front(self)


    def back(self):
        """back(vector_string_t self) -> std::vector< std::string >::value_type const &"""
        return _libBornAgainFit.vector_string_t_back(self)


    def assign(self, n, x):
        """assign(vector_string_t self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)"""
        return _libBornAgainFit.vector_string_t_assign(self, n, x)


    def resize(self, *args):
        """
        resize(vector_string_t self, std::vector< std::string >::size_type new_size)
        resize(vector_string_t self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)
        """
        return _libBornAgainFit.vector_string_t_resize(self, *args)


    def insert(self, *args):
        """
        insert(vector_string_t self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator
        insert(vector_string_t self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)
        """
        return _libBornAgainFit.vector_string_t_insert(self, *args)


    def reserve(self, n):
        """reserve(vector_string_t self, std::vector< std::string >::size_type n)"""
        return _libBornAgainFit.vector_string_t_reserve(self, n)


    def capacity(self):
        """capacity(vector_string_t self) -> std::vector< std::string >::size_type"""
        return _libBornAgainFit.vector_string_t_capacity(self)

    __swig_destroy__ = _libBornAgainFit.delete_vector_string_t
    __del__ = lambda self: None
vector_string_t_swigregister = _libBornAgainFit.vector_string_t_swigregister
vector_string_t_swigregister(vector_string_t)

class Attributes(_object):
    """


    Attributes for a fit parameter. Currently, the only attribute is fixed/free.

    C++ includes: Attributes.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Attributes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Attributes, name)
    __repr__ = _swig_repr

    def __init__(self):
        """
        __init__(Attributes self) -> Attributes

        Attributes::Attributes()

        """
        this = _libBornAgainFit.new_Attributes()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def fixed():
        """fixed() -> Attributes"""
        return _libBornAgainFit.Attributes_fixed()

    if _newclass:
        fixed = staticmethod(fixed)
    __swig_getmethods__["fixed"] = lambda x: fixed

    def free():
        """free() -> Attributes"""
        return _libBornAgainFit.Attributes_free()

    if _newclass:
        free = staticmethod(free)
    __swig_getmethods__["free"] = lambda x: free

    def setFixed(self, is_fixed):
        """
        setFixed(Attributes self, bool is_fixed)

        void Attributes::setFixed(bool is_fixed)

        """
        return _libBornAgainFit.Attributes_setFixed(self, is_fixed)


    def isFixed(self):
        """
        isFixed(Attributes self) -> bool

        bool Attributes::isFixed() const 

        """
        return _libBornAgainFit.Attributes_isFixed(self)


    def __eq__(self, other):
        """__eq__(Attributes self, Attributes other) -> bool"""
        return _libBornAgainFit.Attributes___eq__(self, other)


    def __ne__(self, other):
        """__ne__(Attributes self, Attributes other) -> bool"""
        return _libBornAgainFit.Attributes___ne__(self, other)

    __swig_destroy__ = _libBornAgainFit.delete_Attributes
    __del__ = lambda self: None
Attributes_swigregister = _libBornAgainFit.Attributes_swigregister
Attributes_swigregister(Attributes)

def Attributes_fixed():
    """Attributes_fixed() -> Attributes"""
    return _libBornAgainFit.Attributes_fixed()

def Attributes_free():
    """Attributes_free() -> Attributes"""
    return _libBornAgainFit.Attributes_free()

class RealLimits(_object):
    """


    Limits for a real fit parameter.

    C++ includes: RealLimits.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RealLimits, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RealLimits, name)
    __repr__ = _swig_repr

    def __init__(self):
        """
        __init__(RealLimits self) -> RealLimits

        RealLimits::RealLimits()

        """
        this = _libBornAgainFit.new_RealLimits()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def hasLowerLimit(self):
        """
        hasLowerLimit(RealLimits self) -> bool

        bool RealLimits::hasLowerLimit() const

        if has lower limit 

        """
        return _libBornAgainFit.RealLimits_hasLowerLimit(self)


    def getLowerLimit(self):
        """
        getLowerLimit(RealLimits self) -> double

        double RealLimits::getLowerLimit() const

        Returns lower limit. 

        """
        return _libBornAgainFit.RealLimits_getLowerLimit(self)


    def setLowerLimit(self, value):
        """
        setLowerLimit(RealLimits self, double value)

        void RealLimits::setLowerLimit(double value)

        Sets lower limit. 

        """
        return _libBornAgainFit.RealLimits_setLowerLimit(self, value)


    def removeLowerLimit(self):
        """
        removeLowerLimit(RealLimits self)

        void RealLimits::removeLowerLimit()

        remove lower limit 

        """
        return _libBornAgainFit.RealLimits_removeLowerLimit(self)


    def hasUpperLimit(self):
        """
        hasUpperLimit(RealLimits self) -> bool

        bool RealLimits::hasUpperLimit() const

        if has upper limit 

        """
        return _libBornAgainFit.RealLimits_hasUpperLimit(self)


    def getUpperLimit(self):
        """
        getUpperLimit(RealLimits self) -> double

        double RealLimits::getUpperLimit() const

        Returns upper limit. 

        """
        return _libBornAgainFit.RealLimits_getUpperLimit(self)


    def setUpperLimit(self, value):
        """
        setUpperLimit(RealLimits self, double value)

        void RealLimits::setUpperLimit(double value)

        Sets upper limit. 

        """
        return _libBornAgainFit.RealLimits_setUpperLimit(self, value)


    def removeUpperLimit(self):
        """
        removeUpperLimit(RealLimits self)

        void RealLimits::removeUpperLimit()

        remove upper limit 

        """
        return _libBornAgainFit.RealLimits_removeUpperLimit(self)


    def hasLowerAndUpperLimits(self):
        """
        hasLowerAndUpperLimits(RealLimits self) -> bool

        bool RealLimits::hasLowerAndUpperLimits() const

        if has lower and upper limit 

        """
        return _libBornAgainFit.RealLimits_hasLowerAndUpperLimits(self)


    def setLimits(self, xmin, xmax):
        """
        setLimits(RealLimits self, double xmin, double xmax)

        void RealLimits::setLimits(double xmin, double xmax)

        Sets lower and upper limits. 

        """
        return _libBornAgainFit.RealLimits_setLimits(self, xmin, xmax)


    def removeLimits(self):
        """
        removeLimits(RealLimits self)

        void RealLimits::removeLimits()

        remove limits 

        """
        return _libBornAgainFit.RealLimits_removeLimits(self)


    def isInRange(self, value):
        """
        isInRange(RealLimits self, double value) -> bool

        bool RealLimits::isInRange(double value) const

        returns true if proposed value is in limits range 

        """
        return _libBornAgainFit.RealLimits_isInRange(self, value)


    def lowerLimited(bound_value):
        """lowerLimited(double bound_value) -> RealLimits"""
        return _libBornAgainFit.RealLimits_lowerLimited(bound_value)

    if _newclass:
        lowerLimited = staticmethod(lowerLimited)
    __swig_getmethods__["lowerLimited"] = lambda x: lowerLimited

    def positive():
        """positive() -> RealLimits"""
        return _libBornAgainFit.RealLimits_positive()

    if _newclass:
        positive = staticmethod(positive)
    __swig_getmethods__["positive"] = lambda x: positive

    def nonnegative():
        """nonnegative() -> RealLimits"""
        return _libBornAgainFit.RealLimits_nonnegative()

    if _newclass:
        nonnegative = staticmethod(nonnegative)
    __swig_getmethods__["nonnegative"] = lambda x: nonnegative

    def upperLimited(bound_value):
        """upperLimited(double bound_value) -> RealLimits"""
        return _libBornAgainFit.RealLimits_upperLimited(bound_value)

    if _newclass:
        upperLimited = staticmethod(upperLimited)
    __swig_getmethods__["upperLimited"] = lambda x: upperLimited

    def limited(left_bound_value, right_bound_value):
        """limited(double left_bound_value, double right_bound_value) -> RealLimits"""
        return _libBornAgainFit.RealLimits_limited(left_bound_value, right_bound_value)

    if _newclass:
        limited = staticmethod(limited)
    __swig_getmethods__["limited"] = lambda x: limited

    def limitless():
        """limitless() -> RealLimits"""
        return _libBornAgainFit.RealLimits_limitless()

    if _newclass:
        limitless = staticmethod(limitless)
    __swig_getmethods__["limitless"] = lambda x: limitless

    def __eq__(self, other):
        """__eq__(RealLimits self, RealLimits other) -> bool"""
        return _libBornAgainFit.RealLimits___eq__(self, other)


    def __ne__(self, other):
        """__ne__(RealLimits self, RealLimits other) -> bool"""
        return _libBornAgainFit.RealLimits___ne__(self, other)

    __swig_destroy__ = _libBornAgainFit.delete_RealLimits
    __del__ = lambda self: None
RealLimits_swigregister = _libBornAgainFit.RealLimits_swigregister
RealLimits_swigregister(RealLimits)

def RealLimits_lowerLimited(bound_value):
    """RealLimits_lowerLimited(double bound_value) -> RealLimits"""
    return _libBornAgainFit.RealLimits_lowerLimited(bound_value)

def RealLimits_positive():
    """RealLimits_positive() -> RealLimits"""
    return _libBornAgainFit.RealLimits_positive()

def RealLimits_nonnegative():
    """RealLimits_nonnegative() -> RealLimits"""
    return _libBornAgainFit.RealLimits_nonnegative()

def RealLimits_upperLimited(bound_value):
    """RealLimits_upperLimited(double bound_value) -> RealLimits"""
    return _libBornAgainFit.RealLimits_upperLimited(bound_value)

def RealLimits_limited(left_bound_value, right_bound_value):
    """RealLimits_limited(double left_bound_value, double right_bound_value) -> RealLimits"""
    return _libBornAgainFit.RealLimits_limited(left_bound_value, right_bound_value)

def RealLimits_limitless():
    """RealLimits_limitless() -> RealLimits"""
    return _libBornAgainFit.RealLimits_limitless()

class IMinimizer(_object):
    """


    Common interface for all kind minimizers.

    C++ includes: IMinimizer.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMinimizer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IMinimizer, name)
    __repr__ = _swig_repr

    def __init__(self):
        """
        __init__(IMinimizer self) -> IMinimizer

        IMinimizer::IMinimizer()

        """
        this = _libBornAgainFit.new_IMinimizer()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainFit.delete_IMinimizer
    __del__ = lambda self: None

    def minimizerName(self):
        """minimizerName(IMinimizer self) -> std::string"""
        return _libBornAgainFit.IMinimizer_minimizerName(self)


    def algorithmName(self):
        """algorithmName(IMinimizer self) -> std::string"""
        return _libBornAgainFit.IMinimizer_algorithmName(self)


    def minimize(self):
        """
        minimize(IMinimizer self)

        virtual void IMinimizer::minimize()=0

        run minimization 

        """
        return _libBornAgainFit.IMinimizer_minimize(self)


    def setParameter(self, index, par):
        """setParameter(IMinimizer self, size_t index, FitParameter par)"""
        return _libBornAgainFit.IMinimizer_setParameter(self, index, par)


    def setParameters(self, parameters):
        """
        setParameters(IMinimizer self, FitSuiteParameters parameters)

        virtual void IMinimizer::setParameters(const FitSuiteParameters &parameters)=0

        Sets internal minimizer parameter.

        Sets internal minimizer parameters using external parameter list 

        """
        return _libBornAgainFit.IMinimizer_setParameters(self, parameters)


    def setChiSquaredFunction(self, fun_chi2, nparameters):
        """
        setChiSquaredFunction(IMinimizer self, IMinimizer::function_chi2_t fun_chi2, size_t nparameters)

        virtual void IMinimizer::setChiSquaredFunction(function_chi2_t fun_chi2, size_t nparameters)=0

        Sets chi squared function to minimize. 

        """
        return _libBornAgainFit.IMinimizer_setChiSquaredFunction(self, fun_chi2, nparameters)


    def setGradientFunction(self, fun_gradient, nparameters, ndatasize):
        """
        setGradientFunction(IMinimizer self, IMinimizer::function_gradient_t fun_gradient, size_t nparameters, size_t ndatasize)

        virtual void IMinimizer::setGradientFunction(function_gradient_t fun_gradient, size_t nparameters, size_t ndatasize)=0

        Sets gradient function to minimize. 

        """
        return _libBornAgainFit.IMinimizer_setGradientFunction(self, fun_gradient, nparameters, ndatasize)


    def getNumberOfVariables(self):
        """
        getNumberOfVariables(IMinimizer self) -> size_t

        virtual size_t IMinimizer::getNumberOfVariables() const =0

        Returns number of variables to fit. 

        """
        return _libBornAgainFit.IMinimizer_getNumberOfVariables(self)


    def getMinValue(self):
        """getMinValue(IMinimizer self) -> double"""
        return _libBornAgainFit.IMinimizer_getMinValue(self)


    def getValueOfVariableAtMinimum(self, index):
        """getValueOfVariableAtMinimum(IMinimizer self, size_t index) -> double"""
        return _libBornAgainFit.IMinimizer_getValueOfVariableAtMinimum(self, index)


    def getValueOfVariablesAtMinimum(self):
        """
        getValueOfVariablesAtMinimum(IMinimizer self) -> vdouble1d_t

        virtual std::vector<double> IMinimizer::getValueOfVariablesAtMinimum() const =0

        Returns minimum function value.

        Returns values of parameters at the minimum 

        """
        return _libBornAgainFit.IMinimizer_getValueOfVariablesAtMinimum(self)


    def getErrorOfVariable(self, index):
        """getErrorOfVariable(IMinimizer self, size_t index) -> double"""
        return _libBornAgainFit.IMinimizer_getErrorOfVariable(self, index)


    def getErrorOfVariables(self):
        """
        getErrorOfVariables(IMinimizer self) -> vdouble1d_t

        virtual std::vector<double> IMinimizer::getErrorOfVariables() const =0

        Returns errors of variables at minimum. 

        """
        return _libBornAgainFit.IMinimizer_getErrorOfVariables(self)


    def clear(self):
        """clear(IMinimizer self)"""
        return _libBornAgainFit.IMinimizer_clear(self)


    def reportResults(self):
        """reportResults(IMinimizer self) -> std::string"""
        return _libBornAgainFit.IMinimizer_reportResults(self)


    def propagateResults(self, parameters):
        """propagateResults(IMinimizer self, FitSuiteParameters parameters)"""
        return _libBornAgainFit.IMinimizer_propagateResults(self, parameters)

IMinimizer_swigregister = _libBornAgainFit.IMinimizer_swigregister
IMinimizer_swigregister(IMinimizer)

class FitParameter(RealLimits, Attributes):
    """


    Fittable parameter with value, error, step, limits, and fixed flag.

    C++ includes: FitParameter.h

    """

    __swig_setmethods__ = {}
    for _s in [RealLimits, Attributes]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FitParameter, name, value)
    __swig_getmethods__ = {}
    for _s in [RealLimits, Attributes]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FitParameter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FitParameter self) -> FitParameter
        __init__(FitParameter self, std::string const & name, double value, double step=0.0, RealLimits limits, Attributes attr, double error=0.0) -> FitParameter
        __init__(FitParameter self, std::string const & name, double value, double step=0.0, RealLimits limits, Attributes attr) -> FitParameter
        __init__(FitParameter self, std::string const & name, double value, double step=0.0, RealLimits limits) -> FitParameter
        __init__(FitParameter self, std::string const & name, double value, double step=0.0) -> FitParameter
        __init__(FitParameter self, std::string const & name, double value) -> FitParameter

        FitParameter::FitParameter(const std::string &name, double value, double step=0.0, const RealLimits &limits=RealLimits::limitless(), const Attributes &attr=Attributes::free(), double error=0.0)

        """
        this = _libBornAgainFit.new_FitParameter(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainFit.delete_FitParameter
    __del__ = lambda self: None

    def getName(self):
        """
        getName(FitParameter self) -> std::string

        std::string FitParameter::getName() const 

        """
        return _libBornAgainFit.FitParameter_getName(self)


    def getStartValue(self):
        """getStartValue(FitParameter self) -> double"""
        return _libBornAgainFit.FitParameter_getStartValue(self)


    def setValue(self, value):
        """
        setValue(FitParameter self, double value)

        virtual void FitParameter::setValue(double value)

        """
        return _libBornAgainFit.FitParameter_setValue(self, value)


    def getValue(self):
        """
        getValue(FitParameter self) -> double

        double FitParameter::getValue() const 

        """
        return _libBornAgainFit.FitParameter_getValue(self)


    def setStep(self, value):
        """
        setStep(FitParameter self, double value)

        void FitParameter::setStep(double value)

        """
        return _libBornAgainFit.FitParameter_setStep(self, value)


    def getStep(self):
        """
        getStep(FitParameter self) -> double

        double FitParameter::getStep() const 

        """
        return _libBornAgainFit.FitParameter_getStep(self)


    def setError(self, value):
        """
        setError(FitParameter self, double value)

        void FitParameter::setError(double value)

        """
        return _libBornAgainFit.FitParameter_setError(self, value)


    def getError(self):
        """
        getError(FitParameter self) -> double

        double FitParameter::getError() const 

        """
        return _libBornAgainFit.FitParameter_getError(self)


    def limitsToString(self):
        """limitsToString(FitParameter self) -> std::string"""
        return _libBornAgainFit.FitParameter_limitsToString(self)

FitParameter_swigregister = _libBornAgainFit.FitParameter_swigregister
FitParameter_swigregister(FitParameter)

class FitSuiteParameters(_object):
    """


    Vector of parameters, for FitSuite

    C++ includes: FitSuiteParameters.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FitSuiteParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FitSuiteParameters, name)
    __repr__ = _swig_repr

    def __init__(self):
        """
        __init__(FitSuiteParameters self) -> FitSuiteParameters

        FitSuiteParameters::FitSuiteParameters()

        """
        this = _libBornAgainFit.new_FitSuiteParameters()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainFit.delete_FitSuiteParameters
    __del__ = lambda self: None

    def clear(self):
        """
        clear(FitSuiteParameters self)

        void FitSuiteParameters::clear()

        Clears all defined parameters. 

        """
        return _libBornAgainFit.FitSuiteParameters_clear(self)


    def addFitParameter(self, par):
        """
        addFitParameter(FitSuiteParameters self, FitParameter par)

        void FitSuiteParameters::addFitParameter(FitParameter *par)

        Adds fit parameter. 

        """
        return _libBornAgainFit.FitSuiteParameters_addFitParameter(self, par)


    def getFitParameters(self, *args):
        """
        getFitParameters(FitSuiteParameters self) -> std::vector< FitParameter *,std::allocator< FitParameter * > >
        getFitParameters(FitSuiteParameters self) -> std::vector< FitParameter *,std::allocator< FitParameter * > > const &

        std::vector<FitParameter*>& FitSuiteParameters::getFitParameters()

        Returns all parameters. 

        """
        return _libBornAgainFit.FitSuiteParameters_getFitParameters(self, *args)


    def getFitParameter(self, *args):
        """
        getFitParameter(FitSuiteParameters self, std::string const & name) -> FitParameter
        getFitParameter(FitSuiteParameters self, std::string const & name) -> FitParameter

        FitParameter * FitSuiteParameters::getFitParameter(const std::string &name)

        """
        return _libBornAgainFit.FitSuiteParameters_getFitParameter(self, *args)


    def setValues(self, *args):
        """
        setValues(FitSuiteParameters self, double const * pars_values)
        setValues(FitSuiteParameters self, vdouble1d_t pars_values)

        void FitSuiteParameters::setValues(const std::vector< double > &pars_values)

        """
        return _libBornAgainFit.FitSuiteParameters_setValues(self, *args)


    def getValues(self):
        """
        getValues(FitSuiteParameters self) -> vdouble1d_t

        std::vector< double > FitSuiteParameters::getValues() const

        Returns values of all defined parameters. 

        """
        return _libBornAgainFit.FitSuiteParameters_getValues(self)


    def setErrors(self, pars_errors):
        """
        setErrors(FitSuiteParameters self, vdouble1d_t pars_errors)

        void FitSuiteParameters::setErrors(const std::vector< double > &pars_errors)

        Sets errors to all parameters. 

        """
        return _libBornAgainFit.FitSuiteParameters_setErrors(self, pars_errors)


    def getErrors(self):
        """
        getErrors(FitSuiteParameters self) -> vdouble1d_t

        std::vector< double > FitSuiteParameters::getErrors() const

        Returns errors of all defined parameters. 

        """
        return _libBornAgainFit.FitSuiteParameters_getErrors(self)


    def size(self):
        """
        size(FitSuiteParameters self) -> size_t

        size_t FitSuiteParameters::size() const

        Returns number of parameters. 

        """
        return _libBornAgainFit.FitSuiteParameters_size(self)


    def begin(self, *args):
        """
        begin(FitSuiteParameters self) -> std::vector< FitParameter *,std::allocator< FitParameter * > >::iterator
        begin(FitSuiteParameters self) -> std::vector< FitParameter *,std::allocator< FitParameter * > >::const_iterator

        std::vector<FitParameter*>::const_iterator FitSuiteParameters::begin() const 

        """
        return _libBornAgainFit.FitSuiteParameters_begin(self, *args)


    def end(self, *args):
        """
        end(FitSuiteParameters self) -> std::vector< FitParameter *,std::allocator< FitParameter * > >::iterator
        end(FitSuiteParameters self) -> std::vector< FitParameter *,std::allocator< FitParameter * > >::const_iterator

        std::vector<FitParameter*>::const_iterator FitSuiteParameters::end() const 

        """
        return _libBornAgainFit.FitSuiteParameters_end(self, *args)


    def numberOfFreeFitParameters(self):
        """
        numberOfFreeFitParameters(FitSuiteParameters self) -> size_t

        size_t FitSuiteParameters::numberOfFreeFitParameters() const

        Returns number of free parameters. 

        """
        return _libBornAgainFit.FitSuiteParameters_numberOfFreeFitParameters(self)


    def printFitParameters(self):
        """
        printFitParameters(FitSuiteParameters self)

        void FitSuiteParameters::printFitParameters() const

        Print defined parameters. 

        """
        return _libBornAgainFit.FitSuiteParameters_printFitParameters(self)


    def fixAll(self):
        """
        fixAll(FitSuiteParameters self)

        void FitSuiteParameters::fixAll()

        Fix all parameters. 

        """
        return _libBornAgainFit.FitSuiteParameters_fixAll(self)


    def releaseAll(self):
        """
        releaseAll(FitSuiteParameters self)

        void FitSuiteParameters::releaseAll()

        Release all parameters. 

        """
        return _libBornAgainFit.FitSuiteParameters_releaseAll(self)


    def setFixed(self, pars, is_fixed):
        """
        setFixed(FitSuiteParameters self, vector_string_t pars, bool is_fixed)

        void FitSuiteParameters::setFixed(const std::vector< std::string > &pars, bool is_fixed)

        Set fixed flag for parameters from the list. 

        """
        return _libBornAgainFit.FitSuiteParameters_setFixed(self, pars, is_fixed)


    def valuesDifferFrom(self, par_values, tolerance):
        """
        valuesDifferFrom(FitSuiteParameters self, double const * par_values, double tolerance) -> bool

        bool FitSuiteParameters::valuesDifferFrom(const double *par_values, double tolerance) const

        Returns true if parameters already have the given values. 

        """
        return _libBornAgainFit.FitSuiteParameters_valuesDifferFrom(self, par_values, tolerance)


    def reportResults(self):
        """reportResults(FitSuiteParameters self) -> std::string"""
        return _libBornAgainFit.FitSuiteParameters_reportResults(self)


    def correlationMatrix(self):
        """correlationMatrix(FitSuiteParameters self) -> vdouble2d_t"""
        return _libBornAgainFit.FitSuiteParameters_correlationMatrix(self)


    def setCorrelationMatrix(self, matrix):
        """setCorrelationMatrix(FitSuiteParameters self, vdouble2d_t matrix)"""
        return _libBornAgainFit.FitSuiteParameters_setCorrelationMatrix(self, matrix)


    def __getitem__(self, *args):
        """
        __getitem__(FitSuiteParameters self, std::string name) -> FitParameter
        __getitem__(FitSuiteParameters self, size_t index) -> FitParameter
        """
        return _libBornAgainFit.FitSuiteParameters___getitem__(self, *args)

FitSuiteParameters_swigregister = _libBornAgainFit.FitSuiteParameters_swigregister
FitSuiteParameters_swigregister(FitSuiteParameters)

class MinimizerCatalogue(_object):
    """


    Map of minimizer names holding list of defined algorithms for every minimizer. 

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MinimizerCatalogue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MinimizerCatalogue, name)
    __repr__ = _swig_repr

    def __init__(self):
        """
        __init__(MinimizerCatalogue self) -> MinimizerCatalogue

        MinimizerCatalogue::MinimizerCatalogue()

        """
        this = _libBornAgainFit.new_MinimizerCatalogue()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def toString(self):
        """toString(MinimizerCatalogue self) -> std::string"""
        return _libBornAgainFit.MinimizerCatalogue_toString(self)


    def algorithmNames(self, minimizerName):
        """algorithmNames(MinimizerCatalogue self, std::string const & minimizerName) -> vector_string_t"""
        return _libBornAgainFit.MinimizerCatalogue_algorithmNames(self, minimizerName)


    def algorithmDescriptions(self, minimizerName):
        """algorithmDescriptions(MinimizerCatalogue self, std::string const & minimizerName) -> vector_string_t"""
        return _libBornAgainFit.MinimizerCatalogue_algorithmDescriptions(self, minimizerName)

    __swig_destroy__ = _libBornAgainFit.delete_MinimizerCatalogue
    __del__ = lambda self: None
MinimizerCatalogue_swigregister = _libBornAgainFit.MinimizerCatalogue_swigregister
MinimizerCatalogue_swigregister(MinimizerCatalogue)

class MinimizerFactory(_object):
    """


    Factory to create minimizers.

    C++ includes: MinimizerFactory.h

    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MinimizerFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MinimizerFactory, name)
    __repr__ = _swig_repr

    def printCatalogue():
        """printCatalogue()"""
        return _libBornAgainFit.MinimizerFactory_printCatalogue()

    if _newclass:
        printCatalogue = staticmethod(printCatalogue)
    __swig_getmethods__["printCatalogue"] = lambda x: printCatalogue

    def catalogueToString():
        """catalogueToString() -> std::string"""
        return _libBornAgainFit.MinimizerFactory_catalogueToString()

    if _newclass:
        catalogueToString = staticmethod(catalogueToString)
    __swig_getmethods__["catalogueToString"] = lambda x: catalogueToString

    def createMinimizer(*args):
        """
        createMinimizer(std::string const & minimizerName, std::string const & algorithmType, std::string const & arg3) -> IMinimizer
        createMinimizer(std::string const & minimizerName, std::string const & algorithmType) -> IMinimizer
        createMinimizer(std::string const & minimizerName) -> IMinimizer
        createMinimizer(IMinimizer other) -> IMinimizer
        """
        return _libBornAgainFit.MinimizerFactory_createMinimizer(*args)

    if _newclass:
        createMinimizer = staticmethod(createMinimizer)
    __swig_getmethods__["createMinimizer"] = lambda x: createMinimizer

    def catalogue():
        """catalogue() -> MinimizerCatalogue"""
        return _libBornAgainFit.MinimizerFactory_catalogue()

    if _newclass:
        catalogue = staticmethod(catalogue)
    __swig_getmethods__["catalogue"] = lambda x: catalogue

    def __init__(self):
        """
        __init__(MinimizerFactory self) -> MinimizerFactory



        Factory to create minimizers.

        C++ includes: MinimizerFactory.h

        """
        this = _libBornAgainFit.new_MinimizerFactory()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libBornAgainFit.delete_MinimizerFactory
    __del__ = lambda self: None
MinimizerFactory_swigregister = _libBornAgainFit.MinimizerFactory_swigregister
MinimizerFactory_swigregister(MinimizerFactory)

def MinimizerFactory_printCatalogue():
    """MinimizerFactory_printCatalogue()"""
    return _libBornAgainFit.MinimizerFactory_printCatalogue()

def MinimizerFactory_catalogueToString():
    """MinimizerFactory_catalogueToString() -> std::string"""
    return _libBornAgainFit.MinimizerFactory_catalogueToString()

def MinimizerFactory_createMinimizer(*args):
    """
    createMinimizer(std::string const & minimizerName, std::string const & algorithmType, std::string const & arg3) -> IMinimizer
    createMinimizer(std::string const & minimizerName, std::string const & algorithmType) -> IMinimizer
    createMinimizer(std::string const & minimizerName) -> IMinimizer
    MinimizerFactory_createMinimizer(IMinimizer other) -> IMinimizer
    """
    return _libBornAgainFit.MinimizerFactory_createMinimizer(*args)

def MinimizerFactory_catalogue():
    """MinimizerFactory_catalogue() -> MinimizerCatalogue"""
    return _libBornAgainFit.MinimizerFactory_catalogue()

# This file is compatible with both classic and new-style classes.

